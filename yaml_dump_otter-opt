(lp0
(dp1
S'description'
p2
S''
p3
sS'type'
p4
NsS'subblocks'
p5
(lp6
(dp7
S'description'
p8
g3
sS'type'
p9
NsS'subblocks'
p10
(lp11
(dp12
S'description'
p13
g3
sS'type'
p14
NsS'subblocks'
p15
NsS'parameters'
p16
(lp17
(dp18
S'description'
p19
S'The block id where this object lives.\n'
p20
sS'cpp_type'
p21
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p22
sS'default'
p23
g3
sS'name'
p24
S'block'
p25
sS'required'
p26
I00
sS'group_name'
p27
Nsa(dp28
S'description'
p29
S'A string representing the Moose Object that will be built by this Action\n'
p30
sS'cpp_type'
p31
S'std::string'
p32
sS'default'
p33
g3
sS'name'
p34
S'type'
p35
sS'required'
p36
I01
sS'group_name'
p37
NsasS'name'
p38
S'/Adaptivity/Indicators/*'
p39
sa(dp40
S'description'
p41
g3
sS'type'
p42
NsS'subblocks'
p43
NsS'parameters'
p44
(lp45
(dp46
S'description'
p47
S'block ID or name where the object works\n'
p48
sS'cpp_type'
p49
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p50
sS'default'
p51
S'ANY_BLOCK_ID'
p52
sS'name'
p53
S'block'
p54
sS'required'
p55
I00
sS'group_name'
p56
Nsa(dp57
S'description'
p58
S'The analytic solution to compare against\n'
p59
sS'cpp_type'
p60
S'FunctionName'
p61
sS'default'
p62
g3
sS'name'
p63
S'function'
p64
sS'required'
p65
I01
sS'group_name'
p66
Nsa(dp67
S'description'
p68
g3
sS'cpp_type'
p69
S'std::string'
p70
sS'default'
p71
S'AnalyticalIndicator'
p72
sS'name'
p73
S'type'
p74
sS'required'
p75
I00
sS'group_name'
p76
Nsa(dp77
S'description'
p78
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p79
sS'cpp_type'
p80
S'bool'
p81
sS'default'
p82
S'0'
p83
sS'name'
p84
S'use_displaced_mesh'
p85
sS'required'
p86
I00
sS'group_name'
p87
S'Advanced'
p88
sa(dp89
S'description'
p90
S'The name of the variable that this Indicator operates on\n'
p91
sS'cpp_type'
p92
S'VariableName'
p93
sS'default'
p94
g3
sS'name'
p95
S'variable'
p96
sS'required'
p97
I01
sS'group_name'
p98
NsasS'name'
p99
S'/Adaptivity/Indicators/AnalyticalIndicator'
p100
sa(dp101
S'description'
p102
g3
sS'type'
p103
NsS'subblocks'
p104
NsS'parameters'
p105
(lp106
(dp107
S'description'
p108
S'The list of block ids (SubdomainID) that this object will be applied\n'
p109
sS'cpp_type'
p110
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p111
sS'default'
p112
g3
sS'name'
p113
S'block'
p114
sS'required'
p115
I00
sS'group_name'
p116
Nsa(dp117
S'description'
p118
S"The name of the material property to used as the 'diffusivity'\n"
p119
sS'cpp_type'
p120
S'std::string'
p121
sS'default'
p122
g3
sS'name'
p123
S'property'
p124
sS'required'
p125
I01
sS'group_name'
p126
Nsa(dp127
S'description'
p128
S'Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n'
p129
sS'cpp_type'
p130
S'bool'
p131
sS'default'
p132
S'0'
p133
sS'name'
p134
S'scale_by_flux_faces'
p135
sS'required'
p136
I00
sS'group_name'
p137
Nsa(dp138
S'description'
p139
g3
sS'cpp_type'
p140
S'std::string'
p141
sS'default'
p142
S'FluxJumpIndicator'
p143
sS'name'
p144
S'type'
p145
sS'required'
p146
I00
sS'group_name'
p147
Nsa(dp148
S'description'
p149
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p150
sS'cpp_type'
p151
S'bool'
p152
sS'default'
p153
S'0'
p154
sS'name'
p155
S'use_displaced_mesh'
p156
sS'required'
p157
I00
sS'group_name'
p158
S'Advanced'
p159
sa(dp160
S'description'
p161
S'The name of the variable that this side indicator applies to\n'
p162
sS'cpp_type'
p163
S'VariableName'
p164
sS'default'
p165
g3
sS'name'
p166
S'variable'
p167
sS'required'
p168
I01
sS'group_name'
p169
NsasS'name'
p170
S'/Adaptivity/Indicators/FluxJumpIndicator'
p171
sa(dp172
S'description'
p173
g3
sS'type'
p174
NsS'subblocks'
p175
NsS'parameters'
p176
(lp177
(dp178
S'description'
p179
S'The list of block ids (SubdomainID) that this object will be applied\n'
p180
sS'cpp_type'
p181
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p182
sS'default'
p183
g3
sS'name'
p184
S'block'
p185
sS'required'
p186
I00
sS'group_name'
p187
Nsa(dp188
S'description'
p189
S'Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n'
p190
sS'cpp_type'
p191
S'bool'
p192
sS'default'
p193
S'0'
p194
sS'name'
p195
S'scale_by_flux_faces'
p196
sS'required'
p197
I00
sS'group_name'
p198
Nsa(dp199
S'description'
p200
g3
sS'cpp_type'
p201
S'std::string'
p202
sS'default'
p203
S'GradientJumpIndicator'
p204
sS'name'
p205
S'type'
p206
sS'required'
p207
I00
sS'group_name'
p208
Nsa(dp209
S'description'
p210
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p211
sS'cpp_type'
p212
S'bool'
p213
sS'default'
p214
S'0'
p215
sS'name'
p216
S'use_displaced_mesh'
p217
sS'required'
p218
I00
sS'group_name'
p219
S'Advanced'
p220
sa(dp221
S'description'
p222
S'The name of the variable that this side indicator applies to\n'
p223
sS'cpp_type'
p224
S'VariableName'
p225
sS'default'
p226
g3
sS'name'
p227
S'variable'
p228
sS'required'
p229
I01
sS'group_name'
p230
NsasS'name'
p231
S'/Adaptivity/Indicators/GradientJumpIndicator'
p232
sa(dp233
S'description'
p234
g3
sS'type'
p235
NsS'subblocks'
p236
NsS'parameters'
p237
(lp238
(dp239
S'description'
p240
S'The list of block ids (SubdomainID) that this object will be applied\n'
p241
sS'cpp_type'
p242
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p243
sS'default'
p244
g3
sS'name'
p245
S'block'
p246
sS'required'
p247
I00
sS'group_name'
p248
Nsa(dp249
S'description'
p250
S'Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n'
p251
sS'cpp_type'
p252
S'bool'
p253
sS'default'
p254
S'0'
p255
sS'name'
p256
S'scale_by_flux_faces'
p257
sS'required'
p258
I00
sS'group_name'
p259
Nsa(dp260
S'description'
p261
g3
sS'cpp_type'
p262
S'std::string'
p263
sS'default'
p264
S'LaplacianJumpIndicator'
p265
sS'name'
p266
S'type'
p267
sS'required'
p268
I00
sS'group_name'
p269
Nsa(dp270
S'description'
p271
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p272
sS'cpp_type'
p273
S'bool'
p274
sS'default'
p275
S'0'
p276
sS'name'
p277
S'use_displaced_mesh'
p278
sS'required'
p279
I00
sS'group_name'
p280
S'Advanced'
p281
sa(dp282
S'description'
p283
S'The name of the variable that this side indicator applies to\n'
p284
sS'cpp_type'
p285
S'VariableName'
p286
sS'default'
p287
g3
sS'name'
p288
S'variable'
p289
sS'required'
p290
I01
sS'group_name'
p291
NsasS'name'
p292
S'/Adaptivity/Indicators/LaplacianJumpIndicator'
p293
sasS'parameters'
p294
NsS'name'
p295
S'/Adaptivity/Indicators'
p296
sa(dp297
S'description'
p298
g3
sS'type'
p299
NsS'subblocks'
p300
(lp301
(dp302
S'description'
p303
g3
sS'type'
p304
NsS'subblocks'
p305
NsS'parameters'
p306
(lp307
(dp308
S'description'
p309
S'The block id where this object lives.\n'
p310
sS'cpp_type'
p311
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p312
sS'default'
p313
g3
sS'name'
p314
S'block'
p315
sS'required'
p316
I00
sS'group_name'
p317
Nsa(dp318
S'description'
p319
S'A string representing the Moose Object that will be built by this Action\n'
p320
sS'cpp_type'
p321
S'std::string'
p322
sS'default'
p323
g3
sS'name'
p324
S'type'
p325
sS'required'
p326
I01
sS'group_name'
p327
NsasS'name'
p328
S'/Adaptivity/Markers/*'
p329
sa(dp330
S'description'
p331
g3
sS'type'
p332
NsS'subblocks'
p333
NsS'parameters'
p334
(lp335
(dp336
S'description'
p337
S'The list of block ids (SubdomainID) that this object will be applied\n'
p338
sS'cpp_type'
p339
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p340
sS'default'
p341
g3
sS'name'
p342
S'block'
p343
sS'required'
p344
I00
sS'group_name'
p345
Nsa(dp346
S'description'
p347
S'The bottom left point (in x,y,z with spaces in-between).\n'
p348
sS'cpp_type'
p349
S'libMesh::VectorValue<double>'
p350
sS'default'
p351
g3
sS'name'
p352
S'bottom_left'
p353
sS'required'
p354
I01
sS'group_name'
p355
Nsa(dp356
S'name'
p357
S'inside'
p358
sS'cpp_type'
p359
S'MooseEnum'
p360
sS'default'
p361
g3
sS'description'
p362
S'How to mark elements inside the box.\n'
p363
sS'required'
p364
I01
sS'options'
p365
S'dont_mark coarsen do_nothing refine'
p366
sS'group_name'
p367
Nsa(dp368
S'name'
p369
S'outside'
p370
sS'cpp_type'
p371
S'MooseEnum'
p372
sS'default'
p373
g3
sS'description'
p374
S'How to mark elements outside the box.\n'
p375
sS'required'
p376
I01
sS'options'
p377
S'dont_mark coarsen do_nothing refine'
p378
sS'group_name'
p379
Nsa(dp380
S'description'
p381
S'The bottom left point (in x,y,z with spaces in-between).\n'
p382
sS'cpp_type'
p383
S'libMesh::VectorValue<double>'
p384
sS'default'
p385
g3
sS'name'
p386
S'top_right'
p387
sS'required'
p388
I01
sS'group_name'
p389
Nsa(dp390
S'description'
p391
g3
sS'cpp_type'
p392
S'std::string'
p393
sS'default'
p394
S'BoxMarker'
p395
sS'name'
p396
S'type'
p397
sS'required'
p398
I00
sS'group_name'
p399
Nsa(dp400
S'description'
p401
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p402
sS'cpp_type'
p403
S'bool'
p404
sS'default'
p405
S'0'
p406
sS'name'
p407
S'use_displaced_mesh'
p408
sS'required'
p409
I00
sS'group_name'
p410
S'Advanced'
p411
sasS'name'
p412
S'/Adaptivity/Markers/BoxMarker'
p413
sa(dp414
S'description'
p415
g3
sS'type'
p416
NsS'subblocks'
p417
NsS'parameters'
p418
(lp419
(dp420
S'description'
p421
S'The list of block ids (SubdomainID) that this object will be applied\n'
p422
sS'cpp_type'
p423
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p424
sS'default'
p425
g3
sS'name'
p426
S'block'
p427
sS'required'
p428
I00
sS'group_name'
p429
Nsa(dp430
S'description'
p431
S'The Markers to combine.\n'
p432
sS'cpp_type'
p433
S'std::vector<MarkerName, std::allocator<MarkerName> >'
p434
sS'default'
p435
g3
sS'name'
p436
S'markers'
p437
sS'required'
p438
I01
sS'group_name'
p439
Nsa(dp440
S'description'
p441
g3
sS'cpp_type'
p442
S'std::string'
p443
sS'default'
p444
S'ComboMarker'
p445
sS'name'
p446
S'type'
p447
sS'required'
p448
I00
sS'group_name'
p449
Nsa(dp450
S'description'
p451
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p452
sS'cpp_type'
p453
S'bool'
p454
sS'default'
p455
S'0'
p456
sS'name'
p457
S'use_displaced_mesh'
p458
sS'required'
p459
I00
sS'group_name'
p460
S'Advanced'
p461
sasS'name'
p462
S'/Adaptivity/Markers/ComboMarker'
p463
sa(dp464
S'description'
p465
g3
sS'type'
p466
NsS'subblocks'
p467
NsS'parameters'
p468
(lp469
(dp470
S'description'
p471
S'The list of block ids (SubdomainID) that this object will be applied\n'
p472
sS'cpp_type'
p473
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p474
sS'default'
p475
g3
sS'name'
p476
S'block'
p477
sS'required'
p478
I00
sS'group_name'
p479
Nsa(dp480
S'description'
p481
S'Elements within this percentage of the min error will be coarsened.  Must be between 0 and 1!\n'
p482
sS'cpp_type'
p483
S'double'
p484
sS'default'
p485
S'0'
p486
sS'name'
p487
S'coarsen'
p488
sS'required'
p489
I00
sS'group_name'
p490
Nsa(dp491
S'description'
p492
S'The name of the Indicator that this Marker uses.\n'
p493
sS'cpp_type'
p494
S'IndicatorName'
p495
sS'default'
p496
g3
sS'name'
p497
S'indicator'
p498
sS'required'
p499
I01
sS'group_name'
p500
Nsa(dp501
S'description'
p502
S'Elements within this percentage of the max error will be refined.  Must be between 0 and 1!\n'
p503
sS'cpp_type'
p504
S'double'
p505
sS'default'
p506
S'0'
p507
sS'name'
p508
S'refine'
p509
sS'required'
p510
I00
sS'group_name'
p511
Nsa(dp512
S'description'
p513
g3
sS'cpp_type'
p514
S'std::string'
p515
sS'default'
p516
S'ErrorFractionMarker'
p517
sS'name'
p518
S'type'
p519
sS'required'
p520
I00
sS'group_name'
p521
Nsa(dp522
S'description'
p523
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p524
sS'cpp_type'
p525
S'bool'
p526
sS'default'
p527
S'0'
p528
sS'name'
p529
S'use_displaced_mesh'
p530
sS'required'
p531
I00
sS'group_name'
p532
S'Advanced'
p533
sasS'name'
p534
S'/Adaptivity/Markers/ErrorFractionMarker'
p535
sa(dp536
S'description'
p537
g3
sS'type'
p538
NsS'subblocks'
p539
NsS'parameters'
p540
(lp541
(dp542
S'description'
p543
S'The list of block ids (SubdomainID) that this object will be applied\n'
p544
sS'cpp_type'
p545
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p546
sS'default'
p547
g3
sS'name'
p548
S'block'
p549
sS'required'
p550
I00
sS'group_name'
p551
Nsa(dp552
S'description'
p553
S'Elements with error less than this will be coarsened.\n'
p554
sS'cpp_type'
p555
S'double'
p556
sS'default'
p557
S'0'
p558
sS'name'
p559
S'coarsen'
p560
sS'required'
p561
I00
sS'group_name'
p562
Nsa(dp563
S'description'
p564
S'The name of the Indicator that this Marker uses.\n'
p565
sS'cpp_type'
p566
S'IndicatorName'
p567
sS'default'
p568
g3
sS'name'
p569
S'indicator'
p570
sS'required'
p571
I01
sS'group_name'
p572
Nsa(dp573
S'description'
p574
S'Elements with error more than this will be refined.\n'
p575
sS'cpp_type'
p576
S'double'
p577
sS'default'
p578
S'1.79769e+308'
p579
sS'name'
p580
S'refine'
p581
sS'required'
p582
I00
sS'group_name'
p583
Nsa(dp584
S'description'
p585
g3
sS'cpp_type'
p586
S'std::string'
p587
sS'default'
p588
S'ErrorToleranceMarker'
p589
sS'name'
p590
S'type'
p591
sS'required'
p592
I00
sS'group_name'
p593
Nsa(dp594
S'description'
p595
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p596
sS'cpp_type'
p597
S'bool'
p598
sS'default'
p599
S'0'
p600
sS'name'
p601
S'use_displaced_mesh'
p602
sS'required'
p603
I00
sS'group_name'
p604
S'Advanced'
p605
sasS'name'
p606
S'/Adaptivity/Markers/ErrorToleranceMarker'
p607
sa(dp608
S'description'
p609
g3
sS'type'
p610
NsS'subblocks'
p611
NsS'parameters'
p612
(lp613
(dp614
S'description'
p615
S'The list of block ids (SubdomainID) that this object will be applied\n'
p616
sS'cpp_type'
p617
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p618
sS'default'
p619
g3
sS'name'
p620
S'block'
p621
sS'required'
p622
I00
sS'group_name'
p623
Nsa(dp624
S'description'
p625
S"The center (many people spell this 'center') of the box.\n"
p626
sS'cpp_type'
p627
S'libMesh::Point'
p628
sS'default'
p629
g3
sS'name'
p630
S'center'
p631
sS'required'
p632
I01
sS'group_name'
p633
Nsa(dp634
S'description'
p635
S'The height of the box\n'
p636
sS'cpp_type'
p637
S'double'
p638
sS'default'
p639
g3
sS'name'
p640
S'height'
p641
sS'required'
p642
I01
sS'group_name'
p643
Nsa(dp644
S'name'
p645
S'inside'
p646
sS'cpp_type'
p647
S'MooseEnum'
p648
sS'default'
p649
g3
sS'description'
p650
S'How to mark elements inside the box.\n'
p651
sS'required'
p652
I01
sS'options'
p653
S'dont_mark coarsen do_nothing refine'
p654
sS'group_name'
p655
Nsa(dp656
S'description'
p657
S'The length of the box\n'
p658
sS'cpp_type'
p659
S'double'
p660
sS'default'
p661
g3
sS'name'
p662
S'length'
p663
sS'required'
p664
I01
sS'group_name'
p665
Nsa(dp666
S'description'
p667
S'The direction along which the length is oriented (must be perpendicular to width_direction).\n'
p668
sS'cpp_type'
p669
S'libMesh::VectorValue<double>'
p670
sS'default'
p671
g3
sS'name'
p672
S'length_direction'
p673
sS'required'
p674
I01
sS'group_name'
p675
Nsa(dp676
S'name'
p677
S'outside'
p678
sS'cpp_type'
p679
S'MooseEnum'
p680
sS'default'
p681
g3
sS'description'
p682
S'How to mark elements outside the box.\n'
p683
sS'required'
p684
I01
sS'options'
p685
S'dont_mark coarsen do_nothing refine'
p686
sS'group_name'
p687
Nsa(dp688
S'description'
p689
g3
sS'cpp_type'
p690
S'std::string'
p691
sS'default'
p692
S'OrientedBoxMarker'
p693
sS'name'
p694
S'type'
p695
sS'required'
p696
I00
sS'group_name'
p697
Nsa(dp698
S'description'
p699
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p700
sS'cpp_type'
p701
S'bool'
p702
sS'default'
p703
S'0'
p704
sS'name'
p705
S'use_displaced_mesh'
p706
sS'required'
p707
I00
sS'group_name'
p708
S'Advanced'
p709
sa(dp710
S'description'
p711
S'The width of the box\n'
p712
sS'cpp_type'
p713
S'double'
p714
sS'default'
p715
g3
sS'name'
p716
S'width'
p717
sS'required'
p718
I01
sS'group_name'
p719
Nsa(dp720
S'description'
p721
S'The direction along which the width is oriented.\n'
p722
sS'cpp_type'
p723
S'libMesh::VectorValue<double>'
p724
sS'default'
p725
g3
sS'name'
p726
S'width_direction'
p727
sS'required'
p728
I01
sS'group_name'
p729
NsasS'name'
p730
S'/Adaptivity/Markers/OrientedBoxMarker'
p731
sa(dp732
S'description'
p733
g3
sS'type'
p734
NsS'subblocks'
p735
NsS'parameters'
p736
(lp737
(dp738
S'description'
p739
S'The list of block ids (SubdomainID) that this object will be applied\n'
p740
sS'cpp_type'
p741
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p742
sS'default'
p743
g3
sS'name'
p744
S'block'
p745
sS'required'
p746
I00
sS'group_name'
p747
Nsa(dp748
S'name'
p749
S'mark'
p750
sS'cpp_type'
p751
S'MooseEnum'
p752
sS'default'
p753
g3
sS'description'
p754
S'How to mark elements.\n'
p755
sS'required'
p756
I01
sS'options'
p757
S'dont_mark coarsen do_nothing refine'
p758
sS'group_name'
p759
Nsa(dp760
S'description'
p761
g3
sS'cpp_type'
p762
S'std::string'
p763
sS'default'
p764
S'UniformMarker'
p765
sS'name'
p766
S'type'
p767
sS'required'
p768
I00
sS'group_name'
p769
Nsa(dp770
S'description'
p771
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p772
sS'cpp_type'
p773
S'bool'
p774
sS'default'
p775
S'0'
p776
sS'name'
p777
S'use_displaced_mesh'
p778
sS'required'
p779
I00
sS'group_name'
p780
S'Advanced'
p781
sasS'name'
p782
S'/Adaptivity/Markers/UniformMarker'
p783
sa(dp784
S'description'
p785
g3
sS'type'
p786
NsS'subblocks'
p787
NsS'parameters'
p788
(lp789
(dp790
S'description'
p791
S'The list of block ids (SubdomainID) that this object will be applied\n'
p792
sS'cpp_type'
p793
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p794
sS'default'
p795
g3
sS'name'
p796
S'block'
p797
sS'required'
p798
I00
sS'group_name'
p799
Nsa(dp800
S'description'
p801
S'A buffer zone value added to both ends of the range where a third_state marker can be returned.\n'
p802
sS'cpp_type'
p803
S'double'
p804
sS'default'
p805
S'0'
p806
sS'name'
p807
S'buffer_size'
p808
sS'required'
p809
I00
sS'group_name'
p810
Nsa(dp811
S'description'
p812
S'If this is true then values inside the range will be coarsened, and values outside the range will be refined.\n'
p813
sS'cpp_type'
p814
S'bool'
p815
sS'default'
p816
S'0'
p817
sS'name'
p818
S'invert'
p819
sS'required'
p820
I00
sS'group_name'
p821
Nsa(dp822
S'description'
p823
S'The lower bound value for the range.\n'
p824
sS'cpp_type'
p825
S'double'
p826
sS'default'
p827
g3
sS'name'
p828
S'lower_bound'
p829
sS'required'
p830
I01
sS'group_name'
p831
Nsa(dp832
S'name'
p833
S'third_state'
p834
sS'cpp_type'
p835
S'MooseEnum'
p836
sS'default'
p837
S'DONT_MARK'
p838
sS'description'
p839
S'The Marker state to apply to values in the buffer zone (both ends of the range).\n'
p840
sS'required'
p841
I00
sS'options'
p842
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p843
sS'group_name'
p844
Nsa(dp845
S'description'
p846
g3
sS'cpp_type'
p847
S'std::string'
p848
sS'default'
p849
S'ValueRangeMarker'
p850
sS'name'
p851
S'type'
p852
sS'required'
p853
I00
sS'group_name'
p854
Nsa(dp855
S'description'
p856
S'The upper bound value for the range.\n'
p857
sS'cpp_type'
p858
S'double'
p859
sS'default'
p860
g3
sS'name'
p861
S'upper_bound'
p862
sS'required'
p863
I01
sS'group_name'
p864
Nsa(dp865
S'description'
p866
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p867
sS'cpp_type'
p868
S'bool'
p869
sS'default'
p870
S'0'
p871
sS'name'
p872
S'use_displaced_mesh'
p873
sS'required'
p874
I00
sS'group_name'
p875
S'Advanced'
p876
sa(dp877
S'description'
p878
S'The variable whose values are used in this marker.\n'
p879
sS'cpp_type'
p880
S'VariableName'
p881
sS'default'
p882
g3
sS'name'
p883
S'variable'
p884
sS'required'
p885
I01
sS'group_name'
p886
NsasS'name'
p887
S'/Adaptivity/Markers/ValueRangeMarker'
p888
sa(dp889
S'description'
p890
g3
sS'type'
p891
NsS'subblocks'
p892
NsS'parameters'
p893
(lp894
(dp895
S'description'
p896
S'The list of block ids (SubdomainID) that this object will be applied\n'
p897
sS'cpp_type'
p898
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p899
sS'default'
p900
g3
sS'name'
p901
S'block'
p902
sS'required'
p903
I00
sS'group_name'
p904
Nsa(dp905
S'description'
p906
S'The threshold value for coarsening.  Elements with variable values beyond this will be marked for coarsening.\n'
p907
sS'cpp_type'
p908
S'double'
p909
sS'default'
p910
g3
sS'name'
p911
S'coarsen'
p912
sS'required'
p913
I00
sS'group_name'
p914
Nsa(dp915
S'description'
p916
S"If this is true then values _below_ 'refine' will be refined and _above_ 'coarsen' will be coarsened.\n"
p917
sS'cpp_type'
p918
S'bool'
p919
sS'default'
p920
S'0'
p921
sS'name'
p922
S'invert'
p923
sS'required'
p924
I00
sS'group_name'
p925
Nsa(dp926
S'description'
p927
S'The threshold value for refinement.  Elements with variable values beyond this will be marked for refinement.\n'
p928
sS'cpp_type'
p929
S'double'
p930
sS'default'
p931
g3
sS'name'
p932
S'refine'
p933
sS'required'
p934
I00
sS'group_name'
p935
Nsa(dp936
S'name'
p937
S'third_state'
p938
sS'cpp_type'
p939
S'MooseEnum'
p940
sS'default'
p941
S'DONT_MARK'
p942
sS'description'
p943
S'The Marker state to apply to values falling in-between the coarsen and refine thresholds.\n'
p944
sS'required'
p945
I00
sS'options'
p946
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p947
sS'group_name'
p948
Nsa(dp949
S'description'
p950
g3
sS'cpp_type'
p951
S'std::string'
p952
sS'default'
p953
S'ValueThresholdMarker'
p954
sS'name'
p955
S'type'
p956
sS'required'
p957
I00
sS'group_name'
p958
Nsa(dp959
S'description'
p960
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p961
sS'cpp_type'
p962
S'bool'
p963
sS'default'
p964
S'0'
p965
sS'name'
p966
S'use_displaced_mesh'
p967
sS'required'
p968
I00
sS'group_name'
p969
S'Advanced'
p970
sa(dp971
S'description'
p972
S"The values of this variable will be compared to 'refine' and 'coarsen' to see what should be done with the element\n"
p973
sS'cpp_type'
p974
S'VariableName'
p975
sS'default'
p976
g3
sS'name'
p977
S'variable'
p978
sS'required'
p979
I01
sS'group_name'
p980
NsasS'name'
p981
S'/Adaptivity/Markers/ValueThresholdMarker'
p982
sasS'parameters'
p983
NsS'name'
p984
S'/Adaptivity/Markers'
p985
sasS'parameters'
p986
(lp987
(dp988
S'description'
p989
S'The name of the Marker to use to adapt the mesh during initial refinement.\n'
p990
sS'cpp_type'
p991
S'MarkerName'
p992
sS'default'
p993
g3
sS'name'
p994
S'initial_marker'
p995
sS'required'
p996
I00
sS'group_name'
p997
Nsa(dp998
S'description'
p999
S'The number of adaptive steps to do based on the initial condition.\n'
p1000
sS'cpp_type'
p1001
S'unsigned int'
p1002
sS'default'
p1003
S'0'
p1004
sS'name'
p1005
S'initial_steps'
p1006
sS'required'
p1007
I00
sS'group_name'
p1008
Nsa(dp1009
S'description'
p1010
S'The name of the Marker to use to actually adapt the mesh.\n'
p1011
sS'cpp_type'
p1012
S'MarkerName'
p1013
sS'default'
p1014
g3
sS'name'
p1015
S'marker'
p1016
sS'required'
p1017
I00
sS'group_name'
p1018
Nsa(dp1019
S'description'
p1020
S'Maximum number of times a single element can be refined. If 0 then infinite.\n'
p1021
sS'cpp_type'
p1022
S'unsigned int'
p1023
sS'default'
p1024
S'0'
p1025
sS'name'
p1026
S'max_h_level'
p1027
sS'required'
p1028
I00
sS'group_name'
p1029
Nsa(dp1030
S'description'
p1031
S'The time that adaptivity will be active after.\n'
p1032
sS'cpp_type'
p1033
S'double'
p1034
sS'default'
p1035
S'-1.79769e+308'
p1036
sS'name'
p1037
S'start_time'
p1038
sS'required'
p1039
I00
sS'group_name'
p1040
Nsa(dp1041
S'description'
p1042
S'The number of adaptive steps to use when doing a Steady simulation.\n'
p1043
sS'cpp_type'
p1044
S'unsigned int'
p1045
sS'default'
p1046
S'0'
p1047
sS'name'
p1048
S'steps'
p1049
sS'required'
p1050
I00
sS'group_name'
p1051
Nsa(dp1052
S'description'
p1053
S'The time after which adaptivity will no longer be active.\n'
p1054
sS'cpp_type'
p1055
S'double'
p1056
sS'default'
p1057
S'1.79769e+308'
p1058
sS'name'
p1059
S'stop_time'
p1060
sS'required'
p1061
I00
sS'group_name'
p1062
NsasS'name'
p1063
S'/Adaptivity'
p1064
sa(dp1065
S'description'
p1066
g3
sS'type'
p1067
NsS'subblocks'
p1068
(lp1069
(dp1070
S'description'
p1071
g3
sS'type'
p1072
NsS'subblocks'
p1073
NsS'parameters'
p1074
(lp1075
(dp1076
S'description'
p1077
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1078
sS'cpp_type'
p1079
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1080
sS'default'
p1081
g3
sS'name'
p1082
S'boundary'
p1083
sS'required'
p1084
I01
sS'group_name'
p1085
Nsa(dp1086
S'description'
p1087
S'A string representing the Moose Object that will be built by this Action\n'
p1088
sS'cpp_type'
p1089
S'std::string'
p1090
sS'default'
p1091
g3
sS'name'
p1092
S'type'
p1093
sS'required'
p1094
I01
sS'group_name'
p1095
Nsa(dp1096
S'description'
p1097
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1098
sS'cpp_type'
p1099
S'bool'
p1100
sS'default'
p1101
S'0'
p1102
sS'name'
p1103
S'use_displaced_mesh'
p1104
sS'required'
p1105
I00
sS'group_name'
p1106
S'Advanced'
p1107
sa(dp1108
S'description'
p1109
S'The name of the variable that this boundary condition applies to\n'
p1110
sS'cpp_type'
p1111
S'NonlinearVariableName'
p1112
sS'default'
p1113
g3
sS'name'
p1114
S'variable'
p1115
sS'required'
p1116
I01
sS'group_name'
p1117
NsasS'name'
p1118
S'/AuxBCs/*'
p1119
sa(dp1120
S'description'
p1121
g3
sS'type'
p1122
NsS'subblocks'
p1123
NsS'parameters'
p1124
(lp1125
(dp1126
S'description'
p1127
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1128
sS'cpp_type'
p1129
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1130
sS'default'
p1131
g3
sS'name'
p1132
S'block'
p1133
sS'required'
p1134
I00
sS'group_name'
p1135
Nsa(dp1136
S'description'
p1137
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1138
sS'cpp_type'
p1139
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1140
sS'default'
p1141
g3
sS'name'
p1142
S'boundary'
p1143
sS'required'
p1144
I00
sS'group_name'
p1145
Nsa(dp1146
S'description'
p1147
S'number of grains\n'
p1148
sS'cpp_type'
p1149
S'unsigned int'
p1150
sS'default'
p1151
g3
sS'name'
p1152
S'crys_num'
p1153
sS'required'
p1154
I01
sS'group_name'
p1155
Nsa(dp1156
S'name'
p1157
S'execute_on'
p1158
sS'cpp_type'
p1159
S'MooseEnum'
p1160
sS'default'
p1161
S'residual'
p1162
sS'description'
p1163
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p1164
sS'required'
p1165
I00
sS'options'
p1166
S'initial residual jacobian timestep timestep_begin custom'
p1167
sS'group_name'
p1168
Nsa(dp1169
S'description'
p1170
S'The seed for the master random number generator\n'
p1171
sS'cpp_type'
p1172
S'unsigned int'
p1173
sS'default'
p1174
S'0'
p1175
sS'name'
p1176
S'seed'
p1177
sS'required'
p1178
I00
sS'group_name'
p1179
S'Advanced'
p1180
sa(dp1181
S'description'
p1182
g3
sS'cpp_type'
p1183
S'std::string'
p1184
sS'default'
p1185
S'BndsCalcAux'
p1186
sS'name'
p1187
S'type'
p1188
sS'required'
p1189
I00
sS'group_name'
p1190
Nsa(dp1191
S'description'
p1192
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1193
sS'cpp_type'
p1194
S'bool'
p1195
sS'default'
p1196
S'0'
p1197
sS'name'
p1198
S'use_displaced_mesh'
p1199
sS'required'
p1200
I00
sS'group_name'
p1201
S'Advanced'
p1202
sa(dp1203
S'description'
p1204
S'Array of coupled variables\n'
p1205
sS'cpp_type'
p1206
S'std::vector<VariableName>'
p1207
sS'default'
p1208
g3
sS'name'
p1209
S'v'
p1210
sS'required'
p1211
I00
sS'group_name'
p1212
Nsa(dp1213
S'description'
p1214
S'base for variable names\n'
p1215
sS'cpp_type'
p1216
S'std::string'
p1217
sS'default'
p1218
g3
sS'name'
p1219
S'var_name_base'
p1220
sS'required'
p1221
I01
sS'group_name'
p1222
Nsa(dp1223
S'description'
p1224
S'The name of the variable that this object applies to\n'
p1225
sS'cpp_type'
p1226
S'AuxVariableName'
p1227
sS'default'
p1228
g3
sS'name'
p1229
S'variable'
p1230
sS'required'
p1231
I01
sS'group_name'
p1232
NsasS'name'
p1233
S'/AuxBCs/BndsCalcAux'
p1234
sa(dp1235
S'description'
p1236
g3
sS'type'
p1237
NsS'subblocks'
p1238
NsS'parameters'
p1239
(lp1240
(dp1241
S'description'
p1242
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1243
sS'cpp_type'
p1244
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1245
sS'default'
p1246
g3
sS'name'
p1247
S'block'
p1248
sS'required'
p1249
I00
sS'group_name'
p1250
Nsa(dp1251
S'description'
p1252
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1253
sS'cpp_type'
p1254
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1255
sS'default'
p1256
g3
sS'name'
p1257
S'boundary'
p1258
sS'required'
p1259
I00
sS'group_name'
p1260
Nsa(dp1261
S'description'
p1262
S'The variable to be bounded\n'
p1263
sS'cpp_type'
p1264
S'std::vector<VariableName>'
p1265
sS'default'
p1266
g3
sS'name'
p1267
S'bounded_variable'
p1268
sS'required'
p1269
I01
sS'group_name'
p1270
Nsa(dp1271
S'name'
p1272
S'execute_on'
p1273
sS'cpp_type'
p1274
S'MooseEnum'
p1275
sS'default'
p1276
S'residual'
p1277
sS'description'
p1278
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p1279
sS'required'
p1280
I00
sS'options'
p1281
S'initial residual jacobian timestep timestep_begin custom'
p1282
sS'group_name'
p1283
Nsa(dp1284
S'description'
p1285
S'The lower bound for the variable\n'
p1286
sS'cpp_type'
p1287
S'double'
p1288
sS'default'
p1289
g3
sS'name'
p1290
S'lower'
p1291
sS'required'
p1292
I00
sS'group_name'
p1293
Nsa(dp1294
S'description'
p1295
S'The seed for the master random number generator\n'
p1296
sS'cpp_type'
p1297
S'unsigned int'
p1298
sS'default'
p1299
S'0'
p1300
sS'name'
p1301
S'seed'
p1302
sS'required'
p1303
I00
sS'group_name'
p1304
S'Advanced'
p1305
sa(dp1306
S'description'
p1307
g3
sS'cpp_type'
p1308
S'std::string'
p1309
sS'default'
p1310
S'BoundsAux'
p1311
sS'name'
p1312
S'type'
p1313
sS'required'
p1314
I00
sS'group_name'
p1315
Nsa(dp1316
S'description'
p1317
S'The upper bound for the variable\n'
p1318
sS'cpp_type'
p1319
S'double'
p1320
sS'default'
p1321
g3
sS'name'
p1322
S'upper'
p1323
sS'required'
p1324
I00
sS'group_name'
p1325
Nsa(dp1326
S'description'
p1327
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1328
sS'cpp_type'
p1329
S'bool'
p1330
sS'default'
p1331
S'0'
p1332
sS'name'
p1333
S'use_displaced_mesh'
p1334
sS'required'
p1335
I00
sS'group_name'
p1336
S'Advanced'
p1337
sa(dp1338
S'description'
p1339
S'The name of the variable that this object applies to\n'
p1340
sS'cpp_type'
p1341
S'AuxVariableName'
p1342
sS'default'
p1343
g3
sS'name'
p1344
S'variable'
p1345
sS'required'
p1346
I01
sS'group_name'
p1347
NsasS'name'
p1348
S'/AuxBCs/BoundsAux'
p1349
sa(dp1350
S'description'
p1351
g3
sS'type'
p1352
NsS'subblocks'
p1353
NsS'parameters'
p1354
(lp1355
(dp1356
S'description'
p1357
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1358
sS'cpp_type'
p1359
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1360
sS'default'
p1361
g3
sS'name'
p1362
S'block'
p1363
sS'required'
p1364
I00
sS'group_name'
p1365
Nsa(dp1366
S'description'
p1367
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1368
sS'cpp_type'
p1369
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1370
sS'default'
p1371
g3
sS'name'
p1372
S'boundary'
p1373
sS'required'
p1374
I00
sS'group_name'
p1375
Nsa(dp1376
S'name'
p1377
S'execute_on'
p1378
sS'cpp_type'
p1379
S'MooseEnum'
p1380
sS'default'
p1381
S'residual'
p1382
sS'description'
p1383
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p1384
sS'required'
p1385
I00
sS'options'
p1386
S'initial residual jacobian timestep timestep_begin custom'
p1387
sS'group_name'
p1388
Nsa(dp1389
S'description'
p1390
S'The seed for the master random number generator\n'
p1391
sS'cpp_type'
p1392
S'unsigned int'
p1393
sS'default'
p1394
S'0'
p1395
sS'name'
p1396
S'seed'
p1397
sS'required'
p1398
I00
sS'group_name'
p1399
S'Advanced'
p1400
sa(dp1401
S'description'
p1402
g3
sS'cpp_type'
p1403
S'std::string'
p1404
sS'default'
p1405
S'ConstantAux'
p1406
sS'name'
p1407
S'type'
p1408
sS'required'
p1409
I00
sS'group_name'
p1410
Nsa(dp1411
S'description'
p1412
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1413
sS'cpp_type'
p1414
S'bool'
p1415
sS'default'
p1416
S'0'
p1417
sS'name'
p1418
S'use_displaced_mesh'
p1419
sS'required'
p1420
I00
sS'group_name'
p1421
S'Advanced'
p1422
sa(dp1423
S'description'
p1424
S'Some constant value that can be read from the input file\n'
p1425
sS'cpp_type'
p1426
S'double'
p1427
sS'default'
p1428
S'0'
p1429
sS'name'
p1430
S'value'
p1431
sS'required'
p1432
I00
sS'group_name'
p1433
Nsa(dp1434
S'description'
p1435
S'The name of the variable that this object applies to\n'
p1436
sS'cpp_type'
p1437
S'AuxVariableName'
p1438
sS'default'
p1439
g3
sS'name'
p1440
S'variable'
p1441
sS'required'
p1442
I01
sS'group_name'
p1443
NsasS'name'
p1444
S'/AuxBCs/ConstantAux'
p1445
sa(dp1446
S'description'
p1447
g3
sS'type'
p1448
NsS'subblocks'
p1449
NsS'parameters'
p1450
(lp1451
(dp1452
S'description'
p1453
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1454
sS'cpp_type'
p1455
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1456
sS'default'
p1457
g3
sS'name'
p1458
S'block'
p1459
sS'required'
p1460
I00
sS'group_name'
p1461
Nsa(dp1462
S'description'
p1463
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1464
sS'cpp_type'
p1465
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1466
sS'default'
p1467
g3
sS'name'
p1468
S'boundary'
p1469
sS'required'
p1470
I00
sS'group_name'
p1471
Nsa(dp1472
S'description'
p1473
S'The variable that is being debugged.\n'
p1474
sS'cpp_type'
p1475
S'NonlinearVariableName'
p1476
sS'default'
p1477
g3
sS'name'
p1478
S'debug_variable'
p1479
sS'required'
p1480
I01
sS'group_name'
p1481
Nsa(dp1482
S'name'
p1483
S'execute_on'
p1484
sS'cpp_type'
p1485
S'MooseEnum'
p1486
sS'default'
p1487
S'residual'
p1488
sS'description'
p1489
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p1490
sS'required'
p1491
I00
sS'options'
p1492
S'initial residual jacobian timestep timestep_begin custom'
p1493
sS'group_name'
p1494
Nsa(dp1495
S'description'
p1496
S'The seed for the master random number generator\n'
p1497
sS'cpp_type'
p1498
S'unsigned int'
p1499
sS'default'
p1500
S'0'
p1501
sS'name'
p1502
S'seed'
p1503
sS'required'
p1504
I00
sS'group_name'
p1505
S'Advanced'
p1506
sa(dp1507
S'description'
p1508
g3
sS'cpp_type'
p1509
S'std::string'
p1510
sS'default'
p1511
S'DebugResidualAux'
p1512
sS'name'
p1513
S'type'
p1514
sS'required'
p1515
I00
sS'group_name'
p1516
Nsa(dp1517
S'description'
p1518
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1519
sS'cpp_type'
p1520
S'bool'
p1521
sS'default'
p1522
S'0'
p1523
sS'name'
p1524
S'use_displaced_mesh'
p1525
sS'required'
p1526
I00
sS'group_name'
p1527
S'Advanced'
p1528
sa(dp1529
S'description'
p1530
S'The name of the variable that this object applies to\n'
p1531
sS'cpp_type'
p1532
S'AuxVariableName'
p1533
sS'default'
p1534
g3
sS'name'
p1535
S'variable'
p1536
sS'required'
p1537
I01
sS'group_name'
p1538
NsasS'name'
p1539
S'/AuxBCs/DebugResidualAux'
p1540
sa(dp1541
S'description'
p1542
g3
sS'type'
p1543
NsS'subblocks'
p1544
NsS'parameters'
p1545
(lp1546
(dp1547
S'description'
p1548
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1549
sS'cpp_type'
p1550
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1551
sS'default'
p1552
g3
sS'name'
p1553
S'block'
p1554
sS'required'
p1555
I00
sS'group_name'
p1556
Nsa(dp1557
S'description'
p1558
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1559
sS'cpp_type'
p1560
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1561
sS'default'
p1562
g3
sS'name'
p1563
S'boundary'
p1564
sS'required'
p1565
I00
sS'group_name'
p1566
Nsa(dp1567
S'name'
p1568
S'execute_on'
p1569
sS'cpp_type'
p1570
S'MooseEnum'
p1571
sS'default'
p1572
S'residual'
p1573
sS'description'
p1574
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p1575
sS'required'
p1576
I00
sS'options'
p1577
S'initial residual jacobian timestep timestep_begin custom'
p1578
sS'group_name'
p1579
Nsa(dp1580
S'description'
p1581
S'The function to use as the value\n'
p1582
sS'cpp_type'
p1583
S'FunctionName'
p1584
sS'default'
p1585
g3
sS'name'
p1586
S'function'
p1587
sS'required'
p1588
I01
sS'group_name'
p1589
Nsa(dp1590
S'description'
p1591
S'The seed for the master random number generator\n'
p1592
sS'cpp_type'
p1593
S'unsigned int'
p1594
sS'default'
p1595
S'0'
p1596
sS'name'
p1597
S'seed'
p1598
sS'required'
p1599
I00
sS'group_name'
p1600
S'Advanced'
p1601
sa(dp1602
S'description'
p1603
g3
sS'cpp_type'
p1604
S'std::string'
p1605
sS'default'
p1606
S'FunctionAux'
p1607
sS'name'
p1608
S'type'
p1609
sS'required'
p1610
I00
sS'group_name'
p1611
Nsa(dp1612
S'description'
p1613
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1614
sS'cpp_type'
p1615
S'bool'
p1616
sS'default'
p1617
S'0'
p1618
sS'name'
p1619
S'use_displaced_mesh'
p1620
sS'required'
p1621
I00
sS'group_name'
p1622
S'Advanced'
p1623
sa(dp1624
S'description'
p1625
S'The name of the variable that this object applies to\n'
p1626
sS'cpp_type'
p1627
S'AuxVariableName'
p1628
sS'default'
p1629
g3
sS'name'
p1630
S'variable'
p1631
sS'required'
p1632
I01
sS'group_name'
p1633
NsasS'name'
p1634
S'/AuxBCs/FunctionAux'
p1635
sa(dp1636
S'description'
p1637
g3
sS'type'
p1638
NsS'subblocks'
p1639
NsS'parameters'
p1640
(lp1641
(dp1642
S'description'
p1643
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1644
sS'cpp_type'
p1645
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1646
sS'default'
p1647
g3
sS'name'
p1648
S'block'
p1649
sS'required'
p1650
I00
sS'group_name'
p1651
Nsa(dp1652
S'description'
p1653
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1654
sS'cpp_type'
p1655
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1656
sS'default'
p1657
g3
sS'name'
p1658
S'boundary'
p1659
sS'required'
p1660
I00
sS'group_name'
p1661
Nsa(dp1662
S'name'
p1663
S'execute_on'
p1664
sS'cpp_type'
p1665
S'MooseEnum'
p1666
sS'default'
p1667
S'residual'
p1668
sS'description'
p1669
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p1670
sS'required'
p1671
I00
sS'options'
p1672
S'initial residual jacobian timestep timestep_begin custom'
p1673
sS'group_name'
p1674
Nsa(dp1675
S'description'
p1676
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p1677
sS'cpp_type'
p1678
S'double'
p1679
sS'default'
p1680
g3
sS'name'
p1681
S'normal_smoothing_distance'
p1682
sS'required'
p1683
I00
sS'group_name'
p1684
Nsa(dp1685
S'description'
p1686
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p1687
sS'cpp_type'
p1688
S'std::string'
p1689
sS'default'
p1690
g3
sS'name'
p1691
S'normal_smoothing_method'
p1692
sS'required'
p1693
I00
sS'group_name'
p1694
Nsa(dp1695
S'name'
p1696
S'order'
p1697
sS'cpp_type'
p1698
S'MooseEnum'
p1699
sS'default'
p1700
S'FIRST'
p1701
sS'description'
p1702
S'The finite element order\n'
p1703
sS'required'
p1704
I00
sS'options'
p1705
S'FIRST SECOND THIRD FOURTH'
p1706
sS'group_name'
p1707
Nsa(dp1708
S'description'
p1709
S'The boundary on the other side of a gap.\n'
p1710
sS'cpp_type'
p1711
S'BoundaryName'
p1712
sS'default'
p1713
g3
sS'name'
p1714
S'paired_boundary'
p1715
sS'required'
p1716
I01
sS'group_name'
p1717
Nsa(dp1718
S'description'
p1719
S'The variable to get the value of.\n'
p1720
sS'cpp_type'
p1721
S'VariableName'
p1722
sS'default'
p1723
g3
sS'name'
p1724
S'paired_variable'
p1725
sS'required'
p1726
I01
sS'group_name'
p1727
Nsa(dp1728
S'description'
p1729
S'The seed for the master random number generator\n'
p1730
sS'cpp_type'
p1731
S'unsigned int'
p1732
sS'default'
p1733
S'0'
p1734
sS'name'
p1735
S'seed'
p1736
sS'required'
p1737
I00
sS'group_name'
p1738
S'Advanced'
p1739
sa(dp1740
S'description'
p1741
S'Tangential distance to extend edges of contact surfaces\n'
p1742
sS'cpp_type'
p1743
S'double'
p1744
sS'default'
p1745
g3
sS'name'
p1746
S'tangential_tolerance'
p1747
sS'required'
p1748
I00
sS'group_name'
p1749
Nsa(dp1750
S'description'
p1751
g3
sS'cpp_type'
p1752
S'std::string'
p1753
sS'default'
p1754
S'GapValueAux'
p1755
sS'name'
p1756
S'type'
p1757
sS'required'
p1758
I00
sS'group_name'
p1759
Nsa(dp1760
S'description'
p1761
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1762
sS'cpp_type'
p1763
S'bool'
p1764
sS'default'
p1765
S'1'
p1766
sS'name'
p1767
S'use_displaced_mesh'
p1768
sS'required'
p1769
I00
sS'group_name'
p1770
S'Advanced'
p1771
sa(dp1772
S'description'
p1773
S'The name of the variable that this object applies to\n'
p1774
sS'cpp_type'
p1775
S'AuxVariableName'
p1776
sS'default'
p1777
g3
sS'name'
p1778
S'variable'
p1779
sS'required'
p1780
I01
sS'group_name'
p1781
Nsa(dp1782
S'description'
p1783
S'Whether to output warning messages concerning nodes not being found\n'
p1784
sS'cpp_type'
p1785
S'bool'
p1786
sS'default'
p1787
S'0'
p1788
sS'name'
p1789
S'warnings'
p1790
sS'required'
p1791
I00
sS'group_name'
p1792
NsasS'name'
p1793
S'/AuxBCs/GapValueAux'
p1794
sa(dp1795
S'description'
p1796
g3
sS'type'
p1797
NsS'subblocks'
p1798
NsS'parameters'
p1799
(lp1800
(dp1801
S'description'
p1802
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1803
sS'cpp_type'
p1804
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1805
sS'default'
p1806
g3
sS'name'
p1807
S'block'
p1808
sS'required'
p1809
I00
sS'group_name'
p1810
Nsa(dp1811
S'description'
p1812
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1813
sS'cpp_type'
p1814
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1815
sS'default'
p1816
g3
sS'name'
p1817
S'boundary'
p1818
sS'required'
p1819
I00
sS'group_name'
p1820
Nsa(dp1821
S'name'
p1822
S'execute_on'
p1823
sS'cpp_type'
p1824
S'MooseEnum'
p1825
sS'default'
p1826
S'residual'
p1827
sS'description'
p1828
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p1829
sS'required'
p1830
I00
sS'options'
p1831
S'initial residual jacobian timestep timestep_begin custom'
p1832
sS'group_name'
p1833
Nsa(dp1834
S'description'
p1835
S'The factor by which to multiply your material property for visualization\n'
p1836
sS'cpp_type'
p1837
S'double'
p1838
sS'default'
p1839
S'1'
p1840
sS'name'
p1841
S'factor'
p1842
sS'required'
p1843
I00
sS'group_name'
p1844
Nsa(dp1845
S'description'
p1846
S'The offset to add to your material property for visualization\n'
p1847
sS'cpp_type'
p1848
S'double'
p1849
sS'default'
p1850
S'0'
p1851
sS'name'
p1852
S'offset'
p1853
sS'required'
p1854
I00
sS'group_name'
p1855
Nsa(dp1856
S'description'
p1857
S'The scalar material property name\n'
p1858
sS'cpp_type'
p1859
S'std::string'
p1860
sS'default'
p1861
g3
sS'name'
p1862
S'property'
p1863
sS'required'
p1864
I01
sS'group_name'
p1865
Nsa(dp1866
S'description'
p1867
S'The seed for the master random number generator\n'
p1868
sS'cpp_type'
p1869
S'unsigned int'
p1870
sS'default'
p1871
S'0'
p1872
sS'name'
p1873
S'seed'
p1874
sS'required'
p1875
I00
sS'group_name'
p1876
S'Advanced'
p1877
sa(dp1878
S'description'
p1879
g3
sS'cpp_type'
p1880
S'std::string'
p1881
sS'default'
p1882
S'MaterialRealAux'
p1883
sS'name'
p1884
S'type'
p1885
sS'required'
p1886
I00
sS'group_name'
p1887
Nsa(dp1888
S'description'
p1889
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1890
sS'cpp_type'
p1891
S'bool'
p1892
sS'default'
p1893
S'0'
p1894
sS'name'
p1895
S'use_displaced_mesh'
p1896
sS'required'
p1897
I00
sS'group_name'
p1898
S'Advanced'
p1899
sa(dp1900
S'description'
p1901
S'The name of the variable that this object applies to\n'
p1902
sS'cpp_type'
p1903
S'AuxVariableName'
p1904
sS'default'
p1905
g3
sS'name'
p1906
S'variable'
p1907
sS'required'
p1908
I01
sS'group_name'
p1909
NsasS'name'
p1910
S'/AuxBCs/MaterialRealAux'
p1911
sa(dp1912
S'description'
p1913
g3
sS'type'
p1914
NsS'subblocks'
p1915
NsS'parameters'
p1916
(lp1917
(dp1918
S'description'
p1919
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1920
sS'cpp_type'
p1921
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1922
sS'default'
p1923
g3
sS'name'
p1924
S'block'
p1925
sS'required'
p1926
I00
sS'group_name'
p1927
Nsa(dp1928
S'description'
p1929
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1930
sS'cpp_type'
p1931
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1932
sS'default'
p1933
g3
sS'name'
p1934
S'boundary'
p1935
sS'required'
p1936
I00
sS'group_name'
p1937
Nsa(dp1938
S'description'
p1939
S'The column component to consider for this kernel\n'
p1940
sS'cpp_type'
p1941
S'unsigned int'
p1942
sS'default'
p1943
S'0'
p1944
sS'name'
p1945
S'column'
p1946
sS'required'
p1947
I00
sS'group_name'
p1948
Nsa(dp1949
S'name'
p1950
S'execute_on'
p1951
sS'cpp_type'
p1952
S'MooseEnum'
p1953
sS'default'
p1954
S'residual'
p1955
sS'description'
p1956
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p1957
sS'required'
p1958
I00
sS'options'
p1959
S'initial residual jacobian timestep timestep_begin custom'
p1960
sS'group_name'
p1961
Nsa(dp1962
S'description'
p1963
S'The factor by which to multiply your material property for visualization\n'
p1964
sS'cpp_type'
p1965
S'double'
p1966
sS'default'
p1967
S'1'
p1968
sS'name'
p1969
S'factor'
p1970
sS'required'
p1971
I00
sS'group_name'
p1972
Nsa(dp1973
S'description'
p1974
S'The offset to add to your material property for visualization\n'
p1975
sS'cpp_type'
p1976
S'double'
p1977
sS'default'
p1978
S'0'
p1979
sS'name'
p1980
S'offset'
p1981
sS'required'
p1982
I00
sS'group_name'
p1983
Nsa(dp1984
S'description'
p1985
S'The scalar material property name\n'
p1986
sS'cpp_type'
p1987
S'std::string'
p1988
sS'default'
p1989
g3
sS'name'
p1990
S'property'
p1991
sS'required'
p1992
I01
sS'group_name'
p1993
Nsa(dp1994
S'description'
p1995
S'The row component to consider for this kernel\n'
p1996
sS'cpp_type'
p1997
S'unsigned int'
p1998
sS'default'
p1999
S'0'
p2000
sS'name'
p2001
S'row'
p2002
sS'required'
p2003
I00
sS'group_name'
p2004
Nsa(dp2005
S'description'
p2006
S'The seed for the master random number generator\n'
p2007
sS'cpp_type'
p2008
S'unsigned int'
p2009
sS'default'
p2010
S'0'
p2011
sS'name'
p2012
S'seed'
p2013
sS'required'
p2014
I00
sS'group_name'
p2015
S'Advanced'
p2016
sa(dp2017
S'description'
p2018
g3
sS'cpp_type'
p2019
S'std::string'
p2020
sS'default'
p2021
S'MaterialRealTensorValueAux'
p2022
sS'name'
p2023
S'type'
p2024
sS'required'
p2025
I00
sS'group_name'
p2026
Nsa(dp2027
S'description'
p2028
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2029
sS'cpp_type'
p2030
S'bool'
p2031
sS'default'
p2032
S'0'
p2033
sS'name'
p2034
S'use_displaced_mesh'
p2035
sS'required'
p2036
I00
sS'group_name'
p2037
S'Advanced'
p2038
sa(dp2039
S'description'
p2040
S'The name of the variable that this object applies to\n'
p2041
sS'cpp_type'
p2042
S'AuxVariableName'
p2043
sS'default'
p2044
g3
sS'name'
p2045
S'variable'
p2046
sS'required'
p2047
I01
sS'group_name'
p2048
NsasS'name'
p2049
S'/AuxBCs/MaterialRealTensorValueAux'
p2050
sa(dp2051
S'description'
p2052
g3
sS'type'
p2053
NsS'subblocks'
p2054
NsS'parameters'
p2055
(lp2056
(dp2057
S'description'
p2058
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2059
sS'cpp_type'
p2060
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2061
sS'default'
p2062
g3
sS'name'
p2063
S'block'
p2064
sS'required'
p2065
I00
sS'group_name'
p2066
Nsa(dp2067
S'description'
p2068
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2069
sS'cpp_type'
p2070
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2071
sS'default'
p2072
g3
sS'name'
p2073
S'boundary'
p2074
sS'required'
p2075
I00
sS'group_name'
p2076
Nsa(dp2077
S'description'
p2078
S'The vector component to consider for this kernel\n'
p2079
sS'cpp_type'
p2080
S'unsigned int'
p2081
sS'default'
p2082
S'0'
p2083
sS'name'
p2084
S'component'
p2085
sS'required'
p2086
I00
sS'group_name'
p2087
Nsa(dp2088
S'name'
p2089
S'execute_on'
p2090
sS'cpp_type'
p2091
S'MooseEnum'
p2092
sS'default'
p2093
S'residual'
p2094
sS'description'
p2095
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p2096
sS'required'
p2097
I00
sS'options'
p2098
S'initial residual jacobian timestep timestep_begin custom'
p2099
sS'group_name'
p2100
Nsa(dp2101
S'description'
p2102
S'The factor by which to multiply your material property for visualization\n'
p2103
sS'cpp_type'
p2104
S'double'
p2105
sS'default'
p2106
S'1'
p2107
sS'name'
p2108
S'factor'
p2109
sS'required'
p2110
I00
sS'group_name'
p2111
Nsa(dp2112
S'description'
p2113
S'The offset to add to your material property for visualization\n'
p2114
sS'cpp_type'
p2115
S'double'
p2116
sS'default'
p2117
S'0'
p2118
sS'name'
p2119
S'offset'
p2120
sS'required'
p2121
I00
sS'group_name'
p2122
Nsa(dp2123
S'description'
p2124
S'The scalar material property name\n'
p2125
sS'cpp_type'
p2126
S'std::string'
p2127
sS'default'
p2128
g3
sS'name'
p2129
S'property'
p2130
sS'required'
p2131
I01
sS'group_name'
p2132
Nsa(dp2133
S'description'
p2134
S'The seed for the master random number generator\n'
p2135
sS'cpp_type'
p2136
S'unsigned int'
p2137
sS'default'
p2138
S'0'
p2139
sS'name'
p2140
S'seed'
p2141
sS'required'
p2142
I00
sS'group_name'
p2143
S'Advanced'
p2144
sa(dp2145
S'description'
p2146
g3
sS'cpp_type'
p2147
S'std::string'
p2148
sS'default'
p2149
S'MaterialRealVectorValueAux'
p2150
sS'name'
p2151
S'type'
p2152
sS'required'
p2153
I00
sS'group_name'
p2154
Nsa(dp2155
S'description'
p2156
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2157
sS'cpp_type'
p2158
S'bool'
p2159
sS'default'
p2160
S'0'
p2161
sS'name'
p2162
S'use_displaced_mesh'
p2163
sS'required'
p2164
I00
sS'group_name'
p2165
S'Advanced'
p2166
sa(dp2167
S'description'
p2168
S'The name of the variable that this object applies to\n'
p2169
sS'cpp_type'
p2170
S'AuxVariableName'
p2171
sS'default'
p2172
g3
sS'name'
p2173
S'variable'
p2174
sS'required'
p2175
I01
sS'group_name'
p2176
NsasS'name'
p2177
S'/AuxBCs/MaterialRealVectorValueAux'
p2178
sa(dp2179
S'description'
p2180
g3
sS'type'
p2181
NsS'subblocks'
p2182
NsS'parameters'
p2183
(lp2184
(dp2185
S'description'
p2186
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2187
sS'cpp_type'
p2188
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2189
sS'default'
p2190
g3
sS'name'
p2191
S'block'
p2192
sS'required'
p2193
I00
sS'group_name'
p2194
Nsa(dp2195
S'description'
p2196
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2197
sS'cpp_type'
p2198
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2199
sS'default'
p2200
g3
sS'name'
p2201
S'boundary'
p2202
sS'required'
p2203
I00
sS'group_name'
p2204
Nsa(dp2205
S'name'
p2206
S'execute_on'
p2207
sS'cpp_type'
p2208
S'MooseEnum'
p2209
sS'default'
p2210
S'residual'
p2211
sS'description'
p2212
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p2213
sS'required'
p2214
I00
sS'options'
p2215
S'initial residual jacobian timestep timestep_begin custom'
p2216
sS'group_name'
p2217
Nsa(dp2218
S'description'
p2219
S'The boundary to find the distance to.\n'
p2220
sS'cpp_type'
p2221
S'BoundaryName'
p2222
sS'default'
p2223
g3
sS'name'
p2224
S'paired_boundary'
p2225
sS'required'
p2226
I01
sS'group_name'
p2227
Nsa(dp2228
S'description'
p2229
S'The seed for the master random number generator\n'
p2230
sS'cpp_type'
p2231
S'unsigned int'
p2232
sS'default'
p2233
S'0'
p2234
sS'name'
p2235
S'seed'
p2236
sS'required'
p2237
I00
sS'group_name'
p2238
S'Advanced'
p2239
sa(dp2240
S'description'
p2241
g3
sS'cpp_type'
p2242
S'std::string'
p2243
sS'default'
p2244
S'NearestNodeDistanceAux'
p2245
sS'name'
p2246
S'type'
p2247
sS'required'
p2248
I00
sS'group_name'
p2249
Nsa(dp2250
S'description'
p2251
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2252
sS'cpp_type'
p2253
S'bool'
p2254
sS'default'
p2255
S'1'
p2256
sS'name'
p2257
S'use_displaced_mesh'
p2258
sS'required'
p2259
I00
sS'group_name'
p2260
S'Advanced'
p2261
sa(dp2262
S'description'
p2263
S'The name of the variable that this object applies to\n'
p2264
sS'cpp_type'
p2265
S'AuxVariableName'
p2266
sS'default'
p2267
g3
sS'name'
p2268
S'variable'
p2269
sS'required'
p2270
I01
sS'group_name'
p2271
NsasS'name'
p2272
S'/AuxBCs/NearestNodeDistanceAux'
p2273
sa(dp2274
S'description'
p2275
g3
sS'type'
p2276
NsS'subblocks'
p2277
NsS'parameters'
p2278
(lp2279
(dp2280
S'description'
p2281
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2282
sS'cpp_type'
p2283
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2284
sS'default'
p2285
g3
sS'name'
p2286
S'block'
p2287
sS'required'
p2288
I00
sS'group_name'
p2289
Nsa(dp2290
S'description'
p2291
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2292
sS'cpp_type'
p2293
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2294
sS'default'
p2295
g3
sS'name'
p2296
S'boundary'
p2297
sS'required'
p2298
I00
sS'group_name'
p2299
Nsa(dp2300
S'name'
p2301
S'execute_on'
p2302
sS'cpp_type'
p2303
S'MooseEnum'
p2304
sS'default'
p2305
S'residual'
p2306
sS'description'
p2307
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p2308
sS'required'
p2309
I00
sS'options'
p2310
S'initial residual jacobian timestep timestep_begin custom'
p2311
sS'group_name'
p2312
Nsa(dp2313
S'description'
p2314
S'The boundary to get the value from.\n'
p2315
sS'cpp_type'
p2316
S'BoundaryName'
p2317
sS'default'
p2318
g3
sS'name'
p2319
S'paired_boundary'
p2320
sS'required'
p2321
I01
sS'group_name'
p2322
Nsa(dp2323
S'description'
p2324
S'The variable to get the value of.\n'
p2325
sS'cpp_type'
p2326
S'std::vector<VariableName>'
p2327
sS'default'
p2328
g3
sS'name'
p2329
S'paired_variable'
p2330
sS'required'
p2331
I01
sS'group_name'
p2332
Nsa(dp2333
S'description'
p2334
S'The seed for the master random number generator\n'
p2335
sS'cpp_type'
p2336
S'unsigned int'
p2337
sS'default'
p2338
S'0'
p2339
sS'name'
p2340
S'seed'
p2341
sS'required'
p2342
I00
sS'group_name'
p2343
S'Advanced'
p2344
sa(dp2345
S'description'
p2346
g3
sS'cpp_type'
p2347
S'std::string'
p2348
sS'default'
p2349
S'NearestNodeValueAux'
p2350
sS'name'
p2351
S'type'
p2352
sS'required'
p2353
I00
sS'group_name'
p2354
Nsa(dp2355
S'description'
p2356
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2357
sS'cpp_type'
p2358
S'bool'
p2359
sS'default'
p2360
S'1'
p2361
sS'name'
p2362
S'use_displaced_mesh'
p2363
sS'required'
p2364
I00
sS'group_name'
p2365
S'Advanced'
p2366
sa(dp2367
S'description'
p2368
S'The name of the variable that this object applies to\n'
p2369
sS'cpp_type'
p2370
S'AuxVariableName'
p2371
sS'default'
p2372
g3
sS'name'
p2373
S'variable'
p2374
sS'required'
p2375
I01
sS'group_name'
p2376
NsasS'name'
p2377
S'/AuxBCs/NearestNodeValueAux'
p2378
sa(dp2379
S'description'
p2380
g3
sS'type'
p2381
NsS'subblocks'
p2382
NsS'parameters'
p2383
(lp2384
(dp2385
S'description'
p2386
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2387
sS'cpp_type'
p2388
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2389
sS'default'
p2390
g3
sS'name'
p2391
S'block'
p2392
sS'required'
p2393
I00
sS'group_name'
p2394
Nsa(dp2395
S'description'
p2396
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2397
sS'cpp_type'
p2398
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2399
sS'default'
p2400
g3
sS'name'
p2401
S'boundary'
p2402
sS'required'
p2403
I00
sS'group_name'
p2404
Nsa(dp2405
S'description'
p2406
S'The NodalFloodCount UserObject to get values from.\n'
p2407
sS'cpp_type'
p2408
S'UserObjectName'
p2409
sS'default'
p2410
g3
sS'name'
p2411
S'bubble_object'
p2412
sS'required'
p2413
I01
sS'group_name'
p2414
Nsa(dp2415
S'name'
p2416
S'execute_on'
p2417
sS'cpp_type'
p2418
S'MooseEnum'
p2419
sS'default'
p2420
S'residual'
p2421
sS'description'
p2422
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p2423
sS'required'
p2424
I00
sS'options'
p2425
S'initial residual jacobian timestep timestep_begin custom'
p2426
sS'group_name'
p2427
Nsa(dp2428
S'name'
p2429
S'field_display'
p2430
sS'cpp_type'
p2431
S'MooseEnum'
p2432
sS'default'
p2433
S'UNIQUE_REGION'
p2434
sS'description'
p2435
S'Determines how the auxilary field should be colored. (UNIQUE_REGION and VARIABLE_COLORING are nodal, CENTROID is elemental, default: UNIQUE_REGION)\n'
p2436
sS'required'
p2437
I00
sS'options'
p2438
S'UNIQUE_REGION VARIABLE_COLORING ACTIVE_BOUNDS CENTROID'
p2439
sS'group_name'
p2440
Nsa(dp2441
S'description'
p2442
S'The index of which map to retrieve values from when using NodalFloodCount with multiple maps.\n'
p2443
sS'cpp_type'
p2444
S'unsigned int'
p2445
sS'default'
p2446
S'0'
p2447
sS'name'
p2448
S'map_index'
p2449
sS'required'
p2450
I00
sS'group_name'
p2451
Nsa(dp2452
S'description'
p2453
S'The seed for the master random number generator\n'
p2454
sS'cpp_type'
p2455
S'unsigned int'
p2456
sS'default'
p2457
S'0'
p2458
sS'name'
p2459
S'seed'
p2460
sS'required'
p2461
I00
sS'group_name'
p2462
S'Advanced'
p2463
sa(dp2464
S'description'
p2465
g3
sS'cpp_type'
p2466
S'std::string'
p2467
sS'default'
p2468
S'NodalFloodCountAux'
p2469
sS'name'
p2470
S'type'
p2471
sS'required'
p2472
I00
sS'group_name'
p2473
Nsa(dp2474
S'description'
p2475
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2476
sS'cpp_type'
p2477
S'bool'
p2478
sS'default'
p2479
S'0'
p2480
sS'name'
p2481
S'use_displaced_mesh'
p2482
sS'required'
p2483
I00
sS'group_name'
p2484
S'Advanced'
p2485
sa(dp2486
S'description'
p2487
S'The name of the variable that this object applies to\n'
p2488
sS'cpp_type'
p2489
S'AuxVariableName'
p2490
sS'default'
p2491
g3
sS'name'
p2492
S'variable'
p2493
sS'required'
p2494
I01
sS'group_name'
p2495
NsasS'name'
p2496
S'/AuxBCs/NodalFloodCountAux'
p2497
sa(dp2498
S'description'
p2499
g3
sS'type'
p2500
NsS'subblocks'
p2501
NsS'parameters'
p2502
(lp2503
(dp2504
S'description'
p2505
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2506
sS'cpp_type'
p2507
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2508
sS'default'
p2509
g3
sS'name'
p2510
S'block'
p2511
sS'required'
p2512
I00
sS'group_name'
p2513
Nsa(dp2514
S'description'
p2515
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2516
sS'cpp_type'
p2517
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2518
sS'default'
p2519
g3
sS'name'
p2520
S'boundary'
p2521
sS'required'
p2522
I00
sS'group_name'
p2523
Nsa(dp2524
S'name'
p2525
S'execute_on'
p2526
sS'cpp_type'
p2527
S'MooseEnum'
p2528
sS'default'
p2529
S'residual'
p2530
sS'description'
p2531
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p2532
sS'required'
p2533
I00
sS'options'
p2534
S'initial residual jacobian timestep timestep_begin custom'
p2535
sS'group_name'
p2536
Nsa(dp2537
S'description'
p2538
S'The normalization factor\n'
p2539
sS'cpp_type'
p2540
S'double'
p2541
sS'default'
p2542
S'1'
p2543
sS'name'
p2544
S'normal_factor'
p2545
sS'required'
p2546
I00
sS'group_name'
p2547
Nsa(dp2548
S'description'
p2549
S'The postprocessor on the source\n'
p2550
sS'cpp_type'
p2551
S'PostprocessorName'
p2552
sS'default'
p2553
g3
sS'name'
p2554
S'normalization'
p2555
sS'required'
p2556
I01
sS'group_name'
p2557
Nsa(dp2558
S'description'
p2559
S'The seed for the master random number generator\n'
p2560
sS'cpp_type'
p2561
S'unsigned int'
p2562
sS'default'
p2563
S'0'
p2564
sS'name'
p2565
S'seed'
p2566
sS'required'
p2567
I00
sS'group_name'
p2568
S'Advanced'
p2569
sa(dp2570
S'description'
p2571
S'The variable to be normalized\n'
p2572
sS'cpp_type'
p2573
S'std::vector<VariableName>'
p2574
sS'default'
p2575
g3
sS'name'
p2576
S'source_variable'
p2577
sS'required'
p2578
I01
sS'group_name'
p2579
Nsa(dp2580
S'description'
p2581
g3
sS'cpp_type'
p2582
S'std::string'
p2583
sS'default'
p2584
S'NormalizationAux'
p2585
sS'name'
p2586
S'type'
p2587
sS'required'
p2588
I00
sS'group_name'
p2589
Nsa(dp2590
S'description'
p2591
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2592
sS'cpp_type'
p2593
S'bool'
p2594
sS'default'
p2595
S'0'
p2596
sS'name'
p2597
S'use_displaced_mesh'
p2598
sS'required'
p2599
I00
sS'group_name'
p2600
S'Advanced'
p2601
sa(dp2602
S'description'
p2603
S'The name of the variable that this object applies to\n'
p2604
sS'cpp_type'
p2605
S'AuxVariableName'
p2606
sS'default'
p2607
g3
sS'name'
p2608
S'variable'
p2609
sS'required'
p2610
I01
sS'group_name'
p2611
NsasS'name'
p2612
S'/AuxBCs/NormalizationAux'
p2613
sa(dp2614
S'description'
p2615
g3
sS'type'
p2616
NsS'subblocks'
p2617
NsS'parameters'
p2618
(lp2619
(dp2620
S'description'
p2621
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2622
sS'cpp_type'
p2623
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2624
sS'default'
p2625
g3
sS'name'
p2626
S'block'
p2627
sS'required'
p2628
I00
sS'group_name'
p2629
Nsa(dp2630
S'description'
p2631
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2632
sS'cpp_type'
p2633
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2634
sS'default'
p2635
g3
sS'name'
p2636
S'boundary'
p2637
sS'required'
p2638
I00
sS'group_name'
p2639
Nsa(dp2640
S'name'
p2641
S'execute_on'
p2642
sS'cpp_type'
p2643
S'MooseEnum'
p2644
sS'default'
p2645
S'residual'
p2646
sS'description'
p2647
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p2648
sS'required'
p2649
I00
sS'options'
p2650
S'initial residual jacobian timestep timestep_begin custom'
p2651
sS'group_name'
p2652
Nsa(dp2653
S'description'
p2654
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p2655
sS'cpp_type'
p2656
S'double'
p2657
sS'default'
p2658
g3
sS'name'
p2659
S'normal_smoothing_distance'
p2660
sS'required'
p2661
I00
sS'group_name'
p2662
Nsa(dp2663
S'description'
p2664
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p2665
sS'cpp_type'
p2666
S'std::string'
p2667
sS'default'
p2668
g3
sS'name'
p2669
S'normal_smoothing_method'
p2670
sS'required'
p2671
I00
sS'group_name'
p2672
Nsa(dp2673
S'name'
p2674
S'order'
p2675
sS'cpp_type'
p2676
S'MooseEnum'
p2677
sS'default'
p2678
S'FIRST'
p2679
sS'description'
p2680
S'The finite element order\n'
p2681
sS'required'
p2682
I00
sS'options'
p2683
S'FIRST SECOND THIRD FOURTH'
p2684
sS'group_name'
p2685
Nsa(dp2686
S'description'
p2687
S'The boundary to be penetrated\n'
p2688
sS'cpp_type'
p2689
S'BoundaryName'
p2690
sS'default'
p2691
g3
sS'name'
p2692
S'paired_boundary'
p2693
sS'required'
p2694
I01
sS'group_name'
p2695
Nsa(dp2696
S'description'
p2697
S'The quantity to recover from the available penetration information: distance(default), tangential_distance, normal_x, normal_y, normal_z, closest_point_x, closest_point_y, closest_point_z, element_id, side, incremental_slip_x, incremental_slip_y, incremental_slip_z, incremental_slip_magnitude, accumulated_slip, force_x, force_y, force_z, normal_force_magnitude, normal_force_x, normal_force_y, normal_force_z, tangential_force_magnitude, tangential_force_x, tangential_force_y, tangential_force_z, frictional_energy, mechanical_status\n'
p2698
sS'cpp_type'
p2699
S'std::string'
p2700
sS'default'
p2701
S'distance'
p2702
sS'name'
p2703
S'quantity'
p2704
sS'required'
p2705
I00
sS'group_name'
p2706
Nsa(dp2707
S'description'
p2708
S'The seed for the master random number generator\n'
p2709
sS'cpp_type'
p2710
S'unsigned int'
p2711
sS'default'
p2712
S'0'
p2713
sS'name'
p2714
S'seed'
p2715
sS'required'
p2716
I00
sS'group_name'
p2717
S'Advanced'
p2718
sa(dp2719
S'description'
p2720
S'Tangential distance to extend edges of contact surfaces\n'
p2721
sS'cpp_type'
p2722
S'double'
p2723
sS'default'
p2724
g3
sS'name'
p2725
S'tangential_tolerance'
p2726
sS'required'
p2727
I00
sS'group_name'
p2728
Nsa(dp2729
S'description'
p2730
g3
sS'cpp_type'
p2731
S'std::string'
p2732
sS'default'
p2733
S'PenetrationAux'
p2734
sS'name'
p2735
S'type'
p2736
sS'required'
p2737
I00
sS'group_name'
p2738
Nsa(dp2739
S'description'
p2740
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2741
sS'cpp_type'
p2742
S'bool'
p2743
sS'default'
p2744
S'1'
p2745
sS'name'
p2746
S'use_displaced_mesh'
p2747
sS'required'
p2748
I00
sS'group_name'
p2749
S'Advanced'
p2750
sa(dp2751
S'description'
p2752
S'The name of the variable that this object applies to\n'
p2753
sS'cpp_type'
p2754
S'AuxVariableName'
p2755
sS'default'
p2756
g3
sS'name'
p2757
S'variable'
p2758
sS'required'
p2759
I01
sS'group_name'
p2760
NsasS'name'
p2761
S'/AuxBCs/PenetrationAux'
p2762
sa(dp2763
S'description'
p2764
g3
sS'type'
p2765
NsS'subblocks'
p2766
NsS'parameters'
p2767
(lp2768
(dp2769
S'description'
p2770
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2771
sS'cpp_type'
p2772
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2773
sS'default'
p2774
g3
sS'name'
p2775
S'block'
p2776
sS'required'
p2777
I00
sS'group_name'
p2778
Nsa(dp2779
S'description'
p2780
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2781
sS'cpp_type'
p2782
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2783
sS'default'
p2784
g3
sS'name'
p2785
S'boundary'
p2786
sS'required'
p2787
I00
sS'group_name'
p2788
Nsa(dp2789
S'name'
p2790
S'execute_on'
p2791
sS'cpp_type'
p2792
S'MooseEnum'
p2793
sS'default'
p2794
S'residual'
p2795
sS'description'
p2796
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p2797
sS'required'
p2798
I00
sS'options'
p2799
S'initial residual jacobian timestep timestep_begin custom'
p2800
sS'group_name'
p2801
Nsa(dp2802
S'description'
p2803
S'The seed for the master random number generator\n'
p2804
sS'cpp_type'
p2805
S'unsigned int'
p2806
sS'default'
p2807
S'0'
p2808
sS'name'
p2809
S'seed'
p2810
sS'required'
p2811
I00
sS'group_name'
p2812
S'Advanced'
p2813
sa(dp2814
S'description'
p2815
g3
sS'cpp_type'
p2816
S'std::string'
p2817
sS'default'
p2818
S'ProcessorIDAux'
p2819
sS'name'
p2820
S'type'
p2821
sS'required'
p2822
I00
sS'group_name'
p2823
Nsa(dp2824
S'description'
p2825
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2826
sS'cpp_type'
p2827
S'bool'
p2828
sS'default'
p2829
S'0'
p2830
sS'name'
p2831
S'use_displaced_mesh'
p2832
sS'required'
p2833
I00
sS'group_name'
p2834
S'Advanced'
p2835
sa(dp2836
S'description'
p2837
S'The name of the variable that this object applies to\n'
p2838
sS'cpp_type'
p2839
S'AuxVariableName'
p2840
sS'default'
p2841
g3
sS'name'
p2842
S'variable'
p2843
sS'required'
p2844
I01
sS'group_name'
p2845
NsasS'name'
p2846
S'/AuxBCs/ProcessorIDAux'
p2847
sa(dp2848
S'description'
p2849
g3
sS'type'
p2850
NsS'subblocks'
p2851
NsS'parameters'
p2852
(lp2853
(dp2854
S'description'
p2855
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2856
sS'cpp_type'
p2857
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2858
sS'default'
p2859
g3
sS'name'
p2860
S'block'
p2861
sS'required'
p2862
I00
sS'group_name'
p2863
Nsa(dp2864
S'description'
p2865
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2866
sS'cpp_type'
p2867
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2868
sS'default'
p2869
g3
sS'name'
p2870
S'boundary'
p2871
sS'required'
p2872
I00
sS'group_name'
p2873
Nsa(dp2874
S'description'
p2875
S'The downstairs of the quotient variable\n'
p2876
sS'cpp_type'
p2877
S'std::vector<VariableName>'
p2878
sS'default'
p2879
g3
sS'name'
p2880
S'denominator'
p2881
sS'required'
p2882
I00
sS'group_name'
p2883
Nsa(dp2884
S'name'
p2885
S'execute_on'
p2886
sS'cpp_type'
p2887
S'MooseEnum'
p2888
sS'default'
p2889
S'residual'
p2890
sS'description'
p2891
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p2892
sS'required'
p2893
I00
sS'options'
p2894
S'initial residual jacobian timestep timestep_begin custom'
p2895
sS'group_name'
p2896
Nsa(dp2897
S'description'
p2898
S'The upstairs of the quotient variable\n'
p2899
sS'cpp_type'
p2900
S'std::vector<VariableName>'
p2901
sS'default'
p2902
g3
sS'name'
p2903
S'numerator'
p2904
sS'required'
p2905
I00
sS'group_name'
p2906
Nsa(dp2907
S'description'
p2908
S'The seed for the master random number generator\n'
p2909
sS'cpp_type'
p2910
S'unsigned int'
p2911
sS'default'
p2912
S'0'
p2913
sS'name'
p2914
S'seed'
p2915
sS'required'
p2916
I00
sS'group_name'
p2917
S'Advanced'
p2918
sa(dp2919
S'description'
p2920
g3
sS'cpp_type'
p2921
S'std::string'
p2922
sS'default'
p2923
S'QuotientAux'
p2924
sS'name'
p2925
S'type'
p2926
sS'required'
p2927
I00
sS'group_name'
p2928
Nsa(dp2929
S'description'
p2930
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2931
sS'cpp_type'
p2932
S'bool'
p2933
sS'default'
p2934
S'0'
p2935
sS'name'
p2936
S'use_displaced_mesh'
p2937
sS'required'
p2938
I00
sS'group_name'
p2939
S'Advanced'
p2940
sa(dp2941
S'description'
p2942
S'The name of the variable that this object applies to\n'
p2943
sS'cpp_type'
p2944
S'AuxVariableName'
p2945
sS'default'
p2946
g3
sS'name'
p2947
S'variable'
p2948
sS'required'
p2949
I01
sS'group_name'
p2950
NsasS'name'
p2951
S'/AuxBCs/QuotientAux'
p2952
sa(dp2953
S'description'
p2954
g3
sS'type'
p2955
NsS'subblocks'
p2956
NsS'parameters'
p2957
(lp2958
(dp2959
S'description'
p2960
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2961
sS'cpp_type'
p2962
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2963
sS'default'
p2964
g3
sS'name'
p2965
S'block'
p2966
sS'required'
p2967
I00
sS'group_name'
p2968
Nsa(dp2969
S'description'
p2970
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2971
sS'cpp_type'
p2972
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2973
sS'default'
p2974
g3
sS'name'
p2975
S'boundary'
p2976
sS'required'
p2977
I00
sS'group_name'
p2978
Nsa(dp2979
S'name'
p2980
S'execute_on'
p2981
sS'cpp_type'
p2982
S'MooseEnum'
p2983
sS'default'
p2984
S'residual'
p2985
sS'description'
p2986
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p2987
sS'required'
p2988
I00
sS'options'
p2989
S'initial residual jacobian timestep timestep_begin custom'
p2990
sS'group_name'
p2991
Nsa(dp2992
S'description'
p2993
S'The seed for the master random number generator\n'
p2994
sS'cpp_type'
p2995
S'unsigned int'
p2996
sS'default'
p2997
S'0'
p2998
sS'name'
p2999
S'seed'
p3000
sS'required'
p3001
I00
sS'group_name'
p3002
S'Advanced'
p3003
sa(dp3004
S'description'
p3005
g3
sS'cpp_type'
p3006
S'std::string'
p3007
sS'default'
p3008
S'SelfAux'
p3009
sS'name'
p3010
S'type'
p3011
sS'required'
p3012
I00
sS'group_name'
p3013
Nsa(dp3014
S'description'
p3015
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3016
sS'cpp_type'
p3017
S'bool'
p3018
sS'default'
p3019
S'0'
p3020
sS'name'
p3021
S'use_displaced_mesh'
p3022
sS'required'
p3023
I00
sS'group_name'
p3024
S'Advanced'
p3025
sa(dp3026
S'description'
p3027
S'The name of the variable that this object applies to\n'
p3028
sS'cpp_type'
p3029
S'AuxVariableName'
p3030
sS'default'
p3031
g3
sS'name'
p3032
S'variable'
p3033
sS'required'
p3034
I01
sS'group_name'
p3035
NsasS'name'
p3036
S'/AuxBCs/SelfAux'
p3037
sa(dp3038
S'description'
p3039
g3
sS'type'
p3040
NsS'subblocks'
p3041
NsS'parameters'
p3042
(lp3043
(dp3044
S'description'
p3045
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p3046
sS'cpp_type'
p3047
S'double'
p3048
sS'default'
p3049
S'0'
p3050
sS'name'
p3051
S'add_factor'
p3052
sS'required'
p3053
I00
sS'group_name'
p3054
Nsa(dp3055
S'description'
p3056
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3057
sS'cpp_type'
p3058
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3059
sS'default'
p3060
g3
sS'name'
p3061
S'block'
p3062
sS'required'
p3063
I00
sS'group_name'
p3064
Nsa(dp3065
S'description'
p3066
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3067
sS'cpp_type'
p3068
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3069
sS'default'
p3070
g3
sS'name'
p3071
S'boundary'
p3072
sS'required'
p3073
I00
sS'group_name'
p3074
Nsa(dp3075
S'description'
p3076
S'If true the meshes must be the same and then the values are simply copied over.\n'
p3077
sS'cpp_type'
p3078
S'bool'
p3079
sS'default'
p3080
S'0'
p3081
sS'name'
p3082
S'direct'
p3083
sS'required'
p3084
I00
sS'group_name'
p3085
Nsa(dp3086
S'name'
p3087
S'execute_on'
p3088
sS'cpp_type'
p3089
S'MooseEnum'
p3090
sS'default'
p3091
S'residual'
p3092
sS'description'
p3093
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p3094
sS'required'
p3095
I00
sS'options'
p3096
S'initial residual jacobian timestep timestep_begin custom'
p3097
sS'group_name'
p3098
Nsa(dp3099
S'description'
p3100
S'The name of the variable to extract from the file\n'
p3101
sS'cpp_type'
p3102
S'std::string'
p3103
sS'default'
p3104
g3
sS'name'
p3105
S'from_variable'
p3106
sS'required'
p3107
I00
sS'group_name'
p3108
Nsa(dp3109
S'description'
p3110
S"Scale factor (a)  to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p3111
sS'cpp_type'
p3112
S'double'
p3113
sS'default'
p3114
S'1'
p3115
sS'name'
p3116
S'scale_factor'
p3117
sS'required'
p3118
I00
sS'group_name'
p3119
Nsa(dp3120
S'description'
p3121
S'The seed for the master random number generator\n'
p3122
sS'cpp_type'
p3123
S'unsigned int'
p3124
sS'default'
p3125
S'0'
p3126
sS'name'
p3127
S'seed'
p3128
sS'required'
p3129
I00
sS'group_name'
p3130
S'Advanced'
p3131
sa(dp3132
S'description'
p3133
S'The name of the SolutionUserObject\n'
p3134
sS'cpp_type'
p3135
S'UserObjectName'
p3136
sS'default'
p3137
g3
sS'name'
p3138
S'solution'
p3139
sS'required'
p3140
I01
sS'group_name'
p3141
Nsa(dp3142
S'description'
p3143
g3
sS'cpp_type'
p3144
S'std::string'
p3145
sS'default'
p3146
S'SolutionAux'
p3147
sS'name'
p3148
S'type'
p3149
sS'required'
p3150
I00
sS'group_name'
p3151
Nsa(dp3152
S'description'
p3153
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3154
sS'cpp_type'
p3155
S'bool'
p3156
sS'default'
p3157
S'0'
p3158
sS'name'
p3159
S'use_displaced_mesh'
p3160
sS'required'
p3161
I00
sS'group_name'
p3162
S'Advanced'
p3163
sa(dp3164
S'description'
p3165
S'The name of the variable that this object applies to\n'
p3166
sS'cpp_type'
p3167
S'AuxVariableName'
p3168
sS'default'
p3169
g3
sS'name'
p3170
S'variable'
p3171
sS'required'
p3172
I01
sS'group_name'
p3173
NsasS'name'
p3174
S'/AuxBCs/SolutionAux'
p3175
sa(dp3176
S'description'
p3177
g3
sS'type'
p3178
NsS'subblocks'
p3179
NsS'parameters'
p3180
(lp3181
(dp3182
S'description'
p3183
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3184
sS'cpp_type'
p3185
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3186
sS'default'
p3187
g3
sS'name'
p3188
S'block'
p3189
sS'required'
p3190
I00
sS'group_name'
p3191
Nsa(dp3192
S'description'
p3193
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3194
sS'cpp_type'
p3195
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3196
sS'default'
p3197
g3
sS'name'
p3198
S'boundary'
p3199
sS'required'
p3200
I00
sS'group_name'
p3201
Nsa(dp3202
S'name'
p3203
S'execute_on'
p3204
sS'cpp_type'
p3205
S'MooseEnum'
p3206
sS'default'
p3207
S'residual'
p3208
sS'description'
p3209
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p3210
sS'required'
p3211
I00
sS'options'
p3212
S'initial residual jacobian timestep timestep_begin custom'
p3213
sS'group_name'
p3214
Nsa(dp3215
S'description'
p3216
S'The seed for the master random number generator\n'
p3217
sS'cpp_type'
p3218
S'unsigned int'
p3219
sS'default'
p3220
S'0'
p3221
sS'name'
p3222
S'seed'
p3223
sS'required'
p3224
I00
sS'group_name'
p3225
S'Advanced'
p3226
sa(dp3227
S'description'
p3228
g3
sS'cpp_type'
p3229
S'std::string'
p3230
sS'default'
p3231
S'SpatialUserObjectAux'
p3232
sS'name'
p3233
S'type'
p3234
sS'required'
p3235
I00
sS'group_name'
p3236
Nsa(dp3237
S'description'
p3238
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3239
sS'cpp_type'
p3240
S'bool'
p3241
sS'default'
p3242
S'0'
p3243
sS'name'
p3244
S'use_displaced_mesh'
p3245
sS'required'
p3246
I00
sS'group_name'
p3247
S'Advanced'
p3248
sa(dp3249
S'description'
p3250
S'The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n'
p3251
sS'cpp_type'
p3252
S'UserObjectName'
p3253
sS'default'
p3254
g3
sS'name'
p3255
S'user_object'
p3256
sS'required'
p3257
I01
sS'group_name'
p3258
Nsa(dp3259
S'description'
p3260
S'The name of the variable that this object applies to\n'
p3261
sS'cpp_type'
p3262
S'AuxVariableName'
p3263
sS'default'
p3264
g3
sS'name'
p3265
S'variable'
p3266
sS'required'
p3267
I01
sS'group_name'
p3268
NsasS'name'
p3269
S'/AuxBCs/SpatialUserObjectAux'
p3270
sa(dp3271
S'description'
p3272
g3
sS'type'
p3273
NsS'subblocks'
p3274
NsS'parameters'
p3275
(lp3276
(dp3277
S'description'
p3278
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3279
sS'cpp_type'
p3280
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3281
sS'default'
p3282
g3
sS'name'
p3283
S'block'
p3284
sS'required'
p3285
I00
sS'group_name'
p3286
Nsa(dp3287
S'description'
p3288
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3289
sS'cpp_type'
p3290
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3291
sS'default'
p3292
g3
sS'name'
p3293
S'boundary'
p3294
sS'required'
p3295
I00
sS'group_name'
p3296
Nsa(dp3297
S'name'
p3298
S'execute_on'
p3299
sS'cpp_type'
p3300
S'MooseEnum'
p3301
sS'default'
p3302
S'residual'
p3303
sS'description'
p3304
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p3305
sS'required'
p3306
I00
sS'options'
p3307
S'initial residual jacobian timestep timestep_begin custom'
p3308
sS'group_name'
p3309
Nsa(dp3310
S'description'
p3311
S'The seed for the master random number generator\n'
p3312
sS'cpp_type'
p3313
S'unsigned int'
p3314
sS'default'
p3315
S'0'
p3316
sS'name'
p3317
S'seed'
p3318
sS'required'
p3319
I00
sS'group_name'
p3320
S'Advanced'
p3321
sa(dp3322
S'description'
p3323
g3
sS'cpp_type'
p3324
S'std::string'
p3325
sS'default'
p3326
S'VectorMagnitudeAux'
p3327
sS'name'
p3328
S'type'
p3329
sS'required'
p3330
I00
sS'group_name'
p3331
Nsa(dp3332
S'description'
p3333
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3334
sS'cpp_type'
p3335
S'bool'
p3336
sS'default'
p3337
S'0'
p3338
sS'name'
p3339
S'use_displaced_mesh'
p3340
sS'required'
p3341
I00
sS'group_name'
p3342
S'Advanced'
p3343
sa(dp3344
S'description'
p3345
S'The name of the variable that this object applies to\n'
p3346
sS'cpp_type'
p3347
S'AuxVariableName'
p3348
sS'default'
p3349
g3
sS'name'
p3350
S'variable'
p3351
sS'required'
p3352
I01
sS'group_name'
p3353
Nsa(dp3354
S'description'
p3355
S'x-component of the vector\n'
p3356
sS'cpp_type'
p3357
S'std::vector<VariableName>'
p3358
sS'default'
p3359
g3
sS'name'
p3360
S'x'
p3361
sS'required'
p3362
I01
sS'group_name'
p3363
Nsa(dp3364
S'description'
p3365
S'y-component of the vector\n'
p3366
sS'cpp_type'
p3367
S'std::vector<VariableName>'
p3368
sS'default'
p3369
g3
sS'name'
p3370
S'y'
p3371
sS'required'
p3372
I00
sS'group_name'
p3373
Nsa(dp3374
S'description'
p3375
S'z-component of the vector\n'
p3376
sS'cpp_type'
p3377
S'std::vector<VariableName>'
p3378
sS'default'
p3379
g3
sS'name'
p3380
S'z'
p3381
sS'required'
p3382
I00
sS'group_name'
p3383
NsasS'name'
p3384
S'/AuxBCs/VectorMagnitudeAux'
p3385
sasS'parameters'
p3386
NsS'name'
p3387
S'/AuxBCs'
p3388
sa(dp3389
S'description'
p3390
g3
sS'type'
p3391
NsS'subblocks'
p3392
(lp3393
(dp3394
S'description'
p3395
g3
sS'type'
p3396
NsS'subblocks'
p3397
NsS'parameters'
p3398
(lp3399
(dp3400
S'description'
p3401
S'A string representing the Moose Object that will be built by this Action\n'
p3402
sS'cpp_type'
p3403
S'std::string'
p3404
sS'default'
p3405
g3
sS'name'
p3406
S'type'
p3407
sS'required'
p3408
I01
sS'group_name'
p3409
NsasS'name'
p3410
S'/AuxKernels/*'
p3411
sa(dp3412
S'description'
p3413
g3
sS'type'
p3414
NsS'subblocks'
p3415
NsS'parameters'
p3416
(lp3417
(dp3418
S'description'
p3419
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3420
sS'cpp_type'
p3421
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3422
sS'default'
p3423
g3
sS'name'
p3424
S'block'
p3425
sS'required'
p3426
I00
sS'group_name'
p3427
Nsa(dp3428
S'description'
p3429
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3430
sS'cpp_type'
p3431
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3432
sS'default'
p3433
g3
sS'name'
p3434
S'boundary'
p3435
sS'required'
p3436
I00
sS'group_name'
p3437
Nsa(dp3438
S'description'
p3439
S'number of grains\n'
p3440
sS'cpp_type'
p3441
S'unsigned int'
p3442
sS'default'
p3443
g3
sS'name'
p3444
S'crys_num'
p3445
sS'required'
p3446
I01
sS'group_name'
p3447
Nsa(dp3448
S'name'
p3449
S'execute_on'
p3450
sS'cpp_type'
p3451
S'MooseEnum'
p3452
sS'default'
p3453
S'residual'
p3454
sS'description'
p3455
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p3456
sS'required'
p3457
I00
sS'options'
p3458
S'initial residual jacobian timestep timestep_begin custom'
p3459
sS'group_name'
p3460
Nsa(dp3461
S'description'
p3462
S'The seed for the master random number generator\n'
p3463
sS'cpp_type'
p3464
S'unsigned int'
p3465
sS'default'
p3466
S'0'
p3467
sS'name'
p3468
S'seed'
p3469
sS'required'
p3470
I00
sS'group_name'
p3471
S'Advanced'
p3472
sa(dp3473
S'description'
p3474
g3
sS'cpp_type'
p3475
S'std::string'
p3476
sS'default'
p3477
S'BndsCalcAux'
p3478
sS'name'
p3479
S'type'
p3480
sS'required'
p3481
I00
sS'group_name'
p3482
Nsa(dp3483
S'description'
p3484
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3485
sS'cpp_type'
p3486
S'bool'
p3487
sS'default'
p3488
S'0'
p3489
sS'name'
p3490
S'use_displaced_mesh'
p3491
sS'required'
p3492
I00
sS'group_name'
p3493
S'Advanced'
p3494
sa(dp3495
S'description'
p3496
S'Array of coupled variables\n'
p3497
sS'cpp_type'
p3498
S'std::vector<VariableName>'
p3499
sS'default'
p3500
g3
sS'name'
p3501
S'v'
p3502
sS'required'
p3503
I00
sS'group_name'
p3504
Nsa(dp3505
S'description'
p3506
S'base for variable names\n'
p3507
sS'cpp_type'
p3508
S'std::string'
p3509
sS'default'
p3510
g3
sS'name'
p3511
S'var_name_base'
p3512
sS'required'
p3513
I01
sS'group_name'
p3514
Nsa(dp3515
S'description'
p3516
S'The name of the variable that this object applies to\n'
p3517
sS'cpp_type'
p3518
S'AuxVariableName'
p3519
sS'default'
p3520
g3
sS'name'
p3521
S'variable'
p3522
sS'required'
p3523
I01
sS'group_name'
p3524
NsasS'name'
p3525
S'/AuxKernels/BndsCalcAux'
p3526
sa(dp3527
S'description'
p3528
g3
sS'type'
p3529
NsS'subblocks'
p3530
NsS'parameters'
p3531
(lp3532
(dp3533
S'description'
p3534
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3535
sS'cpp_type'
p3536
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3537
sS'default'
p3538
g3
sS'name'
p3539
S'block'
p3540
sS'required'
p3541
I00
sS'group_name'
p3542
Nsa(dp3543
S'description'
p3544
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3545
sS'cpp_type'
p3546
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3547
sS'default'
p3548
g3
sS'name'
p3549
S'boundary'
p3550
sS'required'
p3551
I00
sS'group_name'
p3552
Nsa(dp3553
S'description'
p3554
S'The variable to be bounded\n'
p3555
sS'cpp_type'
p3556
S'std::vector<VariableName>'
p3557
sS'default'
p3558
g3
sS'name'
p3559
S'bounded_variable'
p3560
sS'required'
p3561
I01
sS'group_name'
p3562
Nsa(dp3563
S'name'
p3564
S'execute_on'
p3565
sS'cpp_type'
p3566
S'MooseEnum'
p3567
sS'default'
p3568
S'residual'
p3569
sS'description'
p3570
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p3571
sS'required'
p3572
I00
sS'options'
p3573
S'initial residual jacobian timestep timestep_begin custom'
p3574
sS'group_name'
p3575
Nsa(dp3576
S'description'
p3577
S'The lower bound for the variable\n'
p3578
sS'cpp_type'
p3579
S'double'
p3580
sS'default'
p3581
g3
sS'name'
p3582
S'lower'
p3583
sS'required'
p3584
I00
sS'group_name'
p3585
Nsa(dp3586
S'description'
p3587
S'The seed for the master random number generator\n'
p3588
sS'cpp_type'
p3589
S'unsigned int'
p3590
sS'default'
p3591
S'0'
p3592
sS'name'
p3593
S'seed'
p3594
sS'required'
p3595
I00
sS'group_name'
p3596
S'Advanced'
p3597
sa(dp3598
S'description'
p3599
g3
sS'cpp_type'
p3600
S'std::string'
p3601
sS'default'
p3602
S'BoundsAux'
p3603
sS'name'
p3604
S'type'
p3605
sS'required'
p3606
I00
sS'group_name'
p3607
Nsa(dp3608
S'description'
p3609
S'The upper bound for the variable\n'
p3610
sS'cpp_type'
p3611
S'double'
p3612
sS'default'
p3613
g3
sS'name'
p3614
S'upper'
p3615
sS'required'
p3616
I00
sS'group_name'
p3617
Nsa(dp3618
S'description'
p3619
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3620
sS'cpp_type'
p3621
S'bool'
p3622
sS'default'
p3623
S'0'
p3624
sS'name'
p3625
S'use_displaced_mesh'
p3626
sS'required'
p3627
I00
sS'group_name'
p3628
S'Advanced'
p3629
sa(dp3630
S'description'
p3631
S'The name of the variable that this object applies to\n'
p3632
sS'cpp_type'
p3633
S'AuxVariableName'
p3634
sS'default'
p3635
g3
sS'name'
p3636
S'variable'
p3637
sS'required'
p3638
I01
sS'group_name'
p3639
NsasS'name'
p3640
S'/AuxKernels/BoundsAux'
p3641
sa(dp3642
S'description'
p3643
g3
sS'type'
p3644
NsS'subblocks'
p3645
NsS'parameters'
p3646
(lp3647
(dp3648
S'description'
p3649
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3650
sS'cpp_type'
p3651
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3652
sS'default'
p3653
g3
sS'name'
p3654
S'block'
p3655
sS'required'
p3656
I00
sS'group_name'
p3657
Nsa(dp3658
S'description'
p3659
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3660
sS'cpp_type'
p3661
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3662
sS'default'
p3663
g3
sS'name'
p3664
S'boundary'
p3665
sS'required'
p3666
I00
sS'group_name'
p3667
Nsa(dp3668
S'name'
p3669
S'execute_on'
p3670
sS'cpp_type'
p3671
S'MooseEnum'
p3672
sS'default'
p3673
S'residual'
p3674
sS'description'
p3675
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p3676
sS'required'
p3677
I00
sS'options'
p3678
S'initial residual jacobian timestep timestep_begin custom'
p3679
sS'group_name'
p3680
Nsa(dp3681
S'description'
p3682
S'The seed for the master random number generator\n'
p3683
sS'cpp_type'
p3684
S'unsigned int'
p3685
sS'default'
p3686
S'0'
p3687
sS'name'
p3688
S'seed'
p3689
sS'required'
p3690
I00
sS'group_name'
p3691
S'Advanced'
p3692
sa(dp3693
S'description'
p3694
g3
sS'cpp_type'
p3695
S'std::string'
p3696
sS'default'
p3697
S'ConstantAux'
p3698
sS'name'
p3699
S'type'
p3700
sS'required'
p3701
I00
sS'group_name'
p3702
Nsa(dp3703
S'description'
p3704
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3705
sS'cpp_type'
p3706
S'bool'
p3707
sS'default'
p3708
S'0'
p3709
sS'name'
p3710
S'use_displaced_mesh'
p3711
sS'required'
p3712
I00
sS'group_name'
p3713
S'Advanced'
p3714
sa(dp3715
S'description'
p3716
S'Some constant value that can be read from the input file\n'
p3717
sS'cpp_type'
p3718
S'double'
p3719
sS'default'
p3720
S'0'
p3721
sS'name'
p3722
S'value'
p3723
sS'required'
p3724
I00
sS'group_name'
p3725
Nsa(dp3726
S'description'
p3727
S'The name of the variable that this object applies to\n'
p3728
sS'cpp_type'
p3729
S'AuxVariableName'
p3730
sS'default'
p3731
g3
sS'name'
p3732
S'variable'
p3733
sS'required'
p3734
I01
sS'group_name'
p3735
NsasS'name'
p3736
S'/AuxKernels/ConstantAux'
p3737
sa(dp3738
S'description'
p3739
g3
sS'type'
p3740
NsS'subblocks'
p3741
NsS'parameters'
p3742
(lp3743
(dp3744
S'description'
p3745
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3746
sS'cpp_type'
p3747
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3748
sS'default'
p3749
g3
sS'name'
p3750
S'block'
p3751
sS'required'
p3752
I00
sS'group_name'
p3753
Nsa(dp3754
S'description'
p3755
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3756
sS'cpp_type'
p3757
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3758
sS'default'
p3759
g3
sS'name'
p3760
S'boundary'
p3761
sS'required'
p3762
I00
sS'group_name'
p3763
Nsa(dp3764
S'description'
p3765
S'The variable that is being debugged.\n'
p3766
sS'cpp_type'
p3767
S'NonlinearVariableName'
p3768
sS'default'
p3769
g3
sS'name'
p3770
S'debug_variable'
p3771
sS'required'
p3772
I01
sS'group_name'
p3773
Nsa(dp3774
S'name'
p3775
S'execute_on'
p3776
sS'cpp_type'
p3777
S'MooseEnum'
p3778
sS'default'
p3779
S'residual'
p3780
sS'description'
p3781
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p3782
sS'required'
p3783
I00
sS'options'
p3784
S'initial residual jacobian timestep timestep_begin custom'
p3785
sS'group_name'
p3786
Nsa(dp3787
S'description'
p3788
S'The seed for the master random number generator\n'
p3789
sS'cpp_type'
p3790
S'unsigned int'
p3791
sS'default'
p3792
S'0'
p3793
sS'name'
p3794
S'seed'
p3795
sS'required'
p3796
I00
sS'group_name'
p3797
S'Advanced'
p3798
sa(dp3799
S'description'
p3800
g3
sS'cpp_type'
p3801
S'std::string'
p3802
sS'default'
p3803
S'DebugResidualAux'
p3804
sS'name'
p3805
S'type'
p3806
sS'required'
p3807
I00
sS'group_name'
p3808
Nsa(dp3809
S'description'
p3810
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3811
sS'cpp_type'
p3812
S'bool'
p3813
sS'default'
p3814
S'0'
p3815
sS'name'
p3816
S'use_displaced_mesh'
p3817
sS'required'
p3818
I00
sS'group_name'
p3819
S'Advanced'
p3820
sa(dp3821
S'description'
p3822
S'The name of the variable that this object applies to\n'
p3823
sS'cpp_type'
p3824
S'AuxVariableName'
p3825
sS'default'
p3826
g3
sS'name'
p3827
S'variable'
p3828
sS'required'
p3829
I01
sS'group_name'
p3830
NsasS'name'
p3831
S'/AuxKernels/DebugResidualAux'
p3832
sa(dp3833
S'description'
p3834
g3
sS'type'
p3835
NsS'subblocks'
p3836
NsS'parameters'
p3837
(lp3838
(dp3839
S'description'
p3840
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3841
sS'cpp_type'
p3842
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3843
sS'default'
p3844
g3
sS'name'
p3845
S'block'
p3846
sS'required'
p3847
I00
sS'group_name'
p3848
Nsa(dp3849
S'description'
p3850
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3851
sS'cpp_type'
p3852
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3853
sS'default'
p3854
g3
sS'name'
p3855
S'boundary'
p3856
sS'required'
p3857
I00
sS'group_name'
p3858
Nsa(dp3859
S'name'
p3860
S'execute_on'
p3861
sS'cpp_type'
p3862
S'MooseEnum'
p3863
sS'default'
p3864
S'residual'
p3865
sS'description'
p3866
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p3867
sS'required'
p3868
I00
sS'options'
p3869
S'initial residual jacobian timestep timestep_begin custom'
p3870
sS'group_name'
p3871
Nsa(dp3872
S'description'
p3873
S'The function to use as the value\n'
p3874
sS'cpp_type'
p3875
S'FunctionName'
p3876
sS'default'
p3877
g3
sS'name'
p3878
S'function'
p3879
sS'required'
p3880
I01
sS'group_name'
p3881
Nsa(dp3882
S'description'
p3883
S'The seed for the master random number generator\n'
p3884
sS'cpp_type'
p3885
S'unsigned int'
p3886
sS'default'
p3887
S'0'
p3888
sS'name'
p3889
S'seed'
p3890
sS'required'
p3891
I00
sS'group_name'
p3892
S'Advanced'
p3893
sa(dp3894
S'description'
p3895
g3
sS'cpp_type'
p3896
S'std::string'
p3897
sS'default'
p3898
S'FunctionAux'
p3899
sS'name'
p3900
S'type'
p3901
sS'required'
p3902
I00
sS'group_name'
p3903
Nsa(dp3904
S'description'
p3905
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3906
sS'cpp_type'
p3907
S'bool'
p3908
sS'default'
p3909
S'0'
p3910
sS'name'
p3911
S'use_displaced_mesh'
p3912
sS'required'
p3913
I00
sS'group_name'
p3914
S'Advanced'
p3915
sa(dp3916
S'description'
p3917
S'The name of the variable that this object applies to\n'
p3918
sS'cpp_type'
p3919
S'AuxVariableName'
p3920
sS'default'
p3921
g3
sS'name'
p3922
S'variable'
p3923
sS'required'
p3924
I01
sS'group_name'
p3925
NsasS'name'
p3926
S'/AuxKernels/FunctionAux'
p3927
sa(dp3928
S'description'
p3929
g3
sS'type'
p3930
NsS'subblocks'
p3931
NsS'parameters'
p3932
(lp3933
(dp3934
S'description'
p3935
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3936
sS'cpp_type'
p3937
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3938
sS'default'
p3939
g3
sS'name'
p3940
S'block'
p3941
sS'required'
p3942
I00
sS'group_name'
p3943
Nsa(dp3944
S'description'
p3945
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3946
sS'cpp_type'
p3947
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3948
sS'default'
p3949
g3
sS'name'
p3950
S'boundary'
p3951
sS'required'
p3952
I00
sS'group_name'
p3953
Nsa(dp3954
S'name'
p3955
S'execute_on'
p3956
sS'cpp_type'
p3957
S'MooseEnum'
p3958
sS'default'
p3959
S'residual'
p3960
sS'description'
p3961
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p3962
sS'required'
p3963
I00
sS'options'
p3964
S'initial residual jacobian timestep timestep_begin custom'
p3965
sS'group_name'
p3966
Nsa(dp3967
S'description'
p3968
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p3969
sS'cpp_type'
p3970
S'double'
p3971
sS'default'
p3972
g3
sS'name'
p3973
S'normal_smoothing_distance'
p3974
sS'required'
p3975
I00
sS'group_name'
p3976
Nsa(dp3977
S'description'
p3978
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p3979
sS'cpp_type'
p3980
S'std::string'
p3981
sS'default'
p3982
g3
sS'name'
p3983
S'normal_smoothing_method'
p3984
sS'required'
p3985
I00
sS'group_name'
p3986
Nsa(dp3987
S'name'
p3988
S'order'
p3989
sS'cpp_type'
p3990
S'MooseEnum'
p3991
sS'default'
p3992
S'FIRST'
p3993
sS'description'
p3994
S'The finite element order\n'
p3995
sS'required'
p3996
I00
sS'options'
p3997
S'FIRST SECOND THIRD FOURTH'
p3998
sS'group_name'
p3999
Nsa(dp4000
S'description'
p4001
S'The boundary on the other side of a gap.\n'
p4002
sS'cpp_type'
p4003
S'BoundaryName'
p4004
sS'default'
p4005
g3
sS'name'
p4006
S'paired_boundary'
p4007
sS'required'
p4008
I01
sS'group_name'
p4009
Nsa(dp4010
S'description'
p4011
S'The variable to get the value of.\n'
p4012
sS'cpp_type'
p4013
S'VariableName'
p4014
sS'default'
p4015
g3
sS'name'
p4016
S'paired_variable'
p4017
sS'required'
p4018
I01
sS'group_name'
p4019
Nsa(dp4020
S'description'
p4021
S'The seed for the master random number generator\n'
p4022
sS'cpp_type'
p4023
S'unsigned int'
p4024
sS'default'
p4025
S'0'
p4026
sS'name'
p4027
S'seed'
p4028
sS'required'
p4029
I00
sS'group_name'
p4030
S'Advanced'
p4031
sa(dp4032
S'description'
p4033
S'Tangential distance to extend edges of contact surfaces\n'
p4034
sS'cpp_type'
p4035
S'double'
p4036
sS'default'
p4037
g3
sS'name'
p4038
S'tangential_tolerance'
p4039
sS'required'
p4040
I00
sS'group_name'
p4041
Nsa(dp4042
S'description'
p4043
g3
sS'cpp_type'
p4044
S'std::string'
p4045
sS'default'
p4046
S'GapValueAux'
p4047
sS'name'
p4048
S'type'
p4049
sS'required'
p4050
I00
sS'group_name'
p4051
Nsa(dp4052
S'description'
p4053
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4054
sS'cpp_type'
p4055
S'bool'
p4056
sS'default'
p4057
S'1'
p4058
sS'name'
p4059
S'use_displaced_mesh'
p4060
sS'required'
p4061
I00
sS'group_name'
p4062
S'Advanced'
p4063
sa(dp4064
S'description'
p4065
S'The name of the variable that this object applies to\n'
p4066
sS'cpp_type'
p4067
S'AuxVariableName'
p4068
sS'default'
p4069
g3
sS'name'
p4070
S'variable'
p4071
sS'required'
p4072
I01
sS'group_name'
p4073
Nsa(dp4074
S'description'
p4075
S'Whether to output warning messages concerning nodes not being found\n'
p4076
sS'cpp_type'
p4077
S'bool'
p4078
sS'default'
p4079
S'0'
p4080
sS'name'
p4081
S'warnings'
p4082
sS'required'
p4083
I00
sS'group_name'
p4084
NsasS'name'
p4085
S'/AuxKernels/GapValueAux'
p4086
sa(dp4087
S'description'
p4088
g3
sS'type'
p4089
NsS'subblocks'
p4090
NsS'parameters'
p4091
(lp4092
(dp4093
S'description'
p4094
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4095
sS'cpp_type'
p4096
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4097
sS'default'
p4098
g3
sS'name'
p4099
S'block'
p4100
sS'required'
p4101
I00
sS'group_name'
p4102
Nsa(dp4103
S'description'
p4104
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4105
sS'cpp_type'
p4106
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4107
sS'default'
p4108
g3
sS'name'
p4109
S'boundary'
p4110
sS'required'
p4111
I00
sS'group_name'
p4112
Nsa(dp4113
S'name'
p4114
S'execute_on'
p4115
sS'cpp_type'
p4116
S'MooseEnum'
p4117
sS'default'
p4118
S'residual'
p4119
sS'description'
p4120
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p4121
sS'required'
p4122
I00
sS'options'
p4123
S'initial residual jacobian timestep timestep_begin custom'
p4124
sS'group_name'
p4125
Nsa(dp4126
S'description'
p4127
S'The factor by which to multiply your material property for visualization\n'
p4128
sS'cpp_type'
p4129
S'double'
p4130
sS'default'
p4131
S'1'
p4132
sS'name'
p4133
S'factor'
p4134
sS'required'
p4135
I00
sS'group_name'
p4136
Nsa(dp4137
S'description'
p4138
S'The offset to add to your material property for visualization\n'
p4139
sS'cpp_type'
p4140
S'double'
p4141
sS'default'
p4142
S'0'
p4143
sS'name'
p4144
S'offset'
p4145
sS'required'
p4146
I00
sS'group_name'
p4147
Nsa(dp4148
S'description'
p4149
S'The scalar material property name\n'
p4150
sS'cpp_type'
p4151
S'std::string'
p4152
sS'default'
p4153
g3
sS'name'
p4154
S'property'
p4155
sS'required'
p4156
I01
sS'group_name'
p4157
Nsa(dp4158
S'description'
p4159
S'The seed for the master random number generator\n'
p4160
sS'cpp_type'
p4161
S'unsigned int'
p4162
sS'default'
p4163
S'0'
p4164
sS'name'
p4165
S'seed'
p4166
sS'required'
p4167
I00
sS'group_name'
p4168
S'Advanced'
p4169
sa(dp4170
S'description'
p4171
g3
sS'cpp_type'
p4172
S'std::string'
p4173
sS'default'
p4174
S'MaterialRealAux'
p4175
sS'name'
p4176
S'type'
p4177
sS'required'
p4178
I00
sS'group_name'
p4179
Nsa(dp4180
S'description'
p4181
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4182
sS'cpp_type'
p4183
S'bool'
p4184
sS'default'
p4185
S'0'
p4186
sS'name'
p4187
S'use_displaced_mesh'
p4188
sS'required'
p4189
I00
sS'group_name'
p4190
S'Advanced'
p4191
sa(dp4192
S'description'
p4193
S'The name of the variable that this object applies to\n'
p4194
sS'cpp_type'
p4195
S'AuxVariableName'
p4196
sS'default'
p4197
g3
sS'name'
p4198
S'variable'
p4199
sS'required'
p4200
I01
sS'group_name'
p4201
NsasS'name'
p4202
S'/AuxKernels/MaterialRealAux'
p4203
sa(dp4204
S'description'
p4205
g3
sS'type'
p4206
NsS'subblocks'
p4207
NsS'parameters'
p4208
(lp4209
(dp4210
S'description'
p4211
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4212
sS'cpp_type'
p4213
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4214
sS'default'
p4215
g3
sS'name'
p4216
S'block'
p4217
sS'required'
p4218
I00
sS'group_name'
p4219
Nsa(dp4220
S'description'
p4221
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4222
sS'cpp_type'
p4223
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4224
sS'default'
p4225
g3
sS'name'
p4226
S'boundary'
p4227
sS'required'
p4228
I00
sS'group_name'
p4229
Nsa(dp4230
S'description'
p4231
S'The column component to consider for this kernel\n'
p4232
sS'cpp_type'
p4233
S'unsigned int'
p4234
sS'default'
p4235
S'0'
p4236
sS'name'
p4237
S'column'
p4238
sS'required'
p4239
I00
sS'group_name'
p4240
Nsa(dp4241
S'name'
p4242
S'execute_on'
p4243
sS'cpp_type'
p4244
S'MooseEnum'
p4245
sS'default'
p4246
S'residual'
p4247
sS'description'
p4248
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p4249
sS'required'
p4250
I00
sS'options'
p4251
S'initial residual jacobian timestep timestep_begin custom'
p4252
sS'group_name'
p4253
Nsa(dp4254
S'description'
p4255
S'The factor by which to multiply your material property for visualization\n'
p4256
sS'cpp_type'
p4257
S'double'
p4258
sS'default'
p4259
S'1'
p4260
sS'name'
p4261
S'factor'
p4262
sS'required'
p4263
I00
sS'group_name'
p4264
Nsa(dp4265
S'description'
p4266
S'The offset to add to your material property for visualization\n'
p4267
sS'cpp_type'
p4268
S'double'
p4269
sS'default'
p4270
S'0'
p4271
sS'name'
p4272
S'offset'
p4273
sS'required'
p4274
I00
sS'group_name'
p4275
Nsa(dp4276
S'description'
p4277
S'The scalar material property name\n'
p4278
sS'cpp_type'
p4279
S'std::string'
p4280
sS'default'
p4281
g3
sS'name'
p4282
S'property'
p4283
sS'required'
p4284
I01
sS'group_name'
p4285
Nsa(dp4286
S'description'
p4287
S'The row component to consider for this kernel\n'
p4288
sS'cpp_type'
p4289
S'unsigned int'
p4290
sS'default'
p4291
S'0'
p4292
sS'name'
p4293
S'row'
p4294
sS'required'
p4295
I00
sS'group_name'
p4296
Nsa(dp4297
S'description'
p4298
S'The seed for the master random number generator\n'
p4299
sS'cpp_type'
p4300
S'unsigned int'
p4301
sS'default'
p4302
S'0'
p4303
sS'name'
p4304
S'seed'
p4305
sS'required'
p4306
I00
sS'group_name'
p4307
S'Advanced'
p4308
sa(dp4309
S'description'
p4310
g3
sS'cpp_type'
p4311
S'std::string'
p4312
sS'default'
p4313
S'MaterialRealTensorValueAux'
p4314
sS'name'
p4315
S'type'
p4316
sS'required'
p4317
I00
sS'group_name'
p4318
Nsa(dp4319
S'description'
p4320
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4321
sS'cpp_type'
p4322
S'bool'
p4323
sS'default'
p4324
S'0'
p4325
sS'name'
p4326
S'use_displaced_mesh'
p4327
sS'required'
p4328
I00
sS'group_name'
p4329
S'Advanced'
p4330
sa(dp4331
S'description'
p4332
S'The name of the variable that this object applies to\n'
p4333
sS'cpp_type'
p4334
S'AuxVariableName'
p4335
sS'default'
p4336
g3
sS'name'
p4337
S'variable'
p4338
sS'required'
p4339
I01
sS'group_name'
p4340
NsasS'name'
p4341
S'/AuxKernels/MaterialRealTensorValueAux'
p4342
sa(dp4343
S'description'
p4344
g3
sS'type'
p4345
NsS'subblocks'
p4346
NsS'parameters'
p4347
(lp4348
(dp4349
S'description'
p4350
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4351
sS'cpp_type'
p4352
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4353
sS'default'
p4354
g3
sS'name'
p4355
S'block'
p4356
sS'required'
p4357
I00
sS'group_name'
p4358
Nsa(dp4359
S'description'
p4360
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4361
sS'cpp_type'
p4362
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4363
sS'default'
p4364
g3
sS'name'
p4365
S'boundary'
p4366
sS'required'
p4367
I00
sS'group_name'
p4368
Nsa(dp4369
S'description'
p4370
S'The vector component to consider for this kernel\n'
p4371
sS'cpp_type'
p4372
S'unsigned int'
p4373
sS'default'
p4374
S'0'
p4375
sS'name'
p4376
S'component'
p4377
sS'required'
p4378
I00
sS'group_name'
p4379
Nsa(dp4380
S'name'
p4381
S'execute_on'
p4382
sS'cpp_type'
p4383
S'MooseEnum'
p4384
sS'default'
p4385
S'residual'
p4386
sS'description'
p4387
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p4388
sS'required'
p4389
I00
sS'options'
p4390
S'initial residual jacobian timestep timestep_begin custom'
p4391
sS'group_name'
p4392
Nsa(dp4393
S'description'
p4394
S'The factor by which to multiply your material property for visualization\n'
p4395
sS'cpp_type'
p4396
S'double'
p4397
sS'default'
p4398
S'1'
p4399
sS'name'
p4400
S'factor'
p4401
sS'required'
p4402
I00
sS'group_name'
p4403
Nsa(dp4404
S'description'
p4405
S'The offset to add to your material property for visualization\n'
p4406
sS'cpp_type'
p4407
S'double'
p4408
sS'default'
p4409
S'0'
p4410
sS'name'
p4411
S'offset'
p4412
sS'required'
p4413
I00
sS'group_name'
p4414
Nsa(dp4415
S'description'
p4416
S'The scalar material property name\n'
p4417
sS'cpp_type'
p4418
S'std::string'
p4419
sS'default'
p4420
g3
sS'name'
p4421
S'property'
p4422
sS'required'
p4423
I01
sS'group_name'
p4424
Nsa(dp4425
S'description'
p4426
S'The seed for the master random number generator\n'
p4427
sS'cpp_type'
p4428
S'unsigned int'
p4429
sS'default'
p4430
S'0'
p4431
sS'name'
p4432
S'seed'
p4433
sS'required'
p4434
I00
sS'group_name'
p4435
S'Advanced'
p4436
sa(dp4437
S'description'
p4438
g3
sS'cpp_type'
p4439
S'std::string'
p4440
sS'default'
p4441
S'MaterialRealVectorValueAux'
p4442
sS'name'
p4443
S'type'
p4444
sS'required'
p4445
I00
sS'group_name'
p4446
Nsa(dp4447
S'description'
p4448
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4449
sS'cpp_type'
p4450
S'bool'
p4451
sS'default'
p4452
S'0'
p4453
sS'name'
p4454
S'use_displaced_mesh'
p4455
sS'required'
p4456
I00
sS'group_name'
p4457
S'Advanced'
p4458
sa(dp4459
S'description'
p4460
S'The name of the variable that this object applies to\n'
p4461
sS'cpp_type'
p4462
S'AuxVariableName'
p4463
sS'default'
p4464
g3
sS'name'
p4465
S'variable'
p4466
sS'required'
p4467
I01
sS'group_name'
p4468
NsasS'name'
p4469
S'/AuxKernels/MaterialRealVectorValueAux'
p4470
sa(dp4471
S'description'
p4472
g3
sS'type'
p4473
NsS'subblocks'
p4474
NsS'parameters'
p4475
(lp4476
(dp4477
S'description'
p4478
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4479
sS'cpp_type'
p4480
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4481
sS'default'
p4482
g3
sS'name'
p4483
S'block'
p4484
sS'required'
p4485
I00
sS'group_name'
p4486
Nsa(dp4487
S'description'
p4488
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4489
sS'cpp_type'
p4490
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4491
sS'default'
p4492
g3
sS'name'
p4493
S'boundary'
p4494
sS'required'
p4495
I00
sS'group_name'
p4496
Nsa(dp4497
S'name'
p4498
S'execute_on'
p4499
sS'cpp_type'
p4500
S'MooseEnum'
p4501
sS'default'
p4502
S'residual'
p4503
sS'description'
p4504
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p4505
sS'required'
p4506
I00
sS'options'
p4507
S'initial residual jacobian timestep timestep_begin custom'
p4508
sS'group_name'
p4509
Nsa(dp4510
S'description'
p4511
S'The boundary to find the distance to.\n'
p4512
sS'cpp_type'
p4513
S'BoundaryName'
p4514
sS'default'
p4515
g3
sS'name'
p4516
S'paired_boundary'
p4517
sS'required'
p4518
I01
sS'group_name'
p4519
Nsa(dp4520
S'description'
p4521
S'The seed for the master random number generator\n'
p4522
sS'cpp_type'
p4523
S'unsigned int'
p4524
sS'default'
p4525
S'0'
p4526
sS'name'
p4527
S'seed'
p4528
sS'required'
p4529
I00
sS'group_name'
p4530
S'Advanced'
p4531
sa(dp4532
S'description'
p4533
g3
sS'cpp_type'
p4534
S'std::string'
p4535
sS'default'
p4536
S'NearestNodeDistanceAux'
p4537
sS'name'
p4538
S'type'
p4539
sS'required'
p4540
I00
sS'group_name'
p4541
Nsa(dp4542
S'description'
p4543
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4544
sS'cpp_type'
p4545
S'bool'
p4546
sS'default'
p4547
S'1'
p4548
sS'name'
p4549
S'use_displaced_mesh'
p4550
sS'required'
p4551
I00
sS'group_name'
p4552
S'Advanced'
p4553
sa(dp4554
S'description'
p4555
S'The name of the variable that this object applies to\n'
p4556
sS'cpp_type'
p4557
S'AuxVariableName'
p4558
sS'default'
p4559
g3
sS'name'
p4560
S'variable'
p4561
sS'required'
p4562
I01
sS'group_name'
p4563
NsasS'name'
p4564
S'/AuxKernels/NearestNodeDistanceAux'
p4565
sa(dp4566
S'description'
p4567
g3
sS'type'
p4568
NsS'subblocks'
p4569
NsS'parameters'
p4570
(lp4571
(dp4572
S'description'
p4573
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4574
sS'cpp_type'
p4575
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4576
sS'default'
p4577
g3
sS'name'
p4578
S'block'
p4579
sS'required'
p4580
I00
sS'group_name'
p4581
Nsa(dp4582
S'description'
p4583
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4584
sS'cpp_type'
p4585
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4586
sS'default'
p4587
g3
sS'name'
p4588
S'boundary'
p4589
sS'required'
p4590
I00
sS'group_name'
p4591
Nsa(dp4592
S'name'
p4593
S'execute_on'
p4594
sS'cpp_type'
p4595
S'MooseEnum'
p4596
sS'default'
p4597
S'residual'
p4598
sS'description'
p4599
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p4600
sS'required'
p4601
I00
sS'options'
p4602
S'initial residual jacobian timestep timestep_begin custom'
p4603
sS'group_name'
p4604
Nsa(dp4605
S'description'
p4606
S'The boundary to get the value from.\n'
p4607
sS'cpp_type'
p4608
S'BoundaryName'
p4609
sS'default'
p4610
g3
sS'name'
p4611
S'paired_boundary'
p4612
sS'required'
p4613
I01
sS'group_name'
p4614
Nsa(dp4615
S'description'
p4616
S'The variable to get the value of.\n'
p4617
sS'cpp_type'
p4618
S'std::vector<VariableName>'
p4619
sS'default'
p4620
g3
sS'name'
p4621
S'paired_variable'
p4622
sS'required'
p4623
I01
sS'group_name'
p4624
Nsa(dp4625
S'description'
p4626
S'The seed for the master random number generator\n'
p4627
sS'cpp_type'
p4628
S'unsigned int'
p4629
sS'default'
p4630
S'0'
p4631
sS'name'
p4632
S'seed'
p4633
sS'required'
p4634
I00
sS'group_name'
p4635
S'Advanced'
p4636
sa(dp4637
S'description'
p4638
g3
sS'cpp_type'
p4639
S'std::string'
p4640
sS'default'
p4641
S'NearestNodeValueAux'
p4642
sS'name'
p4643
S'type'
p4644
sS'required'
p4645
I00
sS'group_name'
p4646
Nsa(dp4647
S'description'
p4648
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4649
sS'cpp_type'
p4650
S'bool'
p4651
sS'default'
p4652
S'1'
p4653
sS'name'
p4654
S'use_displaced_mesh'
p4655
sS'required'
p4656
I00
sS'group_name'
p4657
S'Advanced'
p4658
sa(dp4659
S'description'
p4660
S'The name of the variable that this object applies to\n'
p4661
sS'cpp_type'
p4662
S'AuxVariableName'
p4663
sS'default'
p4664
g3
sS'name'
p4665
S'variable'
p4666
sS'required'
p4667
I01
sS'group_name'
p4668
NsasS'name'
p4669
S'/AuxKernels/NearestNodeValueAux'
p4670
sa(dp4671
S'description'
p4672
g3
sS'type'
p4673
NsS'subblocks'
p4674
NsS'parameters'
p4675
(lp4676
(dp4677
S'description'
p4678
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4679
sS'cpp_type'
p4680
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4681
sS'default'
p4682
g3
sS'name'
p4683
S'block'
p4684
sS'required'
p4685
I00
sS'group_name'
p4686
Nsa(dp4687
S'description'
p4688
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4689
sS'cpp_type'
p4690
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4691
sS'default'
p4692
g3
sS'name'
p4693
S'boundary'
p4694
sS'required'
p4695
I00
sS'group_name'
p4696
Nsa(dp4697
S'description'
p4698
S'The NodalFloodCount UserObject to get values from.\n'
p4699
sS'cpp_type'
p4700
S'UserObjectName'
p4701
sS'default'
p4702
g3
sS'name'
p4703
S'bubble_object'
p4704
sS'required'
p4705
I01
sS'group_name'
p4706
Nsa(dp4707
S'name'
p4708
S'execute_on'
p4709
sS'cpp_type'
p4710
S'MooseEnum'
p4711
sS'default'
p4712
S'residual'
p4713
sS'description'
p4714
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p4715
sS'required'
p4716
I00
sS'options'
p4717
S'initial residual jacobian timestep timestep_begin custom'
p4718
sS'group_name'
p4719
Nsa(dp4720
S'name'
p4721
S'field_display'
p4722
sS'cpp_type'
p4723
S'MooseEnum'
p4724
sS'default'
p4725
S'UNIQUE_REGION'
p4726
sS'description'
p4727
S'Determines how the auxilary field should be colored. (UNIQUE_REGION and VARIABLE_COLORING are nodal, CENTROID is elemental, default: UNIQUE_REGION)\n'
p4728
sS'required'
p4729
I00
sS'options'
p4730
S'UNIQUE_REGION VARIABLE_COLORING ACTIVE_BOUNDS CENTROID'
p4731
sS'group_name'
p4732
Nsa(dp4733
S'description'
p4734
S'The index of which map to retrieve values from when using NodalFloodCount with multiple maps.\n'
p4735
sS'cpp_type'
p4736
S'unsigned int'
p4737
sS'default'
p4738
S'0'
p4739
sS'name'
p4740
S'map_index'
p4741
sS'required'
p4742
I00
sS'group_name'
p4743
Nsa(dp4744
S'description'
p4745
S'The seed for the master random number generator\n'
p4746
sS'cpp_type'
p4747
S'unsigned int'
p4748
sS'default'
p4749
S'0'
p4750
sS'name'
p4751
S'seed'
p4752
sS'required'
p4753
I00
sS'group_name'
p4754
S'Advanced'
p4755
sa(dp4756
S'description'
p4757
g3
sS'cpp_type'
p4758
S'std::string'
p4759
sS'default'
p4760
S'NodalFloodCountAux'
p4761
sS'name'
p4762
S'type'
p4763
sS'required'
p4764
I00
sS'group_name'
p4765
Nsa(dp4766
S'description'
p4767
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4768
sS'cpp_type'
p4769
S'bool'
p4770
sS'default'
p4771
S'0'
p4772
sS'name'
p4773
S'use_displaced_mesh'
p4774
sS'required'
p4775
I00
sS'group_name'
p4776
S'Advanced'
p4777
sa(dp4778
S'description'
p4779
S'The name of the variable that this object applies to\n'
p4780
sS'cpp_type'
p4781
S'AuxVariableName'
p4782
sS'default'
p4783
g3
sS'name'
p4784
S'variable'
p4785
sS'required'
p4786
I01
sS'group_name'
p4787
NsasS'name'
p4788
S'/AuxKernels/NodalFloodCountAux'
p4789
sa(dp4790
S'description'
p4791
g3
sS'type'
p4792
NsS'subblocks'
p4793
NsS'parameters'
p4794
(lp4795
(dp4796
S'description'
p4797
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4798
sS'cpp_type'
p4799
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4800
sS'default'
p4801
g3
sS'name'
p4802
S'block'
p4803
sS'required'
p4804
I00
sS'group_name'
p4805
Nsa(dp4806
S'description'
p4807
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4808
sS'cpp_type'
p4809
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4810
sS'default'
p4811
g3
sS'name'
p4812
S'boundary'
p4813
sS'required'
p4814
I00
sS'group_name'
p4815
Nsa(dp4816
S'name'
p4817
S'execute_on'
p4818
sS'cpp_type'
p4819
S'MooseEnum'
p4820
sS'default'
p4821
S'residual'
p4822
sS'description'
p4823
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p4824
sS'required'
p4825
I00
sS'options'
p4826
S'initial residual jacobian timestep timestep_begin custom'
p4827
sS'group_name'
p4828
Nsa(dp4829
S'description'
p4830
S'The normalization factor\n'
p4831
sS'cpp_type'
p4832
S'double'
p4833
sS'default'
p4834
S'1'
p4835
sS'name'
p4836
S'normal_factor'
p4837
sS'required'
p4838
I00
sS'group_name'
p4839
Nsa(dp4840
S'description'
p4841
S'The postprocessor on the source\n'
p4842
sS'cpp_type'
p4843
S'PostprocessorName'
p4844
sS'default'
p4845
g3
sS'name'
p4846
S'normalization'
p4847
sS'required'
p4848
I01
sS'group_name'
p4849
Nsa(dp4850
S'description'
p4851
S'The seed for the master random number generator\n'
p4852
sS'cpp_type'
p4853
S'unsigned int'
p4854
sS'default'
p4855
S'0'
p4856
sS'name'
p4857
S'seed'
p4858
sS'required'
p4859
I00
sS'group_name'
p4860
S'Advanced'
p4861
sa(dp4862
S'description'
p4863
S'The variable to be normalized\n'
p4864
sS'cpp_type'
p4865
S'std::vector<VariableName>'
p4866
sS'default'
p4867
g3
sS'name'
p4868
S'source_variable'
p4869
sS'required'
p4870
I01
sS'group_name'
p4871
Nsa(dp4872
S'description'
p4873
g3
sS'cpp_type'
p4874
S'std::string'
p4875
sS'default'
p4876
S'NormalizationAux'
p4877
sS'name'
p4878
S'type'
p4879
sS'required'
p4880
I00
sS'group_name'
p4881
Nsa(dp4882
S'description'
p4883
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4884
sS'cpp_type'
p4885
S'bool'
p4886
sS'default'
p4887
S'0'
p4888
sS'name'
p4889
S'use_displaced_mesh'
p4890
sS'required'
p4891
I00
sS'group_name'
p4892
S'Advanced'
p4893
sa(dp4894
S'description'
p4895
S'The name of the variable that this object applies to\n'
p4896
sS'cpp_type'
p4897
S'AuxVariableName'
p4898
sS'default'
p4899
g3
sS'name'
p4900
S'variable'
p4901
sS'required'
p4902
I01
sS'group_name'
p4903
NsasS'name'
p4904
S'/AuxKernels/NormalizationAux'
p4905
sa(dp4906
S'description'
p4907
g3
sS'type'
p4908
NsS'subblocks'
p4909
NsS'parameters'
p4910
(lp4911
(dp4912
S'description'
p4913
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4914
sS'cpp_type'
p4915
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4916
sS'default'
p4917
g3
sS'name'
p4918
S'block'
p4919
sS'required'
p4920
I00
sS'group_name'
p4921
Nsa(dp4922
S'description'
p4923
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4924
sS'cpp_type'
p4925
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4926
sS'default'
p4927
g3
sS'name'
p4928
S'boundary'
p4929
sS'required'
p4930
I00
sS'group_name'
p4931
Nsa(dp4932
S'name'
p4933
S'execute_on'
p4934
sS'cpp_type'
p4935
S'MooseEnum'
p4936
sS'default'
p4937
S'residual'
p4938
sS'description'
p4939
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p4940
sS'required'
p4941
I00
sS'options'
p4942
S'initial residual jacobian timestep timestep_begin custom'
p4943
sS'group_name'
p4944
Nsa(dp4945
S'description'
p4946
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p4947
sS'cpp_type'
p4948
S'double'
p4949
sS'default'
p4950
g3
sS'name'
p4951
S'normal_smoothing_distance'
p4952
sS'required'
p4953
I00
sS'group_name'
p4954
Nsa(dp4955
S'description'
p4956
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p4957
sS'cpp_type'
p4958
S'std::string'
p4959
sS'default'
p4960
g3
sS'name'
p4961
S'normal_smoothing_method'
p4962
sS'required'
p4963
I00
sS'group_name'
p4964
Nsa(dp4965
S'name'
p4966
S'order'
p4967
sS'cpp_type'
p4968
S'MooseEnum'
p4969
sS'default'
p4970
S'FIRST'
p4971
sS'description'
p4972
S'The finite element order\n'
p4973
sS'required'
p4974
I00
sS'options'
p4975
S'FIRST SECOND THIRD FOURTH'
p4976
sS'group_name'
p4977
Nsa(dp4978
S'description'
p4979
S'The boundary to be penetrated\n'
p4980
sS'cpp_type'
p4981
S'BoundaryName'
p4982
sS'default'
p4983
g3
sS'name'
p4984
S'paired_boundary'
p4985
sS'required'
p4986
I01
sS'group_name'
p4987
Nsa(dp4988
S'description'
p4989
S'The quantity to recover from the available penetration information: distance(default), tangential_distance, normal_x, normal_y, normal_z, closest_point_x, closest_point_y, closest_point_z, element_id, side, incremental_slip_x, incremental_slip_y, incremental_slip_z, incremental_slip_magnitude, accumulated_slip, force_x, force_y, force_z, normal_force_magnitude, normal_force_x, normal_force_y, normal_force_z, tangential_force_magnitude, tangential_force_x, tangential_force_y, tangential_force_z, frictional_energy, mechanical_status\n'
p4990
sS'cpp_type'
p4991
S'std::string'
p4992
sS'default'
p4993
S'distance'
p4994
sS'name'
p4995
S'quantity'
p4996
sS'required'
p4997
I00
sS'group_name'
p4998
Nsa(dp4999
S'description'
p5000
S'The seed for the master random number generator\n'
p5001
sS'cpp_type'
p5002
S'unsigned int'
p5003
sS'default'
p5004
S'0'
p5005
sS'name'
p5006
S'seed'
p5007
sS'required'
p5008
I00
sS'group_name'
p5009
S'Advanced'
p5010
sa(dp5011
S'description'
p5012
S'Tangential distance to extend edges of contact surfaces\n'
p5013
sS'cpp_type'
p5014
S'double'
p5015
sS'default'
p5016
g3
sS'name'
p5017
S'tangential_tolerance'
p5018
sS'required'
p5019
I00
sS'group_name'
p5020
Nsa(dp5021
S'description'
p5022
g3
sS'cpp_type'
p5023
S'std::string'
p5024
sS'default'
p5025
S'PenetrationAux'
p5026
sS'name'
p5027
S'type'
p5028
sS'required'
p5029
I00
sS'group_name'
p5030
Nsa(dp5031
S'description'
p5032
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5033
sS'cpp_type'
p5034
S'bool'
p5035
sS'default'
p5036
S'1'
p5037
sS'name'
p5038
S'use_displaced_mesh'
p5039
sS'required'
p5040
I00
sS'group_name'
p5041
S'Advanced'
p5042
sa(dp5043
S'description'
p5044
S'The name of the variable that this object applies to\n'
p5045
sS'cpp_type'
p5046
S'AuxVariableName'
p5047
sS'default'
p5048
g3
sS'name'
p5049
S'variable'
p5050
sS'required'
p5051
I01
sS'group_name'
p5052
NsasS'name'
p5053
S'/AuxKernels/PenetrationAux'
p5054
sa(dp5055
S'description'
p5056
g3
sS'type'
p5057
NsS'subblocks'
p5058
NsS'parameters'
p5059
(lp5060
(dp5061
S'description'
p5062
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5063
sS'cpp_type'
p5064
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5065
sS'default'
p5066
g3
sS'name'
p5067
S'block'
p5068
sS'required'
p5069
I00
sS'group_name'
p5070
Nsa(dp5071
S'description'
p5072
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5073
sS'cpp_type'
p5074
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5075
sS'default'
p5076
g3
sS'name'
p5077
S'boundary'
p5078
sS'required'
p5079
I00
sS'group_name'
p5080
Nsa(dp5081
S'name'
p5082
S'execute_on'
p5083
sS'cpp_type'
p5084
S'MooseEnum'
p5085
sS'default'
p5086
S'residual'
p5087
sS'description'
p5088
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p5089
sS'required'
p5090
I00
sS'options'
p5091
S'initial residual jacobian timestep timestep_begin custom'
p5092
sS'group_name'
p5093
Nsa(dp5094
S'description'
p5095
S'The seed for the master random number generator\n'
p5096
sS'cpp_type'
p5097
S'unsigned int'
p5098
sS'default'
p5099
S'0'
p5100
sS'name'
p5101
S'seed'
p5102
sS'required'
p5103
I00
sS'group_name'
p5104
S'Advanced'
p5105
sa(dp5106
S'description'
p5107
g3
sS'cpp_type'
p5108
S'std::string'
p5109
sS'default'
p5110
S'ProcessorIDAux'
p5111
sS'name'
p5112
S'type'
p5113
sS'required'
p5114
I00
sS'group_name'
p5115
Nsa(dp5116
S'description'
p5117
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5118
sS'cpp_type'
p5119
S'bool'
p5120
sS'default'
p5121
S'0'
p5122
sS'name'
p5123
S'use_displaced_mesh'
p5124
sS'required'
p5125
I00
sS'group_name'
p5126
S'Advanced'
p5127
sa(dp5128
S'description'
p5129
S'The name of the variable that this object applies to\n'
p5130
sS'cpp_type'
p5131
S'AuxVariableName'
p5132
sS'default'
p5133
g3
sS'name'
p5134
S'variable'
p5135
sS'required'
p5136
I01
sS'group_name'
p5137
NsasS'name'
p5138
S'/AuxKernels/ProcessorIDAux'
p5139
sa(dp5140
S'description'
p5141
g3
sS'type'
p5142
NsS'subblocks'
p5143
NsS'parameters'
p5144
(lp5145
(dp5146
S'description'
p5147
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5148
sS'cpp_type'
p5149
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5150
sS'default'
p5151
g3
sS'name'
p5152
S'block'
p5153
sS'required'
p5154
I00
sS'group_name'
p5155
Nsa(dp5156
S'description'
p5157
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5158
sS'cpp_type'
p5159
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5160
sS'default'
p5161
g3
sS'name'
p5162
S'boundary'
p5163
sS'required'
p5164
I00
sS'group_name'
p5165
Nsa(dp5166
S'description'
p5167
S'The downstairs of the quotient variable\n'
p5168
sS'cpp_type'
p5169
S'std::vector<VariableName>'
p5170
sS'default'
p5171
g3
sS'name'
p5172
S'denominator'
p5173
sS'required'
p5174
I00
sS'group_name'
p5175
Nsa(dp5176
S'name'
p5177
S'execute_on'
p5178
sS'cpp_type'
p5179
S'MooseEnum'
p5180
sS'default'
p5181
S'residual'
p5182
sS'description'
p5183
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p5184
sS'required'
p5185
I00
sS'options'
p5186
S'initial residual jacobian timestep timestep_begin custom'
p5187
sS'group_name'
p5188
Nsa(dp5189
S'description'
p5190
S'The upstairs of the quotient variable\n'
p5191
sS'cpp_type'
p5192
S'std::vector<VariableName>'
p5193
sS'default'
p5194
g3
sS'name'
p5195
S'numerator'
p5196
sS'required'
p5197
I00
sS'group_name'
p5198
Nsa(dp5199
S'description'
p5200
S'The seed for the master random number generator\n'
p5201
sS'cpp_type'
p5202
S'unsigned int'
p5203
sS'default'
p5204
S'0'
p5205
sS'name'
p5206
S'seed'
p5207
sS'required'
p5208
I00
sS'group_name'
p5209
S'Advanced'
p5210
sa(dp5211
S'description'
p5212
g3
sS'cpp_type'
p5213
S'std::string'
p5214
sS'default'
p5215
S'QuotientAux'
p5216
sS'name'
p5217
S'type'
p5218
sS'required'
p5219
I00
sS'group_name'
p5220
Nsa(dp5221
S'description'
p5222
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5223
sS'cpp_type'
p5224
S'bool'
p5225
sS'default'
p5226
S'0'
p5227
sS'name'
p5228
S'use_displaced_mesh'
p5229
sS'required'
p5230
I00
sS'group_name'
p5231
S'Advanced'
p5232
sa(dp5233
S'description'
p5234
S'The name of the variable that this object applies to\n'
p5235
sS'cpp_type'
p5236
S'AuxVariableName'
p5237
sS'default'
p5238
g3
sS'name'
p5239
S'variable'
p5240
sS'required'
p5241
I01
sS'group_name'
p5242
NsasS'name'
p5243
S'/AuxKernels/QuotientAux'
p5244
sa(dp5245
S'description'
p5246
g3
sS'type'
p5247
NsS'subblocks'
p5248
NsS'parameters'
p5249
(lp5250
(dp5251
S'description'
p5252
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5253
sS'cpp_type'
p5254
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5255
sS'default'
p5256
g3
sS'name'
p5257
S'block'
p5258
sS'required'
p5259
I00
sS'group_name'
p5260
Nsa(dp5261
S'description'
p5262
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5263
sS'cpp_type'
p5264
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5265
sS'default'
p5266
g3
sS'name'
p5267
S'boundary'
p5268
sS'required'
p5269
I00
sS'group_name'
p5270
Nsa(dp5271
S'name'
p5272
S'execute_on'
p5273
sS'cpp_type'
p5274
S'MooseEnum'
p5275
sS'default'
p5276
S'residual'
p5277
sS'description'
p5278
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p5279
sS'required'
p5280
I00
sS'options'
p5281
S'initial residual jacobian timestep timestep_begin custom'
p5282
sS'group_name'
p5283
Nsa(dp5284
S'description'
p5285
S'The seed for the master random number generator\n'
p5286
sS'cpp_type'
p5287
S'unsigned int'
p5288
sS'default'
p5289
S'0'
p5290
sS'name'
p5291
S'seed'
p5292
sS'required'
p5293
I00
sS'group_name'
p5294
S'Advanced'
p5295
sa(dp5296
S'description'
p5297
g3
sS'cpp_type'
p5298
S'std::string'
p5299
sS'default'
p5300
S'SelfAux'
p5301
sS'name'
p5302
S'type'
p5303
sS'required'
p5304
I00
sS'group_name'
p5305
Nsa(dp5306
S'description'
p5307
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5308
sS'cpp_type'
p5309
S'bool'
p5310
sS'default'
p5311
S'0'
p5312
sS'name'
p5313
S'use_displaced_mesh'
p5314
sS'required'
p5315
I00
sS'group_name'
p5316
S'Advanced'
p5317
sa(dp5318
S'description'
p5319
S'The name of the variable that this object applies to\n'
p5320
sS'cpp_type'
p5321
S'AuxVariableName'
p5322
sS'default'
p5323
g3
sS'name'
p5324
S'variable'
p5325
sS'required'
p5326
I01
sS'group_name'
p5327
NsasS'name'
p5328
S'/AuxKernels/SelfAux'
p5329
sa(dp5330
S'description'
p5331
g3
sS'type'
p5332
NsS'subblocks'
p5333
NsS'parameters'
p5334
(lp5335
(dp5336
S'description'
p5337
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p5338
sS'cpp_type'
p5339
S'double'
p5340
sS'default'
p5341
S'0'
p5342
sS'name'
p5343
S'add_factor'
p5344
sS'required'
p5345
I00
sS'group_name'
p5346
Nsa(dp5347
S'description'
p5348
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5349
sS'cpp_type'
p5350
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5351
sS'default'
p5352
g3
sS'name'
p5353
S'block'
p5354
sS'required'
p5355
I00
sS'group_name'
p5356
Nsa(dp5357
S'description'
p5358
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5359
sS'cpp_type'
p5360
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5361
sS'default'
p5362
g3
sS'name'
p5363
S'boundary'
p5364
sS'required'
p5365
I00
sS'group_name'
p5366
Nsa(dp5367
S'description'
p5368
S'If true the meshes must be the same and then the values are simply copied over.\n'
p5369
sS'cpp_type'
p5370
S'bool'
p5371
sS'default'
p5372
S'0'
p5373
sS'name'
p5374
S'direct'
p5375
sS'required'
p5376
I00
sS'group_name'
p5377
Nsa(dp5378
S'name'
p5379
S'execute_on'
p5380
sS'cpp_type'
p5381
S'MooseEnum'
p5382
sS'default'
p5383
S'residual'
p5384
sS'description'
p5385
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p5386
sS'required'
p5387
I00
sS'options'
p5388
S'initial residual jacobian timestep timestep_begin custom'
p5389
sS'group_name'
p5390
Nsa(dp5391
S'description'
p5392
S'The name of the variable to extract from the file\n'
p5393
sS'cpp_type'
p5394
S'std::string'
p5395
sS'default'
p5396
g3
sS'name'
p5397
S'from_variable'
p5398
sS'required'
p5399
I00
sS'group_name'
p5400
Nsa(dp5401
S'description'
p5402
S"Scale factor (a)  to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p5403
sS'cpp_type'
p5404
S'double'
p5405
sS'default'
p5406
S'1'
p5407
sS'name'
p5408
S'scale_factor'
p5409
sS'required'
p5410
I00
sS'group_name'
p5411
Nsa(dp5412
S'description'
p5413
S'The seed for the master random number generator\n'
p5414
sS'cpp_type'
p5415
S'unsigned int'
p5416
sS'default'
p5417
S'0'
p5418
sS'name'
p5419
S'seed'
p5420
sS'required'
p5421
I00
sS'group_name'
p5422
S'Advanced'
p5423
sa(dp5424
S'description'
p5425
S'The name of the SolutionUserObject\n'
p5426
sS'cpp_type'
p5427
S'UserObjectName'
p5428
sS'default'
p5429
g3
sS'name'
p5430
S'solution'
p5431
sS'required'
p5432
I01
sS'group_name'
p5433
Nsa(dp5434
S'description'
p5435
g3
sS'cpp_type'
p5436
S'std::string'
p5437
sS'default'
p5438
S'SolutionAux'
p5439
sS'name'
p5440
S'type'
p5441
sS'required'
p5442
I00
sS'group_name'
p5443
Nsa(dp5444
S'description'
p5445
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5446
sS'cpp_type'
p5447
S'bool'
p5448
sS'default'
p5449
S'0'
p5450
sS'name'
p5451
S'use_displaced_mesh'
p5452
sS'required'
p5453
I00
sS'group_name'
p5454
S'Advanced'
p5455
sa(dp5456
S'description'
p5457
S'The name of the variable that this object applies to\n'
p5458
sS'cpp_type'
p5459
S'AuxVariableName'
p5460
sS'default'
p5461
g3
sS'name'
p5462
S'variable'
p5463
sS'required'
p5464
I01
sS'group_name'
p5465
NsasS'name'
p5466
S'/AuxKernels/SolutionAux'
p5467
sa(dp5468
S'description'
p5469
g3
sS'type'
p5470
NsS'subblocks'
p5471
NsS'parameters'
p5472
(lp5473
(dp5474
S'description'
p5475
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5476
sS'cpp_type'
p5477
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5478
sS'default'
p5479
g3
sS'name'
p5480
S'block'
p5481
sS'required'
p5482
I00
sS'group_name'
p5483
Nsa(dp5484
S'description'
p5485
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5486
sS'cpp_type'
p5487
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5488
sS'default'
p5489
g3
sS'name'
p5490
S'boundary'
p5491
sS'required'
p5492
I00
sS'group_name'
p5493
Nsa(dp5494
S'name'
p5495
S'execute_on'
p5496
sS'cpp_type'
p5497
S'MooseEnum'
p5498
sS'default'
p5499
S'residual'
p5500
sS'description'
p5501
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p5502
sS'required'
p5503
I00
sS'options'
p5504
S'initial residual jacobian timestep timestep_begin custom'
p5505
sS'group_name'
p5506
Nsa(dp5507
S'description'
p5508
S'The seed for the master random number generator\n'
p5509
sS'cpp_type'
p5510
S'unsigned int'
p5511
sS'default'
p5512
S'0'
p5513
sS'name'
p5514
S'seed'
p5515
sS'required'
p5516
I00
sS'group_name'
p5517
S'Advanced'
p5518
sa(dp5519
S'description'
p5520
g3
sS'cpp_type'
p5521
S'std::string'
p5522
sS'default'
p5523
S'SpatialUserObjectAux'
p5524
sS'name'
p5525
S'type'
p5526
sS'required'
p5527
I00
sS'group_name'
p5528
Nsa(dp5529
S'description'
p5530
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5531
sS'cpp_type'
p5532
S'bool'
p5533
sS'default'
p5534
S'0'
p5535
sS'name'
p5536
S'use_displaced_mesh'
p5537
sS'required'
p5538
I00
sS'group_name'
p5539
S'Advanced'
p5540
sa(dp5541
S'description'
p5542
S'The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n'
p5543
sS'cpp_type'
p5544
S'UserObjectName'
p5545
sS'default'
p5546
g3
sS'name'
p5547
S'user_object'
p5548
sS'required'
p5549
I01
sS'group_name'
p5550
Nsa(dp5551
S'description'
p5552
S'The name of the variable that this object applies to\n'
p5553
sS'cpp_type'
p5554
S'AuxVariableName'
p5555
sS'default'
p5556
g3
sS'name'
p5557
S'variable'
p5558
sS'required'
p5559
I01
sS'group_name'
p5560
NsasS'name'
p5561
S'/AuxKernels/SpatialUserObjectAux'
p5562
sa(dp5563
S'description'
p5564
g3
sS'type'
p5565
NsS'subblocks'
p5566
NsS'parameters'
p5567
(lp5568
(dp5569
S'description'
p5570
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5571
sS'cpp_type'
p5572
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5573
sS'default'
p5574
g3
sS'name'
p5575
S'block'
p5576
sS'required'
p5577
I00
sS'group_name'
p5578
Nsa(dp5579
S'description'
p5580
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5581
sS'cpp_type'
p5582
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5583
sS'default'
p5584
g3
sS'name'
p5585
S'boundary'
p5586
sS'required'
p5587
I00
sS'group_name'
p5588
Nsa(dp5589
S'name'
p5590
S'execute_on'
p5591
sS'cpp_type'
p5592
S'MooseEnum'
p5593
sS'default'
p5594
S'residual'
p5595
sS'description'
p5596
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p5597
sS'required'
p5598
I00
sS'options'
p5599
S'initial residual jacobian timestep timestep_begin custom'
p5600
sS'group_name'
p5601
Nsa(dp5602
S'description'
p5603
S'The seed for the master random number generator\n'
p5604
sS'cpp_type'
p5605
S'unsigned int'
p5606
sS'default'
p5607
S'0'
p5608
sS'name'
p5609
S'seed'
p5610
sS'required'
p5611
I00
sS'group_name'
p5612
S'Advanced'
p5613
sa(dp5614
S'description'
p5615
g3
sS'cpp_type'
p5616
S'std::string'
p5617
sS'default'
p5618
S'VectorMagnitudeAux'
p5619
sS'name'
p5620
S'type'
p5621
sS'required'
p5622
I00
sS'group_name'
p5623
Nsa(dp5624
S'description'
p5625
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5626
sS'cpp_type'
p5627
S'bool'
p5628
sS'default'
p5629
S'0'
p5630
sS'name'
p5631
S'use_displaced_mesh'
p5632
sS'required'
p5633
I00
sS'group_name'
p5634
S'Advanced'
p5635
sa(dp5636
S'description'
p5637
S'The name of the variable that this object applies to\n'
p5638
sS'cpp_type'
p5639
S'AuxVariableName'
p5640
sS'default'
p5641
g3
sS'name'
p5642
S'variable'
p5643
sS'required'
p5644
I01
sS'group_name'
p5645
Nsa(dp5646
S'description'
p5647
S'x-component of the vector\n'
p5648
sS'cpp_type'
p5649
S'std::vector<VariableName>'
p5650
sS'default'
p5651
g3
sS'name'
p5652
S'x'
p5653
sS'required'
p5654
I01
sS'group_name'
p5655
Nsa(dp5656
S'description'
p5657
S'y-component of the vector\n'
p5658
sS'cpp_type'
p5659
S'std::vector<VariableName>'
p5660
sS'default'
p5661
g3
sS'name'
p5662
S'y'
p5663
sS'required'
p5664
I00
sS'group_name'
p5665
Nsa(dp5666
S'description'
p5667
S'z-component of the vector\n'
p5668
sS'cpp_type'
p5669
S'std::vector<VariableName>'
p5670
sS'default'
p5671
g3
sS'name'
p5672
S'z'
p5673
sS'required'
p5674
I00
sS'group_name'
p5675
NsasS'name'
p5676
S'/AuxKernels/VectorMagnitudeAux'
p5677
sasS'parameters'
p5678
NsS'name'
p5679
S'/AuxKernels'
p5680
sa(dp5681
S'description'
p5682
g3
sS'type'
p5683
NsS'subblocks'
p5684
(lp5685
(dp5686
S'description'
p5687
g3
sS'type'
p5688
NsS'subblocks'
p5689
NsS'parameters'
p5690
(lp5691
(dp5692
S'description'
p5693
S'A string representing the Moose Object that will be built by this Action\n'
p5694
sS'cpp_type'
p5695
S'std::string'
p5696
sS'default'
p5697
g3
sS'name'
p5698
S'type'
p5699
sS'required'
p5700
I01
sS'group_name'
p5701
NsasS'name'
p5702
S'/AuxScalarKernels/*'
p5703
sa(dp5704
S'description'
p5705
g3
sS'type'
p5706
NsS'subblocks'
p5707
NsS'parameters'
p5708
(lp5709
(dp5710
S'description'
p5711
g3
sS'cpp_type'
p5712
S'std::string'
p5713
sS'default'
p5714
S'ConstantScalarAux'
p5715
sS'name'
p5716
S'type'
p5717
sS'required'
p5718
I00
sS'group_name'
p5719
Nsa(dp5720
S'description'
p5721
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5722
sS'cpp_type'
p5723
S'bool'
p5724
sS'default'
p5725
S'0'
p5726
sS'name'
p5727
S'use_displaced_mesh'
p5728
sS'required'
p5729
I00
sS'group_name'
p5730
S'Advanced'
p5731
sa(dp5732
S'description'
p5733
S'The value to be set to the scalar variable.\n'
p5734
sS'cpp_type'
p5735
S'double'
p5736
sS'default'
p5737
g3
sS'name'
p5738
S'value'
p5739
sS'required'
p5740
I01
sS'group_name'
p5741
Nsa(dp5742
S'description'
p5743
S'The name of the variable that this kernel operates on\n'
p5744
sS'cpp_type'
p5745
S'AuxVariableName'
p5746
sS'default'
p5747
g3
sS'name'
p5748
S'variable'
p5749
sS'required'
p5750
I01
sS'group_name'
p5751
NsasS'name'
p5752
S'/AuxScalarKernels/ConstantScalarAux'
p5753
sasS'parameters'
p5754
NsS'name'
p5755
S'/AuxScalarKernels'
p5756
sa(dp5757
S'description'
p5758
g3
sS'type'
p5759
NsS'subblocks'
p5760
(lp5761
(dp5762
S'description'
p5763
g3
sS'type'
p5764
NsS'subblocks'
p5765
(lp5766
(dp5767
S'description'
p5768
g3
sS'type'
p5769
NsS'subblocks'
p5770
(lp5771
(dp5772
S'description'
p5773
g3
sS'type'
p5774
NsS'subblocks'
p5775
(lp5776
(dp5777
S'description'
p5778
g3
sS'type'
p5779
NsS'subblocks'
p5780
NsS'parameters'
p5781
(lp5782
(dp5783
S'description'
p5784
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5785
sS'cpp_type'
p5786
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5787
sS'default'
p5788
g3
sS'name'
p5789
S'block'
p5790
sS'required'
p5791
I00
sS'group_name'
p5792
Nsa(dp5793
S'description'
p5794
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5795
sS'cpp_type'
p5796
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5797
sS'default'
p5798
g3
sS'name'
p5799
S'boundary'
p5800
sS'required'
p5801
I00
sS'group_name'
p5802
Nsa(dp5803
S'description'
p5804
S'The value of the variable inside the box\n'
p5805
sS'cpp_type'
p5806
S'double'
p5807
sS'default'
p5808
S'0'
p5809
sS'name'
p5810
S'inside'
p5811
sS'required'
p5812
I00
sS'group_name'
p5813
Nsa(dp5814
S'description'
p5815
S'The value of the variable outside the box\n'
p5816
sS'cpp_type'
p5817
S'double'
p5818
sS'default'
p5819
S'0'
p5820
sS'name'
p5821
S'outside'
p5822
sS'required'
p5823
I00
sS'group_name'
p5824
Nsa(dp5825
S'description'
p5826
g3
sS'cpp_type'
p5827
S'std::string'
p5828
sS'default'
p5829
S'BoundingBoxIC'
p5830
sS'name'
p5831
S'type'
p5832
sS'required'
p5833
I00
sS'group_name'
p5834
Nsa(dp5835
S'description'
p5836
S'The variable this initial condition is supposed to provide values for.\n'
p5837
sS'cpp_type'
p5838
S'VariableName'
p5839
sS'default'
p5840
g3
sS'name'
p5841
S'variable'
p5842
sS'required'
p5843
I01
sS'group_name'
p5844
Nsa(dp5845
S'description'
p5846
S'The x coordinate of the lower left-hand corner of the box\n'
p5847
sS'cpp_type'
p5848
S'double'
p5849
sS'default'
p5850
g3
sS'name'
p5851
S'x1'
p5852
sS'required'
p5853
I01
sS'group_name'
p5854
Nsa(dp5855
S'description'
p5856
S'The x coordinate of the upper right-hand corner of the box\n'
p5857
sS'cpp_type'
p5858
S'double'
p5859
sS'default'
p5860
g3
sS'name'
p5861
S'x2'
p5862
sS'required'
p5863
I01
sS'group_name'
p5864
Nsa(dp5865
S'description'
p5866
S'The y coordinate of the lower left-hand corner of the box\n'
p5867
sS'cpp_type'
p5868
S'double'
p5869
sS'default'
p5870
g3
sS'name'
p5871
S'y1'
p5872
sS'required'
p5873
I01
sS'group_name'
p5874
Nsa(dp5875
S'description'
p5876
S'The y coordinate of the upper right-hand corner of the box\n'
p5877
sS'cpp_type'
p5878
S'double'
p5879
sS'default'
p5880
g3
sS'name'
p5881
S'y2'
p5882
sS'required'
p5883
I01
sS'group_name'
p5884
Nsa(dp5885
S'description'
p5886
S'The z coordinate of the lower left-hand corner of the box\n'
p5887
sS'cpp_type'
p5888
S'double'
p5889
sS'default'
p5890
S'0'
p5891
sS'name'
p5892
S'z1'
p5893
sS'required'
p5894
I00
sS'group_name'
p5895
Nsa(dp5896
S'description'
p5897
S'The z coordinate of the upper right-hand corner of the box\n'
p5898
sS'cpp_type'
p5899
S'double'
p5900
sS'default'
p5901
S'0'
p5902
sS'name'
p5903
S'z2'
p5904
sS'required'
p5905
I00
sS'group_name'
p5906
NsasS'name'
p5907
S'/AuxVariables/*/InitialCondition/<type>/BoundingBoxIC'
p5908
sa(dp5909
S'description'
p5910
g3
sS'type'
p5911
NsS'subblocks'
p5912
NsS'parameters'
p5913
(lp5914
(dp5915
S'description'
p5916
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5917
sS'cpp_type'
p5918
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5919
sS'default'
p5920
g3
sS'name'
p5921
S'block'
p5922
sS'required'
p5923
I00
sS'group_name'
p5924
Nsa(dp5925
S'description'
p5926
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5927
sS'cpp_type'
p5928
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5929
sS'default'
p5930
g3
sS'name'
p5931
S'boundary'
p5932
sS'required'
p5933
I00
sS'group_name'
p5934
Nsa(dp5935
S'description'
p5936
g3
sS'cpp_type'
p5937
S'std::string'
p5938
sS'default'
p5939
S'ConstantIC'
p5940
sS'name'
p5941
S'type'
p5942
sS'required'
p5943
I00
sS'group_name'
p5944
Nsa(dp5945
S'description'
p5946
S'The value to be set in IC\n'
p5947
sS'cpp_type'
p5948
S'double'
p5949
sS'default'
p5950
g3
sS'name'
p5951
S'value'
p5952
sS'required'
p5953
I01
sS'group_name'
p5954
Nsa(dp5955
S'description'
p5956
S'The variable this initial condition is supposed to provide values for.\n'
p5957
sS'cpp_type'
p5958
S'VariableName'
p5959
sS'default'
p5960
g3
sS'name'
p5961
S'variable'
p5962
sS'required'
p5963
I01
sS'group_name'
p5964
NsasS'name'
p5965
S'/AuxVariables/*/InitialCondition/<type>/ConstantIC'
p5966
sa(dp5967
S'description'
p5968
g3
sS'type'
p5969
NsS'subblocks'
p5970
NsS'parameters'
p5971
(lp5972
(dp5973
S'description'
p5974
S'The amplitude\n'
p5975
sS'cpp_type'
p5976
S'double'
p5977
sS'default'
p5978
S'1'
p5979
sS'name'
p5980
S'amplitude'
p5981
sS'required'
p5982
I00
sS'group_name'
p5983
Nsa(dp5984
S'description'
p5985
S'The average value\n'
p5986
sS'cpp_type'
p5987
S'double'
p5988
sS'default'
p5989
S'0'
p5990
sS'name'
p5991
S'average'
p5992
sS'required'
p5993
I00
sS'group_name'
p5994
Nsa(dp5995
S'description'
p5996
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5997
sS'cpp_type'
p5998
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5999
sS'default'
p6000
g3
sS'name'
p6001
S'block'
p6002
sS'required'
p6003
I00
sS'group_name'
p6004
Nsa(dp6005
S'description'
p6006
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6007
sS'cpp_type'
p6008
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6009
sS'default'
p6010
g3
sS'name'
p6011
S'boundary'
p6012
sS'required'
p6013
I00
sS'group_name'
p6014
Nsa(dp6015
S'description'
p6016
S'A small area between the max value and the interface\n'
p6017
sS'cpp_type'
p6018
S'double'
p6019
sS'default'
p6020
S'0.03125'
p6021
sS'name'
p6022
S'buffer'
p6023
sS'required'
p6024
I00
sS'group_name'
p6025
Nsa(dp6026
S'description'
p6027
S'The interface width\n'
p6028
sS'cpp_type'
p6029
S'double'
p6030
sS'default'
p6031
S'0.03125'
p6032
sS'name'
p6033
S'interface'
p6034
sS'required'
p6035
I00
sS'group_name'
p6036
Nsa(dp6037
S'description'
p6038
S'The length\n'
p6039
sS'cpp_type'
p6040
S'double'
p6041
sS'default'
p6042
S'0.75'
p6043
sS'name'
p6044
S'length'
p6045
sS'required'
p6046
I00
sS'group_name'
p6047
Nsa(dp6048
S'description'
p6049
g3
sS'cpp_type'
p6050
S'std::string'
p6051
sS'default'
p6052
S'CrossIC'
p6053
sS'name'
p6054
S'type'
p6055
sS'required'
p6056
I00
sS'group_name'
p6057
Nsa(dp6058
S'description'
p6059
S'The variable this initial condition is supposed to provide values for.\n'
p6060
sS'cpp_type'
p6061
S'VariableName'
p6062
sS'default'
p6063
g3
sS'name'
p6064
S'variable'
p6065
sS'required'
p6066
I01
sS'group_name'
p6067
Nsa(dp6068
S'description'
p6069
S'The width\n'
p6070
sS'cpp_type'
p6071
S'double'
p6072
sS'default'
p6073
S'0.125'
p6074
sS'name'
p6075
S'width'
p6076
sS'required'
p6077
I00
sS'group_name'
p6078
Nsa(dp6079
S'description'
p6080
S'The x coordinate of the lower left-hand corner of the box\n'
p6081
sS'cpp_type'
p6082
S'double'
p6083
sS'default'
p6084
S'0'
p6085
sS'name'
p6086
S'x1'
p6087
sS'required'
p6088
I00
sS'group_name'
p6089
Nsa(dp6090
S'description'
p6091
S'The x coordinate of the upper right-hand corner of the box\n'
p6092
sS'cpp_type'
p6093
S'double'
p6094
sS'default'
p6095
S'1'
p6096
sS'name'
p6097
S'x2'
p6098
sS'required'
p6099
I00
sS'group_name'
p6100
Nsa(dp6101
S'description'
p6102
S'The y coordinate of the lower left-hand corner of the box\n'
p6103
sS'cpp_type'
p6104
S'double'
p6105
sS'default'
p6106
S'0'
p6107
sS'name'
p6108
S'y1'
p6109
sS'required'
p6110
I00
sS'group_name'
p6111
Nsa(dp6112
S'description'
p6113
S'The y coordinate of the upper right-hand corner of the box\n'
p6114
sS'cpp_type'
p6115
S'double'
p6116
sS'default'
p6117
S'1'
p6118
sS'name'
p6119
S'y2'
p6120
sS'required'
p6121
I00
sS'group_name'
p6122
NsasS'name'
p6123
S'/AuxVariables/*/InitialCondition/<type>/CrossIC'
p6124
sa(dp6125
S'description'
p6126
g3
sS'type'
p6127
NsS'subblocks'
p6128
NsS'parameters'
p6129
(lp6130
(dp6131
S'description'
p6132
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6133
sS'cpp_type'
p6134
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6135
sS'default'
p6136
g3
sS'name'
p6137
S'block'
p6138
sS'required'
p6139
I00
sS'group_name'
p6140
Nsa(dp6141
S'description'
p6142
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6143
sS'cpp_type'
p6144
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6145
sS'default'
p6146
g3
sS'name'
p6147
S'boundary'
p6148
sS'required'
p6149
I00
sS'group_name'
p6150
Nsa(dp6151
S'description'
p6152
S'The initial condition function.\n'
p6153
sS'cpp_type'
p6154
S'FunctionName'
p6155
sS'default'
p6156
g3
sS'name'
p6157
S'function'
p6158
sS'required'
p6159
I01
sS'group_name'
p6160
Nsa(dp6161
S'description'
p6162
g3
sS'cpp_type'
p6163
S'std::string'
p6164
sS'default'
p6165
S'FunctionIC'
p6166
sS'name'
p6167
S'type'
p6168
sS'required'
p6169
I00
sS'group_name'
p6170
Nsa(dp6171
S'description'
p6172
S'The variable this initial condition is supposed to provide values for.\n'
p6173
sS'cpp_type'
p6174
S'VariableName'
p6175
sS'default'
p6176
g3
sS'name'
p6177
S'variable'
p6178
sS'required'
p6179
I01
sS'group_name'
p6180
NsasS'name'
p6181
S'/AuxVariables/*/InitialCondition/<type>/FunctionIC'
p6182
sa(dp6183
S'description'
p6184
g3
sS'type'
p6185
NsS'subblocks'
p6186
NsS'parameters'
p6187
(lp6188
(dp6189
S'description'
p6190
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6191
sS'cpp_type'
p6192
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6193
sS'default'
p6194
g3
sS'name'
p6195
S'block'
p6196
sS'required'
p6197
I00
sS'group_name'
p6198
Nsa(dp6199
S'description'
p6200
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6201
sS'cpp_type'
p6202
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6203
sS'default'
p6204
g3
sS'name'
p6205
S'boundary'
p6206
sS'required'
p6207
I00
sS'group_name'
p6208
Nsa(dp6209
S'description'
p6210
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p6211
sS'cpp_type'
p6212
S'bool'
p6213
sS'default'
p6214
S'0'
p6215
sS'name'
p6216
S'cody_test'
p6217
sS'required'
p6218
I00
sS'group_name'
p6219
Nsa(dp6220
S'description'
p6221
S'3D microstructure will be columnar in the z-direction?\n'
p6222
sS'cpp_type'
p6223
S'bool'
p6224
sS'default'
p6225
S'0'
p6226
sS'name'
p6227
S'columnar_3D'
p6228
sS'required'
p6229
I00
sS'group_name'
p6230
Nsa(dp6231
S'description'
p6232
S'The index for the current order parameter\n'
p6233
sS'cpp_type'
p6234
S'unsigned int'
p6235
sS'default'
p6236
g3
sS'name'
p6237
S'crys_index'
p6238
sS'required'
p6239
I01
sS'group_name'
p6240
Nsa(dp6241
S'description'
p6242
S'Number of order parameters\n'
p6243
sS'cpp_type'
p6244
S'unsigned int'
p6245
sS'default'
p6246
g3
sS'name'
p6247
S'crys_num'
p6248
sS'required'
p6249
I01
sS'group_name'
p6250
Nsa(dp6251
S'description'
p6252
S'Number of grains being represented by the order parameters\n'
p6253
sS'cpp_type'
p6254
S'unsigned int'
p6255
sS'default'
p6256
g3
sS'name'
p6257
S'grain_num'
p6258
sS'required'
p6259
I01
sS'group_name'
p6260
Nsa(dp6261
S'description'
p6262
S'The percent to randomly perturbate centers of grains relative to the size of the grain\n'
p6263
sS'cpp_type'
p6264
S'double'
p6265
sS'default'
p6266
S'0'
p6267
sS'name'
p6268
S'perturbation_percent'
p6269
sS'required'
p6270
I00
sS'group_name'
p6271
Nsa(dp6272
S'description'
p6273
S'The random seed\n'
p6274
sS'cpp_type'
p6275
S'unsigned int'
p6276
sS'default'
p6277
S'12444'
p6278
sS'name'
p6279
S'rand_seed'
p6280
sS'required'
p6281
I00
sS'group_name'
p6282
Nsa(dp6283
S'description'
p6284
g3
sS'cpp_type'
p6285
S'int'
p6286
sS'default'
p6287
S'1'
p6288
sS'name'
p6289
S'typ'
p6290
sS'required'
p6291
I00
sS'group_name'
p6292
Nsa(dp6293
S'description'
p6294
g3
sS'cpp_type'
p6295
S'std::string'
p6296
sS'default'
p6297
S'HexPolycrystalIC'
p6298
sS'name'
p6299
S'type'
p6300
sS'required'
p6301
I00
sS'group_name'
p6302
Nsa(dp6303
S'description'
p6304
S'The variable this initial condition is supposed to provide values for.\n'
p6305
sS'cpp_type'
p6306
S'VariableName'
p6307
sS'default'
p6308
g3
sS'name'
p6309
S'variable'
p6310
sS'required'
p6311
I01
sS'group_name'
p6312
Nsa(dp6313
S'description'
p6314
S'Specifies offset of hexagon grid in x-direction\n'
p6315
sS'cpp_type'
p6316
S'double'
p6317
sS'default'
p6318
S'0.5'
p6319
sS'name'
p6320
S'x_offset'
p6321
sS'required'
p6322
I00
sS'group_name'
p6323
NsasS'name'
p6324
S'/AuxVariables/*/InitialCondition/<type>/HexPolycrystalIC'
p6325
sa(dp6326
S'description'
p6327
g3
sS'type'
p6328
NsS'subblocks'
p6329
NsS'parameters'
p6330
(lp6331
(dp6332
S'description'
p6333
S'in 3D, whether the objects are spheres or columns\n'
p6334
sS'cpp_type'
p6335
S'bool'
p6336
sS'default'
p6337
S'1'
p6338
sS'name'
p6339
S'3D_spheres'
p6340
sS'required'
p6341
I00
sS'group_name'
p6342
Nsa(dp6343
S'description'
p6344
S'length of simulation domain in x-direction\n'
p6345
sS'cpp_type'
p6346
S'double'
p6347
sS'default'
p6348
g3
sS'name'
p6349
S'Lx'
p6350
sS'required'
p6351
I01
sS'group_name'
p6352
Nsa(dp6353
S'description'
p6354
S'length of simulation domain in y-direction\n'
p6355
sS'cpp_type'
p6356
S'double'
p6357
sS'default'
p6358
g3
sS'name'
p6359
S'Ly'
p6360
sS'required'
p6361
I01
sS'group_name'
p6362
Nsa(dp6363
S'description'
p6364
S'length of simulation domain in z-direction\n'
p6365
sS'cpp_type'
p6366
S'double'
p6367
sS'default'
p6368
S'0'
p6369
sS'name'
p6370
S'Lz'
p6371
sS'required'
p6372
I00
sS'group_name'
p6373
Nsa(dp6374
S'description'
p6375
S'Variation from central lattice position\n'
p6376
sS'cpp_type'
p6377
S'double'
p6378
sS'default'
p6379
S'0'
p6380
sS'name'
p6381
S'Rnd_variation'
p6382
sS'required'
p6383
I00
sS'group_name'
p6384
Nsa(dp6385
S'description'
p6386
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6387
sS'cpp_type'
p6388
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6389
sS'default'
p6390
g3
sS'name'
p6391
S'block'
p6392
sS'required'
p6393
I00
sS'group_name'
p6394
Nsa(dp6395
S'description'
p6396
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6397
sS'cpp_type'
p6398
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6399
sS'default'
p6400
g3
sS'name'
p6401
S'boundary'
p6402
sS'required'
p6403
I00
sS'group_name'
p6404
Nsa(dp6405
S'description'
p6406
S'minimum spacing of bubbles, measured from center to center\n'
p6407
sS'cpp_type'
p6408
S'double'
p6409
sS'default'
p6410
S'0'
p6411
sS'name'
p6412
S'bubspac'
p6413
sS'required'
p6414
I01
sS'group_name'
p6415
Nsa(dp6416
S'description'
p6417
S'Vector containing the number of bubbles along each side\n'
p6418
sS'cpp_type'
p6419
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p6420
sS'default'
p6421
g3
sS'name'
p6422
S'circles_per_side'
p6423
sS'required'
p6424
I01
sS'group_name'
p6425
Nsa(dp6426
S'description'
p6427
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p6428
sS'cpp_type'
p6429
S'double'
p6430
sS'default'
p6431
S'0'
p6432
sS'name'
p6433
S'int_width'
p6434
sS'required'
p6435
I00
sS'group_name'
p6436
Nsa(dp6437
S'description'
p6438
S'The variable value inside the circle\n'
p6439
sS'cpp_type'
p6440
S'double'
p6441
sS'default'
p6442
g3
sS'name'
p6443
S'invalue'
p6444
sS'required'
p6445
I01
sS'group_name'
p6446
Nsa(dp6447
S'description'
p6448
S'The number of bubbles to be placed on GB\n'
p6449
sS'cpp_type'
p6450
S'unsigned int'
p6451
sS'default'
p6452
S'0'
p6453
sS'name'
p6454
S'numbub'
p6455
sS'required'
p6456
I01
sS'group_name'
p6457
Nsa(dp6458
S'description'
p6459
S'The number of tries\n'
p6460
sS'cpp_type'
p6461
S'unsigned int'
p6462
sS'default'
p6463
S'1000'
p6464
sS'name'
p6465
S'numtries'
p6466
sS'required'
p6467
I00
sS'group_name'
p6468
Nsa(dp6469
S'description'
p6470
S'The variable value outside the circle\n'
p6471
sS'cpp_type'
p6472
S'double'
p6473
sS'default'
p6474
g3
sS'name'
p6475
S'outvalue'
p6476
sS'required'
p6477
I01
sS'group_name'
p6478
Nsa(dp6479
S'description'
p6480
S'The radius of a circle\n'
p6481
sS'cpp_type'
p6482
S'double'
p6483
sS'default'
p6484
g3
sS'name'
p6485
S'radius'
p6486
sS'required'
p6487
I01
sS'group_name'
p6488
Nsa(dp6489
S'description'
p6490
S'Plus or minus Percent of random variation in the bubble radius\n'
p6491
sS'cpp_type'
p6492
S'double'
p6493
sS'default'
p6494
S'0'
p6495
sS'name'
p6496
S'radius_variation'
p6497
sS'required'
p6498
I00
sS'group_name'
p6499
Nsa(dp6500
S'description'
p6501
S'random seed\n'
p6502
sS'cpp_type'
p6503
S'unsigned int'
p6504
sS'default'
p6505
S'2000'
p6506
sS'name'
p6507
S'rand_seed'
p6508
sS'required'
p6509
I00
sS'group_name'
p6510
Nsa(dp6511
S'description'
p6512
g3
sS'cpp_type'
p6513
S'std::string'
p6514
sS'default'
p6515
S'LatticeSmoothCircleIC'
p6516
sS'name'
p6517
S'type'
p6518
sS'required'
p6519
I00
sS'group_name'
p6520
Nsa(dp6521
S'description'
p6522
S'The variable this initial condition is supposed to provide values for.\n'
p6523
sS'cpp_type'
p6524
S'VariableName'
p6525
sS'default'
p6526
g3
sS'name'
p6527
S'variable'
p6528
sS'required'
p6529
I01
sS'group_name'
p6530
Nsa(dp6531
S'description'
p6532
S'The x coordinate of the circle center\n'
p6533
sS'cpp_type'
p6534
S'double'
p6535
sS'default'
p6536
S'0'
p6537
sS'name'
p6538
S'x1'
p6539
sS'required'
p6540
I01
sS'group_name'
p6541
Nsa(dp6542
S'description'
p6543
S'The y coordinate of the circle center\n'
p6544
sS'cpp_type'
p6545
S'double'
p6546
sS'default'
p6547
S'0'
p6548
sS'name'
p6549
S'y1'
p6550
sS'required'
p6551
I01
sS'group_name'
p6552
Nsa(dp6553
S'description'
p6554
S'The z coordinate of the circle center\n'
p6555
sS'cpp_type'
p6556
S'double'
p6557
sS'default'
p6558
S'0'
p6559
sS'name'
p6560
S'z1'
p6561
sS'required'
p6562
I00
sS'group_name'
p6563
NsasS'name'
p6564
S'/AuxVariables/*/InitialCondition/<type>/LatticeSmoothCircleIC'
p6565
sa(dp6566
S'description'
p6567
g3
sS'type'
p6568
NsS'subblocks'
p6569
NsS'parameters'
p6570
(lp6571
(dp6572
S'description'
p6573
S'in 3D, whether the objects are spheres or columns\n'
p6574
sS'cpp_type'
p6575
S'bool'
p6576
sS'default'
p6577
S'1'
p6578
sS'name'
p6579
S'3D_spheres'
p6580
sS'required'
p6581
I00
sS'group_name'
p6582
Nsa(dp6583
S'description'
p6584
S'length of simulation domain in x-direction\n'
p6585
sS'cpp_type'
p6586
S'double'
p6587
sS'default'
p6588
g3
sS'name'
p6589
S'Lx'
p6590
sS'required'
p6591
I01
sS'group_name'
p6592
Nsa(dp6593
S'description'
p6594
S'length of simulation domain in y-direction\n'
p6595
sS'cpp_type'
p6596
S'double'
p6597
sS'default'
p6598
g3
sS'name'
p6599
S'Ly'
p6600
sS'required'
p6601
I01
sS'group_name'
p6602
Nsa(dp6603
S'description'
p6604
S'length of simulation domain in z-direction\n'
p6605
sS'cpp_type'
p6606
S'double'
p6607
sS'default'
p6608
S'0'
p6609
sS'name'
p6610
S'Lz'
p6611
sS'required'
p6612
I00
sS'group_name'
p6613
Nsa(dp6614
S'description'
p6615
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6616
sS'cpp_type'
p6617
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6618
sS'default'
p6619
g3
sS'name'
p6620
S'block'
p6621
sS'required'
p6622
I00
sS'group_name'
p6623
Nsa(dp6624
S'description'
p6625
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6626
sS'cpp_type'
p6627
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6628
sS'default'
p6629
g3
sS'name'
p6630
S'boundary'
p6631
sS'required'
p6632
I00
sS'group_name'
p6633
Nsa(dp6634
S'description'
p6635
S'minimum spacing of bubbles, measured from center to center\n'
p6636
sS'cpp_type'
p6637
S'double'
p6638
sS'default'
p6639
g3
sS'name'
p6640
S'bubspac'
p6641
sS'required'
p6642
I01
sS'group_name'
p6643
Nsa(dp6644
S'description'
p6645
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p6646
sS'cpp_type'
p6647
S'double'
p6648
sS'default'
p6649
S'0'
p6650
sS'name'
p6651
S'int_width'
p6652
sS'required'
p6653
I00
sS'group_name'
p6654
Nsa(dp6655
S'description'
p6656
S'The variable value inside the circle\n'
p6657
sS'cpp_type'
p6658
S'double'
p6659
sS'default'
p6660
g3
sS'name'
p6661
S'invalue'
p6662
sS'required'
p6663
I01
sS'group_name'
p6664
Nsa(dp6665
S'description'
p6666
S'The number of bubbles to be placed on GB\n'
p6667
sS'cpp_type'
p6668
S'unsigned int'
p6669
sS'default'
p6670
g3
sS'name'
p6671
S'numbub'
p6672
sS'required'
p6673
I01
sS'group_name'
p6674
Nsa(dp6675
S'description'
p6676
S'The number of tries\n'
p6677
sS'cpp_type'
p6678
S'unsigned int'
p6679
sS'default'
p6680
S'1000'
p6681
sS'name'
p6682
S'numtries'
p6683
sS'required'
p6684
I00
sS'group_name'
p6685
Nsa(dp6686
S'description'
p6687
S'The variable value outside the circle\n'
p6688
sS'cpp_type'
p6689
S'double'
p6690
sS'default'
p6691
g3
sS'name'
p6692
S'outvalue'
p6693
sS'required'
p6694
I01
sS'group_name'
p6695
Nsa(dp6696
S'description'
p6697
S'The radius of a circle\n'
p6698
sS'cpp_type'
p6699
S'double'
p6700
sS'default'
p6701
g3
sS'name'
p6702
S'radius'
p6703
sS'required'
p6704
I01
sS'group_name'
p6705
Nsa(dp6706
S'description'
p6707
S'Plus or minus Percent of random variation in the bubble radius\n'
p6708
sS'cpp_type'
p6709
S'double'
p6710
sS'default'
p6711
S'0'
p6712
sS'name'
p6713
S'radius_variation'
p6714
sS'required'
p6715
I00
sS'group_name'
p6716
Nsa(dp6717
S'description'
p6718
S'random seed\n'
p6719
sS'cpp_type'
p6720
S'unsigned int'
p6721
sS'default'
p6722
S'2000'
p6723
sS'name'
p6724
S'rand_seed'
p6725
sS'required'
p6726
I00
sS'group_name'
p6727
Nsa(dp6728
S'description'
p6729
g3
sS'cpp_type'
p6730
S'std::string'
p6731
sS'default'
p6732
S'MultiSmoothCircleIC'
p6733
sS'name'
p6734
S'type'
p6735
sS'required'
p6736
I00
sS'group_name'
p6737
Nsa(dp6738
S'description'
p6739
S'The variable this initial condition is supposed to provide values for.\n'
p6740
sS'cpp_type'
p6741
S'VariableName'
p6742
sS'default'
p6743
g3
sS'name'
p6744
S'variable'
p6745
sS'required'
p6746
I01
sS'group_name'
p6747
Nsa(dp6748
S'description'
p6749
S'The x coordinate of the circle center\n'
p6750
sS'cpp_type'
p6751
S'double'
p6752
sS'default'
p6753
S'0'
p6754
sS'name'
p6755
S'x1'
p6756
sS'required'
p6757
I01
sS'group_name'
p6758
Nsa(dp6759
S'description'
p6760
S'The y coordinate of the circle center\n'
p6761
sS'cpp_type'
p6762
S'double'
p6763
sS'default'
p6764
S'0'
p6765
sS'name'
p6766
S'y1'
p6767
sS'required'
p6768
I01
sS'group_name'
p6769
Nsa(dp6770
S'description'
p6771
S'The z coordinate of the circle center\n'
p6772
sS'cpp_type'
p6773
S'double'
p6774
sS'default'
p6775
S'0'
p6776
sS'name'
p6777
S'z1'
p6778
sS'required'
p6779
I00
sS'group_name'
p6780
NsasS'name'
p6781
S'/AuxVariables/*/InitialCondition/<type>/MultiSmoothCircleIC'
p6782
sa(dp6783
S'description'
p6784
g3
sS'type'
p6785
NsS'subblocks'
p6786
NsS'parameters'
p6787
(lp6788
(dp6789
S'description'
p6790
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6791
sS'cpp_type'
p6792
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6793
sS'default'
p6794
g3
sS'name'
p6795
S'block'
p6796
sS'required'
p6797
I00
sS'group_name'
p6798
Nsa(dp6799
S'description'
p6800
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6801
sS'cpp_type'
p6802
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6803
sS'default'
p6804
g3
sS'name'
p6805
S'boundary'
p6806
sS'required'
p6807
I00
sS'group_name'
p6808
Nsa(dp6809
S'description'
p6810
S'The index for the current order parameter\n'
p6811
sS'cpp_type'
p6812
S'unsigned int'
p6813
sS'default'
p6814
g3
sS'name'
p6815
S'crys_index'
p6816
sS'required'
p6817
I01
sS'group_name'
p6818
Nsa(dp6819
S'description'
p6820
S'Number of order parameters\n'
p6821
sS'cpp_type'
p6822
S'unsigned int'
p6823
sS'default'
p6824
g3
sS'name'
p6825
S'crys_num'
p6826
sS'required'
p6827
I01
sS'group_name'
p6828
Nsa(dp6829
S'description'
p6830
S'Type of random grain structure\n'
p6831
sS'cpp_type'
p6832
S'unsigned int'
p6833
sS'default'
p6834
g3
sS'name'
p6835
S'typ'
p6836
sS'required'
p6837
I01
sS'group_name'
p6838
Nsa(dp6839
S'description'
p6840
g3
sS'cpp_type'
p6841
S'std::string'
p6842
sS'default'
p6843
S'PolycrystalRandomIC'
p6844
sS'name'
p6845
S'type'
p6846
sS'required'
p6847
I00
sS'group_name'
p6848
Nsa(dp6849
S'description'
p6850
S'The variable this initial condition is supposed to provide values for.\n'
p6851
sS'cpp_type'
p6852
S'VariableName'
p6853
sS'default'
p6854
g3
sS'name'
p6855
S'variable'
p6856
sS'required'
p6857
I01
sS'group_name'
p6858
NsasS'name'
p6859
S'/AuxVariables/*/InitialCondition/<type>/PolycrystalRandomIC'
p6860
sa(dp6861
S'description'
p6862
g3
sS'type'
p6863
NsS'subblocks'
p6864
NsS'parameters'
p6865
(lp6866
(dp6867
S'description'
p6868
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6869
sS'cpp_type'
p6870
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6871
sS'default'
p6872
g3
sS'name'
p6873
S'block'
p6874
sS'required'
p6875
I00
sS'group_name'
p6876
Nsa(dp6877
S'description'
p6878
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6879
sS'cpp_type'
p6880
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6881
sS'default'
p6882
g3
sS'name'
p6883
S'boundary'
p6884
sS'required'
p6885
I00
sS'group_name'
p6886
Nsa(dp6887
S'description'
p6888
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p6889
sS'cpp_type'
p6890
S'bool'
p6891
sS'default'
p6892
S'0'
p6893
sS'name'
p6894
S'cody_test'
p6895
sS'required'
p6896
I00
sS'group_name'
p6897
Nsa(dp6898
S'description'
p6899
S'3D microstructure will be columnar in the z-direction?\n'
p6900
sS'cpp_type'
p6901
S'bool'
p6902
sS'default'
p6903
S'0'
p6904
sS'name'
p6905
S'columnar_3D'
p6906
sS'required'
p6907
I00
sS'group_name'
p6908
Nsa(dp6909
S'description'
p6910
S'The index for the current order parameter\n'
p6911
sS'cpp_type'
p6912
S'unsigned int'
p6913
sS'default'
p6914
g3
sS'name'
p6915
S'crys_index'
p6916
sS'required'
p6917
I01
sS'group_name'
p6918
Nsa(dp6919
S'description'
p6920
S'Number of order parameters\n'
p6921
sS'cpp_type'
p6922
S'unsigned int'
p6923
sS'default'
p6924
g3
sS'name'
p6925
S'crys_num'
p6926
sS'required'
p6927
I01
sS'group_name'
p6928
Nsa(dp6929
S'description'
p6930
S'Number of grains being represented by the order parameters\n'
p6931
sS'cpp_type'
p6932
S'unsigned int'
p6933
sS'default'
p6934
g3
sS'name'
p6935
S'grain_num'
p6936
sS'required'
p6937
I01
sS'group_name'
p6938
Nsa(dp6939
S'description'
p6940
S'The random seed\n'
p6941
sS'cpp_type'
p6942
S'unsigned int'
p6943
sS'default'
p6944
S'12444'
p6945
sS'name'
p6946
S'rand_seed'
p6947
sS'required'
p6948
I00
sS'group_name'
p6949
Nsa(dp6950
S'description'
p6951
g3
sS'cpp_type'
p6952
S'std::string'
p6953
sS'default'
p6954
S'PolycrystalReducedIC'
p6955
sS'name'
p6956
S'type'
p6957
sS'required'
p6958
I00
sS'group_name'
p6959
Nsa(dp6960
S'description'
p6961
S'The variable this initial condition is supposed to provide values for.\n'
p6962
sS'cpp_type'
p6963
S'VariableName'
p6964
sS'default'
p6965
g3
sS'name'
p6966
S'variable'
p6967
sS'required'
p6968
I01
sS'group_name'
p6969
NsasS'name'
p6970
S'/AuxVariables/*/InitialCondition/<type>/PolycrystalReducedIC'
p6971
sa(dp6972
S'description'
p6973
g3
sS'type'
p6974
NsS'subblocks'
p6975
NsS'parameters'
p6976
(lp6977
(dp6978
S'description'
p6979
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6980
sS'cpp_type'
p6981
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6982
sS'default'
p6983
g3
sS'name'
p6984
S'block'
p6985
sS'required'
p6986
I00
sS'group_name'
p6987
Nsa(dp6988
S'description'
p6989
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6990
sS'cpp_type'
p6991
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6992
sS'default'
p6993
g3
sS'name'
p6994
S'boundary'
p6995
sS'required'
p6996
I00
sS'group_name'
p6997
Nsa(dp6998
S'description'
p6999
S'Upper bound of the randomly generated values\n'
p7000
sS'cpp_type'
p7001
S'double'
p7002
sS'default'
p7003
S'1'
p7004
sS'name'
p7005
S'max'
p7006
sS'required'
p7007
I00
sS'group_name'
p7008
Nsa(dp7009
S'description'
p7010
S'Lower bound of the randomly generated values\n'
p7011
sS'cpp_type'
p7012
S'double'
p7013
sS'default'
p7014
S'0'
p7015
sS'name'
p7016
S'min'
p7017
sS'required'
p7018
I00
sS'group_name'
p7019
Nsa(dp7020
S'description'
p7021
S'Seed value for the random number generator\n'
p7022
sS'cpp_type'
p7023
S'unsigned int'
p7024
sS'default'
p7025
S'0'
p7026
sS'name'
p7027
S'seed'
p7028
sS'required'
p7029
I00
sS'group_name'
p7030
Nsa(dp7031
S'description'
p7032
g3
sS'cpp_type'
p7033
S'std::string'
p7034
sS'default'
p7035
S'RandomIC'
p7036
sS'name'
p7037
S'type'
p7038
sS'required'
p7039
I00
sS'group_name'
p7040
Nsa(dp7041
S'description'
p7042
S'The variable this initial condition is supposed to provide values for.\n'
p7043
sS'cpp_type'
p7044
S'VariableName'
p7045
sS'default'
p7046
g3
sS'name'
p7047
S'variable'
p7048
sS'required'
p7049
I01
sS'group_name'
p7050
NsasS'name'
p7051
S'/AuxVariables/*/InitialCondition/<type>/RandomIC'
p7052
sa(dp7053
S'description'
p7054
g3
sS'type'
p7055
NsS'subblocks'
p7056
NsS'parameters'
p7057
(lp7058
(dp7059
S'description'
p7060
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7061
sS'cpp_type'
p7062
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7063
sS'default'
p7064
g3
sS'name'
p7065
S'block'
p7066
sS'required'
p7067
I00
sS'group_name'
p7068
Nsa(dp7069
S'description'
p7070
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7071
sS'cpp_type'
p7072
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7073
sS'default'
p7074
g3
sS'name'
p7075
S'boundary'
p7076
sS'required'
p7077
I00
sS'group_name'
p7078
Nsa(dp7079
S'description'
p7080
S'The min value of the variable invalue the box\n'
p7081
sS'cpp_type'
p7082
S'double'
p7083
sS'default'
p7084
S'0'
p7085
sS'name'
p7086
S'mn_invalue'
p7087
sS'required'
p7088
I00
sS'group_name'
p7089
Nsa(dp7090
S'description'
p7091
S'The min value of the variable outvalue the box\n'
p7092
sS'cpp_type'
p7093
S'double'
p7094
sS'default'
p7095
S'0'
p7096
sS'name'
p7097
S'mn_outvalue'
p7098
sS'required'
p7099
I00
sS'group_name'
p7100
Nsa(dp7101
S'description'
p7102
S'The max value of the variable invalue the box\n'
p7103
sS'cpp_type'
p7104
S'double'
p7105
sS'default'
p7106
g3
sS'name'
p7107
S'mx_invalue'
p7108
sS'required'
p7109
I01
sS'group_name'
p7110
Nsa(dp7111
S'description'
p7112
S'The max value of the variable outvalue the box\n'
p7113
sS'cpp_type'
p7114
S'double'
p7115
sS'default'
p7116
g3
sS'name'
p7117
S'mx_outvalue'
p7118
sS'required'
p7119
I01
sS'group_name'
p7120
Nsa(dp7121
S'description'
p7122
g3
sS'cpp_type'
p7123
S'std::string'
p7124
sS'default'
p7125
S'RndBoundingBoxIC'
p7126
sS'name'
p7127
S'type'
p7128
sS'required'
p7129
I00
sS'group_name'
p7130
Nsa(dp7131
S'description'
p7132
S'The variable this initial condition is supposed to provide values for.\n'
p7133
sS'cpp_type'
p7134
S'VariableName'
p7135
sS'default'
p7136
g3
sS'name'
p7137
S'variable'
p7138
sS'required'
p7139
I01
sS'group_name'
p7140
Nsa(dp7141
S'description'
p7142
S'The x coordinate of the lower left-hand corner of the box\n'
p7143
sS'cpp_type'
p7144
S'double'
p7145
sS'default'
p7146
g3
sS'name'
p7147
S'x1'
p7148
sS'required'
p7149
I01
sS'group_name'
p7150
Nsa(dp7151
S'description'
p7152
S'The x coordinate of the upper right-hand corner of the box\n'
p7153
sS'cpp_type'
p7154
S'double'
p7155
sS'default'
p7156
g3
sS'name'
p7157
S'x2'
p7158
sS'required'
p7159
I01
sS'group_name'
p7160
Nsa(dp7161
S'description'
p7162
S'The y coordinate of the lower left-hand corner of the box\n'
p7163
sS'cpp_type'
p7164
S'double'
p7165
sS'default'
p7166
g3
sS'name'
p7167
S'y1'
p7168
sS'required'
p7169
I01
sS'group_name'
p7170
Nsa(dp7171
S'description'
p7172
S'The y coordinate of the upper right-hand corner of the box\n'
p7173
sS'cpp_type'
p7174
S'double'
p7175
sS'default'
p7176
g3
sS'name'
p7177
S'y2'
p7178
sS'required'
p7179
I01
sS'group_name'
p7180
Nsa(dp7181
S'description'
p7182
S'The z coordinate of the lower left-hand corner of the box\n'
p7183
sS'cpp_type'
p7184
S'double'
p7185
sS'default'
p7186
S'0'
p7187
sS'name'
p7188
S'z1'
p7189
sS'required'
p7190
I00
sS'group_name'
p7191
Nsa(dp7192
S'description'
p7193
S'The z coordinate of the upper right-hand corner of the box\n'
p7194
sS'cpp_type'
p7195
S'double'
p7196
sS'default'
p7197
S'0'
p7198
sS'name'
p7199
S'z2'
p7200
sS'required'
p7201
I00
sS'group_name'
p7202
NsasS'name'
p7203
S'/AuxVariables/*/InitialCondition/<type>/RndBoundingBoxIC'
p7204
sa(dp7205
S'description'
p7206
g3
sS'type'
p7207
NsS'subblocks'
p7208
NsS'parameters'
p7209
(lp7210
(dp7211
S'description'
p7212
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7213
sS'cpp_type'
p7214
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7215
sS'default'
p7216
g3
sS'name'
p7217
S'block'
p7218
sS'required'
p7219
I00
sS'group_name'
p7220
Nsa(dp7221
S'description'
p7222
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7223
sS'cpp_type'
p7224
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7225
sS'default'
p7226
g3
sS'name'
p7227
S'boundary'
p7228
sS'required'
p7229
I00
sS'group_name'
p7230
Nsa(dp7231
S'description'
p7232
S'The min variable value inside the circle\n'
p7233
sS'cpp_type'
p7234
S'double'
p7235
sS'default'
p7236
g3
sS'name'
p7237
S'mn_invalue'
p7238
sS'required'
p7239
I01
sS'group_name'
p7240
Nsa(dp7241
S'description'
p7242
S'The min variable value outside the circle\n'
p7243
sS'cpp_type'
p7244
S'double'
p7245
sS'default'
p7246
g3
sS'name'
p7247
S'mn_outvalue'
p7248
sS'required'
p7249
I01
sS'group_name'
p7250
Nsa(dp7251
S'description'
p7252
S'The max variable value inside the circle\n'
p7253
sS'cpp_type'
p7254
S'double'
p7255
sS'default'
p7256
g3
sS'name'
p7257
S'mx_invalue'
p7258
sS'required'
p7259
I01
sS'group_name'
p7260
Nsa(dp7261
S'description'
p7262
S'The max variable value outside the circle\n'
p7263
sS'cpp_type'
p7264
S'double'
p7265
sS'default'
p7266
g3
sS'name'
p7267
S'mx_outvalue'
p7268
sS'required'
p7269
I01
sS'group_name'
p7270
Nsa(dp7271
S'description'
p7272
S'The radius of a circle\n'
p7273
sS'cpp_type'
p7274
S'double'
p7275
sS'default'
p7276
g3
sS'name'
p7277
S'radius'
p7278
sS'required'
p7279
I01
sS'group_name'
p7280
Nsa(dp7281
S'description'
p7282
S'Seed value for the random number generator\n'
p7283
sS'cpp_type'
p7284
S'unsigned int'
p7285
sS'default'
p7286
S'12345'
p7287
sS'name'
p7288
S'seed'
p7289
sS'required'
p7290
I00
sS'group_name'
p7291
Nsa(dp7292
S'description'
p7293
g3
sS'cpp_type'
p7294
S'std::string'
p7295
sS'default'
p7296
S'RndSmoothCircleIC'
p7297
sS'name'
p7298
S'type'
p7299
sS'required'
p7300
I00
sS'group_name'
p7301
Nsa(dp7302
S'description'
p7303
S'The variable this initial condition is supposed to provide values for.\n'
p7304
sS'cpp_type'
p7305
S'VariableName'
p7306
sS'default'
p7307
g3
sS'name'
p7308
S'variable'
p7309
sS'required'
p7310
I01
sS'group_name'
p7311
Nsa(dp7312
S'description'
p7313
S'The x coordinate of the circle center\n'
p7314
sS'cpp_type'
p7315
S'double'
p7316
sS'default'
p7317
g3
sS'name'
p7318
S'x1'
p7319
sS'required'
p7320
I01
sS'group_name'
p7321
Nsa(dp7322
S'description'
p7323
S'The y coordinate of the circle center\n'
p7324
sS'cpp_type'
p7325
S'double'
p7326
sS'default'
p7327
g3
sS'name'
p7328
S'y1'
p7329
sS'required'
p7330
I01
sS'group_name'
p7331
Nsa(dp7332
S'description'
p7333
S'The z coordinate of the circle center\n'
p7334
sS'cpp_type'
p7335
S'double'
p7336
sS'default'
p7337
S'0'
p7338
sS'name'
p7339
S'z1'
p7340
sS'required'
p7341
I00
sS'group_name'
p7342
NsasS'name'
p7343
S'/AuxVariables/*/InitialCondition/<type>/RndSmoothCircleIC'
p7344
sa(dp7345
S'description'
p7346
g3
sS'type'
p7347
NsS'subblocks'
p7348
NsS'parameters'
p7349
(lp7350
(dp7351
S'description'
p7352
g3
sS'cpp_type'
p7353
S'std::string'
p7354
sS'default'
p7355
S'ScalarComponentIC'
p7356
sS'name'
p7357
S'type'
p7358
sS'required'
p7359
I00
sS'group_name'
p7360
Nsa(dp7361
S'description'
p7362
S'Initial values to initialize the scalar variable.\n'
p7363
sS'cpp_type'
p7364
S'std::vector<double, std::allocator<double> >'
p7365
sS'default'
p7366
g3
sS'name'
p7367
S'values'
p7368
sS'required'
p7369
I01
sS'group_name'
p7370
Nsa(dp7371
S'description'
p7372
S'The variable this initial condition is supposed to provide values for.\n'
p7373
sS'cpp_type'
p7374
S'VariableName'
p7375
sS'default'
p7376
g3
sS'name'
p7377
S'variable'
p7378
sS'required'
p7379
I00
sS'group_name'
p7380
NsasS'name'
p7381
S'/AuxVariables/*/InitialCondition/<type>/ScalarComponentIC'
p7382
sa(dp7383
S'description'
p7384
g3
sS'type'
p7385
NsS'subblocks'
p7386
NsS'parameters'
p7387
(lp7388
(dp7389
S'description'
p7390
g3
sS'cpp_type'
p7391
S'std::string'
p7392
sS'default'
p7393
S'ScalarConstantIC'
p7394
sS'name'
p7395
S'type'
p7396
sS'required'
p7397
I00
sS'group_name'
p7398
Nsa(dp7399
S'description'
p7400
g3
sS'cpp_type'
p7401
S'double'
p7402
sS'default'
p7403
S'0'
p7404
sS'name'
p7405
S'value'
p7406
sS'required'
p7407
I00
sS'group_name'
p7408
Nsa(dp7409
S'description'
p7410
S'The variable this initial condition is supposed to provide values for.\n'
p7411
sS'cpp_type'
p7412
S'VariableName'
p7413
sS'default'
p7414
g3
sS'name'
p7415
S'variable'
p7416
sS'required'
p7417
I00
sS'group_name'
p7418
NsasS'name'
p7419
S'/AuxVariables/*/InitialCondition/<type>/ScalarConstantIC'
p7420
sa(dp7421
S'description'
p7422
g3
sS'type'
p7423
NsS'subblocks'
p7424
NsS'parameters'
p7425
(lp7426
(dp7427
S'description'
p7428
S'in 3D, whether the objects are spheres or columns\n'
p7429
sS'cpp_type'
p7430
S'bool'
p7431
sS'default'
p7432
S'1'
p7433
sS'name'
p7434
S'3D_spheres'
p7435
sS'required'
p7436
I00
sS'group_name'
p7437
Nsa(dp7438
S'description'
p7439
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7440
sS'cpp_type'
p7441
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7442
sS'default'
p7443
g3
sS'name'
p7444
S'block'
p7445
sS'required'
p7446
I00
sS'group_name'
p7447
Nsa(dp7448
S'description'
p7449
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7450
sS'cpp_type'
p7451
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7452
sS'default'
p7453
g3
sS'name'
p7454
S'boundary'
p7455
sS'required'
p7456
I00
sS'group_name'
p7457
Nsa(dp7458
S'description'
p7459
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p7460
sS'cpp_type'
p7461
S'double'
p7462
sS'default'
p7463
S'0'
p7464
sS'name'
p7465
S'int_width'
p7466
sS'required'
p7467
I00
sS'group_name'
p7468
Nsa(dp7469
S'description'
p7470
S'The variable value inside the circle\n'
p7471
sS'cpp_type'
p7472
S'double'
p7473
sS'default'
p7474
g3
sS'name'
p7475
S'invalue'
p7476
sS'required'
p7477
I01
sS'group_name'
p7478
Nsa(dp7479
S'description'
p7480
S'The variable value outside the circle\n'
p7481
sS'cpp_type'
p7482
S'double'
p7483
sS'default'
p7484
g3
sS'name'
p7485
S'outvalue'
p7486
sS'required'
p7487
I01
sS'group_name'
p7488
Nsa(dp7489
S'description'
p7490
S'The radius of a circle\n'
p7491
sS'cpp_type'
p7492
S'double'
p7493
sS'default'
p7494
g3
sS'name'
p7495
S'radius'
p7496
sS'required'
p7497
I01
sS'group_name'
p7498
Nsa(dp7499
S'description'
p7500
g3
sS'cpp_type'
p7501
S'std::string'
p7502
sS'default'
p7503
S'SmoothCircleIC'
p7504
sS'name'
p7505
S'type'
p7506
sS'required'
p7507
I00
sS'group_name'
p7508
Nsa(dp7509
S'description'
p7510
S'The variable this initial condition is supposed to provide values for.\n'
p7511
sS'cpp_type'
p7512
S'VariableName'
p7513
sS'default'
p7514
g3
sS'name'
p7515
S'variable'
p7516
sS'required'
p7517
I01
sS'group_name'
p7518
Nsa(dp7519
S'description'
p7520
S'The x coordinate of the circle center\n'
p7521
sS'cpp_type'
p7522
S'double'
p7523
sS'default'
p7524
g3
sS'name'
p7525
S'x1'
p7526
sS'required'
p7527
I01
sS'group_name'
p7528
Nsa(dp7529
S'description'
p7530
S'The y coordinate of the circle center\n'
p7531
sS'cpp_type'
p7532
S'double'
p7533
sS'default'
p7534
g3
sS'name'
p7535
S'y1'
p7536
sS'required'
p7537
I01
sS'group_name'
p7538
Nsa(dp7539
S'description'
p7540
S'The z coordinate of the circle center\n'
p7541
sS'cpp_type'
p7542
S'double'
p7543
sS'default'
p7544
S'0'
p7545
sS'name'
p7546
S'z1'
p7547
sS'required'
p7548
I00
sS'group_name'
p7549
NsasS'name'
p7550
S'/AuxVariables/*/InitialCondition/<type>/SmoothCircleIC'
p7551
sa(dp7552
S'description'
p7553
g3
sS'type'
p7554
NsS'subblocks'
p7555
NsS'parameters'
p7556
(lp7557
(dp7558
S'description'
p7559
S'in 3D, whether the objects are spheres or columns\n'
p7560
sS'cpp_type'
p7561
S'bool'
p7562
sS'default'
p7563
S'1'
p7564
sS'name'
p7565
S'3D_spheres'
p7566
sS'required'
p7567
I00
sS'group_name'
p7568
Nsa(dp7569
S'description'
p7570
S'length of simulation domain in x-direction\n'
p7571
sS'cpp_type'
p7572
S'double'
p7573
sS'default'
p7574
S'0'
p7575
sS'name'
p7576
S'Lx'
p7577
sS'required'
p7578
I01
sS'group_name'
p7579
Nsa(dp7580
S'description'
p7581
S'length of simulation domain in y-direction\n'
p7582
sS'cpp_type'
p7583
S'double'
p7584
sS'default'
p7585
S'0'
p7586
sS'name'
p7587
S'Ly'
p7588
sS'required'
p7589
I01
sS'group_name'
p7590
Nsa(dp7591
S'description'
p7592
S'length of simulation domain in z-direction\n'
p7593
sS'cpp_type'
p7594
S'double'
p7595
sS'default'
p7596
S'0'
p7597
sS'name'
p7598
S'Lz'
p7599
sS'required'
p7600
I00
sS'group_name'
p7601
Nsa(dp7602
S'description'
p7603
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7604
sS'cpp_type'
p7605
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7606
sS'default'
p7607
g3
sS'name'
p7608
S'block'
p7609
sS'required'
p7610
I00
sS'group_name'
p7611
Nsa(dp7612
S'description'
p7613
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7614
sS'cpp_type'
p7615
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7616
sS'default'
p7617
g3
sS'name'
p7618
S'boundary'
p7619
sS'required'
p7620
I00
sS'group_name'
p7621
Nsa(dp7622
S'description'
p7623
S'minimum spacing of bubbles, measured from center to center\n'
p7624
sS'cpp_type'
p7625
S'double'
p7626
sS'default'
p7627
S'0'
p7628
sS'name'
p7629
S'bubspac'
p7630
sS'required'
p7631
I01
sS'group_name'
p7632
Nsa(dp7633
S'description'
p7634
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p7635
sS'cpp_type'
p7636
S'double'
p7637
sS'default'
p7638
S'0'
p7639
sS'name'
p7640
S'int_width'
p7641
sS'required'
p7642
I00
sS'group_name'
p7643
Nsa(dp7644
S'description'
p7645
S'The variable value inside the circle\n'
p7646
sS'cpp_type'
p7647
S'double'
p7648
sS'default'
p7649
g3
sS'name'
p7650
S'invalue'
p7651
sS'required'
p7652
I01
sS'group_name'
p7653
Nsa(dp7654
S'description'
p7655
S'The number of bubbles to be placed on GB\n'
p7656
sS'cpp_type'
p7657
S'unsigned int'
p7658
sS'default'
p7659
S'0'
p7660
sS'name'
p7661
S'numbub'
p7662
sS'required'
p7663
I01
sS'group_name'
p7664
Nsa(dp7665
S'description'
p7666
S'The number of tries\n'
p7667
sS'cpp_type'
p7668
S'unsigned int'
p7669
sS'default'
p7670
S'1000'
p7671
sS'name'
p7672
S'numtries'
p7673
sS'required'
p7674
I00
sS'group_name'
p7675
Nsa(dp7676
S'description'
p7677
S'The variable value outside the circle\n'
p7678
sS'cpp_type'
p7679
S'double'
p7680
sS'default'
p7681
g3
sS'name'
p7682
S'outvalue'
p7683
sS'required'
p7684
I01
sS'group_name'
p7685
Nsa(dp7686
S'description'
p7687
S'The radius for each circle\n'
p7688
sS'cpp_type'
p7689
S'std::vector<double, std::allocator<double> >'
p7690
sS'default'
p7691
g3
sS'name'
p7692
S'radii'
p7693
sS'required'
p7694
I01
sS'group_name'
p7695
Nsa(dp7696
S'description'
p7697
S'The radius of a circle\n'
p7698
sS'cpp_type'
p7699
S'double'
p7700
sS'default'
p7701
S'0'
p7702
sS'name'
p7703
S'radius'
p7704
sS'required'
p7705
I01
sS'group_name'
p7706
Nsa(dp7707
S'description'
p7708
S'Plus or minus Percent of random variation in the bubble radius\n'
p7709
sS'cpp_type'
p7710
S'double'
p7711
sS'default'
p7712
S'0'
p7713
sS'name'
p7714
S'radius_variation'
p7715
sS'required'
p7716
I00
sS'group_name'
p7717
Nsa(dp7718
S'description'
p7719
S'random seed\n'
p7720
sS'cpp_type'
p7721
S'unsigned int'
p7722
sS'default'
p7723
S'2000'
p7724
sS'name'
p7725
S'rand_seed'
p7726
sS'required'
p7727
I00
sS'group_name'
p7728
Nsa(dp7729
S'description'
p7730
g3
sS'cpp_type'
p7731
S'std::string'
p7732
sS'default'
p7733
S'SpecifiedSmoothCircleIC'
p7734
sS'name'
p7735
S'type'
p7736
sS'required'
p7737
I00
sS'group_name'
p7738
Nsa(dp7739
S'description'
p7740
S'The variable this initial condition is supposed to provide values for.\n'
p7741
sS'cpp_type'
p7742
S'VariableName'
p7743
sS'default'
p7744
g3
sS'name'
p7745
S'variable'
p7746
sS'required'
p7747
I01
sS'group_name'
p7748
Nsa(dp7749
S'description'
p7750
S'The x coordinate of the circle center\n'
p7751
sS'cpp_type'
p7752
S'double'
p7753
sS'default'
p7754
S'0'
p7755
sS'name'
p7756
S'x1'
p7757
sS'required'
p7758
I01
sS'group_name'
p7759
Nsa(dp7760
S'description'
p7761
S'The x-coordinate for each circle center\n'
p7762
sS'cpp_type'
p7763
S'std::vector<double, std::allocator<double> >'
p7764
sS'default'
p7765
g3
sS'name'
p7766
S'x_positions'
p7767
sS'required'
p7768
I01
sS'group_name'
p7769
Nsa(dp7770
S'description'
p7771
S'The y coordinate of the circle center\n'
p7772
sS'cpp_type'
p7773
S'double'
p7774
sS'default'
p7775
S'0'
p7776
sS'name'
p7777
S'y1'
p7778
sS'required'
p7779
I01
sS'group_name'
p7780
Nsa(dp7781
S'description'
p7782
S'The y-coordinate for each circle center\n'
p7783
sS'cpp_type'
p7784
S'std::vector<double, std::allocator<double> >'
p7785
sS'default'
p7786
g3
sS'name'
p7787
S'y_positions'
p7788
sS'required'
p7789
I01
sS'group_name'
p7790
Nsa(dp7791
S'description'
p7792
S'The z coordinate of the circle center\n'
p7793
sS'cpp_type'
p7794
S'double'
p7795
sS'default'
p7796
S'0'
p7797
sS'name'
p7798
S'z1'
p7799
sS'required'
p7800
I00
sS'group_name'
p7801
Nsa(dp7802
S'description'
p7803
S'The z-coordinate for each circle center\n'
p7804
sS'cpp_type'
p7805
S'std::vector<double, std::allocator<double> >'
p7806
sS'default'
p7807
g3
sS'name'
p7808
S'z_positions'
p7809
sS'required'
p7810
I01
sS'group_name'
p7811
NsasS'name'
p7812
S'/AuxVariables/*/InitialCondition/<type>/SpecifiedSmoothCircleIC'
p7813
sa(dp7814
S'description'
p7815
g3
sS'type'
p7816
NsS'subblocks'
p7817
NsS'parameters'
p7818
(lp7819
(dp7820
S'description'
p7821
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7822
sS'cpp_type'
p7823
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7824
sS'default'
p7825
g3
sS'name'
p7826
S'block'
p7827
sS'required'
p7828
I00
sS'group_name'
p7829
Nsa(dp7830
S'description'
p7831
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7832
sS'cpp_type'
p7833
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7834
sS'default'
p7835
g3
sS'name'
p7836
S'boundary'
p7837
sS'required'
p7838
I00
sS'group_name'
p7839
Nsa(dp7840
S'description'
p7841
S'The z coordinate of the circle center\n'
p7842
sS'cpp_type'
p7843
S'double'
p7844
sS'default'
p7845
g3
sS'name'
p7846
S'height'
p7847
sS'required'
p7848
I01
sS'group_name'
p7849
Nsa(dp7850
S'description'
p7851
S'The variable value inside the circle\n'
p7852
sS'cpp_type'
p7853
S'double'
p7854
sS'default'
p7855
g3
sS'name'
p7856
S'invalue'
p7857
sS'required'
p7858
I01
sS'group_name'
p7859
Nsa(dp7860
S'description'
p7861
S'The variable value outside the circle\n'
p7862
sS'cpp_type'
p7863
S'double'
p7864
sS'default'
p7865
g3
sS'name'
p7866
S'outvalue'
p7867
sS'required'
p7868
I01
sS'group_name'
p7869
Nsa(dp7870
S'description'
p7871
g3
sS'cpp_type'
p7872
S'std::string'
p7873
sS'default'
p7874
S'ThumbIC'
p7875
sS'name'
p7876
S'type'
p7877
sS'required'
p7878
I00
sS'group_name'
p7879
Nsa(dp7880
S'description'
p7881
S'The variable this initial condition is supposed to provide values for.\n'
p7882
sS'cpp_type'
p7883
S'VariableName'
p7884
sS'default'
p7885
g3
sS'name'
p7886
S'variable'
p7887
sS'required'
p7888
I01
sS'group_name'
p7889
Nsa(dp7890
S'description'
p7891
S'The y coordinate of the circle center\n'
p7892
sS'cpp_type'
p7893
S'double'
p7894
sS'default'
p7895
g3
sS'name'
p7896
S'width'
p7897
sS'required'
p7898
I01
sS'group_name'
p7899
Nsa(dp7900
S'description'
p7901
S'The x coordinate of the circle center\n'
p7902
sS'cpp_type'
p7903
S'double'
p7904
sS'default'
p7905
g3
sS'name'
p7906
S'xcoord'
p7907
sS'required'
p7908
I01
sS'group_name'
p7909
NsasS'name'
p7910
S'/AuxVariables/*/InitialCondition/<type>/ThumbIC'
p7911
sa(dp7912
S'description'
p7913
g3
sS'type'
p7914
NsS'subblocks'
p7915
NsS'parameters'
p7916
(lp7917
(dp7918
S'description'
p7919
S'The list of block ids (SubdomainID) that this object will be applied\n'
p7920
sS'cpp_type'
p7921
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7922
sS'default'
p7923
g3
sS'name'
p7924
S'block'
p7925
sS'required'
p7926
I00
sS'group_name'
p7927
Nsa(dp7928
S'description'
p7929
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7930
sS'cpp_type'
p7931
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7932
sS'default'
p7933
g3
sS'name'
p7934
S'boundary'
p7935
sS'required'
p7936
I00
sS'group_name'
p7937
Nsa(dp7938
S'description'
p7939
S'The index for the current crystal\n'
p7940
sS'cpp_type'
p7941
S'unsigned int'
p7942
sS'default'
p7943
g3
sS'name'
p7944
S'crys_index'
p7945
sS'required'
p7946
I01
sS'group_name'
p7947
Nsa(dp7948
S'description'
p7949
S'Number of crystals\n'
p7950
sS'cpp_type'
p7951
S'unsigned int'
p7952
sS'default'
p7953
g3
sS'name'
p7954
S'crys_num'
p7955
sS'required'
p7956
I01
sS'group_name'
p7957
Nsa(dp7958
S'description'
p7959
g3
sS'cpp_type'
p7960
S'std::string'
p7961
sS'default'
p7962
S'Tricrystal2CircleGrainsIC'
p7963
sS'name'
p7964
S'type'
p7965
sS'required'
p7966
I00
sS'group_name'
p7967
Nsa(dp7968
S'description'
p7969
S'The variable this initial condition is supposed to provide values for.\n'
p7970
sS'cpp_type'
p7971
S'VariableName'
p7972
sS'default'
p7973
g3
sS'name'
p7974
S'variable'
p7975
sS'required'
p7976
I01
sS'group_name'
p7977
NsasS'name'
p7978
S'/AuxVariables/*/InitialCondition/<type>/Tricrystal2CircleGrainsIC'
p7979
sasS'parameters'
p7980
NsS'name'
p7981
S'/AuxVariables/*/InitialCondition/<type>'
p7982
sasS'parameters'
p7983
(lp7984
(dp7985
S'description'
p7986
S'A string representing the Moose Object that will be built by this Action\n'
p7987
sS'cpp_type'
p7988
S'std::string'
p7989
sS'default'
p7990
g3
sS'name'
p7991
S'type'
p7992
sS'required'
p7993
I01
sS'group_name'
p7994
NsasS'name'
p7995
S'/AuxVariables/*/InitialCondition'
p7996
sasS'parameters'
p7997
(lp7998
(dp7999
S'description'
p8000
S'The block id where this variable lives\n'
p8001
sS'cpp_type'
p8002
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8003
sS'default'
p8004
g3
sS'name'
p8005
S'block'
p8006
sS'required'
p8007
I00
sS'group_name'
p8008
Nsa(dp8009
S'name'
p8010
S'family'
p8011
sS'cpp_type'
p8012
S'MooseEnum'
p8013
sS'default'
p8014
S'LAGRANGE'
p8015
sS'description'
p8016
S'Specifies the family of FE shape functions to use for this variable\n'
p8017
sS'required'
p8018
I00
sS'options'
p8019
S'LAGRANGE MONOMIAL SCALAR'
p8020
sS'group_name'
p8021
Nsa(dp8022
S'description'
p8023
S'Specifies the initial condition for this variable\n'
p8024
sS'cpp_type'
p8025
S'double'
p8026
sS'default'
p8027
S'0'
p8028
sS'name'
p8029
S'initial_condition'
p8030
sS'required'
p8031
I00
sS'group_name'
p8032
Nsa(dp8033
S'name'
p8034
S'order'
p8035
sS'cpp_type'
p8036
S'MooseEnum'
p8037
sS'default'
p8038
S'FIRST'
p8039
sS'description'
p8040
S'Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n'
p8041
sS'required'
p8042
I00
sS'options'
p8043
S'CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH'
p8044
sS'group_name'
p8045
Nsa(dp8046
S'description'
p8047
S'Gives the timestep for which to read a solution from a file for a given variable\n'
p8048
sS'cpp_type'
p8049
S'int'
p8050
sS'default'
p8051
S'2'
p8052
sS'name'
p8053
S'initial_from_file_timestep'
p8054
sS'required'
p8055
I00
sS'group_name'
p8056
S'Initial From File'
p8057
sa(dp8058
S'description'
p8059
S'Gives the name of a variable for which to read an initial condition from a mesh file\n'
p8060
sS'cpp_type'
p8061
S'std::string'
p8062
sS'default'
p8063
g3
sS'name'
p8064
S'initial_from_file_var'
p8065
sS'required'
p8066
I00
sS'group_name'
p8067
S'Initial From File'
p8068
sasS'name'
p8069
S'/AuxVariables/*'
p8070
sasS'parameters'
p8071
NsS'name'
p8072
S'/AuxVariables'
p8073
sa(dp8074
S'description'
p8075
g3
sS'type'
p8076
NsS'subblocks'
p8077
(lp8078
(dp8079
S'description'
p8080
g3
sS'type'
p8081
NsS'subblocks'
p8082
NsS'parameters'
p8083
(lp8084
(dp8085
S'description'
p8086
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8087
sS'cpp_type'
p8088
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8089
sS'default'
p8090
g3
sS'name'
p8091
S'boundary'
p8092
sS'required'
p8093
I01
sS'group_name'
p8094
Nsa(dp8095
S'description'
p8096
S'A string representing the Moose Object that will be built by this Action\n'
p8097
sS'cpp_type'
p8098
S'std::string'
p8099
sS'default'
p8100
g3
sS'name'
p8101
S'type'
p8102
sS'required'
p8103
I01
sS'group_name'
p8104
Nsa(dp8105
S'description'
p8106
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8107
sS'cpp_type'
p8108
S'bool'
p8109
sS'default'
p8110
S'0'
p8111
sS'name'
p8112
S'use_displaced_mesh'
p8113
sS'required'
p8114
I00
sS'group_name'
p8115
S'Advanced'
p8116
sa(dp8117
S'description'
p8118
S'The name of the variable that this boundary condition applies to\n'
p8119
sS'cpp_type'
p8120
S'NonlinearVariableName'
p8121
sS'default'
p8122
g3
sS'name'
p8123
S'variable'
p8124
sS'required'
p8125
I01
sS'group_name'
p8126
NsasS'name'
p8127
S'/BCs/*'
p8128
sa(dp8129
S'description'
p8130
g3
sS'type'
p8131
NsS'subblocks'
p8132
NsS'parameters'
p8133
(lp8134
(dp8135
S'description'
p8136
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8137
sS'cpp_type'
p8138
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8139
sS'default'
p8140
g3
sS'name'
p8141
S'boundary'
p8142
sS'required'
p8143
I01
sS'group_name'
p8144
Nsa(dp8145
S'description'
p8146
S"The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8147
sS'cpp_type'
p8148
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p8149
sS'default'
p8150
g3
sS'name'
p8151
S'diag_save_in'
p8152
sS'required'
p8153
I00
sS'group_name'
p8154
S'Advanced'
p8155
sa(dp8156
S'description'
p8157
g3
sS'cpp_type'
p8158
S'double'
p8159
sS'default'
p8160
S'0'
p8161
sS'name'
p8162
S'duration'
p8163
sS'required'
p8164
I00
sS'group_name'
p8165
Nsa(dp8166
S'description'
p8167
g3
sS'cpp_type'
p8168
S'double'
p8169
sS'default'
p8170
S'500'
p8171
sS'name'
p8172
S'final'
p8173
sS'required'
p8174
I00
sS'group_name'
p8175
Nsa(dp8176
S'description'
p8177
g3
sS'cpp_type'
p8178
S'double'
p8179
sS'default'
p8180
S'500'
p8181
sS'name'
p8182
S'initial'
p8183
sS'required'
p8184
I00
sS'group_name'
p8185
Nsa(dp8186
S'description'
p8187
g3
sS'cpp_type'
p8188
S'double'
p8189
sS'default'
p8190
S'7500'
p8191
sS'name'
p8192
S'rate'
p8193
sS'required'
p8194
I00
sS'group_name'
p8195
Nsa(dp8196
S'description'
p8197
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8198
sS'cpp_type'
p8199
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p8200
sS'default'
p8201
g3
sS'name'
p8202
S'save_in'
p8203
sS'required'
p8204
I00
sS'group_name'
p8205
S'Advanced'
p8206
sa(dp8207
S'description'
p8208
S'The seed for the master random number generator\n'
p8209
sS'cpp_type'
p8210
S'unsigned int'
p8211
sS'default'
p8212
S'0'
p8213
sS'name'
p8214
S'seed'
p8215
sS'required'
p8216
I00
sS'group_name'
p8217
S'Advanced'
p8218
sa(dp8219
S'description'
p8220
g3
sS'cpp_type'
p8221
S'std::string'
p8222
sS'default'
p8223
S'ConvectiveFluxBC'
p8224
sS'name'
p8225
S'type'
p8226
sS'required'
p8227
I00
sS'group_name'
p8228
Nsa(dp8229
S'description'
p8230
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8231
sS'cpp_type'
p8232
S'bool'
p8233
sS'default'
p8234
S'0'
p8235
sS'name'
p8236
S'use_displaced_mesh'
p8237
sS'required'
p8238
I00
sS'group_name'
p8239
S'Advanced'
p8240
sa(dp8241
S'description'
p8242
S'The name of the variable that this boundary condition applies to\n'
p8243
sS'cpp_type'
p8244
S'NonlinearVariableName'
p8245
sS'default'
p8246
g3
sS'name'
p8247
S'variable'
p8248
sS'required'
p8249
I01
sS'group_name'
p8250
NsasS'name'
p8251
S'/BCs/ConvectiveFluxBC'
p8252
sa(dp8253
S'description'
p8254
g3
sS'type'
p8255
NsS'subblocks'
p8256
NsS'parameters'
p8257
(lp8258
(dp8259
S'description'
p8260
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8261
sS'cpp_type'
p8262
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8263
sS'default'
p8264
g3
sS'name'
p8265
S'boundary'
p8266
sS'required'
p8267
I01
sS'group_name'
p8268
Nsa(dp8269
S'description'
p8270
S"The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8271
sS'cpp_type'
p8272
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p8273
sS'default'
p8274
g3
sS'name'
p8275
S'diag_save_in'
p8276
sS'required'
p8277
I00
sS'group_name'
p8278
S'Advanced'
p8279
sa(dp8280
S'description'
p8281
S'Epsilon\n'
p8282
sS'cpp_type'
p8283
S'double'
p8284
sS'default'
p8285
g3
sS'name'
p8286
S'epsilon'
p8287
sS'required'
p8288
I01
sS'group_name'
p8289
Nsa(dp8290
S'description'
p8291
S'The forcing function.\n'
p8292
sS'cpp_type'
p8293
S'FunctionName'
p8294
sS'default'
p8295
g3
sS'name'
p8296
S'function'
p8297
sS'required'
p8298
I01
sS'group_name'
p8299
Nsa(dp8300
S'description'
p8301
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8302
sS'cpp_type'
p8303
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p8304
sS'default'
p8305
g3
sS'name'
p8306
S'save_in'
p8307
sS'required'
p8308
I00
sS'group_name'
p8309
S'Advanced'
p8310
sa(dp8311
S'description'
p8312
S'The seed for the master random number generator\n'
p8313
sS'cpp_type'
p8314
S'unsigned int'
p8315
sS'default'
p8316
S'0'
p8317
sS'name'
p8318
S'seed'
p8319
sS'required'
p8320
I00
sS'group_name'
p8321
S'Advanced'
p8322
sa(dp8323
S'description'
p8324
S'Sigma\n'
p8325
sS'cpp_type'
p8326
S'double'
p8327
sS'default'
p8328
g3
sS'name'
p8329
S'sigma'
p8330
sS'required'
p8331
I01
sS'group_name'
p8332
Nsa(dp8333
S'description'
p8334
g3
sS'cpp_type'
p8335
S'std::string'
p8336
sS'default'
p8337
S'DGFunctionDiffusionDirichletBC'
p8338
sS'name'
p8339
S'type'
p8340
sS'required'
p8341
I00
sS'group_name'
p8342
Nsa(dp8343
S'description'
p8344
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8345
sS'cpp_type'
p8346
S'bool'
p8347
sS'default'
p8348
S'0'
p8349
sS'name'
p8350
S'use_displaced_mesh'
p8351
sS'required'
p8352
I00
sS'group_name'
p8353
S'Advanced'
p8354
sa(dp8355
S'description'
p8356
S'The value the variable should have on the boundary\n'
p8357
sS'cpp_type'
p8358
S'double'
p8359
sS'default'
p8360
S'0'
p8361
sS'name'
p8362
S'value'
p8363
sS'required'
p8364
I00
sS'group_name'
p8365
Nsa(dp8366
S'description'
p8367
S'The name of the variable that this boundary condition applies to\n'
p8368
sS'cpp_type'
p8369
S'NonlinearVariableName'
p8370
sS'default'
p8371
g3
sS'name'
p8372
S'variable'
p8373
sS'required'
p8374
I01
sS'group_name'
p8375
NsasS'name'
p8376
S'/BCs/DGFunctionDiffusionDirichletBC'
p8377
sa(dp8378
S'description'
p8379
g3
sS'type'
p8380
NsS'subblocks'
p8381
NsS'parameters'
p8382
(lp8383
(dp8384
S'description'
p8385
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8386
sS'cpp_type'
p8387
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8388
sS'default'
p8389
g3
sS'name'
p8390
S'boundary'
p8391
sS'required'
p8392
I01
sS'group_name'
p8393
Nsa(dp8394
S'description'
p8395
S"The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8396
sS'cpp_type'
p8397
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p8398
sS'default'
p8399
g3
sS'name'
p8400
S'diag_save_in'
p8401
sS'required'
p8402
I00
sS'group_name'
p8403
S'Advanced'
p8404
sa(dp8405
S'description'
p8406
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8407
sS'cpp_type'
p8408
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p8409
sS'default'
p8410
g3
sS'name'
p8411
S'save_in'
p8412
sS'required'
p8413
I00
sS'group_name'
p8414
S'Advanced'
p8415
sa(dp8416
S'description'
p8417
S'The seed for the master random number generator\n'
p8418
sS'cpp_type'
p8419
S'unsigned int'
p8420
sS'default'
p8421
S'0'
p8422
sS'name'
p8423
S'seed'
p8424
sS'required'
p8425
I00
sS'group_name'
p8426
S'Advanced'
p8427
sa(dp8428
S'description'
p8429
g3
sS'cpp_type'
p8430
S'std::string'
p8431
sS'default'
p8432
S'DiffusionFluxBC'
p8433
sS'name'
p8434
S'type'
p8435
sS'required'
p8436
I00
sS'group_name'
p8437
Nsa(dp8438
S'description'
p8439
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8440
sS'cpp_type'
p8441
S'bool'
p8442
sS'default'
p8443
S'0'
p8444
sS'name'
p8445
S'use_displaced_mesh'
p8446
sS'required'
p8447
I00
sS'group_name'
p8448
S'Advanced'
p8449
sa(dp8450
S'description'
p8451
S'The name of the variable that this boundary condition applies to\n'
p8452
sS'cpp_type'
p8453
S'NonlinearVariableName'
p8454
sS'default'
p8455
g3
sS'name'
p8456
S'variable'
p8457
sS'required'
p8458
I01
sS'group_name'
p8459
NsasS'name'
p8460
S'/BCs/DiffusionFluxBC'
p8461
sa(dp8462
S'description'
p8463
g3
sS'type'
p8464
NsS'subblocks'
p8465
NsS'parameters'
p8466
(lp8467
(dp8468
S'description'
p8469
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8470
sS'cpp_type'
p8471
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8472
sS'default'
p8473
g3
sS'name'
p8474
S'boundary'
p8475
sS'required'
p8476
I01
sS'group_name'
p8477
Nsa(dp8478
S'description'
p8479
S'The seed for the master random number generator\n'
p8480
sS'cpp_type'
p8481
S'unsigned int'
p8482
sS'default'
p8483
S'0'
p8484
sS'name'
p8485
S'seed'
p8486
sS'required'
p8487
I00
sS'group_name'
p8488
S'Advanced'
p8489
sa(dp8490
S'description'
p8491
g3
sS'cpp_type'
p8492
S'std::string'
p8493
sS'default'
p8494
S'DirichletBC'
p8495
sS'name'
p8496
S'type'
p8497
sS'required'
p8498
I00
sS'group_name'
p8499
Nsa(dp8500
S'description'
p8501
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8502
sS'cpp_type'
p8503
S'bool'
p8504
sS'default'
p8505
S'0'
p8506
sS'name'
p8507
S'use_displaced_mesh'
p8508
sS'required'
p8509
I00
sS'group_name'
p8510
S'Advanced'
p8511
sa(dp8512
S'description'
p8513
S'Value of the BC\n'
p8514
sS'cpp_type'
p8515
S'double'
p8516
sS'default'
p8517
g3
sS'name'
p8518
S'value'
p8519
sS'required'
p8520
I01
sS'group_name'
p8521
Nsa(dp8522
S'description'
p8523
S'The name of the variable that this boundary condition applies to\n'
p8524
sS'cpp_type'
p8525
S'NonlinearVariableName'
p8526
sS'default'
p8527
g3
sS'name'
p8528
S'variable'
p8529
sS'required'
p8530
I01
sS'group_name'
p8531
NsasS'name'
p8532
S'/BCs/DirichletBC'
p8533
sa(dp8534
S'description'
p8535
g3
sS'type'
p8536
NsS'subblocks'
p8537
NsS'parameters'
p8538
(lp8539
(dp8540
S'description'
p8541
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8542
sS'cpp_type'
p8543
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8544
sS'default'
p8545
g3
sS'name'
p8546
S'boundary'
p8547
sS'required'
p8548
I01
sS'group_name'
p8549
Nsa(dp8550
S'description'
p8551
S'The forcing function.\n'
p8552
sS'cpp_type'
p8553
S'FunctionName'
p8554
sS'default'
p8555
g3
sS'name'
p8556
S'function'
p8557
sS'required'
p8558
I01
sS'group_name'
p8559
Nsa(dp8560
S'description'
p8561
S'The seed for the master random number generator\n'
p8562
sS'cpp_type'
p8563
S'unsigned int'
p8564
sS'default'
p8565
S'0'
p8566
sS'name'
p8567
S'seed'
p8568
sS'required'
p8569
I00
sS'group_name'
p8570
S'Advanced'
p8571
sa(dp8572
S'description'
p8573
g3
sS'cpp_type'
p8574
S'std::string'
p8575
sS'default'
p8576
S'FunctionDirichletBC'
p8577
sS'name'
p8578
S'type'
p8579
sS'required'
p8580
I00
sS'group_name'
p8581
Nsa(dp8582
S'description'
p8583
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8584
sS'cpp_type'
p8585
S'bool'
p8586
sS'default'
p8587
S'0'
p8588
sS'name'
p8589
S'use_displaced_mesh'
p8590
sS'required'
p8591
I00
sS'group_name'
p8592
S'Advanced'
p8593
sa(dp8594
S'description'
p8595
S'The name of the variable that this boundary condition applies to\n'
p8596
sS'cpp_type'
p8597
S'NonlinearVariableName'
p8598
sS'default'
p8599
g3
sS'name'
p8600
S'variable'
p8601
sS'required'
p8602
I01
sS'group_name'
p8603
NsasS'name'
p8604
S'/BCs/FunctionDirichletBC'
p8605
sa(dp8606
S'description'
p8607
g3
sS'type'
p8608
NsS'subblocks'
p8609
NsS'parameters'
p8610
(lp8611
(dp8612
S'description'
p8613
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8614
sS'cpp_type'
p8615
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8616
sS'default'
p8617
g3
sS'name'
p8618
S'boundary'
p8619
sS'required'
p8620
I01
sS'group_name'
p8621
Nsa(dp8622
S'description'
p8623
S"The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8624
sS'cpp_type'
p8625
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p8626
sS'default'
p8627
g3
sS'name'
p8628
S'diag_save_in'
p8629
sS'required'
p8630
I00
sS'group_name'
p8631
S'Advanced'
p8632
sa(dp8633
S'description'
p8634
S'The function.\n'
p8635
sS'cpp_type'
p8636
S'FunctionName'
p8637
sS'default'
p8638
g3
sS'name'
p8639
S'function'
p8640
sS'required'
p8641
I01
sS'group_name'
p8642
Nsa(dp8643
S'description'
p8644
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8645
sS'cpp_type'
p8646
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p8647
sS'default'
p8648
g3
sS'name'
p8649
S'save_in'
p8650
sS'required'
p8651
I00
sS'group_name'
p8652
S'Advanced'
p8653
sa(dp8654
S'description'
p8655
S'The seed for the master random number generator\n'
p8656
sS'cpp_type'
p8657
S'unsigned int'
p8658
sS'default'
p8659
S'0'
p8660
sS'name'
p8661
S'seed'
p8662
sS'required'
p8663
I00
sS'group_name'
p8664
S'Advanced'
p8665
sa(dp8666
S'description'
p8667
g3
sS'cpp_type'
p8668
S'std::string'
p8669
sS'default'
p8670
S'FunctionNeumannBC'
p8671
sS'name'
p8672
S'type'
p8673
sS'required'
p8674
I00
sS'group_name'
p8675
Nsa(dp8676
S'description'
p8677
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8678
sS'cpp_type'
p8679
S'bool'
p8680
sS'default'
p8681
S'0'
p8682
sS'name'
p8683
S'use_displaced_mesh'
p8684
sS'required'
p8685
I00
sS'group_name'
p8686
S'Advanced'
p8687
sa(dp8688
S'description'
p8689
S'The name of the variable that this boundary condition applies to\n'
p8690
sS'cpp_type'
p8691
S'NonlinearVariableName'
p8692
sS'default'
p8693
g3
sS'name'
p8694
S'variable'
p8695
sS'required'
p8696
I01
sS'group_name'
p8697
NsasS'name'
p8698
S'/BCs/FunctionNeumannBC'
p8699
sa(dp8700
S'description'
p8701
g3
sS'type'
p8702
NsS'subblocks'
p8703
NsS'parameters'
p8704
(lp8705
(dp8706
S'description'
p8707
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8708
sS'cpp_type'
p8709
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8710
sS'default'
p8711
g3
sS'name'
p8712
S'boundary'
p8713
sS'required'
p8714
I01
sS'group_name'
p8715
Nsa(dp8716
S'description'
p8717
S'The forcing function.\n'
p8718
sS'cpp_type'
p8719
S'FunctionName'
p8720
sS'default'
p8721
g3
sS'name'
p8722
S'function'
p8723
sS'required'
p8724
I01
sS'group_name'
p8725
Nsa(dp8726
S'description'
p8727
S'The seed for the master random number generator\n'
p8728
sS'cpp_type'
p8729
S'unsigned int'
p8730
sS'default'
p8731
S'0'
p8732
sS'name'
p8733
S'seed'
p8734
sS'required'
p8735
I00
sS'group_name'
p8736
S'Advanced'
p8737
sa(dp8738
S'description'
p8739
g3
sS'cpp_type'
p8740
S'std::string'
p8741
sS'default'
p8742
S'FunctionPresetBC'
p8743
sS'name'
p8744
S'type'
p8745
sS'required'
p8746
I00
sS'group_name'
p8747
Nsa(dp8748
S'description'
p8749
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8750
sS'cpp_type'
p8751
S'bool'
p8752
sS'default'
p8753
S'0'
p8754
sS'name'
p8755
S'use_displaced_mesh'
p8756
sS'required'
p8757
I00
sS'group_name'
p8758
S'Advanced'
p8759
sa(dp8760
S'description'
p8761
S'The name of the variable that this boundary condition applies to\n'
p8762
sS'cpp_type'
p8763
S'NonlinearVariableName'
p8764
sS'default'
p8765
g3
sS'name'
p8766
S'variable'
p8767
sS'required'
p8768
I01
sS'group_name'
p8769
NsasS'name'
p8770
S'/BCs/FunctionPresetBC'
p8771
sa(dp8772
S'description'
p8773
g3
sS'type'
p8774
NsS'subblocks'
p8775
NsS'parameters'
p8776
(lp8777
(dp8778
S'description'
p8779
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8780
sS'cpp_type'
p8781
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8782
sS'default'
p8783
g3
sS'name'
p8784
S'boundary'
p8785
sS'required'
p8786
I01
sS'group_name'
p8787
Nsa(dp8788
S'description'
p8789
S'The seed for the master random number generator\n'
p8790
sS'cpp_type'
p8791
S'unsigned int'
p8792
sS'default'
p8793
S'0'
p8794
sS'name'
p8795
S'seed'
p8796
sS'required'
p8797
I00
sS'group_name'
p8798
S'Advanced'
p8799
sa(dp8800
S'description'
p8801
g3
sS'cpp_type'
p8802
S'std::string'
p8803
sS'default'
p8804
S'MatchedValueBC'
p8805
sS'name'
p8806
S'type'
p8807
sS'required'
p8808
I00
sS'group_name'
p8809
Nsa(dp8810
S'description'
p8811
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8812
sS'cpp_type'
p8813
S'bool'
p8814
sS'default'
p8815
S'0'
p8816
sS'name'
p8817
S'use_displaced_mesh'
p8818
sS'required'
p8819
I00
sS'group_name'
p8820
S'Advanced'
p8821
sa(dp8822
S'description'
p8823
g3
sS'cpp_type'
p8824
S'std::vector<VariableName>'
p8825
sS'default'
p8826
g3
sS'name'
p8827
S'v'
p8828
sS'required'
p8829
I01
sS'group_name'
p8830
Nsa(dp8831
S'description'
p8832
S'The name of the variable that this boundary condition applies to\n'
p8833
sS'cpp_type'
p8834
S'NonlinearVariableName'
p8835
sS'default'
p8836
g3
sS'name'
p8837
S'variable'
p8838
sS'required'
p8839
I01
sS'group_name'
p8840
NsasS'name'
p8841
S'/BCs/MatchedValueBC'
p8842
sa(dp8843
S'description'
p8844
g3
sS'type'
p8845
NsS'subblocks'
p8846
NsS'parameters'
p8847
(lp8848
(dp8849
S'description'
p8850
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8851
sS'cpp_type'
p8852
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8853
sS'default'
p8854
g3
sS'name'
p8855
S'boundary'
p8856
sS'required'
p8857
I01
sS'group_name'
p8858
Nsa(dp8859
S'description'
p8860
S"The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8861
sS'cpp_type'
p8862
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p8863
sS'default'
p8864
g3
sS'name'
p8865
S'diag_save_in'
p8866
sS'required'
p8867
I00
sS'group_name'
p8868
S'Advanced'
p8869
sa(dp8870
S'description'
p8871
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8872
sS'cpp_type'
p8873
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p8874
sS'default'
p8875
g3
sS'name'
p8876
S'save_in'
p8877
sS'required'
p8878
I00
sS'group_name'
p8879
S'Advanced'
p8880
sa(dp8881
S'description'
p8882
S'The seed for the master random number generator\n'
p8883
sS'cpp_type'
p8884
S'unsigned int'
p8885
sS'default'
p8886
S'0'
p8887
sS'name'
p8888
S'seed'
p8889
sS'required'
p8890
I00
sS'group_name'
p8891
S'Advanced'
p8892
sa(dp8893
S'description'
p8894
g3
sS'cpp_type'
p8895
S'std::string'
p8896
sS'default'
p8897
S'NeumannBC'
p8898
sS'name'
p8899
S'type'
p8900
sS'required'
p8901
I00
sS'group_name'
p8902
Nsa(dp8903
S'description'
p8904
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8905
sS'cpp_type'
p8906
S'bool'
p8907
sS'default'
p8908
S'0'
p8909
sS'name'
p8910
S'use_displaced_mesh'
p8911
sS'required'
p8912
I00
sS'group_name'
p8913
S'Advanced'
p8914
sa(dp8915
S'description'
p8916
S'The value of the gradient on the boundary.\n'
p8917
sS'cpp_type'
p8918
S'double'
p8919
sS'default'
p8920
S'0'
p8921
sS'name'
p8922
S'value'
p8923
sS'required'
p8924
I00
sS'group_name'
p8925
Nsa(dp8926
S'description'
p8927
S'The name of the variable that this boundary condition applies to\n'
p8928
sS'cpp_type'
p8929
S'NonlinearVariableName'
p8930
sS'default'
p8931
g3
sS'name'
p8932
S'variable'
p8933
sS'required'
p8934
I01
sS'group_name'
p8935
NsasS'name'
p8936
S'/BCs/NeumannBC'
p8937
sa(dp8938
S'description'
p8939
g3
sS'type'
p8940
NsS'subblocks'
p8941
(lp8942
(dp8943
S'description'
p8944
g3
sS'type'
p8945
NsS'subblocks'
p8946
NsS'parameters'
p8947
(lp8948
(dp8949
S'description'
p8950
S'If using a generated mesh, you can specifiy just the dimension(s) you want to mark as periodic\n'
p8951
sS'cpp_type'
p8952
S'std::vector<std::string, std::allocator<std::string> >'
p8953
sS'default'
p8954
g3
sS'name'
p8955
S'auto_direction'
p8956
sS'required'
p8957
I00
sS'group_name'
p8958
Nsa(dp8959
S'description'
p8960
S'Functions that specify the inverse transformation\n'
p8961
sS'cpp_type'
p8962
S'std::vector<std::string, std::allocator<std::string> >'
p8963
sS'default'
p8964
g3
sS'name'
p8965
S'inv_transform_func'
p8966
sS'required'
p8967
I00
sS'group_name'
p8968
Nsa(dp8969
S'description'
p8970
S'Boundary ID associated with the primary boundary.\n'
p8971
sS'cpp_type'
p8972
S'BoundaryName'
p8973
sS'default'
p8974
g3
sS'name'
p8975
S'primary'
p8976
sS'required'
p8977
I00
sS'group_name'
p8978
Nsa(dp8979
S'description'
p8980
S'Boundary ID associated with the secondary boundary.\n'
p8981
sS'cpp_type'
p8982
S'BoundaryName'
p8983
sS'default'
p8984
g3
sS'name'
p8985
S'secondary'
p8986
sS'required'
p8987
I00
sS'group_name'
p8988
Nsa(dp8989
S'description'
p8990
S'Functions that specify the transformation\n'
p8991
sS'cpp_type'
p8992
S'std::vector<std::string, std::allocator<std::string> >'
p8993
sS'default'
p8994
g3
sS'name'
p8995
S'transform_func'
p8996
sS'required'
p8997
I00
sS'group_name'
p8998
Nsa(dp8999
S'description'
p9000
S'Vector that translates coordinates on the primary boundary to coordinates on the secondary boundary.\n'
p9001
sS'cpp_type'
p9002
S'libMesh::VectorValue<double>'
p9003
sS'default'
p9004
g3
sS'name'
p9005
S'translation'
p9006
sS'required'
p9007
I00
sS'group_name'
p9008
Nsa(dp9009
S'description'
p9010
S'Variable for the periodic boundary\n'
p9011
sS'cpp_type'
p9012
S'std::vector<VariableName, std::allocator<VariableName> >'
p9013
sS'default'
p9014
g3
sS'name'
p9015
S'variable'
p9016
sS'required'
p9017
I00
sS'group_name'
p9018
NsasS'name'
p9019
S'/BCs/Periodic/*'
p9020
sasS'parameters'
p9021
NsS'name'
p9022
S'/BCs/Periodic'
p9023
sa(dp9024
S'description'
p9025
g3
sS'type'
p9026
NsS'subblocks'
p9027
NsS'parameters'
p9028
(lp9029
(dp9030
S'description'
p9031
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9032
sS'cpp_type'
p9033
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9034
sS'default'
p9035
g3
sS'name'
p9036
S'boundary'
p9037
sS'required'
p9038
I01
sS'group_name'
p9039
Nsa(dp9040
S'description'
p9041
S'The seed for the master random number generator\n'
p9042
sS'cpp_type'
p9043
S'unsigned int'
p9044
sS'default'
p9045
S'0'
p9046
sS'name'
p9047
S'seed'
p9048
sS'required'
p9049
I00
sS'group_name'
p9050
S'Advanced'
p9051
sa(dp9052
S'description'
p9053
g3
sS'cpp_type'
p9054
S'std::string'
p9055
sS'default'
p9056
S'PresetBC'
p9057
sS'name'
p9058
S'type'
p9059
sS'required'
p9060
I00
sS'group_name'
p9061
Nsa(dp9062
S'description'
p9063
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9064
sS'cpp_type'
p9065
S'bool'
p9066
sS'default'
p9067
S'0'
p9068
sS'name'
p9069
S'use_displaced_mesh'
p9070
sS'required'
p9071
I00
sS'group_name'
p9072
S'Advanced'
p9073
sa(dp9074
S'description'
p9075
S'Value of the BC\n'
p9076
sS'cpp_type'
p9077
S'double'
p9078
sS'default'
p9079
g3
sS'name'
p9080
S'value'
p9081
sS'required'
p9082
I01
sS'group_name'
p9083
Nsa(dp9084
S'description'
p9085
S'The name of the variable that this boundary condition applies to\n'
p9086
sS'cpp_type'
p9087
S'NonlinearVariableName'
p9088
sS'default'
p9089
g3
sS'name'
p9090
S'variable'
p9091
sS'required'
p9092
I01
sS'group_name'
p9093
NsasS'name'
p9094
S'/BCs/PresetBC'
p9095
sa(dp9096
S'description'
p9097
g3
sS'type'
p9098
NsS'subblocks'
p9099
NsS'parameters'
p9100
(lp9101
(dp9102
S'description'
p9103
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9104
sS'cpp_type'
p9105
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9106
sS'default'
p9107
g3
sS'name'
p9108
S'boundary'
p9109
sS'required'
p9110
I01
sS'group_name'
p9111
Nsa(dp9112
S'description'
p9113
g3
sS'cpp_type'
p9114
S'double'
p9115
sS'default'
p9116
S'0'
p9117
sS'name'
p9118
S'duration'
p9119
sS'required'
p9120
I00
sS'group_name'
p9121
Nsa(dp9122
S'description'
p9123
g3
sS'cpp_type'
p9124
S'double'
p9125
sS'default'
p9126
S'0'
p9127
sS'name'
p9128
S'final'
p9129
sS'required'
p9130
I00
sS'group_name'
p9131
Nsa(dp9132
S'description'
p9133
g3
sS'cpp_type'
p9134
S'double'
p9135
sS'default'
p9136
S'0'
p9137
sS'name'
p9138
S'initial'
p9139
sS'required'
p9140
I00
sS'group_name'
p9141
Nsa(dp9142
S'description'
p9143
S'The seed for the master random number generator\n'
p9144
sS'cpp_type'
p9145
S'unsigned int'
p9146
sS'default'
p9147
S'0'
p9148
sS'name'
p9149
S'seed'
p9150
sS'required'
p9151
I00
sS'group_name'
p9152
S'Advanced'
p9153
sa(dp9154
S'description'
p9155
g3
sS'cpp_type'
p9156
S'std::string'
p9157
sS'default'
p9158
S'SinDirichletBC'
p9159
sS'name'
p9160
S'type'
p9161
sS'required'
p9162
I00
sS'group_name'
p9163
Nsa(dp9164
S'description'
p9165
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9166
sS'cpp_type'
p9167
S'bool'
p9168
sS'default'
p9169
S'0'
p9170
sS'name'
p9171
S'use_displaced_mesh'
p9172
sS'required'
p9173
I00
sS'group_name'
p9174
S'Advanced'
p9175
sa(dp9176
S'description'
p9177
S'The name of the variable that this boundary condition applies to\n'
p9178
sS'cpp_type'
p9179
S'NonlinearVariableName'
p9180
sS'default'
p9181
g3
sS'name'
p9182
S'variable'
p9183
sS'required'
p9184
I01
sS'group_name'
p9185
NsasS'name'
p9186
S'/BCs/SinDirichletBC'
p9187
sa(dp9188
S'description'
p9189
g3
sS'type'
p9190
NsS'subblocks'
p9191
NsS'parameters'
p9192
(lp9193
(dp9194
S'description'
p9195
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9196
sS'cpp_type'
p9197
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9198
sS'default'
p9199
g3
sS'name'
p9200
S'boundary'
p9201
sS'required'
p9202
I01
sS'group_name'
p9203
Nsa(dp9204
S'description'
p9205
S"The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p9206
sS'cpp_type'
p9207
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p9208
sS'default'
p9209
g3
sS'name'
p9210
S'diag_save_in'
p9211
sS'required'
p9212
I00
sS'group_name'
p9213
S'Advanced'
p9214
sa(dp9215
S'description'
p9216
S'The duration of the ramp\n'
p9217
sS'cpp_type'
p9218
S'double'
p9219
sS'default'
p9220
S'0'
p9221
sS'name'
p9222
S'duration'
p9223
sS'required'
p9224
I00
sS'group_name'
p9225
Nsa(dp9226
S'description'
p9227
S'The final value of the gradient on the boundary\n'
p9228
sS'cpp_type'
p9229
S'double'
p9230
sS'default'
p9231
S'0'
p9232
sS'name'
p9233
S'final'
p9234
sS'required'
p9235
I00
sS'group_name'
p9236
Nsa(dp9237
S'description'
p9238
S'The initial value of the gradient on the boundary\n'
p9239
sS'cpp_type'
p9240
S'double'
p9241
sS'default'
p9242
S'0'
p9243
sS'name'
p9244
S'initial'
p9245
sS'required'
p9246
I00
sS'group_name'
p9247
Nsa(dp9248
S'description'
p9249
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p9250
sS'cpp_type'
p9251
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p9252
sS'default'
p9253
g3
sS'name'
p9254
S'save_in'
p9255
sS'required'
p9256
I00
sS'group_name'
p9257
S'Advanced'
p9258
sa(dp9259
S'description'
p9260
S'The seed for the master random number generator\n'
p9261
sS'cpp_type'
p9262
S'unsigned int'
p9263
sS'default'
p9264
S'0'
p9265
sS'name'
p9266
S'seed'
p9267
sS'required'
p9268
I00
sS'group_name'
p9269
S'Advanced'
p9270
sa(dp9271
S'description'
p9272
g3
sS'cpp_type'
p9273
S'std::string'
p9274
sS'default'
p9275
S'SinNeumannBC'
p9276
sS'name'
p9277
S'type'
p9278
sS'required'
p9279
I00
sS'group_name'
p9280
Nsa(dp9281
S'description'
p9282
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9283
sS'cpp_type'
p9284
S'bool'
p9285
sS'default'
p9286
S'0'
p9287
sS'name'
p9288
S'use_displaced_mesh'
p9289
sS'required'
p9290
I00
sS'group_name'
p9291
S'Advanced'
p9292
sa(dp9293
S'description'
p9294
S'The name of the variable that this boundary condition applies to\n'
p9295
sS'cpp_type'
p9296
S'NonlinearVariableName'
p9297
sS'default'
p9298
g3
sS'name'
p9299
S'variable'
p9300
sS'required'
p9301
I01
sS'group_name'
p9302
NsasS'name'
p9303
S'/BCs/SinNeumannBC'
p9304
sa(dp9305
S'description'
p9306
g3
sS'type'
p9307
NsS'subblocks'
p9308
NsS'parameters'
p9309
(lp9310
(dp9311
S'description'
p9312
S'No idea.\n'
p9313
sS'cpp_type'
p9314
S'double'
p9315
sS'default'
p9316
S'1'
p9317
sS'name'
p9318
S'alpha'
p9319
sS'required'
p9320
I00
sS'group_name'
p9321
Nsa(dp9322
S'description'
p9323
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9324
sS'cpp_type'
p9325
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9326
sS'default'
p9327
g3
sS'name'
p9328
S'boundary'
p9329
sS'required'
p9330
I01
sS'group_name'
p9331
Nsa(dp9332
S'description'
p9333
S"The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p9334
sS'cpp_type'
p9335
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p9336
sS'default'
p9337
g3
sS'name'
p9338
S'diag_save_in'
p9339
sS'required'
p9340
I00
sS'group_name'
p9341
S'Advanced'
p9342
sa(dp9343
S'description'
p9344
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p9345
sS'cpp_type'
p9346
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p9347
sS'default'
p9348
g3
sS'name'
p9349
S'save_in'
p9350
sS'required'
p9351
I00
sS'group_name'
p9352
S'Advanced'
p9353
sa(dp9354
S'description'
p9355
S'The seed for the master random number generator\n'
p9356
sS'cpp_type'
p9357
S'unsigned int'
p9358
sS'default'
p9359
S'0'
p9360
sS'name'
p9361
S'seed'
p9362
sS'required'
p9363
I00
sS'group_name'
p9364
S'Advanced'
p9365
sa(dp9366
S'description'
p9367
g3
sS'cpp_type'
p9368
S'std::string'
p9369
sS'default'
p9370
S'VacuumBC'
p9371
sS'name'
p9372
S'type'
p9373
sS'required'
p9374
I00
sS'group_name'
p9375
Nsa(dp9376
S'description'
p9377
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9378
sS'cpp_type'
p9379
S'bool'
p9380
sS'default'
p9381
S'0'
p9382
sS'name'
p9383
S'use_displaced_mesh'
p9384
sS'required'
p9385
I00
sS'group_name'
p9386
S'Advanced'
p9387
sa(dp9388
S'description'
p9389
S'The name of the variable that this boundary condition applies to\n'
p9390
sS'cpp_type'
p9391
S'NonlinearVariableName'
p9392
sS'default'
p9393
g3
sS'name'
p9394
S'variable'
p9395
sS'required'
p9396
I01
sS'group_name'
p9397
NsasS'name'
p9398
S'/BCs/VacuumBC'
p9399
sa(dp9400
S'description'
p9401
g3
sS'type'
p9402
NsS'subblocks'
p9403
NsS'parameters'
p9404
(lp9405
(dp9406
S'description'
p9407
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9408
sS'cpp_type'
p9409
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9410
sS'default'
p9411
g3
sS'name'
p9412
S'boundary'
p9413
sS'required'
p9414
I01
sS'group_name'
p9415
Nsa(dp9416
S'description'
p9417
S"The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p9418
sS'cpp_type'
p9419
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p9420
sS'default'
p9421
g3
sS'name'
p9422
S'diag_save_in'
p9423
sS'required'
p9424
I00
sS'group_name'
p9425
S'Advanced'
p9426
sa(dp9427
S'description'
p9428
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p9429
sS'cpp_type'
p9430
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p9431
sS'default'
p9432
g3
sS'name'
p9433
S'save_in'
p9434
sS'required'
p9435
I00
sS'group_name'
p9436
S'Advanced'
p9437
sa(dp9438
S'description'
p9439
S'The seed for the master random number generator\n'
p9440
sS'cpp_type'
p9441
S'unsigned int'
p9442
sS'default'
p9443
S'0'
p9444
sS'name'
p9445
S'seed'
p9446
sS'required'
p9447
I00
sS'group_name'
p9448
S'Advanced'
p9449
sa(dp9450
S'description'
p9451
g3
sS'cpp_type'
p9452
S'std::string'
p9453
sS'default'
p9454
S'VectorNeumannBC'
p9455
sS'name'
p9456
S'type'
p9457
sS'required'
p9458
I00
sS'group_name'
p9459
Nsa(dp9460
S'description'
p9461
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9462
sS'cpp_type'
p9463
S'bool'
p9464
sS'default'
p9465
S'0'
p9466
sS'name'
p9467
S'use_displaced_mesh'
p9468
sS'required'
p9469
I00
sS'group_name'
p9470
S'Advanced'
p9471
sa(dp9472
S'description'
p9473
S'The name of the variable that this boundary condition applies to\n'
p9474
sS'cpp_type'
p9475
S'NonlinearVariableName'
p9476
sS'default'
p9477
g3
sS'name'
p9478
S'variable'
p9479
sS'required'
p9480
I01
sS'group_name'
p9481
Nsa(dp9482
S'description'
p9483
S'vector this BC should act in\n'
p9484
sS'cpp_type'
p9485
S'libMesh::VectorValue<double>'
p9486
sS'default'
p9487
S'0 0 0'
p9488
sS'name'
p9489
S'vector_value'
p9490
sS'required'
p9491
I00
sS'group_name'
p9492
NsasS'name'
p9493
S'/BCs/VectorNeumannBC'
p9494
sa(dp9495
S'description'
p9496
g3
sS'type'
p9497
NsS'subblocks'
p9498
NsS'parameters'
p9499
(lp9500
(dp9501
S'description'
p9502
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9503
sS'cpp_type'
p9504
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9505
sS'default'
p9506
g3
sS'name'
p9507
S'boundary'
p9508
sS'required'
p9509
I01
sS'group_name'
p9510
Nsa(dp9511
S'description'
p9512
S"The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p9513
sS'cpp_type'
p9514
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p9515
sS'default'
p9516
g3
sS'name'
p9517
S'diag_save_in'
p9518
sS'required'
p9519
I00
sS'group_name'
p9520
S'Advanced'
p9521
sa(dp9522
S'description'
p9523
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p9524
sS'cpp_type'
p9525
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p9526
sS'default'
p9527
g3
sS'name'
p9528
S'save_in'
p9529
sS'required'
p9530
I00
sS'group_name'
p9531
S'Advanced'
p9532
sa(dp9533
S'description'
p9534
S'The seed for the master random number generator\n'
p9535
sS'cpp_type'
p9536
S'unsigned int'
p9537
sS'default'
p9538
S'0'
p9539
sS'name'
p9540
S'seed'
p9541
sS'required'
p9542
I00
sS'group_name'
p9543
S'Advanced'
p9544
sa(dp9545
S'description'
p9546
g3
sS'cpp_type'
p9547
S'std::string'
p9548
sS'default'
p9549
S'WeakGradientBC'
p9550
sS'name'
p9551
S'type'
p9552
sS'required'
p9553
I00
sS'group_name'
p9554
Nsa(dp9555
S'description'
p9556
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9557
sS'cpp_type'
p9558
S'bool'
p9559
sS'default'
p9560
S'0'
p9561
sS'name'
p9562
S'use_displaced_mesh'
p9563
sS'required'
p9564
I00
sS'group_name'
p9565
S'Advanced'
p9566
sa(dp9567
S'description'
p9568
S'The name of the variable that this boundary condition applies to\n'
p9569
sS'cpp_type'
p9570
S'NonlinearVariableName'
p9571
sS'default'
p9572
g3
sS'name'
p9573
S'variable'
p9574
sS'required'
p9575
I01
sS'group_name'
p9576
NsasS'name'
p9577
S'/BCs/WeakGradientBC'
p9578
sasS'parameters'
p9579
NsS'name'
p9580
S'/BCs'
p9581
sa(dp9582
S'description'
p9583
g3
sS'type'
p9584
NsS'subblocks'
p9585
(lp9586
(dp9587
S'description'
p9588
g3
sS'type'
p9589
NsS'subblocks'
p9590
NsS'parameters'
p9591
(lp9592
(dp9593
S'description'
p9594
S'A string representing the Moose Object that will be built by this Action\n'
p9595
sS'cpp_type'
p9596
S'std::string'
p9597
sS'default'
p9598
g3
sS'name'
p9599
S'type'
p9600
sS'required'
p9601
I01
sS'group_name'
p9602
NsasS'name'
p9603
S'/Bounds/*'
p9604
sa(dp9605
S'description'
p9606
g3
sS'type'
p9607
NsS'subblocks'
p9608
NsS'parameters'
p9609
(lp9610
(dp9611
S'description'
p9612
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9613
sS'cpp_type'
p9614
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9615
sS'default'
p9616
g3
sS'name'
p9617
S'block'
p9618
sS'required'
p9619
I00
sS'group_name'
p9620
Nsa(dp9621
S'description'
p9622
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9623
sS'cpp_type'
p9624
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9625
sS'default'
p9626
g3
sS'name'
p9627
S'boundary'
p9628
sS'required'
p9629
I00
sS'group_name'
p9630
Nsa(dp9631
S'description'
p9632
S'number of grains\n'
p9633
sS'cpp_type'
p9634
S'unsigned int'
p9635
sS'default'
p9636
g3
sS'name'
p9637
S'crys_num'
p9638
sS'required'
p9639
I01
sS'group_name'
p9640
Nsa(dp9641
S'name'
p9642
S'execute_on'
p9643
sS'cpp_type'
p9644
S'MooseEnum'
p9645
sS'default'
p9646
S'residual'
p9647
sS'description'
p9648
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p9649
sS'required'
p9650
I00
sS'options'
p9651
S'initial residual jacobian timestep timestep_begin custom'
p9652
sS'group_name'
p9653
Nsa(dp9654
S'description'
p9655
S'The seed for the master random number generator\n'
p9656
sS'cpp_type'
p9657
S'unsigned int'
p9658
sS'default'
p9659
S'0'
p9660
sS'name'
p9661
S'seed'
p9662
sS'required'
p9663
I00
sS'group_name'
p9664
S'Advanced'
p9665
sa(dp9666
S'description'
p9667
g3
sS'cpp_type'
p9668
S'std::string'
p9669
sS'default'
p9670
S'BndsCalcAux'
p9671
sS'name'
p9672
S'type'
p9673
sS'required'
p9674
I00
sS'group_name'
p9675
Nsa(dp9676
S'description'
p9677
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9678
sS'cpp_type'
p9679
S'bool'
p9680
sS'default'
p9681
S'0'
p9682
sS'name'
p9683
S'use_displaced_mesh'
p9684
sS'required'
p9685
I00
sS'group_name'
p9686
S'Advanced'
p9687
sa(dp9688
S'description'
p9689
S'Array of coupled variables\n'
p9690
sS'cpp_type'
p9691
S'std::vector<VariableName>'
p9692
sS'default'
p9693
g3
sS'name'
p9694
S'v'
p9695
sS'required'
p9696
I00
sS'group_name'
p9697
Nsa(dp9698
S'description'
p9699
S'base for variable names\n'
p9700
sS'cpp_type'
p9701
S'std::string'
p9702
sS'default'
p9703
g3
sS'name'
p9704
S'var_name_base'
p9705
sS'required'
p9706
I01
sS'group_name'
p9707
Nsa(dp9708
S'description'
p9709
S'The name of the variable that this object applies to\n'
p9710
sS'cpp_type'
p9711
S'AuxVariableName'
p9712
sS'default'
p9713
g3
sS'name'
p9714
S'variable'
p9715
sS'required'
p9716
I01
sS'group_name'
p9717
NsasS'name'
p9718
S'/Bounds/BndsCalcAux'
p9719
sa(dp9720
S'description'
p9721
g3
sS'type'
p9722
NsS'subblocks'
p9723
NsS'parameters'
p9724
(lp9725
(dp9726
S'description'
p9727
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9728
sS'cpp_type'
p9729
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9730
sS'default'
p9731
g3
sS'name'
p9732
S'block'
p9733
sS'required'
p9734
I00
sS'group_name'
p9735
Nsa(dp9736
S'description'
p9737
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9738
sS'cpp_type'
p9739
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9740
sS'default'
p9741
g3
sS'name'
p9742
S'boundary'
p9743
sS'required'
p9744
I00
sS'group_name'
p9745
Nsa(dp9746
S'description'
p9747
S'The variable to be bounded\n'
p9748
sS'cpp_type'
p9749
S'std::vector<VariableName>'
p9750
sS'default'
p9751
g3
sS'name'
p9752
S'bounded_variable'
p9753
sS'required'
p9754
I01
sS'group_name'
p9755
Nsa(dp9756
S'name'
p9757
S'execute_on'
p9758
sS'cpp_type'
p9759
S'MooseEnum'
p9760
sS'default'
p9761
S'residual'
p9762
sS'description'
p9763
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p9764
sS'required'
p9765
I00
sS'options'
p9766
S'initial residual jacobian timestep timestep_begin custom'
p9767
sS'group_name'
p9768
Nsa(dp9769
S'description'
p9770
S'The lower bound for the variable\n'
p9771
sS'cpp_type'
p9772
S'double'
p9773
sS'default'
p9774
g3
sS'name'
p9775
S'lower'
p9776
sS'required'
p9777
I00
sS'group_name'
p9778
Nsa(dp9779
S'description'
p9780
S'The seed for the master random number generator\n'
p9781
sS'cpp_type'
p9782
S'unsigned int'
p9783
sS'default'
p9784
S'0'
p9785
sS'name'
p9786
S'seed'
p9787
sS'required'
p9788
I00
sS'group_name'
p9789
S'Advanced'
p9790
sa(dp9791
S'description'
p9792
g3
sS'cpp_type'
p9793
S'std::string'
p9794
sS'default'
p9795
S'BoundsAux'
p9796
sS'name'
p9797
S'type'
p9798
sS'required'
p9799
I00
sS'group_name'
p9800
Nsa(dp9801
S'description'
p9802
S'The upper bound for the variable\n'
p9803
sS'cpp_type'
p9804
S'double'
p9805
sS'default'
p9806
g3
sS'name'
p9807
S'upper'
p9808
sS'required'
p9809
I00
sS'group_name'
p9810
Nsa(dp9811
S'description'
p9812
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9813
sS'cpp_type'
p9814
S'bool'
p9815
sS'default'
p9816
S'0'
p9817
sS'name'
p9818
S'use_displaced_mesh'
p9819
sS'required'
p9820
I00
sS'group_name'
p9821
S'Advanced'
p9822
sa(dp9823
S'description'
p9824
S'The name of the variable that this object applies to\n'
p9825
sS'cpp_type'
p9826
S'AuxVariableName'
p9827
sS'default'
p9828
g3
sS'name'
p9829
S'variable'
p9830
sS'required'
p9831
I01
sS'group_name'
p9832
NsasS'name'
p9833
S'/Bounds/BoundsAux'
p9834
sa(dp9835
S'description'
p9836
g3
sS'type'
p9837
NsS'subblocks'
p9838
NsS'parameters'
p9839
(lp9840
(dp9841
S'description'
p9842
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9843
sS'cpp_type'
p9844
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9845
sS'default'
p9846
g3
sS'name'
p9847
S'block'
p9848
sS'required'
p9849
I00
sS'group_name'
p9850
Nsa(dp9851
S'description'
p9852
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9853
sS'cpp_type'
p9854
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9855
sS'default'
p9856
g3
sS'name'
p9857
S'boundary'
p9858
sS'required'
p9859
I00
sS'group_name'
p9860
Nsa(dp9861
S'name'
p9862
S'execute_on'
p9863
sS'cpp_type'
p9864
S'MooseEnum'
p9865
sS'default'
p9866
S'residual'
p9867
sS'description'
p9868
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p9869
sS'required'
p9870
I00
sS'options'
p9871
S'initial residual jacobian timestep timestep_begin custom'
p9872
sS'group_name'
p9873
Nsa(dp9874
S'description'
p9875
S'The seed for the master random number generator\n'
p9876
sS'cpp_type'
p9877
S'unsigned int'
p9878
sS'default'
p9879
S'0'
p9880
sS'name'
p9881
S'seed'
p9882
sS'required'
p9883
I00
sS'group_name'
p9884
S'Advanced'
p9885
sa(dp9886
S'description'
p9887
g3
sS'cpp_type'
p9888
S'std::string'
p9889
sS'default'
p9890
S'ConstantAux'
p9891
sS'name'
p9892
S'type'
p9893
sS'required'
p9894
I00
sS'group_name'
p9895
Nsa(dp9896
S'description'
p9897
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9898
sS'cpp_type'
p9899
S'bool'
p9900
sS'default'
p9901
S'0'
p9902
sS'name'
p9903
S'use_displaced_mesh'
p9904
sS'required'
p9905
I00
sS'group_name'
p9906
S'Advanced'
p9907
sa(dp9908
S'description'
p9909
S'Some constant value that can be read from the input file\n'
p9910
sS'cpp_type'
p9911
S'double'
p9912
sS'default'
p9913
S'0'
p9914
sS'name'
p9915
S'value'
p9916
sS'required'
p9917
I00
sS'group_name'
p9918
Nsa(dp9919
S'description'
p9920
S'The name of the variable that this object applies to\n'
p9921
sS'cpp_type'
p9922
S'AuxVariableName'
p9923
sS'default'
p9924
g3
sS'name'
p9925
S'variable'
p9926
sS'required'
p9927
I01
sS'group_name'
p9928
NsasS'name'
p9929
S'/Bounds/ConstantAux'
p9930
sa(dp9931
S'description'
p9932
g3
sS'type'
p9933
NsS'subblocks'
p9934
NsS'parameters'
p9935
(lp9936
(dp9937
S'description'
p9938
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9939
sS'cpp_type'
p9940
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9941
sS'default'
p9942
g3
sS'name'
p9943
S'block'
p9944
sS'required'
p9945
I00
sS'group_name'
p9946
Nsa(dp9947
S'description'
p9948
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9949
sS'cpp_type'
p9950
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9951
sS'default'
p9952
g3
sS'name'
p9953
S'boundary'
p9954
sS'required'
p9955
I00
sS'group_name'
p9956
Nsa(dp9957
S'description'
p9958
S'The variable that is being debugged.\n'
p9959
sS'cpp_type'
p9960
S'NonlinearVariableName'
p9961
sS'default'
p9962
g3
sS'name'
p9963
S'debug_variable'
p9964
sS'required'
p9965
I01
sS'group_name'
p9966
Nsa(dp9967
S'name'
p9968
S'execute_on'
p9969
sS'cpp_type'
p9970
S'MooseEnum'
p9971
sS'default'
p9972
S'residual'
p9973
sS'description'
p9974
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p9975
sS'required'
p9976
I00
sS'options'
p9977
S'initial residual jacobian timestep timestep_begin custom'
p9978
sS'group_name'
p9979
Nsa(dp9980
S'description'
p9981
S'The seed for the master random number generator\n'
p9982
sS'cpp_type'
p9983
S'unsigned int'
p9984
sS'default'
p9985
S'0'
p9986
sS'name'
p9987
S'seed'
p9988
sS'required'
p9989
I00
sS'group_name'
p9990
S'Advanced'
p9991
sa(dp9992
S'description'
p9993
g3
sS'cpp_type'
p9994
S'std::string'
p9995
sS'default'
p9996
S'DebugResidualAux'
p9997
sS'name'
p9998
S'type'
p9999
sS'required'
p10000
I00
sS'group_name'
p10001
Nsa(dp10002
S'description'
p10003
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10004
sS'cpp_type'
p10005
S'bool'
p10006
sS'default'
p10007
S'0'
p10008
sS'name'
p10009
S'use_displaced_mesh'
p10010
sS'required'
p10011
I00
sS'group_name'
p10012
S'Advanced'
p10013
sa(dp10014
S'description'
p10015
S'The name of the variable that this object applies to\n'
p10016
sS'cpp_type'
p10017
S'AuxVariableName'
p10018
sS'default'
p10019
g3
sS'name'
p10020
S'variable'
p10021
sS'required'
p10022
I01
sS'group_name'
p10023
NsasS'name'
p10024
S'/Bounds/DebugResidualAux'
p10025
sa(dp10026
S'description'
p10027
g3
sS'type'
p10028
NsS'subblocks'
p10029
NsS'parameters'
p10030
(lp10031
(dp10032
S'description'
p10033
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10034
sS'cpp_type'
p10035
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10036
sS'default'
p10037
g3
sS'name'
p10038
S'block'
p10039
sS'required'
p10040
I00
sS'group_name'
p10041
Nsa(dp10042
S'description'
p10043
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10044
sS'cpp_type'
p10045
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10046
sS'default'
p10047
g3
sS'name'
p10048
S'boundary'
p10049
sS'required'
p10050
I00
sS'group_name'
p10051
Nsa(dp10052
S'name'
p10053
S'execute_on'
p10054
sS'cpp_type'
p10055
S'MooseEnum'
p10056
sS'default'
p10057
S'residual'
p10058
sS'description'
p10059
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p10060
sS'required'
p10061
I00
sS'options'
p10062
S'initial residual jacobian timestep timestep_begin custom'
p10063
sS'group_name'
p10064
Nsa(dp10065
S'description'
p10066
S'The function to use as the value\n'
p10067
sS'cpp_type'
p10068
S'FunctionName'
p10069
sS'default'
p10070
g3
sS'name'
p10071
S'function'
p10072
sS'required'
p10073
I01
sS'group_name'
p10074
Nsa(dp10075
S'description'
p10076
S'The seed for the master random number generator\n'
p10077
sS'cpp_type'
p10078
S'unsigned int'
p10079
sS'default'
p10080
S'0'
p10081
sS'name'
p10082
S'seed'
p10083
sS'required'
p10084
I00
sS'group_name'
p10085
S'Advanced'
p10086
sa(dp10087
S'description'
p10088
g3
sS'cpp_type'
p10089
S'std::string'
p10090
sS'default'
p10091
S'FunctionAux'
p10092
sS'name'
p10093
S'type'
p10094
sS'required'
p10095
I00
sS'group_name'
p10096
Nsa(dp10097
S'description'
p10098
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10099
sS'cpp_type'
p10100
S'bool'
p10101
sS'default'
p10102
S'0'
p10103
sS'name'
p10104
S'use_displaced_mesh'
p10105
sS'required'
p10106
I00
sS'group_name'
p10107
S'Advanced'
p10108
sa(dp10109
S'description'
p10110
S'The name of the variable that this object applies to\n'
p10111
sS'cpp_type'
p10112
S'AuxVariableName'
p10113
sS'default'
p10114
g3
sS'name'
p10115
S'variable'
p10116
sS'required'
p10117
I01
sS'group_name'
p10118
NsasS'name'
p10119
S'/Bounds/FunctionAux'
p10120
sa(dp10121
S'description'
p10122
g3
sS'type'
p10123
NsS'subblocks'
p10124
NsS'parameters'
p10125
(lp10126
(dp10127
S'description'
p10128
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10129
sS'cpp_type'
p10130
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10131
sS'default'
p10132
g3
sS'name'
p10133
S'block'
p10134
sS'required'
p10135
I00
sS'group_name'
p10136
Nsa(dp10137
S'description'
p10138
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10139
sS'cpp_type'
p10140
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10141
sS'default'
p10142
g3
sS'name'
p10143
S'boundary'
p10144
sS'required'
p10145
I00
sS'group_name'
p10146
Nsa(dp10147
S'name'
p10148
S'execute_on'
p10149
sS'cpp_type'
p10150
S'MooseEnum'
p10151
sS'default'
p10152
S'residual'
p10153
sS'description'
p10154
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p10155
sS'required'
p10156
I00
sS'options'
p10157
S'initial residual jacobian timestep timestep_begin custom'
p10158
sS'group_name'
p10159
Nsa(dp10160
S'description'
p10161
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p10162
sS'cpp_type'
p10163
S'double'
p10164
sS'default'
p10165
g3
sS'name'
p10166
S'normal_smoothing_distance'
p10167
sS'required'
p10168
I00
sS'group_name'
p10169
Nsa(dp10170
S'description'
p10171
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p10172
sS'cpp_type'
p10173
S'std::string'
p10174
sS'default'
p10175
g3
sS'name'
p10176
S'normal_smoothing_method'
p10177
sS'required'
p10178
I00
sS'group_name'
p10179
Nsa(dp10180
S'name'
p10181
S'order'
p10182
sS'cpp_type'
p10183
S'MooseEnum'
p10184
sS'default'
p10185
S'FIRST'
p10186
sS'description'
p10187
S'The finite element order\n'
p10188
sS'required'
p10189
I00
sS'options'
p10190
S'FIRST SECOND THIRD FOURTH'
p10191
sS'group_name'
p10192
Nsa(dp10193
S'description'
p10194
S'The boundary on the other side of a gap.\n'
p10195
sS'cpp_type'
p10196
S'BoundaryName'
p10197
sS'default'
p10198
g3
sS'name'
p10199
S'paired_boundary'
p10200
sS'required'
p10201
I01
sS'group_name'
p10202
Nsa(dp10203
S'description'
p10204
S'The variable to get the value of.\n'
p10205
sS'cpp_type'
p10206
S'VariableName'
p10207
sS'default'
p10208
g3
sS'name'
p10209
S'paired_variable'
p10210
sS'required'
p10211
I01
sS'group_name'
p10212
Nsa(dp10213
S'description'
p10214
S'The seed for the master random number generator\n'
p10215
sS'cpp_type'
p10216
S'unsigned int'
p10217
sS'default'
p10218
S'0'
p10219
sS'name'
p10220
S'seed'
p10221
sS'required'
p10222
I00
sS'group_name'
p10223
S'Advanced'
p10224
sa(dp10225
S'description'
p10226
S'Tangential distance to extend edges of contact surfaces\n'
p10227
sS'cpp_type'
p10228
S'double'
p10229
sS'default'
p10230
g3
sS'name'
p10231
S'tangential_tolerance'
p10232
sS'required'
p10233
I00
sS'group_name'
p10234
Nsa(dp10235
S'description'
p10236
g3
sS'cpp_type'
p10237
S'std::string'
p10238
sS'default'
p10239
S'GapValueAux'
p10240
sS'name'
p10241
S'type'
p10242
sS'required'
p10243
I00
sS'group_name'
p10244
Nsa(dp10245
S'description'
p10246
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10247
sS'cpp_type'
p10248
S'bool'
p10249
sS'default'
p10250
S'1'
p10251
sS'name'
p10252
S'use_displaced_mesh'
p10253
sS'required'
p10254
I00
sS'group_name'
p10255
S'Advanced'
p10256
sa(dp10257
S'description'
p10258
S'The name of the variable that this object applies to\n'
p10259
sS'cpp_type'
p10260
S'AuxVariableName'
p10261
sS'default'
p10262
g3
sS'name'
p10263
S'variable'
p10264
sS'required'
p10265
I01
sS'group_name'
p10266
Nsa(dp10267
S'description'
p10268
S'Whether to output warning messages concerning nodes not being found\n'
p10269
sS'cpp_type'
p10270
S'bool'
p10271
sS'default'
p10272
S'0'
p10273
sS'name'
p10274
S'warnings'
p10275
sS'required'
p10276
I00
sS'group_name'
p10277
NsasS'name'
p10278
S'/Bounds/GapValueAux'
p10279
sa(dp10280
S'description'
p10281
g3
sS'type'
p10282
NsS'subblocks'
p10283
NsS'parameters'
p10284
(lp10285
(dp10286
S'description'
p10287
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10288
sS'cpp_type'
p10289
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10290
sS'default'
p10291
g3
sS'name'
p10292
S'block'
p10293
sS'required'
p10294
I00
sS'group_name'
p10295
Nsa(dp10296
S'description'
p10297
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10298
sS'cpp_type'
p10299
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10300
sS'default'
p10301
g3
sS'name'
p10302
S'boundary'
p10303
sS'required'
p10304
I00
sS'group_name'
p10305
Nsa(dp10306
S'name'
p10307
S'execute_on'
p10308
sS'cpp_type'
p10309
S'MooseEnum'
p10310
sS'default'
p10311
S'residual'
p10312
sS'description'
p10313
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p10314
sS'required'
p10315
I00
sS'options'
p10316
S'initial residual jacobian timestep timestep_begin custom'
p10317
sS'group_name'
p10318
Nsa(dp10319
S'description'
p10320
S'The factor by which to multiply your material property for visualization\n'
p10321
sS'cpp_type'
p10322
S'double'
p10323
sS'default'
p10324
S'1'
p10325
sS'name'
p10326
S'factor'
p10327
sS'required'
p10328
I00
sS'group_name'
p10329
Nsa(dp10330
S'description'
p10331
S'The offset to add to your material property for visualization\n'
p10332
sS'cpp_type'
p10333
S'double'
p10334
sS'default'
p10335
S'0'
p10336
sS'name'
p10337
S'offset'
p10338
sS'required'
p10339
I00
sS'group_name'
p10340
Nsa(dp10341
S'description'
p10342
S'The scalar material property name\n'
p10343
sS'cpp_type'
p10344
S'std::string'
p10345
sS'default'
p10346
g3
sS'name'
p10347
S'property'
p10348
sS'required'
p10349
I01
sS'group_name'
p10350
Nsa(dp10351
S'description'
p10352
S'The seed for the master random number generator\n'
p10353
sS'cpp_type'
p10354
S'unsigned int'
p10355
sS'default'
p10356
S'0'
p10357
sS'name'
p10358
S'seed'
p10359
sS'required'
p10360
I00
sS'group_name'
p10361
S'Advanced'
p10362
sa(dp10363
S'description'
p10364
g3
sS'cpp_type'
p10365
S'std::string'
p10366
sS'default'
p10367
S'MaterialRealAux'
p10368
sS'name'
p10369
S'type'
p10370
sS'required'
p10371
I00
sS'group_name'
p10372
Nsa(dp10373
S'description'
p10374
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10375
sS'cpp_type'
p10376
S'bool'
p10377
sS'default'
p10378
S'0'
p10379
sS'name'
p10380
S'use_displaced_mesh'
p10381
sS'required'
p10382
I00
sS'group_name'
p10383
S'Advanced'
p10384
sa(dp10385
S'description'
p10386
S'The name of the variable that this object applies to\n'
p10387
sS'cpp_type'
p10388
S'AuxVariableName'
p10389
sS'default'
p10390
g3
sS'name'
p10391
S'variable'
p10392
sS'required'
p10393
I01
sS'group_name'
p10394
NsasS'name'
p10395
S'/Bounds/MaterialRealAux'
p10396
sa(dp10397
S'description'
p10398
g3
sS'type'
p10399
NsS'subblocks'
p10400
NsS'parameters'
p10401
(lp10402
(dp10403
S'description'
p10404
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10405
sS'cpp_type'
p10406
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10407
sS'default'
p10408
g3
sS'name'
p10409
S'block'
p10410
sS'required'
p10411
I00
sS'group_name'
p10412
Nsa(dp10413
S'description'
p10414
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10415
sS'cpp_type'
p10416
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10417
sS'default'
p10418
g3
sS'name'
p10419
S'boundary'
p10420
sS'required'
p10421
I00
sS'group_name'
p10422
Nsa(dp10423
S'description'
p10424
S'The column component to consider for this kernel\n'
p10425
sS'cpp_type'
p10426
S'unsigned int'
p10427
sS'default'
p10428
S'0'
p10429
sS'name'
p10430
S'column'
p10431
sS'required'
p10432
I00
sS'group_name'
p10433
Nsa(dp10434
S'name'
p10435
S'execute_on'
p10436
sS'cpp_type'
p10437
S'MooseEnum'
p10438
sS'default'
p10439
S'residual'
p10440
sS'description'
p10441
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p10442
sS'required'
p10443
I00
sS'options'
p10444
S'initial residual jacobian timestep timestep_begin custom'
p10445
sS'group_name'
p10446
Nsa(dp10447
S'description'
p10448
S'The factor by which to multiply your material property for visualization\n'
p10449
sS'cpp_type'
p10450
S'double'
p10451
sS'default'
p10452
S'1'
p10453
sS'name'
p10454
S'factor'
p10455
sS'required'
p10456
I00
sS'group_name'
p10457
Nsa(dp10458
S'description'
p10459
S'The offset to add to your material property for visualization\n'
p10460
sS'cpp_type'
p10461
S'double'
p10462
sS'default'
p10463
S'0'
p10464
sS'name'
p10465
S'offset'
p10466
sS'required'
p10467
I00
sS'group_name'
p10468
Nsa(dp10469
S'description'
p10470
S'The scalar material property name\n'
p10471
sS'cpp_type'
p10472
S'std::string'
p10473
sS'default'
p10474
g3
sS'name'
p10475
S'property'
p10476
sS'required'
p10477
I01
sS'group_name'
p10478
Nsa(dp10479
S'description'
p10480
S'The row component to consider for this kernel\n'
p10481
sS'cpp_type'
p10482
S'unsigned int'
p10483
sS'default'
p10484
S'0'
p10485
sS'name'
p10486
S'row'
p10487
sS'required'
p10488
I00
sS'group_name'
p10489
Nsa(dp10490
S'description'
p10491
S'The seed for the master random number generator\n'
p10492
sS'cpp_type'
p10493
S'unsigned int'
p10494
sS'default'
p10495
S'0'
p10496
sS'name'
p10497
S'seed'
p10498
sS'required'
p10499
I00
sS'group_name'
p10500
S'Advanced'
p10501
sa(dp10502
S'description'
p10503
g3
sS'cpp_type'
p10504
S'std::string'
p10505
sS'default'
p10506
S'MaterialRealTensorValueAux'
p10507
sS'name'
p10508
S'type'
p10509
sS'required'
p10510
I00
sS'group_name'
p10511
Nsa(dp10512
S'description'
p10513
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10514
sS'cpp_type'
p10515
S'bool'
p10516
sS'default'
p10517
S'0'
p10518
sS'name'
p10519
S'use_displaced_mesh'
p10520
sS'required'
p10521
I00
sS'group_name'
p10522
S'Advanced'
p10523
sa(dp10524
S'description'
p10525
S'The name of the variable that this object applies to\n'
p10526
sS'cpp_type'
p10527
S'AuxVariableName'
p10528
sS'default'
p10529
g3
sS'name'
p10530
S'variable'
p10531
sS'required'
p10532
I01
sS'group_name'
p10533
NsasS'name'
p10534
S'/Bounds/MaterialRealTensorValueAux'
p10535
sa(dp10536
S'description'
p10537
g3
sS'type'
p10538
NsS'subblocks'
p10539
NsS'parameters'
p10540
(lp10541
(dp10542
S'description'
p10543
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10544
sS'cpp_type'
p10545
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10546
sS'default'
p10547
g3
sS'name'
p10548
S'block'
p10549
sS'required'
p10550
I00
sS'group_name'
p10551
Nsa(dp10552
S'description'
p10553
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10554
sS'cpp_type'
p10555
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10556
sS'default'
p10557
g3
sS'name'
p10558
S'boundary'
p10559
sS'required'
p10560
I00
sS'group_name'
p10561
Nsa(dp10562
S'description'
p10563
S'The vector component to consider for this kernel\n'
p10564
sS'cpp_type'
p10565
S'unsigned int'
p10566
sS'default'
p10567
S'0'
p10568
sS'name'
p10569
S'component'
p10570
sS'required'
p10571
I00
sS'group_name'
p10572
Nsa(dp10573
S'name'
p10574
S'execute_on'
p10575
sS'cpp_type'
p10576
S'MooseEnum'
p10577
sS'default'
p10578
S'residual'
p10579
sS'description'
p10580
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p10581
sS'required'
p10582
I00
sS'options'
p10583
S'initial residual jacobian timestep timestep_begin custom'
p10584
sS'group_name'
p10585
Nsa(dp10586
S'description'
p10587
S'The factor by which to multiply your material property for visualization\n'
p10588
sS'cpp_type'
p10589
S'double'
p10590
sS'default'
p10591
S'1'
p10592
sS'name'
p10593
S'factor'
p10594
sS'required'
p10595
I00
sS'group_name'
p10596
Nsa(dp10597
S'description'
p10598
S'The offset to add to your material property for visualization\n'
p10599
sS'cpp_type'
p10600
S'double'
p10601
sS'default'
p10602
S'0'
p10603
sS'name'
p10604
S'offset'
p10605
sS'required'
p10606
I00
sS'group_name'
p10607
Nsa(dp10608
S'description'
p10609
S'The scalar material property name\n'
p10610
sS'cpp_type'
p10611
S'std::string'
p10612
sS'default'
p10613
g3
sS'name'
p10614
S'property'
p10615
sS'required'
p10616
I01
sS'group_name'
p10617
Nsa(dp10618
S'description'
p10619
S'The seed for the master random number generator\n'
p10620
sS'cpp_type'
p10621
S'unsigned int'
p10622
sS'default'
p10623
S'0'
p10624
sS'name'
p10625
S'seed'
p10626
sS'required'
p10627
I00
sS'group_name'
p10628
S'Advanced'
p10629
sa(dp10630
S'description'
p10631
g3
sS'cpp_type'
p10632
S'std::string'
p10633
sS'default'
p10634
S'MaterialRealVectorValueAux'
p10635
sS'name'
p10636
S'type'
p10637
sS'required'
p10638
I00
sS'group_name'
p10639
Nsa(dp10640
S'description'
p10641
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10642
sS'cpp_type'
p10643
S'bool'
p10644
sS'default'
p10645
S'0'
p10646
sS'name'
p10647
S'use_displaced_mesh'
p10648
sS'required'
p10649
I00
sS'group_name'
p10650
S'Advanced'
p10651
sa(dp10652
S'description'
p10653
S'The name of the variable that this object applies to\n'
p10654
sS'cpp_type'
p10655
S'AuxVariableName'
p10656
sS'default'
p10657
g3
sS'name'
p10658
S'variable'
p10659
sS'required'
p10660
I01
sS'group_name'
p10661
NsasS'name'
p10662
S'/Bounds/MaterialRealVectorValueAux'
p10663
sa(dp10664
S'description'
p10665
g3
sS'type'
p10666
NsS'subblocks'
p10667
NsS'parameters'
p10668
(lp10669
(dp10670
S'description'
p10671
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10672
sS'cpp_type'
p10673
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10674
sS'default'
p10675
g3
sS'name'
p10676
S'block'
p10677
sS'required'
p10678
I00
sS'group_name'
p10679
Nsa(dp10680
S'description'
p10681
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10682
sS'cpp_type'
p10683
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10684
sS'default'
p10685
g3
sS'name'
p10686
S'boundary'
p10687
sS'required'
p10688
I00
sS'group_name'
p10689
Nsa(dp10690
S'name'
p10691
S'execute_on'
p10692
sS'cpp_type'
p10693
S'MooseEnum'
p10694
sS'default'
p10695
S'residual'
p10696
sS'description'
p10697
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p10698
sS'required'
p10699
I00
sS'options'
p10700
S'initial residual jacobian timestep timestep_begin custom'
p10701
sS'group_name'
p10702
Nsa(dp10703
S'description'
p10704
S'The boundary to find the distance to.\n'
p10705
sS'cpp_type'
p10706
S'BoundaryName'
p10707
sS'default'
p10708
g3
sS'name'
p10709
S'paired_boundary'
p10710
sS'required'
p10711
I01
sS'group_name'
p10712
Nsa(dp10713
S'description'
p10714
S'The seed for the master random number generator\n'
p10715
sS'cpp_type'
p10716
S'unsigned int'
p10717
sS'default'
p10718
S'0'
p10719
sS'name'
p10720
S'seed'
p10721
sS'required'
p10722
I00
sS'group_name'
p10723
S'Advanced'
p10724
sa(dp10725
S'description'
p10726
g3
sS'cpp_type'
p10727
S'std::string'
p10728
sS'default'
p10729
S'NearestNodeDistanceAux'
p10730
sS'name'
p10731
S'type'
p10732
sS'required'
p10733
I00
sS'group_name'
p10734
Nsa(dp10735
S'description'
p10736
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10737
sS'cpp_type'
p10738
S'bool'
p10739
sS'default'
p10740
S'1'
p10741
sS'name'
p10742
S'use_displaced_mesh'
p10743
sS'required'
p10744
I00
sS'group_name'
p10745
S'Advanced'
p10746
sa(dp10747
S'description'
p10748
S'The name of the variable that this object applies to\n'
p10749
sS'cpp_type'
p10750
S'AuxVariableName'
p10751
sS'default'
p10752
g3
sS'name'
p10753
S'variable'
p10754
sS'required'
p10755
I01
sS'group_name'
p10756
NsasS'name'
p10757
S'/Bounds/NearestNodeDistanceAux'
p10758
sa(dp10759
S'description'
p10760
g3
sS'type'
p10761
NsS'subblocks'
p10762
NsS'parameters'
p10763
(lp10764
(dp10765
S'description'
p10766
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10767
sS'cpp_type'
p10768
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10769
sS'default'
p10770
g3
sS'name'
p10771
S'block'
p10772
sS'required'
p10773
I00
sS'group_name'
p10774
Nsa(dp10775
S'description'
p10776
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10777
sS'cpp_type'
p10778
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10779
sS'default'
p10780
g3
sS'name'
p10781
S'boundary'
p10782
sS'required'
p10783
I00
sS'group_name'
p10784
Nsa(dp10785
S'name'
p10786
S'execute_on'
p10787
sS'cpp_type'
p10788
S'MooseEnum'
p10789
sS'default'
p10790
S'residual'
p10791
sS'description'
p10792
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p10793
sS'required'
p10794
I00
sS'options'
p10795
S'initial residual jacobian timestep timestep_begin custom'
p10796
sS'group_name'
p10797
Nsa(dp10798
S'description'
p10799
S'The boundary to get the value from.\n'
p10800
sS'cpp_type'
p10801
S'BoundaryName'
p10802
sS'default'
p10803
g3
sS'name'
p10804
S'paired_boundary'
p10805
sS'required'
p10806
I01
sS'group_name'
p10807
Nsa(dp10808
S'description'
p10809
S'The variable to get the value of.\n'
p10810
sS'cpp_type'
p10811
S'std::vector<VariableName>'
p10812
sS'default'
p10813
g3
sS'name'
p10814
S'paired_variable'
p10815
sS'required'
p10816
I01
sS'group_name'
p10817
Nsa(dp10818
S'description'
p10819
S'The seed for the master random number generator\n'
p10820
sS'cpp_type'
p10821
S'unsigned int'
p10822
sS'default'
p10823
S'0'
p10824
sS'name'
p10825
S'seed'
p10826
sS'required'
p10827
I00
sS'group_name'
p10828
S'Advanced'
p10829
sa(dp10830
S'description'
p10831
g3
sS'cpp_type'
p10832
S'std::string'
p10833
sS'default'
p10834
S'NearestNodeValueAux'
p10835
sS'name'
p10836
S'type'
p10837
sS'required'
p10838
I00
sS'group_name'
p10839
Nsa(dp10840
S'description'
p10841
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10842
sS'cpp_type'
p10843
S'bool'
p10844
sS'default'
p10845
S'1'
p10846
sS'name'
p10847
S'use_displaced_mesh'
p10848
sS'required'
p10849
I00
sS'group_name'
p10850
S'Advanced'
p10851
sa(dp10852
S'description'
p10853
S'The name of the variable that this object applies to\n'
p10854
sS'cpp_type'
p10855
S'AuxVariableName'
p10856
sS'default'
p10857
g3
sS'name'
p10858
S'variable'
p10859
sS'required'
p10860
I01
sS'group_name'
p10861
NsasS'name'
p10862
S'/Bounds/NearestNodeValueAux'
p10863
sa(dp10864
S'description'
p10865
g3
sS'type'
p10866
NsS'subblocks'
p10867
NsS'parameters'
p10868
(lp10869
(dp10870
S'description'
p10871
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10872
sS'cpp_type'
p10873
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10874
sS'default'
p10875
g3
sS'name'
p10876
S'block'
p10877
sS'required'
p10878
I00
sS'group_name'
p10879
Nsa(dp10880
S'description'
p10881
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10882
sS'cpp_type'
p10883
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10884
sS'default'
p10885
g3
sS'name'
p10886
S'boundary'
p10887
sS'required'
p10888
I00
sS'group_name'
p10889
Nsa(dp10890
S'description'
p10891
S'The NodalFloodCount UserObject to get values from.\n'
p10892
sS'cpp_type'
p10893
S'UserObjectName'
p10894
sS'default'
p10895
g3
sS'name'
p10896
S'bubble_object'
p10897
sS'required'
p10898
I01
sS'group_name'
p10899
Nsa(dp10900
S'name'
p10901
S'execute_on'
p10902
sS'cpp_type'
p10903
S'MooseEnum'
p10904
sS'default'
p10905
S'residual'
p10906
sS'description'
p10907
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p10908
sS'required'
p10909
I00
sS'options'
p10910
S'initial residual jacobian timestep timestep_begin custom'
p10911
sS'group_name'
p10912
Nsa(dp10913
S'name'
p10914
S'field_display'
p10915
sS'cpp_type'
p10916
S'MooseEnum'
p10917
sS'default'
p10918
S'UNIQUE_REGION'
p10919
sS'description'
p10920
S'Determines how the auxilary field should be colored. (UNIQUE_REGION and VARIABLE_COLORING are nodal, CENTROID is elemental, default: UNIQUE_REGION)\n'
p10921
sS'required'
p10922
I00
sS'options'
p10923
S'UNIQUE_REGION VARIABLE_COLORING ACTIVE_BOUNDS CENTROID'
p10924
sS'group_name'
p10925
Nsa(dp10926
S'description'
p10927
S'The index of which map to retrieve values from when using NodalFloodCount with multiple maps.\n'
p10928
sS'cpp_type'
p10929
S'unsigned int'
p10930
sS'default'
p10931
S'0'
p10932
sS'name'
p10933
S'map_index'
p10934
sS'required'
p10935
I00
sS'group_name'
p10936
Nsa(dp10937
S'description'
p10938
S'The seed for the master random number generator\n'
p10939
sS'cpp_type'
p10940
S'unsigned int'
p10941
sS'default'
p10942
S'0'
p10943
sS'name'
p10944
S'seed'
p10945
sS'required'
p10946
I00
sS'group_name'
p10947
S'Advanced'
p10948
sa(dp10949
S'description'
p10950
g3
sS'cpp_type'
p10951
S'std::string'
p10952
sS'default'
p10953
S'NodalFloodCountAux'
p10954
sS'name'
p10955
S'type'
p10956
sS'required'
p10957
I00
sS'group_name'
p10958
Nsa(dp10959
S'description'
p10960
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10961
sS'cpp_type'
p10962
S'bool'
p10963
sS'default'
p10964
S'0'
p10965
sS'name'
p10966
S'use_displaced_mesh'
p10967
sS'required'
p10968
I00
sS'group_name'
p10969
S'Advanced'
p10970
sa(dp10971
S'description'
p10972
S'The name of the variable that this object applies to\n'
p10973
sS'cpp_type'
p10974
S'AuxVariableName'
p10975
sS'default'
p10976
g3
sS'name'
p10977
S'variable'
p10978
sS'required'
p10979
I01
sS'group_name'
p10980
NsasS'name'
p10981
S'/Bounds/NodalFloodCountAux'
p10982
sa(dp10983
S'description'
p10984
g3
sS'type'
p10985
NsS'subblocks'
p10986
NsS'parameters'
p10987
(lp10988
(dp10989
S'description'
p10990
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10991
sS'cpp_type'
p10992
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10993
sS'default'
p10994
g3
sS'name'
p10995
S'block'
p10996
sS'required'
p10997
I00
sS'group_name'
p10998
Nsa(dp10999
S'description'
p11000
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11001
sS'cpp_type'
p11002
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p11003
sS'default'
p11004
g3
sS'name'
p11005
S'boundary'
p11006
sS'required'
p11007
I00
sS'group_name'
p11008
Nsa(dp11009
S'name'
p11010
S'execute_on'
p11011
sS'cpp_type'
p11012
S'MooseEnum'
p11013
sS'default'
p11014
S'residual'
p11015
sS'description'
p11016
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p11017
sS'required'
p11018
I00
sS'options'
p11019
S'initial residual jacobian timestep timestep_begin custom'
p11020
sS'group_name'
p11021
Nsa(dp11022
S'description'
p11023
S'The normalization factor\n'
p11024
sS'cpp_type'
p11025
S'double'
p11026
sS'default'
p11027
S'1'
p11028
sS'name'
p11029
S'normal_factor'
p11030
sS'required'
p11031
I00
sS'group_name'
p11032
Nsa(dp11033
S'description'
p11034
S'The postprocessor on the source\n'
p11035
sS'cpp_type'
p11036
S'PostprocessorName'
p11037
sS'default'
p11038
g3
sS'name'
p11039
S'normalization'
p11040
sS'required'
p11041
I01
sS'group_name'
p11042
Nsa(dp11043
S'description'
p11044
S'The seed for the master random number generator\n'
p11045
sS'cpp_type'
p11046
S'unsigned int'
p11047
sS'default'
p11048
S'0'
p11049
sS'name'
p11050
S'seed'
p11051
sS'required'
p11052
I00
sS'group_name'
p11053
S'Advanced'
p11054
sa(dp11055
S'description'
p11056
S'The variable to be normalized\n'
p11057
sS'cpp_type'
p11058
S'std::vector<VariableName>'
p11059
sS'default'
p11060
g3
sS'name'
p11061
S'source_variable'
p11062
sS'required'
p11063
I01
sS'group_name'
p11064
Nsa(dp11065
S'description'
p11066
g3
sS'cpp_type'
p11067
S'std::string'
p11068
sS'default'
p11069
S'NormalizationAux'
p11070
sS'name'
p11071
S'type'
p11072
sS'required'
p11073
I00
sS'group_name'
p11074
Nsa(dp11075
S'description'
p11076
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11077
sS'cpp_type'
p11078
S'bool'
p11079
sS'default'
p11080
S'0'
p11081
sS'name'
p11082
S'use_displaced_mesh'
p11083
sS'required'
p11084
I00
sS'group_name'
p11085
S'Advanced'
p11086
sa(dp11087
S'description'
p11088
S'The name of the variable that this object applies to\n'
p11089
sS'cpp_type'
p11090
S'AuxVariableName'
p11091
sS'default'
p11092
g3
sS'name'
p11093
S'variable'
p11094
sS'required'
p11095
I01
sS'group_name'
p11096
NsasS'name'
p11097
S'/Bounds/NormalizationAux'
p11098
sa(dp11099
S'description'
p11100
g3
sS'type'
p11101
NsS'subblocks'
p11102
NsS'parameters'
p11103
(lp11104
(dp11105
S'description'
p11106
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11107
sS'cpp_type'
p11108
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p11109
sS'default'
p11110
g3
sS'name'
p11111
S'block'
p11112
sS'required'
p11113
I00
sS'group_name'
p11114
Nsa(dp11115
S'description'
p11116
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11117
sS'cpp_type'
p11118
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p11119
sS'default'
p11120
g3
sS'name'
p11121
S'boundary'
p11122
sS'required'
p11123
I00
sS'group_name'
p11124
Nsa(dp11125
S'name'
p11126
S'execute_on'
p11127
sS'cpp_type'
p11128
S'MooseEnum'
p11129
sS'default'
p11130
S'residual'
p11131
sS'description'
p11132
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p11133
sS'required'
p11134
I00
sS'options'
p11135
S'initial residual jacobian timestep timestep_begin custom'
p11136
sS'group_name'
p11137
Nsa(dp11138
S'description'
p11139
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p11140
sS'cpp_type'
p11141
S'double'
p11142
sS'default'
p11143
g3
sS'name'
p11144
S'normal_smoothing_distance'
p11145
sS'required'
p11146
I00
sS'group_name'
p11147
Nsa(dp11148
S'description'
p11149
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p11150
sS'cpp_type'
p11151
S'std::string'
p11152
sS'default'
p11153
g3
sS'name'
p11154
S'normal_smoothing_method'
p11155
sS'required'
p11156
I00
sS'group_name'
p11157
Nsa(dp11158
S'name'
p11159
S'order'
p11160
sS'cpp_type'
p11161
S'MooseEnum'
p11162
sS'default'
p11163
S'FIRST'
p11164
sS'description'
p11165
S'The finite element order\n'
p11166
sS'required'
p11167
I00
sS'options'
p11168
S'FIRST SECOND THIRD FOURTH'
p11169
sS'group_name'
p11170
Nsa(dp11171
S'description'
p11172
S'The boundary to be penetrated\n'
p11173
sS'cpp_type'
p11174
S'BoundaryName'
p11175
sS'default'
p11176
g3
sS'name'
p11177
S'paired_boundary'
p11178
sS'required'
p11179
I01
sS'group_name'
p11180
Nsa(dp11181
S'description'
p11182
S'The quantity to recover from the available penetration information: distance(default), tangential_distance, normal_x, normal_y, normal_z, closest_point_x, closest_point_y, closest_point_z, element_id, side, incremental_slip_x, incremental_slip_y, incremental_slip_z, incremental_slip_magnitude, accumulated_slip, force_x, force_y, force_z, normal_force_magnitude, normal_force_x, normal_force_y, normal_force_z, tangential_force_magnitude, tangential_force_x, tangential_force_y, tangential_force_z, frictional_energy, mechanical_status\n'
p11183
sS'cpp_type'
p11184
S'std::string'
p11185
sS'default'
p11186
S'distance'
p11187
sS'name'
p11188
S'quantity'
p11189
sS'required'
p11190
I00
sS'group_name'
p11191
Nsa(dp11192
S'description'
p11193
S'The seed for the master random number generator\n'
p11194
sS'cpp_type'
p11195
S'unsigned int'
p11196
sS'default'
p11197
S'0'
p11198
sS'name'
p11199
S'seed'
p11200
sS'required'
p11201
I00
sS'group_name'
p11202
S'Advanced'
p11203
sa(dp11204
S'description'
p11205
S'Tangential distance to extend edges of contact surfaces\n'
p11206
sS'cpp_type'
p11207
S'double'
p11208
sS'default'
p11209
g3
sS'name'
p11210
S'tangential_tolerance'
p11211
sS'required'
p11212
I00
sS'group_name'
p11213
Nsa(dp11214
S'description'
p11215
g3
sS'cpp_type'
p11216
S'std::string'
p11217
sS'default'
p11218
S'PenetrationAux'
p11219
sS'name'
p11220
S'type'
p11221
sS'required'
p11222
I00
sS'group_name'
p11223
Nsa(dp11224
S'description'
p11225
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11226
sS'cpp_type'
p11227
S'bool'
p11228
sS'default'
p11229
S'1'
p11230
sS'name'
p11231
S'use_displaced_mesh'
p11232
sS'required'
p11233
I00
sS'group_name'
p11234
S'Advanced'
p11235
sa(dp11236
S'description'
p11237
S'The name of the variable that this object applies to\n'
p11238
sS'cpp_type'
p11239
S'AuxVariableName'
p11240
sS'default'
p11241
g3
sS'name'
p11242
S'variable'
p11243
sS'required'
p11244
I01
sS'group_name'
p11245
NsasS'name'
p11246
S'/Bounds/PenetrationAux'
p11247
sa(dp11248
S'description'
p11249
g3
sS'type'
p11250
NsS'subblocks'
p11251
NsS'parameters'
p11252
(lp11253
(dp11254
S'description'
p11255
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11256
sS'cpp_type'
p11257
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p11258
sS'default'
p11259
g3
sS'name'
p11260
S'block'
p11261
sS'required'
p11262
I00
sS'group_name'
p11263
Nsa(dp11264
S'description'
p11265
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11266
sS'cpp_type'
p11267
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p11268
sS'default'
p11269
g3
sS'name'
p11270
S'boundary'
p11271
sS'required'
p11272
I00
sS'group_name'
p11273
Nsa(dp11274
S'name'
p11275
S'execute_on'
p11276
sS'cpp_type'
p11277
S'MooseEnum'
p11278
sS'default'
p11279
S'residual'
p11280
sS'description'
p11281
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p11282
sS'required'
p11283
I00
sS'options'
p11284
S'initial residual jacobian timestep timestep_begin custom'
p11285
sS'group_name'
p11286
Nsa(dp11287
S'description'
p11288
S'The seed for the master random number generator\n'
p11289
sS'cpp_type'
p11290
S'unsigned int'
p11291
sS'default'
p11292
S'0'
p11293
sS'name'
p11294
S'seed'
p11295
sS'required'
p11296
I00
sS'group_name'
p11297
S'Advanced'
p11298
sa(dp11299
S'description'
p11300
g3
sS'cpp_type'
p11301
S'std::string'
p11302
sS'default'
p11303
S'ProcessorIDAux'
p11304
sS'name'
p11305
S'type'
p11306
sS'required'
p11307
I00
sS'group_name'
p11308
Nsa(dp11309
S'description'
p11310
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11311
sS'cpp_type'
p11312
S'bool'
p11313
sS'default'
p11314
S'0'
p11315
sS'name'
p11316
S'use_displaced_mesh'
p11317
sS'required'
p11318
I00
sS'group_name'
p11319
S'Advanced'
p11320
sa(dp11321
S'description'
p11322
S'The name of the variable that this object applies to\n'
p11323
sS'cpp_type'
p11324
S'AuxVariableName'
p11325
sS'default'
p11326
g3
sS'name'
p11327
S'variable'
p11328
sS'required'
p11329
I01
sS'group_name'
p11330
NsasS'name'
p11331
S'/Bounds/ProcessorIDAux'
p11332
sa(dp11333
S'description'
p11334
g3
sS'type'
p11335
NsS'subblocks'
p11336
NsS'parameters'
p11337
(lp11338
(dp11339
S'description'
p11340
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11341
sS'cpp_type'
p11342
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p11343
sS'default'
p11344
g3
sS'name'
p11345
S'block'
p11346
sS'required'
p11347
I00
sS'group_name'
p11348
Nsa(dp11349
S'description'
p11350
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11351
sS'cpp_type'
p11352
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p11353
sS'default'
p11354
g3
sS'name'
p11355
S'boundary'
p11356
sS'required'
p11357
I00
sS'group_name'
p11358
Nsa(dp11359
S'description'
p11360
S'The downstairs of the quotient variable\n'
p11361
sS'cpp_type'
p11362
S'std::vector<VariableName>'
p11363
sS'default'
p11364
g3
sS'name'
p11365
S'denominator'
p11366
sS'required'
p11367
I00
sS'group_name'
p11368
Nsa(dp11369
S'name'
p11370
S'execute_on'
p11371
sS'cpp_type'
p11372
S'MooseEnum'
p11373
sS'default'
p11374
S'residual'
p11375
sS'description'
p11376
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p11377
sS'required'
p11378
I00
sS'options'
p11379
S'initial residual jacobian timestep timestep_begin custom'
p11380
sS'group_name'
p11381
Nsa(dp11382
S'description'
p11383
S'The upstairs of the quotient variable\n'
p11384
sS'cpp_type'
p11385
S'std::vector<VariableName>'
p11386
sS'default'
p11387
g3
sS'name'
p11388
S'numerator'
p11389
sS'required'
p11390
I00
sS'group_name'
p11391
Nsa(dp11392
S'description'
p11393
S'The seed for the master random number generator\n'
p11394
sS'cpp_type'
p11395
S'unsigned int'
p11396
sS'default'
p11397
S'0'
p11398
sS'name'
p11399
S'seed'
p11400
sS'required'
p11401
I00
sS'group_name'
p11402
S'Advanced'
p11403
sa(dp11404
S'description'
p11405
g3
sS'cpp_type'
p11406
S'std::string'
p11407
sS'default'
p11408
S'QuotientAux'
p11409
sS'name'
p11410
S'type'
p11411
sS'required'
p11412
I00
sS'group_name'
p11413
Nsa(dp11414
S'description'
p11415
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11416
sS'cpp_type'
p11417
S'bool'
p11418
sS'default'
p11419
S'0'
p11420
sS'name'
p11421
S'use_displaced_mesh'
p11422
sS'required'
p11423
I00
sS'group_name'
p11424
S'Advanced'
p11425
sa(dp11426
S'description'
p11427
S'The name of the variable that this object applies to\n'
p11428
sS'cpp_type'
p11429
S'AuxVariableName'
p11430
sS'default'
p11431
g3
sS'name'
p11432
S'variable'
p11433
sS'required'
p11434
I01
sS'group_name'
p11435
NsasS'name'
p11436
S'/Bounds/QuotientAux'
p11437
sa(dp11438
S'description'
p11439
g3
sS'type'
p11440
NsS'subblocks'
p11441
NsS'parameters'
p11442
(lp11443
(dp11444
S'description'
p11445
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11446
sS'cpp_type'
p11447
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p11448
sS'default'
p11449
g3
sS'name'
p11450
S'block'
p11451
sS'required'
p11452
I00
sS'group_name'
p11453
Nsa(dp11454
S'description'
p11455
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11456
sS'cpp_type'
p11457
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p11458
sS'default'
p11459
g3
sS'name'
p11460
S'boundary'
p11461
sS'required'
p11462
I00
sS'group_name'
p11463
Nsa(dp11464
S'name'
p11465
S'execute_on'
p11466
sS'cpp_type'
p11467
S'MooseEnum'
p11468
sS'default'
p11469
S'residual'
p11470
sS'description'
p11471
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p11472
sS'required'
p11473
I00
sS'options'
p11474
S'initial residual jacobian timestep timestep_begin custom'
p11475
sS'group_name'
p11476
Nsa(dp11477
S'description'
p11478
S'The seed for the master random number generator\n'
p11479
sS'cpp_type'
p11480
S'unsigned int'
p11481
sS'default'
p11482
S'0'
p11483
sS'name'
p11484
S'seed'
p11485
sS'required'
p11486
I00
sS'group_name'
p11487
S'Advanced'
p11488
sa(dp11489
S'description'
p11490
g3
sS'cpp_type'
p11491
S'std::string'
p11492
sS'default'
p11493
S'SelfAux'
p11494
sS'name'
p11495
S'type'
p11496
sS'required'
p11497
I00
sS'group_name'
p11498
Nsa(dp11499
S'description'
p11500
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11501
sS'cpp_type'
p11502
S'bool'
p11503
sS'default'
p11504
S'0'
p11505
sS'name'
p11506
S'use_displaced_mesh'
p11507
sS'required'
p11508
I00
sS'group_name'
p11509
S'Advanced'
p11510
sa(dp11511
S'description'
p11512
S'The name of the variable that this object applies to\n'
p11513
sS'cpp_type'
p11514
S'AuxVariableName'
p11515
sS'default'
p11516
g3
sS'name'
p11517
S'variable'
p11518
sS'required'
p11519
I01
sS'group_name'
p11520
NsasS'name'
p11521
S'/Bounds/SelfAux'
p11522
sa(dp11523
S'description'
p11524
g3
sS'type'
p11525
NsS'subblocks'
p11526
NsS'parameters'
p11527
(lp11528
(dp11529
S'description'
p11530
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p11531
sS'cpp_type'
p11532
S'double'
p11533
sS'default'
p11534
S'0'
p11535
sS'name'
p11536
S'add_factor'
p11537
sS'required'
p11538
I00
sS'group_name'
p11539
Nsa(dp11540
S'description'
p11541
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11542
sS'cpp_type'
p11543
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p11544
sS'default'
p11545
g3
sS'name'
p11546
S'block'
p11547
sS'required'
p11548
I00
sS'group_name'
p11549
Nsa(dp11550
S'description'
p11551
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11552
sS'cpp_type'
p11553
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p11554
sS'default'
p11555
g3
sS'name'
p11556
S'boundary'
p11557
sS'required'
p11558
I00
sS'group_name'
p11559
Nsa(dp11560
S'description'
p11561
S'If true the meshes must be the same and then the values are simply copied over.\n'
p11562
sS'cpp_type'
p11563
S'bool'
p11564
sS'default'
p11565
S'0'
p11566
sS'name'
p11567
S'direct'
p11568
sS'required'
p11569
I00
sS'group_name'
p11570
Nsa(dp11571
S'name'
p11572
S'execute_on'
p11573
sS'cpp_type'
p11574
S'MooseEnum'
p11575
sS'default'
p11576
S'residual'
p11577
sS'description'
p11578
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p11579
sS'required'
p11580
I00
sS'options'
p11581
S'initial residual jacobian timestep timestep_begin custom'
p11582
sS'group_name'
p11583
Nsa(dp11584
S'description'
p11585
S'The name of the variable to extract from the file\n'
p11586
sS'cpp_type'
p11587
S'std::string'
p11588
sS'default'
p11589
g3
sS'name'
p11590
S'from_variable'
p11591
sS'required'
p11592
I00
sS'group_name'
p11593
Nsa(dp11594
S'description'
p11595
S"Scale factor (a)  to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p11596
sS'cpp_type'
p11597
S'double'
p11598
sS'default'
p11599
S'1'
p11600
sS'name'
p11601
S'scale_factor'
p11602
sS'required'
p11603
I00
sS'group_name'
p11604
Nsa(dp11605
S'description'
p11606
S'The seed for the master random number generator\n'
p11607
sS'cpp_type'
p11608
S'unsigned int'
p11609
sS'default'
p11610
S'0'
p11611
sS'name'
p11612
S'seed'
p11613
sS'required'
p11614
I00
sS'group_name'
p11615
S'Advanced'
p11616
sa(dp11617
S'description'
p11618
S'The name of the SolutionUserObject\n'
p11619
sS'cpp_type'
p11620
S'UserObjectName'
p11621
sS'default'
p11622
g3
sS'name'
p11623
S'solution'
p11624
sS'required'
p11625
I01
sS'group_name'
p11626
Nsa(dp11627
S'description'
p11628
g3
sS'cpp_type'
p11629
S'std::string'
p11630
sS'default'
p11631
S'SolutionAux'
p11632
sS'name'
p11633
S'type'
p11634
sS'required'
p11635
I00
sS'group_name'
p11636
Nsa(dp11637
S'description'
p11638
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11639
sS'cpp_type'
p11640
S'bool'
p11641
sS'default'
p11642
S'0'
p11643
sS'name'
p11644
S'use_displaced_mesh'
p11645
sS'required'
p11646
I00
sS'group_name'
p11647
S'Advanced'
p11648
sa(dp11649
S'description'
p11650
S'The name of the variable that this object applies to\n'
p11651
sS'cpp_type'
p11652
S'AuxVariableName'
p11653
sS'default'
p11654
g3
sS'name'
p11655
S'variable'
p11656
sS'required'
p11657
I01
sS'group_name'
p11658
NsasS'name'
p11659
S'/Bounds/SolutionAux'
p11660
sa(dp11661
S'description'
p11662
g3
sS'type'
p11663
NsS'subblocks'
p11664
NsS'parameters'
p11665
(lp11666
(dp11667
S'description'
p11668
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11669
sS'cpp_type'
p11670
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p11671
sS'default'
p11672
g3
sS'name'
p11673
S'block'
p11674
sS'required'
p11675
I00
sS'group_name'
p11676
Nsa(dp11677
S'description'
p11678
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11679
sS'cpp_type'
p11680
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p11681
sS'default'
p11682
g3
sS'name'
p11683
S'boundary'
p11684
sS'required'
p11685
I00
sS'group_name'
p11686
Nsa(dp11687
S'name'
p11688
S'execute_on'
p11689
sS'cpp_type'
p11690
S'MooseEnum'
p11691
sS'default'
p11692
S'residual'
p11693
sS'description'
p11694
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p11695
sS'required'
p11696
I00
sS'options'
p11697
S'initial residual jacobian timestep timestep_begin custom'
p11698
sS'group_name'
p11699
Nsa(dp11700
S'description'
p11701
S'The seed for the master random number generator\n'
p11702
sS'cpp_type'
p11703
S'unsigned int'
p11704
sS'default'
p11705
S'0'
p11706
sS'name'
p11707
S'seed'
p11708
sS'required'
p11709
I00
sS'group_name'
p11710
S'Advanced'
p11711
sa(dp11712
S'description'
p11713
g3
sS'cpp_type'
p11714
S'std::string'
p11715
sS'default'
p11716
S'SpatialUserObjectAux'
p11717
sS'name'
p11718
S'type'
p11719
sS'required'
p11720
I00
sS'group_name'
p11721
Nsa(dp11722
S'description'
p11723
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11724
sS'cpp_type'
p11725
S'bool'
p11726
sS'default'
p11727
S'0'
p11728
sS'name'
p11729
S'use_displaced_mesh'
p11730
sS'required'
p11731
I00
sS'group_name'
p11732
S'Advanced'
p11733
sa(dp11734
S'description'
p11735
S'The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n'
p11736
sS'cpp_type'
p11737
S'UserObjectName'
p11738
sS'default'
p11739
g3
sS'name'
p11740
S'user_object'
p11741
sS'required'
p11742
I01
sS'group_name'
p11743
Nsa(dp11744
S'description'
p11745
S'The name of the variable that this object applies to\n'
p11746
sS'cpp_type'
p11747
S'AuxVariableName'
p11748
sS'default'
p11749
g3
sS'name'
p11750
S'variable'
p11751
sS'required'
p11752
I01
sS'group_name'
p11753
NsasS'name'
p11754
S'/Bounds/SpatialUserObjectAux'
p11755
sa(dp11756
S'description'
p11757
g3
sS'type'
p11758
NsS'subblocks'
p11759
NsS'parameters'
p11760
(lp11761
(dp11762
S'description'
p11763
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11764
sS'cpp_type'
p11765
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p11766
sS'default'
p11767
g3
sS'name'
p11768
S'block'
p11769
sS'required'
p11770
I00
sS'group_name'
p11771
Nsa(dp11772
S'description'
p11773
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11774
sS'cpp_type'
p11775
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p11776
sS'default'
p11777
g3
sS'name'
p11778
S'boundary'
p11779
sS'required'
p11780
I00
sS'group_name'
p11781
Nsa(dp11782
S'name'
p11783
S'execute_on'
p11784
sS'cpp_type'
p11785
S'MooseEnum'
p11786
sS'default'
p11787
S'residual'
p11788
sS'description'
p11789
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p11790
sS'required'
p11791
I00
sS'options'
p11792
S'initial residual jacobian timestep timestep_begin custom'
p11793
sS'group_name'
p11794
Nsa(dp11795
S'description'
p11796
S'The seed for the master random number generator\n'
p11797
sS'cpp_type'
p11798
S'unsigned int'
p11799
sS'default'
p11800
S'0'
p11801
sS'name'
p11802
S'seed'
p11803
sS'required'
p11804
I00
sS'group_name'
p11805
S'Advanced'
p11806
sa(dp11807
S'description'
p11808
g3
sS'cpp_type'
p11809
S'std::string'
p11810
sS'default'
p11811
S'VectorMagnitudeAux'
p11812
sS'name'
p11813
S'type'
p11814
sS'required'
p11815
I00
sS'group_name'
p11816
Nsa(dp11817
S'description'
p11818
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11819
sS'cpp_type'
p11820
S'bool'
p11821
sS'default'
p11822
S'0'
p11823
sS'name'
p11824
S'use_displaced_mesh'
p11825
sS'required'
p11826
I00
sS'group_name'
p11827
S'Advanced'
p11828
sa(dp11829
S'description'
p11830
S'The name of the variable that this object applies to\n'
p11831
sS'cpp_type'
p11832
S'AuxVariableName'
p11833
sS'default'
p11834
g3
sS'name'
p11835
S'variable'
p11836
sS'required'
p11837
I01
sS'group_name'
p11838
Nsa(dp11839
S'description'
p11840
S'x-component of the vector\n'
p11841
sS'cpp_type'
p11842
S'std::vector<VariableName>'
p11843
sS'default'
p11844
g3
sS'name'
p11845
S'x'
p11846
sS'required'
p11847
I01
sS'group_name'
p11848
Nsa(dp11849
S'description'
p11850
S'y-component of the vector\n'
p11851
sS'cpp_type'
p11852
S'std::vector<VariableName>'
p11853
sS'default'
p11854
g3
sS'name'
p11855
S'y'
p11856
sS'required'
p11857
I00
sS'group_name'
p11858
Nsa(dp11859
S'description'
p11860
S'z-component of the vector\n'
p11861
sS'cpp_type'
p11862
S'std::vector<VariableName>'
p11863
sS'default'
p11864
g3
sS'name'
p11865
S'z'
p11866
sS'required'
p11867
I00
sS'group_name'
p11868
NsasS'name'
p11869
S'/Bounds/VectorMagnitudeAux'
p11870
sasS'parameters'
p11871
NsS'name'
p11872
S'/Bounds'
p11873
sa(dp11874
S'description'
p11875
g3
sS'type'
p11876
NsS'subblocks'
p11877
(lp11878
(dp11879
S'description'
p11880
g3
sS'type'
p11881
NsS'subblocks'
p11882
NsS'parameters'
p11883
(lp11884
(dp11885
S'description'
p11886
S'A string representing the Moose Object that will be built by this Action\n'
p11887
sS'cpp_type'
p11888
S'std::string'
p11889
sS'default'
p11890
g3
sS'name'
p11891
S'type'
p11892
sS'required'
p11893
I01
sS'group_name'
p11894
NsasS'name'
p11895
S'/Constraints/*'
p11896
sa(dp11897
S'description'
p11898
g3
sS'type'
p11899
NsS'subblocks'
p11900
NsS'parameters'
p11901
(lp11902
(dp11903
S'name'
p11904
S'execute_on'
p11905
sS'cpp_type'
p11906
S'MooseEnum'
p11907
sS'default'
p11908
S'residual'
p11909
sS'description'
p11910
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p11911
sS'required'
p11912
I00
sS'options'
p11913
S'initial residual jacobian timestep timestep_begin custom'
p11914
sS'group_name'
p11915
Nsa(dp11916
S'description'
p11917
S'The boundary ID associated with the master side\n'
p11918
sS'cpp_type'
p11919
S'BoundaryName'
p11920
sS'default'
p11921
g3
sS'name'
p11922
S'master'
p11923
sS'required'
p11924
I01
sS'group_name'
p11925
Nsa(dp11926
S'description'
p11927
S'The variable on the master side of the domain\n'
p11928
sS'cpp_type'
p11929
S'std::vector<VariableName>'
p11930
sS'default'
p11931
g3
sS'name'
p11932
S'master_variable'
p11933
sS'required'
p11934
I01
sS'group_name'
p11935
Nsa(dp11936
S'description'
p11937
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p11938
sS'cpp_type'
p11939
S'double'
p11940
sS'default'
p11941
g3
sS'name'
p11942
S'normal_smoothing_distance'
p11943
sS'required'
p11944
I00
sS'group_name'
p11945
Nsa(dp11946
S'description'
p11947
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p11948
sS'cpp_type'
p11949
S'std::string'
p11950
sS'default'
p11951
g3
sS'name'
p11952
S'normal_smoothing_method'
p11953
sS'required'
p11954
I00
sS'group_name'
p11955
Nsa(dp11956
S'name'
p11957
S'order'
p11958
sS'cpp_type'
p11959
S'MooseEnum'
p11960
sS'default'
p11961
S'FIRST'
p11962
sS'description'
p11963
S'The finite element order used for projections\n'
p11964
sS'required'
p11965
I00
sS'options'
p11966
S'FIRST SECOND THIRD FORTH'
p11967
sS'group_name'
p11968
Nsa(dp11969
S'description'
p11970
S'scaling factor to be applied to constraint equations\n'
p11971
sS'cpp_type'
p11972
S'double'
p11973
sS'default'
p11974
S'1'
p11975
sS'name'
p11976
S'scaling'
p11977
sS'required'
p11978
I00
sS'group_name'
p11979
Nsa(dp11980
S'description'
p11981
S'The boundary ID associated with the slave side\n'
p11982
sS'cpp_type'
p11983
S'BoundaryName'
p11984
sS'default'
p11985
g3
sS'name'
p11986
S'slave'
p11987
sS'required'
p11988
I01
sS'group_name'
p11989
Nsa(dp11990
S'description'
p11991
S'Tangential distance to extend edges of contact surfaces\n'
p11992
sS'cpp_type'
p11993
S'double'
p11994
sS'default'
p11995
g3
sS'name'
p11996
S'tangential_tolerance'
p11997
sS'required'
p11998
I00
sS'group_name'
p11999
Nsa(dp12000
S'description'
p12001
g3
sS'cpp_type'
p12002
S'std::string'
p12003
sS'default'
p12004
S'CoupledTiedValueConstraint'
p12005
sS'name'
p12006
S'type'
p12007
sS'required'
p12008
I00
sS'group_name'
p12009
Nsa(dp12010
S'description'
p12011
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12012
sS'cpp_type'
p12013
S'bool'
p12014
sS'default'
p12015
S'1'
p12016
sS'name'
p12017
S'use_displaced_mesh'
p12018
sS'required'
p12019
I00
sS'group_name'
p12020
S'Advanced'
p12021
sa(dp12022
S'description'
p12023
S'The name of the variable that this constraint is applied to.\n'
p12024
sS'cpp_type'
p12025
S'NonlinearVariableName'
p12026
sS'default'
p12027
g3
sS'name'
p12028
S'variable'
p12029
sS'required'
p12030
I01
sS'group_name'
p12031
NsasS'name'
p12032
S'/Constraints/CoupledTiedValueConstraint'
p12033
sa(dp12034
S'description'
p12035
g3
sS'type'
p12036
NsS'subblocks'
p12037
NsS'parameters'
p12038
(lp12039
(dp12040
S'name'
p12041
S'execute_on'
p12042
sS'cpp_type'
p12043
S'MooseEnum'
p12044
sS'default'
p12045
S'residual'
p12046
sS'description'
p12047
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p12048
sS'required'
p12049
I00
sS'options'
p12050
S'initial residual jacobian timestep timestep_begin custom'
p12051
sS'group_name'
p12052
Nsa(dp12053
S'description'
p12054
S'The name of the interface.\n'
p12055
sS'cpp_type'
p12056
S'std::string'
p12057
sS'default'
p12058
g3
sS'name'
p12059
S'interface'
p12060
sS'required'
p12061
I01
sS'group_name'
p12062
Nsa(dp12063
S'description'
p12064
S'Variable on master surface\n'
p12065
sS'cpp_type'
p12066
S'VariableName'
p12067
sS'default'
p12068
g3
sS'name'
p12069
S'master_variable'
p12070
sS'required'
p12071
I01
sS'group_name'
p12072
Nsa(dp12073
S'description'
p12074
S'Variable on master surface\n'
p12075
sS'cpp_type'
p12076
S'VariableName'
p12077
sS'default'
p12078
g3
sS'name'
p12079
S'slave_variable'
p12080
sS'required'
p12081
I00
sS'group_name'
p12082
Nsa(dp12083
S'description'
p12084
g3
sS'cpp_type'
p12085
S'std::string'
p12086
sS'default'
p12087
S'EqualValueConstraint'
p12088
sS'name'
p12089
S'type'
p12090
sS'required'
p12091
I00
sS'group_name'
p12092
Nsa(dp12093
S'description'
p12094
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12095
sS'cpp_type'
p12096
S'bool'
p12097
sS'default'
p12098
S'0'
p12099
sS'name'
p12100
S'use_displaced_mesh'
p12101
sS'required'
p12102
I00
sS'group_name'
p12103
S'Advanced'
p12104
sa(dp12105
S'description'
p12106
S'The name of the variable that this constraint is applied to.\n'
p12107
sS'cpp_type'
p12108
S'NonlinearVariableName'
p12109
sS'default'
p12110
g3
sS'name'
p12111
S'variable'
p12112
sS'required'
p12113
I01
sS'group_name'
p12114
NsasS'name'
p12115
S'/Constraints/EqualValueConstraint'
p12116
sa(dp12117
S'description'
p12118
g3
sS'type'
p12119
NsS'subblocks'
p12120
NsS'parameters'
p12121
(lp12122
(dp12123
S'name'
p12124
S'execute_on'
p12125
sS'cpp_type'
p12126
S'MooseEnum'
p12127
sS'default'
p12128
S'residual'
p12129
sS'description'
p12130
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p12131
sS'required'
p12132
I00
sS'options'
p12133
S'initial residual jacobian timestep timestep_begin custom'
p12134
sS'group_name'
p12135
Nsa(dp12136
S'description'
p12137
S'The boundary ID associated with the master side\n'
p12138
sS'cpp_type'
p12139
S'BoundaryName'
p12140
sS'default'
p12141
g3
sS'name'
p12142
S'master'
p12143
sS'required'
p12144
I01
sS'group_name'
p12145
Nsa(dp12146
S'description'
p12147
S'The variable on the master side of the domain\n'
p12148
sS'cpp_type'
p12149
S'std::vector<VariableName>'
p12150
sS'default'
p12151
g3
sS'name'
p12152
S'master_variable'
p12153
sS'required'
p12154
I01
sS'group_name'
p12155
Nsa(dp12156
S'description'
p12157
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p12158
sS'cpp_type'
p12159
S'double'
p12160
sS'default'
p12161
g3
sS'name'
p12162
S'normal_smoothing_distance'
p12163
sS'required'
p12164
I00
sS'group_name'
p12165
Nsa(dp12166
S'description'
p12167
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p12168
sS'cpp_type'
p12169
S'std::string'
p12170
sS'default'
p12171
g3
sS'name'
p12172
S'normal_smoothing_method'
p12173
sS'required'
p12174
I00
sS'group_name'
p12175
Nsa(dp12176
S'name'
p12177
S'order'
p12178
sS'cpp_type'
p12179
S'MooseEnum'
p12180
sS'default'
p12181
S'FIRST'
p12182
sS'description'
p12183
S'The finite element order used for projections\n'
p12184
sS'required'
p12185
I00
sS'options'
p12186
S'FIRST SECOND THIRD FORTH'
p12187
sS'group_name'
p12188
Nsa(dp12189
S'description'
p12190
S'scaling factor to be applied to constraint equations\n'
p12191
sS'cpp_type'
p12192
S'double'
p12193
sS'default'
p12194
S'1'
p12195
sS'name'
p12196
S'scaling'
p12197
sS'required'
p12198
I00
sS'group_name'
p12199
Nsa(dp12200
S'description'
p12201
S'The boundary ID associated with the slave side\n'
p12202
sS'cpp_type'
p12203
S'BoundaryName'
p12204
sS'default'
p12205
g3
sS'name'
p12206
S'slave'
p12207
sS'required'
p12208
I01
sS'group_name'
p12209
Nsa(dp12210
S'description'
p12211
S'Tangential distance to extend edges of contact surfaces\n'
p12212
sS'cpp_type'
p12213
S'double'
p12214
sS'default'
p12215
g3
sS'name'
p12216
S'tangential_tolerance'
p12217
sS'required'
p12218
I00
sS'group_name'
p12219
Nsa(dp12220
S'description'
p12221
g3
sS'cpp_type'
p12222
S'std::string'
p12223
sS'default'
p12224
S'TiedValueConstraint'
p12225
sS'name'
p12226
S'type'
p12227
sS'required'
p12228
I00
sS'group_name'
p12229
Nsa(dp12230
S'description'
p12231
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12232
sS'cpp_type'
p12233
S'bool'
p12234
sS'default'
p12235
S'1'
p12236
sS'name'
p12237
S'use_displaced_mesh'
p12238
sS'required'
p12239
I00
sS'group_name'
p12240
S'Advanced'
p12241
sa(dp12242
S'description'
p12243
S'The name of the variable that this constraint is applied to.\n'
p12244
sS'cpp_type'
p12245
S'NonlinearVariableName'
p12246
sS'default'
p12247
g3
sS'name'
p12248
S'variable'
p12249
sS'required'
p12250
I01
sS'group_name'
p12251
NsasS'name'
p12252
S'/Constraints/TiedValueConstraint'
p12253
sasS'parameters'
p12254
NsS'name'
p12255
S'/Constraints'
p12256
sa(dp12257
S'description'
p12258
g3
sS'type'
p12259
NsS'subblocks'
p12260
(lp12261
(dp12262
S'description'
p12263
g3
sS'type'
p12264
NsS'subblocks'
p12265
(lp12266
(dp12267
S'description'
p12268
g3
sS'type'
p12269
NsS'subblocks'
p12270
NsS'parameters'
p12271
(lp12272
(dp12273
S'description'
p12274
S'The name of the problem we are getting the variable from\n'
p12275
sS'cpp_type'
p12276
S'std::string'
p12277
sS'default'
p12278
g3
sS'name'
p12279
S'from'
p12280
sS'required'
p12281
I01
sS'group_name'
p12282
Nsa(dp12283
S'description'
p12284
S'The name of the variable we are getting from the problem\n'
p12285
sS'cpp_type'
p12286
S'std::string'
p12287
sS'default'
p12288
g3
sS'name'
p12289
S'var_name'
p12290
sS'required'
p12291
I01
sS'group_name'
p12292
NsasS'name'
p12293
S'/CoupledProblems/*/*'
p12294
sasS'parameters'
p12295
(lp12296
(dp12297
S'description'
p12298
S'File name of the input file\n'
p12299
sS'cpp_type'
p12300
S'FileName'
p12301
sS'default'
p12302
g3
sS'name'
p12303
S'input_file'
p12304
sS'required'
p12305
I01
sS'group_name'
p12306
NsasS'name'
p12307
S'/CoupledProblems/*'
p12308
sasS'parameters'
p12309
NsS'name'
p12310
S'/CoupledProblems'
p12311
sa(dp12312
S'description'
p12313
g3
sS'type'
p12314
NsS'subblocks'
p12315
(lp12316
(dp12317
S'description'
p12318
g3
sS'type'
p12319
NsS'subblocks'
p12320
NsS'parameters'
p12321
(lp12322
(dp12323
S'description'
p12324
S'A string representing the Moose Object that will be built by this Action\n'
p12325
sS'cpp_type'
p12326
S'std::string'
p12327
sS'default'
p12328
g3
sS'name'
p12329
S'type'
p12330
sS'required'
p12331
I01
sS'group_name'
p12332
NsasS'name'
p12333
S'/DGKernels/*'
p12334
sa(dp12335
S'description'
p12336
g3
sS'type'
p12337
NsS'subblocks'
p12338
NsS'parameters'
p12339
(lp12340
(dp12341
S'description'
p12342
S'epsilon\n'
p12343
sS'cpp_type'
p12344
S'double'
p12345
sS'default'
p12346
g3
sS'name'
p12347
S'epsilon'
p12348
sS'required'
p12349
I01
sS'group_name'
p12350
Nsa(dp12351
S'description'
p12352
S'sigma\n'
p12353
sS'cpp_type'
p12354
S'double'
p12355
sS'default'
p12356
g3
sS'name'
p12357
S'sigma'
p12358
sS'required'
p12359
I01
sS'group_name'
p12360
Nsa(dp12361
S'description'
p12362
g3
sS'cpp_type'
p12363
S'std::string'
p12364
sS'default'
p12365
S'DGDiffusion'
p12366
sS'name'
p12367
S'type'
p12368
sS'required'
p12369
I00
sS'group_name'
p12370
Nsa(dp12371
S'description'
p12372
S'The name of the variable that this boundary condition applies to\n'
p12373
sS'cpp_type'
p12374
S'NonlinearVariableName'
p12375
sS'default'
p12376
g3
sS'name'
p12377
S'variable'
p12378
sS'required'
p12379
I01
sS'group_name'
p12380
NsasS'name'
p12381
S'/DGKernels/DGDiffusion'
p12382
sasS'parameters'
p12383
NsS'name'
p12384
S'/DGKernels'
p12385
sa(dp12386
S'description'
p12387
g3
sS'type'
p12388
NsS'subblocks'
p12389
(lp12390
(dp12391
S'description'
p12392
g3
sS'type'
p12393
NsS'subblocks'
p12394
NsS'parameters'
p12395
(lp12396
(dp12397
S'description'
p12398
S'A string representing the Moose Object that will be built by this Action\n'
p12399
sS'cpp_type'
p12400
S'std::string'
p12401
sS'default'
p12402
g3
sS'name'
p12403
S'type'
p12404
sS'required'
p12405
I01
sS'group_name'
p12406
NsasS'name'
p12407
S'/Dampers/*'
p12408
sa(dp12409
S'description'
p12410
g3
sS'type'
p12411
NsS'subblocks'
p12412
NsS'parameters'
p12413
(lp12414
(dp12415
S'description'
p12416
S'The percentage (between 0 and 1) of the newton update to take.\n'
p12417
sS'cpp_type'
p12418
S'double'
p12419
sS'default'
p12420
g3
sS'name'
p12421
S'damping'
p12422
sS'required'
p12423
I01
sS'group_name'
p12424
Nsa(dp12425
S'description'
p12426
g3
sS'cpp_type'
p12427
S'std::string'
p12428
sS'default'
p12429
S'ConstantDamper'
p12430
sS'name'
p12431
S'type'
p12432
sS'required'
p12433
I00
sS'group_name'
p12434
Nsa(dp12435
S'description'
p12436
S'The name of the variable that this damper operates on\n'
p12437
sS'cpp_type'
p12438
S'NonlinearVariableName'
p12439
sS'default'
p12440
g3
sS'name'
p12441
S'variable'
p12442
sS'required'
p12443
I01
sS'group_name'
p12444
NsasS'name'
p12445
S'/Dampers/ConstantDamper'
p12446
sa(dp12447
S'description'
p12448
g3
sS'type'
p12449
NsS'subblocks'
p12450
NsS'parameters'
p12451
(lp12452
(dp12453
S'description'
p12454
S'The maximum newton increment for the variable.\n'
p12455
sS'cpp_type'
p12456
S'double'
p12457
sS'default'
p12458
g3
sS'name'
p12459
S'max_increment'
p12460
sS'required'
p12461
I01
sS'group_name'
p12462
Nsa(dp12463
S'description'
p12464
g3
sS'cpp_type'
p12465
S'std::string'
p12466
sS'default'
p12467
S'MaxIncrement'
p12468
sS'name'
p12469
S'type'
p12470
sS'required'
p12471
I00
sS'group_name'
p12472
Nsa(dp12473
S'description'
p12474
S'The name of the variable that this damper operates on\n'
p12475
sS'cpp_type'
p12476
S'NonlinearVariableName'
p12477
sS'default'
p12478
g3
sS'name'
p12479
S'variable'
p12480
sS'required'
p12481
I01
sS'group_name'
p12482
NsasS'name'
p12483
S'/Dampers/MaxIncrement'
p12484
sasS'parameters'
p12485
NsS'name'
p12486
S'/Dampers'
p12487
sa(dp12488
S'description'
p12489
g3
sS'type'
p12490
NsS'subblocks'
p12491
NsS'parameters'
p12492
(lp12493
(dp12494
S'description'
p12495
S'Print out the actions being executed\n'
p12496
sS'cpp_type'
p12497
S'bool'
p12498
sS'default'
p12499
S'0'
p12500
sS'name'
p12501
S'show_actions'
p12502
sS'required'
p12503
I00
sS'group_name'
p12504
Nsa(dp12505
S'description'
p12506
S'Print out the material properties supplied for each block, face, neighbor, and/or sideset\n'
p12507
sS'cpp_type'
p12508
S'bool'
p12509
sS'default'
p12510
S'0'
p12511
sS'name'
p12512
S'show_material_props'
p12513
sS'required'
p12514
I00
sS'group_name'
p12515
Nsa(dp12516
S'description'
p12517
S'Shows parser block extraction and debugging information\n'
p12518
sS'cpp_type'
p12519
S'bool'
p12520
sS'default'
p12521
S'0'
p12522
sS'name'
p12523
S'show_parser'
p12524
sS'required'
p12525
I00
sS'group_name'
p12526
Nsa(dp12527
S'description'
p12528
S'The number of top residuals to print out (0 = no output)\n'
p12529
sS'cpp_type'
p12530
S'unsigned int'
p12531
sS'default'
p12532
S'0'
p12533
sS'name'
p12534
S'show_top_residuals'
p12535
sS'required'
p12536
I00
sS'group_name'
p12537
Nsa(dp12538
S'description'
p12539
S'Print the residual norms of the individual solution variables at each nonlinear iteration\n'
p12540
sS'cpp_type'
p12541
S'bool'
p12542
sS'default'
p12543
S'0'
p12544
sS'name'
p12545
S'show_var_residual_norms'
p12546
sS'required'
p12547
I00
sS'group_name'
p12548
Nsa(dp12549
S'description'
p12550
S'Variables for which residuals will be sent to the output file\n'
p12551
sS'cpp_type'
p12552
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p12553
sS'default'
p12554
g3
sS'name'
p12555
S'show_var_residual'
p12556
sS'required'
p12557
I00
sS'group_name'
p12558
NsasS'name'
p12559
S'/Debug'
p12560
sa(dp12561
S'description'
p12562
g3
sS'type'
p12563
NsS'subblocks'
p12564
NsS'parameters'
p12565
(lp12566
(dp12567
S'description'
p12568
S'*** WARNING: This block is deprecated - DO NOT USE ***\n'
p12569
sS'cpp_type'
p12570
S'bool'
p12571
sS'default'
p12572
g3
sS'name'
p12573
S'DEPRECATED'
p12574
sS'required'
p12575
I00
sS'group_name'
p12576
NsasS'name'
p12577
S'/DeprecatedBlock'
p12578
sa(dp12579
S'description'
p12580
g3
sS'type'
p12581
NsS'subblocks'
p12582
(lp12583
(dp12584
S'description'
p12585
g3
sS'type'
p12586
NsS'subblocks'
p12587
NsS'parameters'
p12588
(lp12589
(dp12590
S'description'
p12591
S'A string representing the Moose Object that will be built by this Action\n'
p12592
sS'cpp_type'
p12593
S'std::string'
p12594
sS'default'
p12595
g3
sS'name'
p12596
S'type'
p12597
sS'required'
p12598
I01
sS'group_name'
p12599
NsasS'name'
p12600
S'/DiracKernels/*'
p12601
sa(dp12602
S'description'
p12603
g3
sS'type'
p12604
NsS'subblocks'
p12605
NsS'parameters'
p12606
(lp12607
(dp12608
S'description'
p12609
S'The x,y,z coordinates of the point\n'
p12610
sS'cpp_type'
p12611
S'std::vector<double, std::allocator<double> >'
p12612
sS'default'
p12613
g3
sS'name'
p12614
S'point'
p12615
sS'required'
p12616
I01
sS'group_name'
p12617
Nsa(dp12618
S'description'
p12619
g3
sS'cpp_type'
p12620
S'std::string'
p12621
sS'default'
p12622
S'ConstantPointSource'
p12623
sS'name'
p12624
S'type'
p12625
sS'required'
p12626
I00
sS'group_name'
p12627
Nsa(dp12628
S'description'
p12629
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12630
sS'cpp_type'
p12631
S'bool'
p12632
sS'default'
p12633
S'0'
p12634
sS'name'
p12635
S'use_displaced_mesh'
p12636
sS'required'
p12637
I00
sS'group_name'
p12638
S'Advanced'
p12639
sa(dp12640
S'description'
p12641
S'The value of the point source\n'
p12642
sS'cpp_type'
p12643
S'double'
p12644
sS'default'
p12645
g3
sS'name'
p12646
S'value'
p12647
sS'required'
p12648
I01
sS'group_name'
p12649
Nsa(dp12650
S'description'
p12651
S'The name of the variable that this kernel operates on\n'
p12652
sS'cpp_type'
p12653
S'NonlinearVariableName'
p12654
sS'default'
p12655
g3
sS'name'
p12656
S'variable'
p12657
sS'required'
p12658
I01
sS'group_name'
p12659
NsasS'name'
p12660
S'/DiracKernels/ConstantPointSource'
p12661
sasS'parameters'
p12662
NsS'name'
p12663
S'/DiracKernels'
p12664
sa(dp12665
S'description'
p12666
g3
sS'type'
p12667
NsS'subblocks'
p12668
(lp12669
(dp12670
S'description'
p12671
g3
sS'type'
p12672
NsS'subblocks'
p12673
(lp12674
(dp12675
S'description'
p12676
g3
sS'type'
p12677
NsS'subblocks'
p12678
NsS'parameters'
p12679
(lp12680
(dp12681
S'description'
p12682
S'The number of timesteps in a transient run\n'
p12683
sS'cpp_type'
p12684
S'unsigned int'
p12685
sS'default'
p12686
S'4294967295'
p12687
sS'name'
p12688
S'num_steps'
p12689
sS'required'
p12690
I00
sS'group_name'
p12691
Nsa(dp12692
S'description'
p12693
S'File base name used for restart\n'
p12694
sS'cpp_type'
p12695
S'FileNameNoExtension'
p12696
sS'default'
p12697
g3
sS'name'
p12698
S'restart_file_base'
p12699
sS'required'
p12700
I00
sS'group_name'
p12701
S'Restart'
p12702
sa(dp12703
S'description'
p12704
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p12705
sS'cpp_type'
p12706
S'std::vector<std::string, std::allocator<std::string> >'
p12707
sS'default'
p12708
g3
sS'name'
p12709
S'splitting'
p12710
sS'required'
p12711
I00
sS'group_name'
p12712
Nsa(dp12713
S'description'
p12714
g3
sS'cpp_type'
p12715
S'std::string'
p12716
sS'default'
p12717
S'CoupledTransientExecutioner'
p12718
sS'name'
p12719
S'type'
p12720
sS'required'
p12721
I00
sS'group_name'
p12722
NsasS'name'
p12723
S'/Executioner/<type>/CoupledTransientExecutioner'
p12724
sa(dp12725
S'description'
p12726
g3
sS'type'
p12727
NsS'subblocks'
p12728
NsS'parameters'
p12729
(lp12730
(dp12731
S'description'
p12732
S'If Chebyshev acceleration is turned on\n'
p12733
sS'cpp_type'
p12734
S'bool'
p12735
sS'default'
p12736
S'1'
p12737
sS'name'
p12738
S'Chebyshev_acceleration_on'
p12739
sS'required'
p12740
I00
sS'group_name'
p12741
Nsa(dp12742
S'description'
p12743
S'True to ask the solver to set initial\n'
p12744
sS'cpp_type'
p12745
S'bool'
p12746
sS'default'
p12747
S'1'
p12748
sS'name'
p12749
S'auto_initialization'
p12750
sS'required'
p12751
I00
sS'group_name'
p12752
Nsa(dp12753
S'description'
p12754
S'To evaluate |Bx| for the eigenvalue\n'
p12755
sS'cpp_type'
p12756
S'PostprocessorName'
p12757
sS'default'
p12758
g3
sS'name'
p12759
S'bx_norm'
p12760
sS'required'
p12761
I01
sS'group_name'
p12762
Nsa(dp12763
S'description'
p12764
S'Eigenvalue convergence tolerance\n'
p12765
sS'cpp_type'
p12766
S'double'
p12767
sS'default'
p12768
S'1e-06'
p12769
sS'name'
p12770
S'eig_check_tol'
p12771
sS'required'
p12772
I00
sS'group_name'
p12773
Nsa(dp12774
S'description'
p12775
S'Initial guess of the eigenvalue\n'
p12776
sS'cpp_type'
p12777
S'double'
p12778
sS'default'
p12779
S'1'
p12780
sS'name'
p12781
S'k0'
p12782
sS'required'
p12783
I00
sS'group_name'
p12784
Nsa(dp12785
S'description'
p12786
S'The maximum number of power iterations\n'
p12787
sS'cpp_type'
p12788
S'unsigned int'
p12789
sS'default'
p12790
S'300'
p12791
sS'name'
p12792
S'max_power_iterations'
p12793
sS'required'
p12794
I00
sS'group_name'
p12795
Nsa(dp12796
S'description'
p12797
S'Minimum number of power iterations\n'
p12798
sS'cpp_type'
p12799
S'unsigned int'
p12800
sS'default'
p12801
S'1'
p12802
sS'name'
p12803
S'min_power_iterations'
p12804
sS'required'
p12805
I00
sS'group_name'
p12806
Nsa(dp12807
S'description'
p12808
S'Normalize x to make |x| equal to this factor\n'
p12809
sS'cpp_type'
p12810
S'double'
p12811
sS'default'
p12812
g3
sS'name'
p12813
S'normal_factor'
p12814
sS'required'
p12815
I00
sS'group_name'
p12816
Nsa(dp12817
S'description'
p12818
S'To evaluate |x| for normalization\n'
p12819
sS'cpp_type'
p12820
S'PostprocessorName'
p12821
sS'default'
p12822
g3
sS'name'
p12823
S'normalization'
p12824
sS'required'
p12825
I00
sS'group_name'
p12826
Nsa(dp12827
S'description'
p12828
S'True to disable all the intemediate exodus outputs\n'
p12829
sS'cpp_type'
p12830
S'bool'
p12831
sS'default'
p12832
S'0'
p12833
sS'name'
p12834
S'output_on_final'
p12835
sS'required'
p12836
I00
sS'group_name'
p12837
Nsa(dp12838
S'description'
p12839
S'True to output solutions durint PI\n'
p12840
sS'cpp_type'
p12841
S'bool'
p12842
sS'default'
p12843
S'0'
p12844
sS'name'
p12845
S'output_pi_history'
p12846
sS'required'
p12847
I00
sS'group_name'
p12848
Nsa(dp12849
S'description'
p12850
S'Reduce residual norm per power iteration by this factor\n'
p12851
sS'cpp_type'
p12852
S'double'
p12853
sS'default'
p12854
S'0.01'
p12855
sS'name'
p12856
S'pfactor'
p12857
sS'required'
p12858
I00
sS'group_name'
p12859
Nsa(dp12860
S'description'
p12861
S'File base name used for restart\n'
p12862
sS'cpp_type'
p12863
S'FileNameNoExtension'
p12864
sS'default'
p12865
g3
sS'name'
p12866
S'restart_file_base'
p12867
sS'required'
p12868
I00
sS'group_name'
p12869
S'Restart'
p12870
sa(dp12871
S'description'
p12872
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p12873
sS'cpp_type'
p12874
S'std::vector<std::string, std::allocator<std::string> >'
p12875
sS'default'
p12876
g3
sS'name'
p12877
S'splitting'
p12878
sS'required'
p12879
I00
sS'group_name'
p12880
Nsa(dp12881
S'description'
p12882
S'System time\n'
p12883
sS'cpp_type'
p12884
S'double'
p12885
sS'default'
p12886
S'0'
p12887
sS'name'
p12888
S'time'
p12889
sS'required'
p12890
I00
sS'group_name'
p12891
Nsa(dp12892
S'description'
p12893
g3
sS'cpp_type'
p12894
S'std::string'
p12895
sS'default'
p12896
S'InversePowerMethod'
p12897
sS'name'
p12898
S'type'
p12899
sS'required'
p12900
I00
sS'group_name'
p12901
Nsa(dp12902
S'description'
p12903
S'To evaluate |x-x_previous| for power iterations\n'
p12904
sS'cpp_type'
p12905
S'PostprocessorName'
p12906
sS'default'
p12907
g3
sS'name'
p12908
S'xdiff'
p12909
sS'required'
p12910
I00
sS'group_name'
p12911
NsasS'name'
p12912
S'/Executioner/<type>/InversePowerMethod'
p12913
sa(dp12914
S'description'
p12915
g3
sS'type'
p12916
NsS'subblocks'
p12917
NsS'parameters'
p12918
(lp12919
(dp12920
S'description'
p12921
S'True to ask the solver to set initial\n'
p12922
sS'cpp_type'
p12923
S'bool'
p12924
sS'default'
p12925
S'1'
p12926
sS'name'
p12927
S'auto_initialization'
p12928
sS'required'
p12929
I00
sS'group_name'
p12930
Nsa(dp12931
S'description'
p12932
S'To evaluate |Bx| for the eigenvalue\n'
p12933
sS'cpp_type'
p12934
S'PostprocessorName'
p12935
sS'default'
p12936
g3
sS'name'
p12937
S'bx_norm'
p12938
sS'required'
p12939
I01
sS'group_name'
p12940
Nsa(dp12941
S'description'
p12942
S'The number of free power iterations\n'
p12943
sS'cpp_type'
p12944
S'unsigned int'
p12945
sS'default'
p12946
S'4'
p12947
sS'name'
p12948
S'free_power_iterations'
p12949
sS'required'
p12950
I00
sS'group_name'
p12951
Nsa(dp12952
S'description'
p12953
S'Initial guess of the eigenvalue\n'
p12954
sS'cpp_type'
p12955
S'double'
p12956
sS'default'
p12957
S'1'
p12958
sS'name'
p12959
S'k0'
p12960
sS'required'
p12961
I00
sS'group_name'
p12962
Nsa(dp12963
S'description'
p12964
S'Normalize x to make |x| equal to this factor\n'
p12965
sS'cpp_type'
p12966
S'double'
p12967
sS'default'
p12968
g3
sS'name'
p12969
S'normal_factor'
p12970
sS'required'
p12971
I00
sS'group_name'
p12972
Nsa(dp12973
S'description'
p12974
S'To evaluate |x| for normalization\n'
p12975
sS'cpp_type'
p12976
S'PostprocessorName'
p12977
sS'default'
p12978
g3
sS'name'
p12979
S'normalization'
p12980
sS'required'
p12981
I00
sS'group_name'
p12982
Nsa(dp12983
S'description'
p12984
S'True to disable all the intemediate exodus outputs\n'
p12985
sS'cpp_type'
p12986
S'bool'
p12987
sS'default'
p12988
S'0'
p12989
sS'name'
p12990
S'output_on_final'
p12991
sS'required'
p12992
I00
sS'group_name'
p12993
Nsa(dp12994
S'description'
p12995
S'True to output solutions durint PI\n'
p12996
sS'cpp_type'
p12997
S'bool'
p12998
sS'default'
p12999
S'0'
p13000
sS'name'
p13001
S'output_pi_history'
p13002
sS'required'
p13003
I00
sS'group_name'
p13004
Nsa(dp13005
S'description'
p13006
S'The factor of residual to be reduced per power iteration\n'
p13007
sS'cpp_type'
p13008
S'double'
p13009
sS'default'
p13010
S'0.01'
p13011
sS'name'
p13012
S'pfactor'
p13013
sS'required'
p13014
I00
sS'group_name'
p13015
Nsa(dp13016
S'description'
p13017
S'File base name used for restart\n'
p13018
sS'cpp_type'
p13019
S'FileNameNoExtension'
p13020
sS'default'
p13021
g3
sS'name'
p13022
S'restart_file_base'
p13023
sS'required'
p13024
I00
sS'group_name'
p13025
S'Restart'
p13026
sa(dp13027
S'description'
p13028
S'Absolute tolernance on residual norm\n'
p13029
sS'cpp_type'
p13030
S'double'
p13031
sS'default'
p13032
S'1e-06'
p13033
sS'name'
p13034
S'source_abs_tol'
p13035
sS'required'
p13036
I00
sS'group_name'
p13037
Nsa(dp13038
S'description'
p13039
S'Relative tolernance on residual norm after free power iterations\n'
p13040
sS'cpp_type'
p13041
S'double'
p13042
sS'default'
p13043
S'1e-50'
p13044
sS'name'
p13045
S'source_rel_tol'
p13046
sS'required'
p13047
I00
sS'group_name'
p13048
Nsa(dp13049
S'description'
p13050
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p13051
sS'cpp_type'
p13052
S'std::vector<std::string, std::allocator<std::string> >'
p13053
sS'default'
p13054
g3
sS'name'
p13055
S'splitting'
p13056
sS'required'
p13057
I00
sS'group_name'
p13058
Nsa(dp13059
S'description'
p13060
S'System time\n'
p13061
sS'cpp_type'
p13062
S'double'
p13063
sS'default'
p13064
S'0'
p13065
sS'name'
p13066
S'time'
p13067
sS'required'
p13068
I00
sS'group_name'
p13069
Nsa(dp13070
S'description'
p13071
g3
sS'cpp_type'
p13072
S'std::string'
p13073
sS'default'
p13074
S'NonlinearEigen'
p13075
sS'name'
p13076
S'type'
p13077
sS'required'
p13078
I00
sS'group_name'
p13079
Nsa(dp13080
S'description'
p13081
S'To evaluate |x-x_previous| for power iterations\n'
p13082
sS'cpp_type'
p13083
S'PostprocessorName'
p13084
sS'default'
p13085
g3
sS'name'
p13086
S'xdiff'
p13087
sS'required'
p13088
I00
sS'group_name'
p13089
NsasS'name'
p13090
S'/Executioner/<type>/NonlinearEigen'
p13091
sa(dp13092
S'description'
p13093
g3
sS'type'
p13094
NsS'subblocks'
p13095
NsS'parameters'
p13096
(lp13097
(dp13098
S'description'
p13099
S'File base name used for restart\n'
p13100
sS'cpp_type'
p13101
S'FileNameNoExtension'
p13102
sS'default'
p13103
g3
sS'name'
p13104
S'restart_file_base'
p13105
sS'required'
p13106
I00
sS'group_name'
p13107
S'Restart'
p13108
sa(dp13109
S'description'
p13110
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p13111
sS'cpp_type'
p13112
S'std::vector<std::string, std::allocator<std::string> >'
p13113
sS'default'
p13114
g3
sS'name'
p13115
S'splitting'
p13116
sS'required'
p13117
I00
sS'group_name'
p13118
Nsa(dp13119
S'description'
p13120
g3
sS'cpp_type'
p13121
S'std::string'
p13122
sS'default'
p13123
S'Steady'
p13124
sS'name'
p13125
S'type'
p13126
sS'required'
p13127
I00
sS'group_name'
p13128
NsasS'name'
p13129
S'/Executioner/<type>/Steady'
p13130
sa(dp13131
S'description'
p13132
g3
sS'type'
p13133
NsS'subblocks'
p13134
NsS'parameters'
p13135
(lp13136
(dp13137
S'description'
p13138
S'abort if solve not converged rather than cut timestep\n'
p13139
sS'cpp_type'
p13140
S'bool'
p13141
sS'default'
p13142
S'0'
p13143
sS'name'
p13144
S'abort_on_solve_fail'
p13145
sS'required'
p13146
I00
sS'group_name'
p13147
S'Advanced'
p13148
sa(dp13149
S'description'
p13150
S'The timestep size between solves\n'
p13151
sS'cpp_type'
p13152
S'double'
p13153
sS'default'
p13154
S'1'
p13155
sS'name'
p13156
S'dt'
p13157
sS'required'
p13158
I00
sS'group_name'
p13159
Nsa(dp13160
S'description'
p13161
S'The maximum timestep size in an adaptive run\n'
p13162
sS'cpp_type'
p13163
S'double'
p13164
sS'default'
p13165
S'1e+30'
p13166
sS'name'
p13167
S'dtmax'
p13168
sS'required'
p13169
I00
sS'group_name'
p13170
S'Advanced'
p13171
sa(dp13172
S'description'
p13173
S'The minimum timestep size in an adaptive run\n'
p13174
sS'cpp_type'
p13175
S'double'
p13176
sS'default'
p13177
S'2e-14'
p13178
sS'name'
p13179
S'dtmin'
p13180
sS'required'
p13181
I00
sS'group_name'
p13182
S'Advanced'
p13183
sa(dp13184
S'description'
p13185
S'The end time of the simulation\n'
p13186
sS'cpp_type'
p13187
S'double'
p13188
sS'default'
p13189
S'1e+30'
p13190
sS'name'
p13191
S'end_time'
p13192
sS'required'
p13193
I00
sS'group_name'
p13194
Nsa(dp13195
S'description'
p13196
S'The number of timesteps during startup\n'
p13197
sS'cpp_type'
p13198
S'int'
p13199
sS'default'
p13200
S'0'
p13201
sS'name'
p13202
S'n_startup_steps'
p13203
sS'required'
p13204
I00
sS'group_name'
p13205
S'Advanced'
p13206
sa(dp13207
S'description'
p13208
S'The number of timesteps in a transient run\n'
p13209
sS'cpp_type'
p13210
S'unsigned int'
p13211
sS'default'
p13212
S'4294967295'
p13213
sS'name'
p13214
S'num_steps'
p13215
sS'required'
p13216
I00
sS'group_name'
p13217
Nsa(dp13218
S'description'
p13219
S"The absolute nonlinear residual to shoot for during Picard iterations.  This check is performed based on the Master app's nonlinear residual.\n"
p13220
sS'cpp_type'
p13221
S'double'
p13222
sS'default'
p13223
S'1e-50'
p13224
sS'name'
p13225
S'picard_abs_tol'
p13226
sS'required'
p13227
I00
sS'group_name'
p13228
S'Picard'
p13229
sa(dp13230
S'description'
p13231
S'Number of times each timestep will be solved.  Mainly used when wanting to do Picard iterations with MultiApps that are set to execute_on timestep or timestep_begin\n'
p13232
sS'cpp_type'
p13233
S'unsigned int'
p13234
sS'default'
p13235
S'1'
p13236
sS'name'
p13237
S'picard_max_its'
p13238
sS'required'
p13239
I00
sS'group_name'
p13240
S'Picard'
p13241
sa(dp13242
S'description'
p13243
S"The relative nonlinear residual drop to shoot for during Picard iterations.  This check is performed based on the Master app's nonlinear residual.\n"
p13244
sS'cpp_type'
p13245
S'double'
p13246
sS'default'
p13247
S'1e-08'
p13248
sS'name'
p13249
S'picard_rel_tol'
p13250
sS'required'
p13251
I00
sS'group_name'
p13252
S'Picard'
p13253
sa(dp13254
S'description'
p13255
S'The scale factor for the predictor (can range from 0 to 1)\n'
p13256
sS'cpp_type'
p13257
S'double'
p13258
sS'default'
p13259
g3
sS'name'
p13260
S'predictor_scale'
p13261
sS'required'
p13262
I00
sS'group_name'
p13263
S'Advanced'
p13264
sa(dp13265
S'description'
p13266
S'Use when restarting a calculation to force a change in dt.\n'
p13267
sS'cpp_type'
p13268
S'bool'
p13269
sS'default'
p13270
S'0'
p13271
sS'name'
p13272
S'reset_dt'
p13273
sS'required'
p13274
I00
sS'group_name'
p13275
Nsa(dp13276
S'description'
p13277
S'File base name used for restart\n'
p13278
sS'cpp_type'
p13279
S'FileNameNoExtension'
p13280
sS'default'
p13281
g3
sS'name'
p13282
S'restart_file_base'
p13283
sS'required'
p13284
I00
sS'group_name'
p13285
S'Restart'
p13286
sa(dp13287
S'name'
p13288
S'scheme'
p13289
sS'cpp_type'
p13290
S'MooseEnum'
p13291
sS'default'
p13292
S'implicit-euler'
p13293
sS'description'
p13294
S'Time integration scheme used.\n'
p13295
sS'required'
p13296
I00
sS'options'
p13297
S'implicit-euler explicit-euler crank-nicolson bdf2 rk-2'
p13298
sS'group_name'
p13299
Nsa(dp13300
S'description'
p13301
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p13302
sS'cpp_type'
p13303
S'std::vector<std::string, std::allocator<std::string> >'
p13304
sS'default'
p13305
g3
sS'name'
p13306
S'splitting'
p13307
sS'required'
p13308
I00
sS'group_name'
p13309
Nsa(dp13310
S'description'
p13311
S'Whenever the relative residual changes by less than this the solution will be considered to be at steady state.\n'
p13312
sS'cpp_type'
p13313
S'double'
p13314
sS'default'
p13315
S'1e-08'
p13316
sS'name'
p13317
S'ss_check_tol'
p13318
sS'required'
p13319
I00
sS'group_name'
p13320
S'Advanced'
p13321
sa(dp13322
S'description'
p13323
S'Minimum number of timesteps to take before checking for steady state conditions.\n'
p13324
sS'cpp_type'
p13325
S'double'
p13326
sS'default'
p13327
S'0'
p13328
sS'name'
p13329
S'ss_tmin'
p13330
sS'required'
p13331
I00
sS'group_name'
p13332
S'Advanced'
p13333
sa(dp13334
S'description'
p13335
S'The start time of the simulation\n'
p13336
sS'cpp_type'
p13337
S'double'
p13338
sS'default'
p13339
S'0'
p13340
sS'name'
p13341
S'start_time'
p13342
sS'required'
p13343
I00
sS'group_name'
p13344
S'Advanced'
p13345
sa(dp13346
S'description'
p13347
S'A list of times that will be solved for provided they are within the simulation time\n'
p13348
sS'cpp_type'
p13349
S'std::vector<double, std::allocator<double> >'
p13350
sS'default'
p13351
S'-1.79769e+308'
p13352
sS'name'
p13353
S'sync_times'
p13354
sS'required'
p13355
I00
sS'group_name'
p13356
S'Advanced'
p13357
sa(dp13358
S'description'
p13359
S'The end times of time periods\n'
p13360
sS'cpp_type'
p13361
S'std::vector<double, std::allocator<double> >'
p13362
sS'default'
p13363
g3
sS'name'
p13364
S'time_period_ends'
p13365
sS'required'
p13366
I00
sS'group_name'
p13367
S'Time Periods'
p13368
sa(dp13369
S'description'
p13370
S'The start times of time periods\n'
p13371
sS'cpp_type'
p13372
S'std::vector<double, std::allocator<double> >'
p13373
sS'default'
p13374
g3
sS'name'
p13375
S'time_period_starts'
p13376
sS'required'
p13377
I00
sS'group_name'
p13378
S'Time Periods'
p13379
sa(dp13380
S'description'
p13381
S'The names of periods\n'
p13382
sS'cpp_type'
p13383
S'std::vector<std::string, std::allocator<std::string> >'
p13384
sS'default'
p13385
g3
sS'name'
p13386
S'time_periods'
p13387
sS'required'
p13388
I00
sS'group_name'
p13389
S'Time Periods'
p13390
sa(dp13391
S'description'
p13392
S'the tolerance setting for final timestep size and sync times\n'
p13393
sS'cpp_type'
p13394
S'double'
p13395
sS'default'
p13396
S'2e-14'
p13397
sS'name'
p13398
S'timestep_tolerance'
p13399
sS'required'
p13400
I00
sS'group_name'
p13401
S'Advanced'
p13402
sa(dp13403
S'description'
p13404
S'Whether or not to check for steady state conditions\n'
p13405
sS'cpp_type'
p13406
S'bool'
p13407
sS'default'
p13408
S'0'
p13409
sS'name'
p13410
S'trans_ss_check'
p13411
sS'required'
p13412
I00
sS'group_name'
p13413
S'Advanced'
p13414
sa(dp13415
S'description'
p13416
g3
sS'cpp_type'
p13417
S'std::string'
p13418
sS'default'
p13419
S'Transient'
p13420
sS'name'
p13421
S'type'
p13422
sS'required'
p13423
I00
sS'group_name'
p13424
Nsa(dp13425
S'description'
p13426
S'If true then the dt for the simulation will be chosen by the MultiApps.  If false (the default) then the minimum over the master dt and the MultiApps is used\n'
p13427
sS'cpp_type'
p13428
S'bool'
p13429
sS'default'
p13430
S'0'
p13431
sS'name'
p13432
S'use_multiapp_dt'
p13433
sS'required'
p13434
I00
sS'group_name'
p13435
S'Advanced'
p13436
sa(dp13437
S'description'
p13438
S'Print detailed diagnostics on timestep calculation\n'
p13439
sS'cpp_type'
p13440
S'bool'
p13441
sS'default'
p13442
S'0'
p13443
sS'name'
p13444
S'verbose'
p13445
sS'required'
p13446
I00
sS'group_name'
p13447
NsasS'name'
p13448
S'/Executioner/<type>/Transient'
p13449
sasS'parameters'
p13450
NsS'name'
p13451
S'/Executioner/<type>'
p13452
sa(dp13453
S'description'
p13454
g3
sS'type'
p13455
NsS'subblocks'
p13456
NsS'parameters'
p13457
(lp13458
(dp13459
S'description'
p13460
S'The fraction of elements or error to coarsen. Should be between 0 and 1.\n'
p13461
sS'cpp_type'
p13462
S'double'
p13463
sS'default'
p13464
S'0'
p13465
sS'name'
p13466
S'coarsen_fraction'
p13467
sS'required'
p13468
I00
sS'group_name'
p13469
Nsa(dp13470
S'description'
p13471
S'The number of adaptivity cycles per step\n'
p13472
sS'cpp_type'
p13473
S'unsigned int'
p13474
sS'default'
p13475
S'1'
p13476
sS'name'
p13477
S'cycles_per_step'
p13478
sS'required'
p13479
I00
sS'group_name'
p13480
Nsa(dp13481
S'name'
p13482
S'error_estimator'
p13483
sS'cpp_type'
p13484
S'MooseEnum'
p13485
sS'default'
p13486
S'KellyErrorEstimator'
p13487
sS'description'
p13488
S'The class name of the error estimator you want to use.\n'
p13489
sS'required'
p13490
I00
sS'options'
p13491
S'KellyErrorEstimator LaplacianErrorEstimator PatchRecoveryErrorEstimator'
p13492
sS'group_name'
p13493
Nsa(dp13494
S'description'
p13495
S'The number of adaptivity steps to perform using the initial conditions\n'
p13496
sS'cpp_type'
p13497
S'unsigned int'
p13498
sS'default'
p13499
S'0'
p13500
sS'name'
p13501
S'initial_adaptivity'
p13502
sS'required'
p13503
I00
sS'group_name'
p13504
Nsa(dp13505
S'description'
p13506
S'Maximum number of times a single element can be refined. If 0 then infinite.\n'
p13507
sS'cpp_type'
p13508
S'unsigned int'
p13509
sS'default'
p13510
S'0'
p13511
sS'name'
p13512
S'max_h_level'
p13513
sS'required'
p13514
I00
sS'group_name'
p13515
Nsa(dp13516
S'description'
p13517
S'Determines whether information about the mesh is printed when adaptivity occurs\n'
p13518
sS'cpp_type'
p13519
S'bool'
p13520
sS'default'
p13521
S'0'
p13522
sS'name'
p13523
S'print_changed_info'
p13524
sS'required'
p13525
I00
sS'group_name'
p13526
Nsa(dp13527
S'description'
p13528
S'The fraction of elements or error to refine. Should be between 0 and 1.\n'
p13529
sS'cpp_type'
p13530
S'double'
p13531
sS'default'
p13532
S'0'
p13533
sS'name'
p13534
S'refine_fraction'
p13535
sS'required'
p13536
I00
sS'group_name'
p13537
Nsa(dp13538
S'description'
p13539
S'The time that adaptivity will be active after.\n'
p13540
sS'cpp_type'
p13541
S'double'
p13542
sS'default'
p13543
S'-1.79769e+308'
p13544
sS'name'
p13545
S'start_time'
p13546
sS'required'
p13547
I00
sS'group_name'
p13548
Nsa(dp13549
S'description'
p13550
S'The number of adaptivity steps to perform at any one time for steady state\n'
p13551
sS'cpp_type'
p13552
S'unsigned int'
p13553
sS'default'
p13554
S'0'
p13555
sS'name'
p13556
S'steps'
p13557
sS'required'
p13558
I00
sS'group_name'
p13559
Nsa(dp13560
S'description'
p13561
S'The time after which adaptivity will no longer be active.\n'
p13562
sS'cpp_type'
p13563
S'double'
p13564
sS'default'
p13565
S'1.79769e+308'
p13566
sS'name'
p13567
S'stop_time'
p13568
sS'required'
p13569
I00
sS'group_name'
p13570
Nsa(dp13571
S'description'
p13572
S'List of names of variables that will be associated with weight_values\n'
p13573
sS'cpp_type'
p13574
S'std::vector<std::string, std::allocator<std::string> >'
p13575
sS'default'
p13576
g3
sS'name'
p13577
S'weight_names'
p13578
sS'required'
p13579
I00
sS'group_name'
p13580
Nsa(dp13581
S'description'
p13582
S'List of values between 0 and 1 to weight the associated weight_names error by\n'
p13583
sS'cpp_type'
p13584
S'std::vector<double, std::allocator<double> >'
p13585
sS'default'
p13586
g3
sS'name'
p13587
S'weight_values'
p13588
sS'required'
p13589
I00
sS'group_name'
p13590
NsasS'name'
p13591
S'/Executioner/Adaptivity'
p13592
sa(dp13593
S'description'
p13594
g3
sS'type'
p13595
NsS'subblocks'
p13596
(lp13597
(dp13598
S'description'
p13599
g3
sS'type'
p13600
NsS'subblocks'
p13601
(lp13602
(dp13603
S'description'
p13604
g3
sS'type'
p13605
NsS'subblocks'
p13606
NsS'parameters'
p13607
(lp13608
(dp13609
S'description'
p13610
S'The maximum reachable order of the Adams-Bashforth Predictor\n'
p13611
sS'cpp_type'
p13612
S'int'
p13613
sS'default'
p13614
S'2'
p13615
sS'name'
p13616
S'order'
p13617
sS'required'
p13618
I00
sS'group_name'
p13619
Nsa(dp13620
S'description'
p13621
S'The scale factor for the predictor (can range from 0 to 1)\n'
p13622
sS'cpp_type'
p13623
S'double'
p13624
sS'default'
p13625
g3
sS'name'
p13626
S'scale'
p13627
sS'required'
p13628
I01
sS'group_name'
p13629
Nsa(dp13630
S'description'
p13631
g3
sS'cpp_type'
p13632
S'std::string'
p13633
sS'default'
p13634
S'AdamsPredictor'
p13635
sS'name'
p13636
S'type'
p13637
sS'required'
p13638
I00
sS'group_name'
p13639
NsasS'name'
p13640
S'/Executioner/Predictor/<type>/AdamsPredictor'
p13641
sa(dp13642
S'description'
p13643
g3
sS'type'
p13644
NsS'subblocks'
p13645
NsS'parameters'
p13646
(lp13647
(dp13648
S'description'
p13649
S'The scale factor for the predictor (can range from 0 to 1)\n'
p13650
sS'cpp_type'
p13651
S'double'
p13652
sS'default'
p13653
g3
sS'name'
p13654
S'scale'
p13655
sS'required'
p13656
I01
sS'group_name'
p13657
Nsa(dp13658
S'description'
p13659
g3
sS'cpp_type'
p13660
S'std::string'
p13661
sS'default'
p13662
S'SimplePredictor'
p13663
sS'name'
p13664
S'type'
p13665
sS'required'
p13666
I00
sS'group_name'
p13667
NsasS'name'
p13668
S'/Executioner/Predictor/<type>/SimplePredictor'
p13669
sasS'parameters'
p13670
NsS'name'
p13671
S'/Executioner/Predictor/<type>'
p13672
sasS'parameters'
p13673
(lp13674
(dp13675
S'description'
p13676
S'A string representing the Moose Object that will be built by this Action\n'
p13677
sS'cpp_type'
p13678
S'std::string'
p13679
sS'default'
p13680
g3
sS'name'
p13681
S'type'
p13682
sS'required'
p13683
I01
sS'group_name'
p13684
NsasS'name'
p13685
S'/Executioner/Predictor'
p13686
sa(dp13687
S'description'
p13688
g3
sS'type'
p13689
NsS'subblocks'
p13690
NsS'parameters'
p13691
(lp13692
(dp13693
S'name'
p13694
S'order'
p13695
sS'cpp_type'
p13696
S'MooseEnum'
p13697
sS'default'
p13698
S'AUTO'
p13699
sS'description'
p13700
S'Order of the quadrature\n'
p13701
sS'required'
p13702
I00
sS'options'
p13703
S'AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH'
p13704
sS'group_name'
p13705
Nsa(dp13706
S'name'
p13707
S'type'
p13708
sS'cpp_type'
p13709
S'MooseEnum'
p13710
sS'default'
p13711
S'GAUSS'
p13712
sS'description'
p13713
S'Type of the quadrature rule\n'
p13714
sS'required'
p13715
I00
sS'options'
p13716
S'CLOUGH CONICAL GAUSS GRID MONOMIAL SIMPSON TRAP'
p13717
sS'group_name'
p13718
NsasS'name'
p13719
S'/Executioner/Quadrature'
p13720
sa(dp13721
S'description'
p13722
g3
sS'type'
p13723
NsS'subblocks'
p13724
(lp13725
(dp13726
S'description'
p13727
g3
sS'type'
p13728
NsS'subblocks'
p13729
NsS'parameters'
p13730
(lp13731
(dp13732
S'description'
p13733
S'The list of active boundary conditions during this time period (must not be used with "inactive_bcs")\n'
p13734
sS'cpp_type'
p13735
S'std::vector<std::string, std::allocator<std::string> >'
p13736
sS'default'
p13737
g3
sS'name'
p13738
S'active_bcs'
p13739
sS'required'
p13740
I00
sS'group_name'
p13741
Nsa(dp13742
S'description'
p13743
S'The list of active kernels during this time period (must not be used with "inactive_kernels")\n'
p13744
sS'cpp_type'
p13745
S'std::vector<std::string, std::allocator<std::string> >'
p13746
sS'default'
p13747
g3
sS'name'
p13748
S'active_kernels'
p13749
sS'required'
p13750
I00
sS'group_name'
p13751
Nsa(dp13752
S'description'
p13753
S'The list of inactive boundary conditions during this time period (must not be used with "active_bcs")\n'
p13754
sS'cpp_type'
p13755
S'std::vector<std::string, std::allocator<std::string> >'
p13756
sS'default'
p13757
g3
sS'name'
p13758
S'inactive_bcs'
p13759
sS'required'
p13760
I00
sS'group_name'
p13761
Nsa(dp13762
S'description'
p13763
S'The list of inactive kernels during this time period (must not be used with "active_kernels")\n'
p13764
sS'cpp_type'
p13765
S'std::vector<std::string, std::allocator<std::string> >'
p13766
sS'default'
p13767
g3
sS'name'
p13768
S'inactive_kernels'
p13769
sS'required'
p13770
I00
sS'group_name'
p13771
Nsa(dp13772
S'description'
p13773
S'The start time for this time period\n'
p13774
sS'cpp_type'
p13775
S'double'
p13776
sS'default'
p13777
S'0'
p13778
sS'name'
p13779
S'start'
p13780
sS'required'
p13781
I00
sS'group_name'
p13782
NsasS'name'
p13783
S'/Executioner/TimePeriods/*'
p13784
sasS'parameters'
p13785
NsS'name'
p13786
S'/Executioner/TimePeriods'
p13787
sa(dp13788
S'description'
p13789
g3
sS'type'
p13790
NsS'subblocks'
p13791
(lp13792
(dp13793
S'description'
p13794
g3
sS'type'
p13795
NsS'subblocks'
p13796
(lp13797
(dp13798
S'description'
p13799
g3
sS'type'
p13800
NsS'subblocks'
p13801
NsS'parameters'
p13802
(lp13803
(dp13804
S'description'
p13805
S'Initial time step size\n'
p13806
sS'cpp_type'
p13807
S'double'
p13808
sS'default'
p13809
g3
sS'name'
p13810
S'dt'
p13811
sS'required'
p13812
I01
sS'group_name'
p13813
Nsa(dp13814
S'description'
p13815
S'Maximum acceptable error.\n'
p13816
sS'cpp_type'
p13817
S'double'
p13818
sS'default'
p13819
g3
sS'name'
p13820
S'e_max'
p13821
sS'required'
p13822
I01
sS'group_name'
p13823
Nsa(dp13824
S'description'
p13825
S'Target error tolerance.\n'
p13826
sS'cpp_type'
p13827
S'double'
p13828
sS'default'
p13829
g3
sS'name'
p13830
S'e_tol'
p13831
sS'required'
p13832
I01
sS'group_name'
p13833
Nsa(dp13834
S'description'
p13835
S'Maximum ratio that the time step can increase.\n'
p13836
sS'cpp_type'
p13837
S'double'
p13838
sS'default'
p13839
S'1e+09'
p13840
sS'name'
p13841
S'max_increase'
p13842
sS'required'
p13843
I00
sS'group_name'
p13844
Nsa(dp13845
S'description'
p13846
S'Use when restarting a calculation to force a change in dt.\n'
p13847
sS'cpp_type'
p13848
S'bool'
p13849
sS'default'
p13850
S'0'
p13851
sS'name'
p13852
S'reset_dt'
p13853
sS'required'
p13854
I00
sS'group_name'
p13855
Nsa(dp13856
S'description'
p13857
S'scaling parameter for dt selection\n'
p13858
sS'cpp_type'
p13859
S'double'
p13860
sS'default'
p13861
S'0.8'
p13862
sS'name'
p13863
S'scaling_parameter'
p13864
sS'required'
p13865
I00
sS'group_name'
p13866
Nsa(dp13867
S'description'
p13868
S'when to start taking adaptive time steps\n'
p13869
sS'cpp_type'
p13870
S'int'
p13871
sS'default'
p13872
S'2'
p13873
sS'name'
p13874
S'start_adapting'
p13875
sS'required'
p13876
I00
sS'group_name'
p13877
Nsa(dp13878
S'description'
p13879
S'the number of time steps before recalculating dt\n'
p13880
sS'cpp_type'
p13881
S'int'
p13882
sS'default'
p13883
S'1'
p13884
sS'name'
p13885
S'steps_between_increase'
p13886
sS'required'
p13887
I00
sS'group_name'
p13888
Nsa(dp13889
S'description'
p13890
g3
sS'cpp_type'
p13891
S'std::string'
p13892
sS'default'
p13893
S'AB2PredictorCorrector'
p13894
sS'name'
p13895
S'type'
p13896
sS'required'
p13897
I00
sS'group_name'
p13898
NsasS'name'
p13899
S'/Executioner/TimeStepper/<type>/AB2PredictorCorrector'
p13900
sa(dp13901
S'description'
p13902
g3
sS'type'
p13903
NsS'subblocks'
p13904
NsS'parameters'
p13905
(lp13906
(dp13907
S'description'
p13908
S'Size of the time step\n'
p13909
sS'cpp_type'
p13910
S'double'
p13911
sS'default'
p13912
g3
sS'name'
p13913
S'dt'
p13914
sS'required'
p13915
I01
sS'group_name'
p13916
Nsa(dp13917
S'description'
p13918
S'Use when restarting a calculation to force a change in dt.\n'
p13919
sS'cpp_type'
p13920
S'bool'
p13921
sS'default'
p13922
S'0'
p13923
sS'name'
p13924
S'reset_dt'
p13925
sS'required'
p13926
I00
sS'group_name'
p13927
Nsa(dp13928
S'description'
p13929
g3
sS'cpp_type'
p13930
S'std::string'
p13931
sS'default'
p13932
S'ConstantDT'
p13933
sS'name'
p13934
S'type'
p13935
sS'required'
p13936
I00
sS'group_name'
p13937
NsasS'name'
p13938
S'/Executioner/TimeStepper/<type>/ConstantDT'
p13939
sa(dp13940
S'description'
p13941
g3
sS'type'
p13942
NsS'subblocks'
p13943
NsS'parameters'
p13944
(lp13945
(dp13946
S'description'
p13947
S'The initial time step size.\n'
p13948
sS'cpp_type'
p13949
S'double'
p13950
sS'default'
p13951
S'1'
p13952
sS'name'
p13953
S'dt'
p13954
sS'required'
p13955
I00
sS'group_name'
p13956
Nsa(dp13957
S'description'
p13958
S'Maximum acceptable error.\n'
p13959
sS'cpp_type'
p13960
S'double'
p13961
sS'default'
p13962
g3
sS'name'
p13963
S'e_max'
p13964
sS'required'
p13965
I01
sS'group_name'
p13966
Nsa(dp13967
S'description'
p13968
S'Target error tolerance.\n'
p13969
sS'cpp_type'
p13970
S'double'
p13971
sS'default'
p13972
g3
sS'name'
p13973
S'e_tol'
p13974
sS'required'
p13975
I01
sS'group_name'
p13976
Nsa(dp13977
S'description'
p13978
S'Maximum ratio that the time step can increase.\n'
p13979
sS'cpp_type'
p13980
S'double'
p13981
sS'default'
p13982
S'1e+09'
p13983
sS'name'
p13984
S'max_increase'
p13985
sS'required'
p13986
I00
sS'group_name'
p13987
Nsa(dp13988
S'description'
p13989
S'Use when restarting a calculation to force a change in dt.\n'
p13990
sS'cpp_type'
p13991
S'bool'
p13992
sS'default'
p13993
S'0'
p13994
sS'name'
p13995
S'reset_dt'
p13996
sS'required'
p13997
I00
sS'group_name'
p13998
Nsa(dp13999
S'description'
p14000
g3
sS'cpp_type'
p14001
S'std::string'
p14002
sS'default'
p14003
S'DT2'
p14004
sS'name'
p14005
S'type'
p14006
sS'required'
p14007
I00
sS'group_name'
p14008
NsasS'name'
p14009
S'/Executioner/TimeStepper/<type>/DT2'
p14010
sa(dp14011
S'description'
p14012
g3
sS'type'
p14013
NsS'subblocks'
p14014
NsS'parameters'
p14015
(lp14016
(dp14017
S'description'
p14018
S'Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.\n'
p14019
sS'cpp_type'
p14020
S'double'
p14021
sS'default'
p14022
S'2'
p14023
sS'name'
p14024
S'growth_factor'
p14025
sS'required'
p14026
I00
sS'group_name'
p14027
Nsa(dp14028
S'description'
p14029
S'The minimal dt to take.\n'
p14030
sS'cpp_type'
p14031
S'double'
p14032
sS'default'
p14033
S'0'
p14034
sS'name'
p14035
S'min_dt'
p14036
sS'required'
p14037
I00
sS'group_name'
p14038
Nsa(dp14039
S'description'
p14040
S'Use when restarting a calculation to force a change in dt.\n'
p14041
sS'cpp_type'
p14042
S'bool'
p14043
sS'default'
p14044
S'0'
p14045
sS'name'
p14046
S'reset_dt'
p14047
sS'required'
p14048
I00
sS'group_name'
p14049
Nsa(dp14050
S'description'
p14051
S'The values of dt\n'
p14052
sS'cpp_type'
p14053
S'std::vector<double, std::allocator<double> >'
p14054
sS'default'
p14055
g3
sS'name'
p14056
S'time_dt'
p14057
sS'required'
p14058
I00
sS'group_name'
p14059
Nsa(dp14060
S'description'
p14061
S'The values of t\n'
p14062
sS'cpp_type'
p14063
S'std::vector<double, std::allocator<double> >'
p14064
sS'default'
p14065
g3
sS'name'
p14066
S'time_t'
p14067
sS'required'
p14068
I00
sS'group_name'
p14069
Nsa(dp14070
S'description'
p14071
g3
sS'cpp_type'
p14072
S'std::string'
p14073
sS'default'
p14074
S'FunctionDT'
p14075
sS'name'
p14076
S'type'
p14077
sS'required'
p14078
I00
sS'group_name'
p14079
NsasS'name'
p14080
S'/Executioner/TimeStepper/<type>/FunctionDT'
p14081
sa(dp14082
S'description'
p14083
g3
sS'type'
p14084
NsS'subblocks'
p14085
NsS'parameters'
p14086
(lp14087
(dp14088
S'description'
p14089
S"Factor to apply to timestep if difficult convergence (if 'optimal_iterations' is specified) or if solution failed.\n"
p14090
sS'cpp_type'
p14091
S'double'
p14092
sS'default'
p14093
S'0.5'
p14094
sS'name'
p14095
S'cutback_factor'
p14096
sS'required'
p14097
I00
sS'group_name'
p14098
Nsa(dp14099
S'description'
p14100
S'The default timestep size between solves\n'
p14101
sS'cpp_type'
p14102
S'double'
p14103
sS'default'
p14104
g3
sS'name'
p14105
S'dt'
p14106
sS'required'
p14107
I01
sS'group_name'
p14108
Nsa(dp14109
S'description'
p14110
S'Forces the timestepper to take a step that is consistent with points defined in the function.\n'
p14111
sS'cpp_type'
p14112
S'bool'
p14113
sS'default'
p14114
S'0'
p14115
sS'name'
p14116
S'force_step_every_function_point'
p14117
sS'required'
p14118
I00
sS'group_name'
p14119
Nsa(dp14120
S'description'
p14121
S"Factor to apply to timestep if easy convergence (if 'optimal_iterations' is specified) or if recovering from failed solve\n"
p14122
sS'cpp_type'
p14123
S'double'
p14124
sS'default'
p14125
S'2'
p14126
sS'name'
p14127
S'growth_factor'
p14128
sS'required'
p14129
I00
sS'group_name'
p14130
Nsa(dp14131
S'description'
p14132
S'The size of the nonlinear iteration window for adaptive timestepping (default = 0.2*optimal_iterations)\n'
p14133
sS'cpp_type'
p14134
S'int'
p14135
sS'default'
p14136
g3
sS'name'
p14137
S'iteration_window'
p14138
sS'required'
p14139
I00
sS'group_name'
p14140
Nsa(dp14141
S'description'
p14142
S'The ratio of linear to nonlinear iterations to determine target linear iterations and window for adaptive timestepping (default = 25)\n'
p14143
sS'cpp_type'
p14144
S'unsigned int'
p14145
sS'default'
p14146
g3
sS'name'
p14147
S'linear_iteration_ratio'
p14148
sS'required'
p14149
I00
sS'group_name'
p14150
Nsa(dp14151
S'description'
p14152
S'The absolute value of the maximum change in timestep_limiting_function over a timestep\n'
p14153
sS'cpp_type'
p14154
S'double'
p14155
sS'default'
p14156
g3
sS'name'
p14157
S'max_function_change'
p14158
sS'required'
p14159
I00
sS'group_name'
p14160
Nsa(dp14161
S'description'
p14162
S'The target number of nonlinear iterations for adaptive timestepping\n'
p14163
sS'cpp_type'
p14164
S'int'
p14165
sS'default'
p14166
g3
sS'name'
p14167
S'optimal_iterations'
p14168
sS'required'
p14169
I00
sS'group_name'
p14170
Nsa(dp14171
S'description'
p14172
S'Use when restarting a calculation to force a change in dt.\n'
p14173
sS'cpp_type'
p14174
S'bool'
p14175
sS'default'
p14176
S'0'
p14177
sS'name'
p14178
S'reset_dt'
p14179
sS'required'
p14180
I00
sS'group_name'
p14181
Nsa(dp14182
S'description'
p14183
S'The values of dt\n'
p14184
sS'cpp_type'
p14185
S'std::vector<double, std::allocator<double> >'
p14186
sS'default'
p14187
g3
sS'name'
p14188
S'time_dt'
p14189
sS'required'
p14190
I00
sS'group_name'
p14191
Nsa(dp14192
S'description'
p14193
S'The values of t\n'
p14194
sS'cpp_type'
p14195
S'std::vector<double, std::allocator<double> >'
p14196
sS'default'
p14197
g3
sS'name'
p14198
S'time_t'
p14199
sS'required'
p14200
I00
sS'group_name'
p14201
Nsa(dp14202
S'description'
p14203
S'A function used to control the timestep by limiting the change in the function over a timestep\n'
p14204
sS'cpp_type'
p14205
S'FunctionName'
p14206
sS'default'
p14207
g3
sS'name'
p14208
S'timestep_limiting_function'
p14209
sS'required'
p14210
I00
sS'group_name'
p14211
Nsa(dp14212
S'description'
p14213
g3
sS'cpp_type'
p14214
S'std::string'
p14215
sS'default'
p14216
S'IterationAdaptiveDT'
p14217
sS'name'
p14218
S'type'
p14219
sS'required'
p14220
I00
sS'group_name'
p14221
NsasS'name'
p14222
S'/Executioner/TimeStepper/<type>/IterationAdaptiveDT'
p14223
sa(dp14224
S'description'
p14225
g3
sS'type'
p14226
NsS'subblocks'
p14227
NsS'parameters'
p14228
(lp14229
(dp14230
S'description'
p14231
S'Initial value of dt\n'
p14232
sS'cpp_type'
p14233
S'double'
p14234
sS'default'
p14235
g3
sS'name'
p14236
S'dt'
p14237
sS'required'
p14238
I00
sS'group_name'
p14239
Nsa(dp14240
S'description'
p14241
S'The name of the postprocessor that computes the dt\n'
p14242
sS'cpp_type'
p14243
S'PostprocessorName'
p14244
sS'default'
p14245
g3
sS'name'
p14246
S'postprocessor'
p14247
sS'required'
p14248
I01
sS'group_name'
p14249
Nsa(dp14250
S'description'
p14251
S'Use when restarting a calculation to force a change in dt.\n'
p14252
sS'cpp_type'
p14253
S'bool'
p14254
sS'default'
p14255
S'0'
p14256
sS'name'
p14257
S'reset_dt'
p14258
sS'required'
p14259
I00
sS'group_name'
p14260
Nsa(dp14261
S'description'
p14262
g3
sS'cpp_type'
p14263
S'std::string'
p14264
sS'default'
p14265
S'PostprocessorDT'
p14266
sS'name'
p14267
S'type'
p14268
sS'required'
p14269
I00
sS'group_name'
p14270
NsasS'name'
p14271
S'/Executioner/TimeStepper/<type>/PostprocessorDT'
p14272
sa(dp14273
S'description'
p14274
g3
sS'type'
p14275
NsS'subblocks'
p14276
NsS'parameters'
p14277
(lp14278
(dp14279
S'description'
p14280
S'Output adaptive time step log\n'
p14281
sS'cpp_type'
p14282
S'bool'
p14283
sS'default'
p14284
S'0'
p14285
sS'name'
p14286
S'adapt_log'
p14287
sS'required'
p14288
I00
sS'group_name'
p14289
Nsa(dp14290
S'description'
p14291
S'The timestep size between solves\n'
p14292
sS'cpp_type'
p14293
S'double'
p14294
sS'default'
p14295
g3
sS'name'
p14296
S'dt'
p14297
sS'required'
p14298
I01
sS'group_name'
p14299
Nsa(dp14300
S'description'
p14301
S'Direction for the first step.  1 for up... -1 for down. \n'
p14302
sS'cpp_type'
p14303
S'int'
p14304
sS'default'
p14305
S'1'
p14306
sS'name'
p14307
S'initial_direction'
p14308
sS'required'
p14309
I00
sS'group_name'
p14310
Nsa(dp14311
S'description'
p14312
S'Percentage to change the timestep by.  Should be between 0 and 1\n'
p14313
sS'cpp_type'
p14314
S'double'
p14315
sS'default'
p14316
S'0.1'
p14317
sS'name'
p14318
S'percent_change'
p14319
sS'required'
p14320
I00
sS'group_name'
p14321
Nsa(dp14322
S'description'
p14323
S'Use when restarting a calculation to force a change in dt.\n'
p14324
sS'cpp_type'
p14325
S'bool'
p14326
sS'default'
p14327
S'0'
p14328
sS'name'
p14329
S'reset_dt'
p14330
sS'required'
p14331
I00
sS'group_name'
p14332
Nsa(dp14333
S'description'
p14334
g3
sS'cpp_type'
p14335
S'std::string'
p14336
sS'default'
p14337
S'SolutionTimeAdaptiveDT'
p14338
sS'name'
p14339
S'type'
p14340
sS'required'
p14341
I00
sS'group_name'
p14342
NsasS'name'
p14343
S'/Executioner/TimeStepper/<type>/SolutionTimeAdaptiveDT'
p14344
sasS'parameters'
p14345
NsS'name'
p14346
S'/Executioner/TimeStepper/<type>'
p14347
sasS'parameters'
p14348
(lp14349
(dp14350
S'description'
p14351
S'A string representing the Moose Object that will be built by this Action\n'
p14352
sS'cpp_type'
p14353
S'std::string'
p14354
sS'default'
p14355
g3
sS'name'
p14356
S'type'
p14357
sS'required'
p14358
I01
sS'group_name'
p14359
NsasS'name'
p14360
S'/Executioner/TimeStepper'
p14361
sasS'parameters'
p14362
(lp14363
(dp14364
S'description'
p14365
S'Linear Absolute Step Tolerance\n'
p14366
sS'cpp_type'
p14367
S'double'
p14368
sS'default'
p14369
S'-1'
p14370
sS'name'
p14371
S'l_abs_step_tol'
p14372
sS'required'
p14373
I00
sS'group_name'
p14374
S'Solver'
p14375
sa(dp14376
S'description'
p14377
S'Max Linear Iterations\n'
p14378
sS'cpp_type'
p14379
S'unsigned int'
p14380
sS'default'
p14381
S'10000'
p14382
sS'name'
p14383
S'l_max_its'
p14384
sS'required'
p14385
I00
sS'group_name'
p14386
S'Solver'
p14387
sa(dp14388
S'description'
p14389
S'Linear Tolerance\n'
p14390
sS'cpp_type'
p14391
S'double'
p14392
sS'default'
p14393
S'1e-05'
p14394
sS'name'
p14395
S'l_tol'
p14396
sS'required'
p14397
I00
sS'group_name'
p14398
S'Solver'
p14399
sa(dp14400
S'name'
p14401
S'line_search'
p14402
sS'cpp_type'
p14403
S'MooseEnum'
p14404
sS'default'
p14405
S'default'
p14406
sS'description'
p14407
S'Specifies the line search type (Note: none = basic)\n'
p14408
sS'required'
p14409
I00
sS'options'
p14410
S'default shell none basic l2 bt cp'
p14411
sS'group_name'
p14412
Nsa(dp14413
S'description'
p14414
S'Nonlinear Absolute step Tolerance\n'
p14415
sS'cpp_type'
p14416
S'double'
p14417
sS'default'
p14418
S'1e-50'
p14419
sS'name'
p14420
S'nl_abs_step_tol'
p14421
sS'required'
p14422
I00
sS'group_name'
p14423
S'Solver'
p14424
sa(dp14425
S'description'
p14426
S'Nonlinear Absolute Tolerance\n'
p14427
sS'cpp_type'
p14428
S'double'
p14429
sS'default'
p14430
S'1e-50'
p14431
sS'name'
p14432
S'nl_abs_tol'
p14433
sS'required'
p14434
I00
sS'group_name'
p14435
S'Solver'
p14436
sa(dp14437
S'description'
p14438
S'Max Nonlinear solver function evaluations\n'
p14439
sS'cpp_type'
p14440
S'unsigned int'
p14441
sS'default'
p14442
S'10000'
p14443
sS'name'
p14444
S'nl_max_funcs'
p14445
sS'required'
p14446
I00
sS'group_name'
p14447
S'Solver'
p14448
sa(dp14449
S'description'
p14450
S'Max Nonlinear Iterations\n'
p14451
sS'cpp_type'
p14452
S'unsigned int'
p14453
sS'default'
p14454
S'50'
p14455
sS'name'
p14456
S'nl_max_its'
p14457
sS'required'
p14458
I00
sS'group_name'
p14459
S'Solver'
p14460
sa(dp14461
S'description'
p14462
S'Nonlinear Relative step Tolerance\n'
p14463
sS'cpp_type'
p14464
S'double'
p14465
sS'default'
p14466
S'1e-50'
p14467
sS'name'
p14468
S'nl_rel_step_tol'
p14469
sS'required'
p14470
I00
sS'group_name'
p14471
S'Solver'
p14472
sa(dp14473
S'description'
p14474
S'Nonlinear Relative Tolerance\n'
p14475
sS'cpp_type'
p14476
S'double'
p14477
sS'default'
p14478
S'1e-08'
p14479
sS'name'
p14480
S'nl_rel_tol'
p14481
sS'required'
p14482
I00
sS'group_name'
p14483
S'Solver'
p14484
sa(dp14485
S'description'
p14486
S'Specifies whether or not to reinitialize FEs\n'
p14487
sS'cpp_type'
p14488
S'bool'
p14489
sS'default'
p14490
S'0'
p14491
sS'name'
p14492
S'no_fe_reinit'
p14493
sS'required'
p14494
I00
sS'group_name'
p14495
S'Advanced'
p14496
sa(dp14497
S'name'
p14498
S'petsc_options'
p14499
sS'cpp_type'
p14500
S'std::vector<MooseEnum, std::allocator<MooseEnum> >'
p14501
sS'default'
p14502
g3
sS'description'
p14503
S'Singleton PETSc options\n'
p14504
sS'required'
p14505
I00
sS'options'
p14506
NsS'group_name'
p14507
Nsa(dp14508
S'description'
p14509
S'Names of PETSc name/value pairs\n'
p14510
sS'cpp_type'
p14511
S'std::vector<std::string, std::allocator<std::string> >'
p14512
sS'default'
p14513
g3
sS'name'
p14514
S'petsc_options_iname'
p14515
sS'required'
p14516
I00
sS'group_name'
p14517
Nsa(dp14518
S'description'
p14519
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p14520
sS'cpp_type'
p14521
S'std::vector<std::string, std::allocator<std::string> >'
p14522
sS'default'
p14523
g3
sS'name'
p14524
S'petsc_options_value'
p14525
sS'required'
p14526
I00
sS'group_name'
p14527
Nsa(dp14528
S'name'
p14529
S'solve_type'
p14530
sS'cpp_type'
p14531
S'MooseEnum'
p14532
sS'default'
p14533
g3
sS'description'
p14534
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p14535
sS'required'
p14536
I00
sS'options'
p14537
S'PJFNK JFNK NEWTON FD LINEAR'
p14538
sS'group_name'
p14539
Nsa(dp14540
S'description'
p14541
S'A string representing the Moose Object that will be built by this Action\n'
p14542
sS'cpp_type'
p14543
S'std::string'
p14544
sS'default'
p14545
g3
sS'name'
p14546
S'type'
p14547
sS'required'
p14548
I01
sS'group_name'
p14549
NsasS'name'
p14550
S'/Executioner'
p14551
sa(dp14552
S'description'
p14553
g3
sS'type'
p14554
NsS'subblocks'
p14555
(lp14556
(dp14557
S'description'
p14558
g3
sS'type'
p14559
NsS'subblocks'
p14560
NsS'parameters'
p14561
(lp14562
(dp14563
S'description'
p14564
S'A string representing the Moose Object that will be built by this Action\n'
p14565
sS'cpp_type'
p14566
S'std::string'
p14567
sS'default'
p14568
g3
sS'name'
p14569
S'type'
p14570
sS'required'
p14571
I01
sS'group_name'
p14572
NsasS'name'
p14573
S'/Functions/*'
p14574
sa(dp14575
S'description'
p14576
g3
sS'type'
p14577
NsS'subblocks'
p14578
NsS'parameters'
p14579
(lp14580
(dp14581
S'description'
p14582
S'The functions to be multiplied together.\n'
p14583
sS'cpp_type'
p14584
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p14585
sS'default'
p14586
g3
sS'name'
p14587
S'functions'
p14588
sS'required'
p14589
I00
sS'group_name'
p14590
Nsa(dp14591
S'description'
p14592
S'Scale factor to be applied to the ordinate values\n'
p14593
sS'cpp_type'
p14594
S'double'
p14595
sS'default'
p14596
S'1'
p14597
sS'name'
p14598
S'scale_factor'
p14599
sS'required'
p14600
I00
sS'group_name'
p14601
Nsa(dp14602
S'description'
p14603
g3
sS'cpp_type'
p14604
S'std::string'
p14605
sS'default'
p14606
S'CompositeFunction'
p14607
sS'name'
p14608
S'type'
p14609
sS'required'
p14610
I00
sS'group_name'
p14611
NsasS'name'
p14612
S'/Functions/CompositeFunction'
p14613
sa(dp14614
S'description'
p14615
g3
sS'type'
p14616
NsS'subblocks'
p14617
NsS'parameters'
p14618
(lp14619
(dp14620
S'description'
p14621
g3
sS'cpp_type'
p14622
S'std::string'
p14623
sS'default'
p14624
S'ConstantFunction'
p14625
sS'name'
p14626
S'type'
p14627
sS'required'
p14628
I00
sS'group_name'
p14629
Nsa(dp14630
S'description'
p14631
S'The constant value\n'
p14632
sS'cpp_type'
p14633
S'double'
p14634
sS'default'
p14635
S'0'
p14636
sS'name'
p14637
S'value'
p14638
sS'required'
p14639
I00
sS'group_name'
p14640
NsasS'name'
p14641
S'/Functions/ConstantFunction'
p14642
sa(dp14643
S'description'
p14644
g3
sS'type'
p14645
NsS'subblocks'
p14646
NsS'parameters'
p14647
(lp14648
(dp14649
S'description'
p14650
g3
sS'cpp_type'
p14651
S'std::string'
p14652
sS'default'
p14653
S'ParsedFunction'
p14654
sS'name'
p14655
S'type'
p14656
sS'required'
p14657
I00
sS'group_name'
p14658
Nsa(dp14659
S'description'
p14660
S'The initial values of the variables (optional)\n'
p14661
sS'cpp_type'
p14662
S'std::vector<std::string, std::allocator<std::string> >'
p14663
sS'default'
p14664
g3
sS'name'
p14665
S'vals'
p14666
sS'required'
p14667
I00
sS'group_name'
p14668
Nsa(dp14669
S'description'
p14670
S'The user defined function.\n'
p14671
sS'cpp_type'
p14672
S'std::string'
p14673
sS'default'
p14674
g3
sS'name'
p14675
S'value'
p14676
sS'required'
p14677
I01
sS'group_name'
p14678
Nsa(dp14679
S'description'
p14680
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p14681
sS'cpp_type'
p14682
S'std::vector<std::string, std::allocator<std::string> >'
p14683
sS'default'
p14684
g3
sS'name'
p14685
S'vars'
p14686
sS'required'
p14687
I00
sS'group_name'
p14688
NsasS'name'
p14689
S'/Functions/ParsedFunction'
p14690
sa(dp14691
S'description'
p14692
g3
sS'type'
p14693
NsS'subblocks'
p14694
NsS'parameters'
p14695
(lp14696
(dp14697
S'description'
p14698
S'Partial with respect to x.\n'
p14699
sS'cpp_type'
p14700
S'std::string'
p14701
sS'default'
p14702
S'0'
p14703
sS'name'
p14704
S'grad_x'
p14705
sS'required'
p14706
I00
sS'group_name'
p14707
Nsa(dp14708
S'description'
p14709
S'Partial with respect to y.\n'
p14710
sS'cpp_type'
p14711
S'std::string'
p14712
sS'default'
p14713
S'0'
p14714
sS'name'
p14715
S'grad_y'
p14716
sS'required'
p14717
I00
sS'group_name'
p14718
Nsa(dp14719
S'description'
p14720
S'Partial with respect to z.\n'
p14721
sS'cpp_type'
p14722
S'std::string'
p14723
sS'default'
p14724
S'0'
p14725
sS'name'
p14726
S'grad_z'
p14727
sS'required'
p14728
I00
sS'group_name'
p14729
Nsa(dp14730
S'description'
p14731
g3
sS'cpp_type'
p14732
S'std::string'
p14733
sS'default'
p14734
S'ParsedGradFunction'
p14735
sS'name'
p14736
S'type'
p14737
sS'required'
p14738
I00
sS'group_name'
p14739
Nsa(dp14740
S'description'
p14741
S'The initial values of the variables (optional)\n'
p14742
sS'cpp_type'
p14743
S'std::vector<std::string, std::allocator<std::string> >'
p14744
sS'default'
p14745
g3
sS'name'
p14746
S'vals'
p14747
sS'required'
p14748
I00
sS'group_name'
p14749
Nsa(dp14750
S'description'
p14751
S'User defined function.\n'
p14752
sS'cpp_type'
p14753
S'std::string'
p14754
sS'default'
p14755
S'0'
p14756
sS'name'
p14757
S'value'
p14758
sS'required'
p14759
I00
sS'group_name'
p14760
Nsa(dp14761
S'description'
p14762
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p14763
sS'cpp_type'
p14764
S'std::vector<std::string, std::allocator<std::string> >'
p14765
sS'default'
p14766
g3
sS'name'
p14767
S'vars'
p14768
sS'required'
p14769
I00
sS'group_name'
p14770
NsasS'name'
p14771
S'/Functions/ParsedGradFunction'
p14772
sa(dp14773
S'description'
p14774
g3
sS'type'
p14775
NsS'subblocks'
p14776
NsS'parameters'
p14777
(lp14778
(dp14779
S'description'
p14780
g3
sS'cpp_type'
p14781
S'std::string'
p14782
sS'default'
p14783
S'ParsedVectorFunction'
p14784
sS'name'
p14785
S'type'
p14786
sS'required'
p14787
I00
sS'group_name'
p14788
Nsa(dp14789
S'description'
p14790
S'The initial values of the variables (optional)\n'
p14791
sS'cpp_type'
p14792
S'std::vector<std::string, std::allocator<std::string> >'
p14793
sS'default'
p14794
g3
sS'name'
p14795
S'vals'
p14796
sS'required'
p14797
I00
sS'group_name'
p14798
Nsa(dp14799
S'description'
p14800
S'x-component of function.\n'
p14801
sS'cpp_type'
p14802
S'std::string'
p14803
sS'default'
p14804
S'0'
p14805
sS'name'
p14806
S'value_x'
p14807
sS'required'
p14808
I00
sS'group_name'
p14809
Nsa(dp14810
S'description'
p14811
S'y-component of function.\n'
p14812
sS'cpp_type'
p14813
S'std::string'
p14814
sS'default'
p14815
S'0'
p14816
sS'name'
p14817
S'value_y'
p14818
sS'required'
p14819
I00
sS'group_name'
p14820
Nsa(dp14821
S'description'
p14822
S'z-component of function.\n'
p14823
sS'cpp_type'
p14824
S'std::string'
p14825
sS'default'
p14826
S'0'
p14827
sS'name'
p14828
S'value_z'
p14829
sS'required'
p14830
I00
sS'group_name'
p14831
Nsa(dp14832
S'description'
p14833
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p14834
sS'cpp_type'
p14835
S'std::vector<std::string, std::allocator<std::string> >'
p14836
sS'default'
p14837
g3
sS'name'
p14838
S'vars'
p14839
sS'required'
p14840
I00
sS'group_name'
p14841
NsasS'name'
p14842
S'/Functions/ParsedVectorFunction'
p14843
sa(dp14844
S'description'
p14845
g3
sS'type'
p14846
NsS'subblocks'
p14847
NsS'parameters'
p14848
(lp14849
(dp14850
S'description'
p14851
S'The axis used (0, 1, or 2 for x, y, or z).\n'
p14852
sS'cpp_type'
p14853
S'int'
p14854
sS'default'
p14855
S'-1'
p14856
sS'name'
p14857
S'axis'
p14858
sS'required'
p14859
I00
sS'group_name'
p14860
Nsa(dp14861
S'description'
p14862
S'File holding csv data for use with PiecewiseBilinear\n'
p14863
sS'cpp_type'
p14864
S'std::string'
p14865
sS'default'
p14866
g3
sS'name'
p14867
S'data_file'
p14868
sS'required'
p14869
I00
sS'group_name'
p14870
Nsa(dp14871
S'description'
p14872
S'Set to true if you want to interpolate along a radius rather that along a specific axis, and note that you have to define xaxis and yaxis in the input file\n'
p14873
sS'cpp_type'
p14874
S'bool'
p14875
sS'default'
p14876
S'0'
p14877
sS'name'
p14878
S'radial'
p14879
sS'required'
p14880
I00
sS'group_name'
p14881
Nsa(dp14882
S'description'
p14883
S'Scale factor to be applied to the axis, yaxis, or xaxis values\n'
p14884
sS'cpp_type'
p14885
S'double'
p14886
sS'default'
p14887
S'1'
p14888
sS'name'
p14889
S'scale_factor'
p14890
sS'required'
p14891
I00
sS'group_name'
p14892
Nsa(dp14893
S'description'
p14894
g3
sS'cpp_type'
p14895
S'std::string'
p14896
sS'default'
p14897
S'PiecewiseBilinear'
p14898
sS'name'
p14899
S'type'
p14900
sS'required'
p14901
I00
sS'group_name'
p14902
Nsa(dp14903
S'description'
p14904
S'The coordinate used for x-axis data (0, 1, or 2 for x, y, or z).\n'
p14905
sS'cpp_type'
p14906
S'int'
p14907
sS'default'
p14908
S'-1'
p14909
sS'name'
p14910
S'xaxis'
p14911
sS'required'
p14912
I00
sS'group_name'
p14913
Nsa(dp14914
S'description'
p14915
S'The coordinate used for y-axis data (0, 1, or 2 for x, y, or z).\n'
p14916
sS'cpp_type'
p14917
S'int'
p14918
sS'default'
p14919
S'-1'
p14920
sS'name'
p14921
S'yaxis'
p14922
sS'required'
p14923
I00
sS'group_name'
p14924
NsasS'name'
p14925
S'/Functions/PiecewiseBilinear'
p14926
sa(dp14927
S'description'
p14928
g3
sS'type'
p14929
NsS'subblocks'
p14930
NsS'parameters'
p14931
(lp14932
(dp14933
S'description'
p14934
S'The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n'
p14935
sS'cpp_type'
p14936
S'int'
p14937
sS'default'
p14938
g3
sS'name'
p14939
S'axis'
p14940
sS'required'
p14941
I00
sS'group_name'
p14942
Nsa(dp14943
S'description'
p14944
S'File holding csv data for use with Piecewise\n'
p14945
sS'cpp_type'
p14946
S'std::string'
p14947
sS'default'
p14948
g3
sS'name'
p14949
S'data_file'
p14950
sS'required'
p14951
I00
sS'group_name'
p14952
Nsa(dp14953
S'name'
p14954
S'direction'
p14955
sS'cpp_type'
p14956
S'MooseEnum'
p14957
sS'default'
p14958
S'left'
p14959
sS'description'
p14960
S'Direction to look to find value: left, right\n'
p14961
sS'required'
p14962
I00
sS'options'
p14963
S'left right'
p14964
sS'group_name'
p14965
Nsa(dp14966
S'description'
p14967
S'Format of csv data file that is in either in columns or rows\n'
p14968
sS'cpp_type'
p14969
S'std::string'
p14970
sS'default'
p14971
S'rows'
p14972
sS'name'
p14973
S'format'
p14974
sS'required'
p14975
I00
sS'group_name'
p14976
Nsa(dp14977
S'description'
p14978
S'Scale factor to be applied to the ordinate values\n'
p14979
sS'cpp_type'
p14980
S'double'
p14981
sS'default'
p14982
S'1'
p14983
sS'name'
p14984
S'scale_factor'
p14985
sS'required'
p14986
I00
sS'group_name'
p14987
Nsa(dp14988
S'description'
p14989
g3
sS'cpp_type'
p14990
S'std::string'
p14991
sS'default'
p14992
S'PiecewiseConstant'
p14993
sS'name'
p14994
S'type'
p14995
sS'required'
p14996
I00
sS'group_name'
p14997
Nsa(dp14998
S'description'
p14999
S'The abscissa values\n'
p15000
sS'cpp_type'
p15001
S'std::vector<double, std::allocator<double> >'
p15002
sS'default'
p15003
g3
sS'name'
p15004
S'x'
p15005
sS'required'
p15006
I00
sS'group_name'
p15007
Nsa(dp15008
S'description'
p15009
S'All function data, supplied in abscissa, ordinate pairs\n'
p15010
sS'cpp_type'
p15011
S'std::vector<double, std::allocator<double> >'
p15012
sS'default'
p15013
g3
sS'name'
p15014
S'xy_data'
p15015
sS'required'
p15016
I00
sS'group_name'
p15017
Nsa(dp15018
S'description'
p15019
S'The ordinate values\n'
p15020
sS'cpp_type'
p15021
S'std::vector<double, std::allocator<double> >'
p15022
sS'default'
p15023
g3
sS'name'
p15024
S'y'
p15025
sS'required'
p15026
I00
sS'group_name'
p15027
NsasS'name'
p15028
S'/Functions/PiecewiseConstant'
p15029
sa(dp15030
S'description'
p15031
g3
sS'type'
p15032
NsS'subblocks'
p15033
NsS'parameters'
p15034
(lp15035
(dp15036
S'description'
p15037
S'The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n'
p15038
sS'cpp_type'
p15039
S'int'
p15040
sS'default'
p15041
g3
sS'name'
p15042
S'axis'
p15043
sS'required'
p15044
I00
sS'group_name'
p15045
Nsa(dp15046
S'description'
p15047
S'File holding csv data for use with Piecewise\n'
p15048
sS'cpp_type'
p15049
S'std::string'
p15050
sS'default'
p15051
g3
sS'name'
p15052
S'data_file'
p15053
sS'required'
p15054
I00
sS'group_name'
p15055
Nsa(dp15056
S'description'
p15057
S'Format of csv data file that is in either in columns or rows\n'
p15058
sS'cpp_type'
p15059
S'std::string'
p15060
sS'default'
p15061
S'rows'
p15062
sS'name'
p15063
S'format'
p15064
sS'required'
p15065
I00
sS'group_name'
p15066
Nsa(dp15067
S'description'
p15068
S'Scale factor to be applied to the ordinate values\n'
p15069
sS'cpp_type'
p15070
S'double'
p15071
sS'default'
p15072
S'1'
p15073
sS'name'
p15074
S'scale_factor'
p15075
sS'required'
p15076
I00
sS'group_name'
p15077
Nsa(dp15078
S'description'
p15079
g3
sS'cpp_type'
p15080
S'std::string'
p15081
sS'default'
p15082
S'PiecewiseLinear'
p15083
sS'name'
p15084
S'type'
p15085
sS'required'
p15086
I00
sS'group_name'
p15087
Nsa(dp15088
S'description'
p15089
S'The abscissa values\n'
p15090
sS'cpp_type'
p15091
S'std::vector<double, std::allocator<double> >'
p15092
sS'default'
p15093
g3
sS'name'
p15094
S'x'
p15095
sS'required'
p15096
I00
sS'group_name'
p15097
Nsa(dp15098
S'description'
p15099
S'All function data, supplied in abscissa, ordinate pairs\n'
p15100
sS'cpp_type'
p15101
S'std::vector<double, std::allocator<double> >'
p15102
sS'default'
p15103
g3
sS'name'
p15104
S'xy_data'
p15105
sS'required'
p15106
I00
sS'group_name'
p15107
Nsa(dp15108
S'description'
p15109
S'The ordinate values\n'
p15110
sS'cpp_type'
p15111
S'std::vector<double, std::allocator<double> >'
p15112
sS'default'
p15113
g3
sS'name'
p15114
S'y'
p15115
sS'required'
p15116
I00
sS'group_name'
p15117
NsasS'name'
p15118
S'/Functions/PiecewiseLinear'
p15119
sa(dp15120
S'description'
p15121
g3
sS'type'
p15122
NsS'subblocks'
p15123
NsS'parameters'
p15124
(lp15125
(dp15126
S'description'
p15127
S'The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n'
p15128
sS'cpp_type'
p15129
S'int'
p15130
sS'default'
p15131
g3
sS'name'
p15132
S'axis'
p15133
sS'required'
p15134
I00
sS'group_name'
p15135
Nsa(dp15136
S'description'
p15137
S'File holding csv data for use with Piecewise\n'
p15138
sS'cpp_type'
p15139
S'std::string'
p15140
sS'default'
p15141
g3
sS'name'
p15142
S'data_file'
p15143
sS'required'
p15144
I00
sS'group_name'
p15145
Nsa(dp15146
S'description'
p15147
S'Format of csv data file that is in either in columns or rows\n'
p15148
sS'cpp_type'
p15149
S'std::string'
p15150
sS'default'
p15151
S'rows'
p15152
sS'name'
p15153
S'format'
p15154
sS'required'
p15155
I00
sS'group_name'
p15156
Nsa(dp15157
S'description'
p15158
S'Scale factor to be applied to the ordinate values\n'
p15159
sS'cpp_type'
p15160
S'double'
p15161
sS'default'
p15162
S'1'
p15163
sS'name'
p15164
S'scale_factor'
p15165
sS'required'
p15166
I00
sS'group_name'
p15167
Nsa(dp15168
S'description'
p15169
g3
sS'cpp_type'
p15170
S'std::string'
p15171
sS'default'
p15172
S'PiecewiseLinearFile'
p15173
sS'name'
p15174
S'type'
p15175
sS'required'
p15176
I00
sS'group_name'
p15177
Nsa(dp15178
S'description'
p15179
S'The abscissa values\n'
p15180
sS'cpp_type'
p15181
S'std::vector<double, std::allocator<double> >'
p15182
sS'default'
p15183
g3
sS'name'
p15184
S'x'
p15185
sS'required'
p15186
I00
sS'group_name'
p15187
Nsa(dp15188
S'description'
p15189
S'All function data, supplied in abscissa, ordinate pairs\n'
p15190
sS'cpp_type'
p15191
S'std::vector<double, std::allocator<double> >'
p15192
sS'default'
p15193
g3
sS'name'
p15194
S'xy_data'
p15195
sS'required'
p15196
I00
sS'group_name'
p15197
Nsa(dp15198
S'description'
p15199
S'The ordinate values\n'
p15200
sS'cpp_type'
p15201
S'std::vector<double, std::allocator<double> >'
p15202
sS'default'
p15203
g3
sS'name'
p15204
S'y'
p15205
sS'required'
p15206
I00
sS'group_name'
p15207
NsasS'name'
p15208
S'/Functions/PiecewiseLinearFile'
p15209
sa(dp15210
S'description'
p15211
g3
sS'type'
p15212
NsS'subblocks'
p15213
NsS'parameters'
p15214
(lp15215
(dp15216
S'description'
p15217
S'File holding data for use with PiecewiseMultilinear.  Format: any empty line and any line beginning with # are ignored, all other lines are assumed to contain relevant information.  The file must begin with specification of the grid.  This is done through lines containing the keywords: AXIS X; AXIS Y; AXIS Z; or AXIS T.  Immediately following the keyword line must be a space-separated line of real numbers which define the grid along the specified axis.  These data must be monotonically increasing.  After all the axes and their grids have been specified, there must be a line that is DATA.  Following that line, function values are given in the correct order (they may be on indivicual lines, or be space-separated on a number of lines).  When the function is evaluated, f[i,j,k,l] corresponds to the i + j*Ni + k*Ni*Nj + l*Ni*Nj*Nk data value.  Here i>=0 corresponding to the index along the first AXIS, j>=0 corresponding to the index along the second AXIS, etc, and Ni = number of grid points along the first AXIS, etc.\n'
p15218
sS'cpp_type'
p15219
S'std::string'
p15220
sS'default'
p15221
g3
sS'name'
p15222
S'data_file'
p15223
sS'required'
p15224
I00
sS'group_name'
p15225
Nsa(dp15226
S'description'
p15227
g3
sS'cpp_type'
p15228
S'std::string'
p15229
sS'default'
p15230
S'PiecewiseMultilinear'
p15231
sS'name'
p15232
S'type'
p15233
sS'required'
p15234
I00
sS'group_name'
p15235
NsasS'name'
p15236
S'/Functions/PiecewiseMultilinear'
p15237
sa(dp15238
S'description'
p15239
g3
sS'type'
p15240
NsS'subblocks'
p15241
NsS'parameters'
p15242
(lp15243
(dp15244
S'description'
p15245
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p15246
sS'cpp_type'
p15247
S'double'
p15248
sS'default'
p15249
S'0'
p15250
sS'name'
p15251
S'add_factor'
p15252
sS'required'
p15253
I00
sS'group_name'
p15254
Nsa(dp15255
S'description'
p15256
S'The name of the variable in the file that is too be extracted\n'
p15257
sS'cpp_type'
p15258
S'std::string'
p15259
sS'default'
p15260
g3
sS'name'
p15261
S'from_variable'
p15262
sS'required'
p15263
I00
sS'group_name'
p15264
Nsa(dp15265
S'description'
p15266
S"Scale factor (a) to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p15267
sS'cpp_type'
p15268
S'double'
p15269
sS'default'
p15270
S'1'
p15271
sS'name'
p15272
S'scale_factor'
p15273
sS'required'
p15274
I00
sS'group_name'
p15275
Nsa(dp15276
S'description'
p15277
S'The SolutionUserObject to extract data from.\n'
p15278
sS'cpp_type'
p15279
S'UserObjectName'
p15280
sS'default'
p15281
g3
sS'name'
p15282
S'solution'
p15283
sS'required'
p15284
I01
sS'group_name'
p15285
Nsa(dp15286
S'description'
p15287
g3
sS'cpp_type'
p15288
S'std::string'
p15289
sS'default'
p15290
S'SolutionFunction'
p15291
sS'name'
p15292
S'type'
p15293
sS'required'
p15294
I00
sS'group_name'
p15295
NsasS'name'
p15296
S'/Functions/SolutionFunction'
p15297
sa(dp15298
S'description'
p15299
g3
sS'type'
p15300
NsS'subblocks'
p15301
NsS'parameters'
p15302
(lp15303
(dp15304
S'description'
p15305
g3
sS'cpp_type'
p15306
S'std::string'
p15307
sS'default'
p15308
S'SplineFunction'
p15309
sS'name'
p15310
S'type'
p15311
sS'required'
p15312
I00
sS'group_name'
p15313
Nsa(dp15314
S'description'
p15315
S'The abscissa values\n'
p15316
sS'cpp_type'
p15317
S'std::vector<double, std::allocator<double> >'
p15318
sS'default'
p15319
g3
sS'name'
p15320
S'x'
p15321
sS'required'
p15322
I01
sS'group_name'
p15323
Nsa(dp15324
S'description'
p15325
S'The ordinate values\n'
p15326
sS'cpp_type'
p15327
S'std::vector<double, std::allocator<double> >'
p15328
sS'default'
p15329
g3
sS'name'
p15330
S'y'
p15331
sS'required'
p15332
I01
sS'group_name'
p15333
Nsa(dp15334
S'description'
p15335
S'The value of the first derivative of the interpolating function at point 1\n'
p15336
sS'cpp_type'
p15337
S'double'
p15338
sS'default'
p15339
S'1e+30'
p15340
sS'name'
p15341
S'yp1'
p15342
sS'required'
p15343
I00
sS'group_name'
p15344
Nsa(dp15345
S'description'
p15346
S'The value of the first derivative of the interpolating function at point n\n'
p15347
sS'cpp_type'
p15348
S'double'
p15349
sS'default'
p15350
S'1e+30'
p15351
sS'name'
p15352
S'ypn'
p15353
sS'required'
p15354
I00
sS'group_name'
p15355
NsasS'name'
p15356
S'/Functions/SplineFunction'
p15357
sasS'parameters'
p15358
NsS'name'
p15359
S'/Functions'
p15360
sa(dp15361
S'description'
p15362
g3
sS'type'
p15363
NsS'subblocks'
p15364
NsS'parameters'
p15365
NsS'name'
p15366
S'/GlobalParams'
p15367
sa(dp15368
S'description'
p15369
g3
sS'type'
p15370
NsS'subblocks'
p15371
(lp15372
(dp15373
S'description'
p15374
g3
sS'type'
p15375
NsS'subblocks'
p15376
NsS'parameters'
p15377
(lp15378
(dp15379
S'description'
p15380
S'A string representing the Moose Object that will be built by this Action\n'
p15381
sS'cpp_type'
p15382
S'std::string'
p15383
sS'default'
p15384
g3
sS'name'
p15385
S'type'
p15386
sS'required'
p15387
I01
sS'group_name'
p15388
NsasS'name'
p15389
S'/ICs/*'
p15390
sa(dp15391
S'description'
p15392
g3
sS'type'
p15393
NsS'subblocks'
p15394
NsS'parameters'
p15395
(lp15396
(dp15397
S'description'
p15398
S'The list of block ids (SubdomainID) that this object will be applied\n'
p15399
sS'cpp_type'
p15400
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p15401
sS'default'
p15402
g3
sS'name'
p15403
S'block'
p15404
sS'required'
p15405
I00
sS'group_name'
p15406
Nsa(dp15407
S'description'
p15408
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15409
sS'cpp_type'
p15410
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15411
sS'default'
p15412
g3
sS'name'
p15413
S'boundary'
p15414
sS'required'
p15415
I00
sS'group_name'
p15416
Nsa(dp15417
S'description'
p15418
S'The value of the variable inside the box\n'
p15419
sS'cpp_type'
p15420
S'double'
p15421
sS'default'
p15422
S'0'
p15423
sS'name'
p15424
S'inside'
p15425
sS'required'
p15426
I00
sS'group_name'
p15427
Nsa(dp15428
S'description'
p15429
S'The value of the variable outside the box\n'
p15430
sS'cpp_type'
p15431
S'double'
p15432
sS'default'
p15433
S'0'
p15434
sS'name'
p15435
S'outside'
p15436
sS'required'
p15437
I00
sS'group_name'
p15438
Nsa(dp15439
S'description'
p15440
g3
sS'cpp_type'
p15441
S'std::string'
p15442
sS'default'
p15443
S'BoundingBoxIC'
p15444
sS'name'
p15445
S'type'
p15446
sS'required'
p15447
I00
sS'group_name'
p15448
Nsa(dp15449
S'description'
p15450
S'The variable this initial condition is supposed to provide values for.\n'
p15451
sS'cpp_type'
p15452
S'VariableName'
p15453
sS'default'
p15454
g3
sS'name'
p15455
S'variable'
p15456
sS'required'
p15457
I01
sS'group_name'
p15458
Nsa(dp15459
S'description'
p15460
S'The x coordinate of the lower left-hand corner of the box\n'
p15461
sS'cpp_type'
p15462
S'double'
p15463
sS'default'
p15464
g3
sS'name'
p15465
S'x1'
p15466
sS'required'
p15467
I01
sS'group_name'
p15468
Nsa(dp15469
S'description'
p15470
S'The x coordinate of the upper right-hand corner of the box\n'
p15471
sS'cpp_type'
p15472
S'double'
p15473
sS'default'
p15474
g3
sS'name'
p15475
S'x2'
p15476
sS'required'
p15477
I01
sS'group_name'
p15478
Nsa(dp15479
S'description'
p15480
S'The y coordinate of the lower left-hand corner of the box\n'
p15481
sS'cpp_type'
p15482
S'double'
p15483
sS'default'
p15484
g3
sS'name'
p15485
S'y1'
p15486
sS'required'
p15487
I01
sS'group_name'
p15488
Nsa(dp15489
S'description'
p15490
S'The y coordinate of the upper right-hand corner of the box\n'
p15491
sS'cpp_type'
p15492
S'double'
p15493
sS'default'
p15494
g3
sS'name'
p15495
S'y2'
p15496
sS'required'
p15497
I01
sS'group_name'
p15498
Nsa(dp15499
S'description'
p15500
S'The z coordinate of the lower left-hand corner of the box\n'
p15501
sS'cpp_type'
p15502
S'double'
p15503
sS'default'
p15504
S'0'
p15505
sS'name'
p15506
S'z1'
p15507
sS'required'
p15508
I00
sS'group_name'
p15509
Nsa(dp15510
S'description'
p15511
S'The z coordinate of the upper right-hand corner of the box\n'
p15512
sS'cpp_type'
p15513
S'double'
p15514
sS'default'
p15515
S'0'
p15516
sS'name'
p15517
S'z2'
p15518
sS'required'
p15519
I00
sS'group_name'
p15520
NsasS'name'
p15521
S'/ICs/BoundingBoxIC'
p15522
sa(dp15523
S'description'
p15524
g3
sS'type'
p15525
NsS'subblocks'
p15526
NsS'parameters'
p15527
(lp15528
(dp15529
S'description'
p15530
S'The list of block ids (SubdomainID) that this object will be applied\n'
p15531
sS'cpp_type'
p15532
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p15533
sS'default'
p15534
g3
sS'name'
p15535
S'block'
p15536
sS'required'
p15537
I00
sS'group_name'
p15538
Nsa(dp15539
S'description'
p15540
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15541
sS'cpp_type'
p15542
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15543
sS'default'
p15544
g3
sS'name'
p15545
S'boundary'
p15546
sS'required'
p15547
I00
sS'group_name'
p15548
Nsa(dp15549
S'description'
p15550
g3
sS'cpp_type'
p15551
S'std::string'
p15552
sS'default'
p15553
S'ConstantIC'
p15554
sS'name'
p15555
S'type'
p15556
sS'required'
p15557
I00
sS'group_name'
p15558
Nsa(dp15559
S'description'
p15560
S'The value to be set in IC\n'
p15561
sS'cpp_type'
p15562
S'double'
p15563
sS'default'
p15564
g3
sS'name'
p15565
S'value'
p15566
sS'required'
p15567
I01
sS'group_name'
p15568
Nsa(dp15569
S'description'
p15570
S'The variable this initial condition is supposed to provide values for.\n'
p15571
sS'cpp_type'
p15572
S'VariableName'
p15573
sS'default'
p15574
g3
sS'name'
p15575
S'variable'
p15576
sS'required'
p15577
I01
sS'group_name'
p15578
NsasS'name'
p15579
S'/ICs/ConstantIC'
p15580
sa(dp15581
S'description'
p15582
g3
sS'type'
p15583
NsS'subblocks'
p15584
NsS'parameters'
p15585
(lp15586
(dp15587
S'description'
p15588
S'The amplitude\n'
p15589
sS'cpp_type'
p15590
S'double'
p15591
sS'default'
p15592
S'1'
p15593
sS'name'
p15594
S'amplitude'
p15595
sS'required'
p15596
I00
sS'group_name'
p15597
Nsa(dp15598
S'description'
p15599
S'The average value\n'
p15600
sS'cpp_type'
p15601
S'double'
p15602
sS'default'
p15603
S'0'
p15604
sS'name'
p15605
S'average'
p15606
sS'required'
p15607
I00
sS'group_name'
p15608
Nsa(dp15609
S'description'
p15610
S'The list of block ids (SubdomainID) that this object will be applied\n'
p15611
sS'cpp_type'
p15612
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p15613
sS'default'
p15614
g3
sS'name'
p15615
S'block'
p15616
sS'required'
p15617
I00
sS'group_name'
p15618
Nsa(dp15619
S'description'
p15620
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15621
sS'cpp_type'
p15622
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15623
sS'default'
p15624
g3
sS'name'
p15625
S'boundary'
p15626
sS'required'
p15627
I00
sS'group_name'
p15628
Nsa(dp15629
S'description'
p15630
S'A small area between the max value and the interface\n'
p15631
sS'cpp_type'
p15632
S'double'
p15633
sS'default'
p15634
S'0.03125'
p15635
sS'name'
p15636
S'buffer'
p15637
sS'required'
p15638
I00
sS'group_name'
p15639
Nsa(dp15640
S'description'
p15641
S'The interface width\n'
p15642
sS'cpp_type'
p15643
S'double'
p15644
sS'default'
p15645
S'0.03125'
p15646
sS'name'
p15647
S'interface'
p15648
sS'required'
p15649
I00
sS'group_name'
p15650
Nsa(dp15651
S'description'
p15652
S'The length\n'
p15653
sS'cpp_type'
p15654
S'double'
p15655
sS'default'
p15656
S'0.75'
p15657
sS'name'
p15658
S'length'
p15659
sS'required'
p15660
I00
sS'group_name'
p15661
Nsa(dp15662
S'description'
p15663
g3
sS'cpp_type'
p15664
S'std::string'
p15665
sS'default'
p15666
S'CrossIC'
p15667
sS'name'
p15668
S'type'
p15669
sS'required'
p15670
I00
sS'group_name'
p15671
Nsa(dp15672
S'description'
p15673
S'The variable this initial condition is supposed to provide values for.\n'
p15674
sS'cpp_type'
p15675
S'VariableName'
p15676
sS'default'
p15677
g3
sS'name'
p15678
S'variable'
p15679
sS'required'
p15680
I01
sS'group_name'
p15681
Nsa(dp15682
S'description'
p15683
S'The width\n'
p15684
sS'cpp_type'
p15685
S'double'
p15686
sS'default'
p15687
S'0.125'
p15688
sS'name'
p15689
S'width'
p15690
sS'required'
p15691
I00
sS'group_name'
p15692
Nsa(dp15693
S'description'
p15694
S'The x coordinate of the lower left-hand corner of the box\n'
p15695
sS'cpp_type'
p15696
S'double'
p15697
sS'default'
p15698
S'0'
p15699
sS'name'
p15700
S'x1'
p15701
sS'required'
p15702
I00
sS'group_name'
p15703
Nsa(dp15704
S'description'
p15705
S'The x coordinate of the upper right-hand corner of the box\n'
p15706
sS'cpp_type'
p15707
S'double'
p15708
sS'default'
p15709
S'1'
p15710
sS'name'
p15711
S'x2'
p15712
sS'required'
p15713
I00
sS'group_name'
p15714
Nsa(dp15715
S'description'
p15716
S'The y coordinate of the lower left-hand corner of the box\n'
p15717
sS'cpp_type'
p15718
S'double'
p15719
sS'default'
p15720
S'0'
p15721
sS'name'
p15722
S'y1'
p15723
sS'required'
p15724
I00
sS'group_name'
p15725
Nsa(dp15726
S'description'
p15727
S'The y coordinate of the upper right-hand corner of the box\n'
p15728
sS'cpp_type'
p15729
S'double'
p15730
sS'default'
p15731
S'1'
p15732
sS'name'
p15733
S'y2'
p15734
sS'required'
p15735
I00
sS'group_name'
p15736
NsasS'name'
p15737
S'/ICs/CrossIC'
p15738
sa(dp15739
S'description'
p15740
g3
sS'type'
p15741
NsS'subblocks'
p15742
NsS'parameters'
p15743
(lp15744
(dp15745
S'description'
p15746
S'The list of block ids (SubdomainID) that this object will be applied\n'
p15747
sS'cpp_type'
p15748
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p15749
sS'default'
p15750
g3
sS'name'
p15751
S'block'
p15752
sS'required'
p15753
I00
sS'group_name'
p15754
Nsa(dp15755
S'description'
p15756
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15757
sS'cpp_type'
p15758
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15759
sS'default'
p15760
g3
sS'name'
p15761
S'boundary'
p15762
sS'required'
p15763
I00
sS'group_name'
p15764
Nsa(dp15765
S'description'
p15766
S'The initial condition function.\n'
p15767
sS'cpp_type'
p15768
S'FunctionName'
p15769
sS'default'
p15770
g3
sS'name'
p15771
S'function'
p15772
sS'required'
p15773
I01
sS'group_name'
p15774
Nsa(dp15775
S'description'
p15776
g3
sS'cpp_type'
p15777
S'std::string'
p15778
sS'default'
p15779
S'FunctionIC'
p15780
sS'name'
p15781
S'type'
p15782
sS'required'
p15783
I00
sS'group_name'
p15784
Nsa(dp15785
S'description'
p15786
S'The variable this initial condition is supposed to provide values for.\n'
p15787
sS'cpp_type'
p15788
S'VariableName'
p15789
sS'default'
p15790
g3
sS'name'
p15791
S'variable'
p15792
sS'required'
p15793
I01
sS'group_name'
p15794
NsasS'name'
p15795
S'/ICs/FunctionIC'
p15796
sa(dp15797
S'description'
p15798
g3
sS'type'
p15799
NsS'subblocks'
p15800
NsS'parameters'
p15801
(lp15802
(dp15803
S'description'
p15804
S'The list of block ids (SubdomainID) that this object will be applied\n'
p15805
sS'cpp_type'
p15806
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p15807
sS'default'
p15808
g3
sS'name'
p15809
S'block'
p15810
sS'required'
p15811
I00
sS'group_name'
p15812
Nsa(dp15813
S'description'
p15814
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15815
sS'cpp_type'
p15816
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15817
sS'default'
p15818
g3
sS'name'
p15819
S'boundary'
p15820
sS'required'
p15821
I00
sS'group_name'
p15822
Nsa(dp15823
S'description'
p15824
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p15825
sS'cpp_type'
p15826
S'bool'
p15827
sS'default'
p15828
S'0'
p15829
sS'name'
p15830
S'cody_test'
p15831
sS'required'
p15832
I00
sS'group_name'
p15833
Nsa(dp15834
S'description'
p15835
S'3D microstructure will be columnar in the z-direction?\n'
p15836
sS'cpp_type'
p15837
S'bool'
p15838
sS'default'
p15839
S'0'
p15840
sS'name'
p15841
S'columnar_3D'
p15842
sS'required'
p15843
I00
sS'group_name'
p15844
Nsa(dp15845
S'description'
p15846
S'The index for the current order parameter\n'
p15847
sS'cpp_type'
p15848
S'unsigned int'
p15849
sS'default'
p15850
g3
sS'name'
p15851
S'crys_index'
p15852
sS'required'
p15853
I01
sS'group_name'
p15854
Nsa(dp15855
S'description'
p15856
S'Number of order parameters\n'
p15857
sS'cpp_type'
p15858
S'unsigned int'
p15859
sS'default'
p15860
g3
sS'name'
p15861
S'crys_num'
p15862
sS'required'
p15863
I01
sS'group_name'
p15864
Nsa(dp15865
S'description'
p15866
S'Number of grains being represented by the order parameters\n'
p15867
sS'cpp_type'
p15868
S'unsigned int'
p15869
sS'default'
p15870
g3
sS'name'
p15871
S'grain_num'
p15872
sS'required'
p15873
I01
sS'group_name'
p15874
Nsa(dp15875
S'description'
p15876
S'The percent to randomly perturbate centers of grains relative to the size of the grain\n'
p15877
sS'cpp_type'
p15878
S'double'
p15879
sS'default'
p15880
S'0'
p15881
sS'name'
p15882
S'perturbation_percent'
p15883
sS'required'
p15884
I00
sS'group_name'
p15885
Nsa(dp15886
S'description'
p15887
S'The random seed\n'
p15888
sS'cpp_type'
p15889
S'unsigned int'
p15890
sS'default'
p15891
S'12444'
p15892
sS'name'
p15893
S'rand_seed'
p15894
sS'required'
p15895
I00
sS'group_name'
p15896
Nsa(dp15897
S'description'
p15898
g3
sS'cpp_type'
p15899
S'int'
p15900
sS'default'
p15901
S'1'
p15902
sS'name'
p15903
S'typ'
p15904
sS'required'
p15905
I00
sS'group_name'
p15906
Nsa(dp15907
S'description'
p15908
g3
sS'cpp_type'
p15909
S'std::string'
p15910
sS'default'
p15911
S'HexPolycrystalIC'
p15912
sS'name'
p15913
S'type'
p15914
sS'required'
p15915
I00
sS'group_name'
p15916
Nsa(dp15917
S'description'
p15918
S'The variable this initial condition is supposed to provide values for.\n'
p15919
sS'cpp_type'
p15920
S'VariableName'
p15921
sS'default'
p15922
g3
sS'name'
p15923
S'variable'
p15924
sS'required'
p15925
I01
sS'group_name'
p15926
Nsa(dp15927
S'description'
p15928
S'Specifies offset of hexagon grid in x-direction\n'
p15929
sS'cpp_type'
p15930
S'double'
p15931
sS'default'
p15932
S'0.5'
p15933
sS'name'
p15934
S'x_offset'
p15935
sS'required'
p15936
I00
sS'group_name'
p15937
NsasS'name'
p15938
S'/ICs/HexPolycrystalIC'
p15939
sa(dp15940
S'description'
p15941
g3
sS'type'
p15942
NsS'subblocks'
p15943
NsS'parameters'
p15944
(lp15945
(dp15946
S'description'
p15947
S'in 3D, whether the objects are spheres or columns\n'
p15948
sS'cpp_type'
p15949
S'bool'
p15950
sS'default'
p15951
S'1'
p15952
sS'name'
p15953
S'3D_spheres'
p15954
sS'required'
p15955
I00
sS'group_name'
p15956
Nsa(dp15957
S'description'
p15958
S'length of simulation domain in x-direction\n'
p15959
sS'cpp_type'
p15960
S'double'
p15961
sS'default'
p15962
g3
sS'name'
p15963
S'Lx'
p15964
sS'required'
p15965
I01
sS'group_name'
p15966
Nsa(dp15967
S'description'
p15968
S'length of simulation domain in y-direction\n'
p15969
sS'cpp_type'
p15970
S'double'
p15971
sS'default'
p15972
g3
sS'name'
p15973
S'Ly'
p15974
sS'required'
p15975
I01
sS'group_name'
p15976
Nsa(dp15977
S'description'
p15978
S'length of simulation domain in z-direction\n'
p15979
sS'cpp_type'
p15980
S'double'
p15981
sS'default'
p15982
S'0'
p15983
sS'name'
p15984
S'Lz'
p15985
sS'required'
p15986
I00
sS'group_name'
p15987
Nsa(dp15988
S'description'
p15989
S'Variation from central lattice position\n'
p15990
sS'cpp_type'
p15991
S'double'
p15992
sS'default'
p15993
S'0'
p15994
sS'name'
p15995
S'Rnd_variation'
p15996
sS'required'
p15997
I00
sS'group_name'
p15998
Nsa(dp15999
S'description'
p16000
S'The list of block ids (SubdomainID) that this object will be applied\n'
p16001
sS'cpp_type'
p16002
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p16003
sS'default'
p16004
g3
sS'name'
p16005
S'block'
p16006
sS'required'
p16007
I00
sS'group_name'
p16008
Nsa(dp16009
S'description'
p16010
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16011
sS'cpp_type'
p16012
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16013
sS'default'
p16014
g3
sS'name'
p16015
S'boundary'
p16016
sS'required'
p16017
I00
sS'group_name'
p16018
Nsa(dp16019
S'description'
p16020
S'minimum spacing of bubbles, measured from center to center\n'
p16021
sS'cpp_type'
p16022
S'double'
p16023
sS'default'
p16024
S'0'
p16025
sS'name'
p16026
S'bubspac'
p16027
sS'required'
p16028
I01
sS'group_name'
p16029
Nsa(dp16030
S'description'
p16031
S'Vector containing the number of bubbles along each side\n'
p16032
sS'cpp_type'
p16033
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p16034
sS'default'
p16035
g3
sS'name'
p16036
S'circles_per_side'
p16037
sS'required'
p16038
I01
sS'group_name'
p16039
Nsa(dp16040
S'description'
p16041
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p16042
sS'cpp_type'
p16043
S'double'
p16044
sS'default'
p16045
S'0'
p16046
sS'name'
p16047
S'int_width'
p16048
sS'required'
p16049
I00
sS'group_name'
p16050
Nsa(dp16051
S'description'
p16052
S'The variable value inside the circle\n'
p16053
sS'cpp_type'
p16054
S'double'
p16055
sS'default'
p16056
g3
sS'name'
p16057
S'invalue'
p16058
sS'required'
p16059
I01
sS'group_name'
p16060
Nsa(dp16061
S'description'
p16062
S'The number of bubbles to be placed on GB\n'
p16063
sS'cpp_type'
p16064
S'unsigned int'
p16065
sS'default'
p16066
S'0'
p16067
sS'name'
p16068
S'numbub'
p16069
sS'required'
p16070
I01
sS'group_name'
p16071
Nsa(dp16072
S'description'
p16073
S'The number of tries\n'
p16074
sS'cpp_type'
p16075
S'unsigned int'
p16076
sS'default'
p16077
S'1000'
p16078
sS'name'
p16079
S'numtries'
p16080
sS'required'
p16081
I00
sS'group_name'
p16082
Nsa(dp16083
S'description'
p16084
S'The variable value outside the circle\n'
p16085
sS'cpp_type'
p16086
S'double'
p16087
sS'default'
p16088
g3
sS'name'
p16089
S'outvalue'
p16090
sS'required'
p16091
I01
sS'group_name'
p16092
Nsa(dp16093
S'description'
p16094
S'The radius of a circle\n'
p16095
sS'cpp_type'
p16096
S'double'
p16097
sS'default'
p16098
g3
sS'name'
p16099
S'radius'
p16100
sS'required'
p16101
I01
sS'group_name'
p16102
Nsa(dp16103
S'description'
p16104
S'Plus or minus Percent of random variation in the bubble radius\n'
p16105
sS'cpp_type'
p16106
S'double'
p16107
sS'default'
p16108
S'0'
p16109
sS'name'
p16110
S'radius_variation'
p16111
sS'required'
p16112
I00
sS'group_name'
p16113
Nsa(dp16114
S'description'
p16115
S'random seed\n'
p16116
sS'cpp_type'
p16117
S'unsigned int'
p16118
sS'default'
p16119
S'2000'
p16120
sS'name'
p16121
S'rand_seed'
p16122
sS'required'
p16123
I00
sS'group_name'
p16124
Nsa(dp16125
S'description'
p16126
g3
sS'cpp_type'
p16127
S'std::string'
p16128
sS'default'
p16129
S'LatticeSmoothCircleIC'
p16130
sS'name'
p16131
S'type'
p16132
sS'required'
p16133
I00
sS'group_name'
p16134
Nsa(dp16135
S'description'
p16136
S'The variable this initial condition is supposed to provide values for.\n'
p16137
sS'cpp_type'
p16138
S'VariableName'
p16139
sS'default'
p16140
g3
sS'name'
p16141
S'variable'
p16142
sS'required'
p16143
I01
sS'group_name'
p16144
Nsa(dp16145
S'description'
p16146
S'The x coordinate of the circle center\n'
p16147
sS'cpp_type'
p16148
S'double'
p16149
sS'default'
p16150
S'0'
p16151
sS'name'
p16152
S'x1'
p16153
sS'required'
p16154
I01
sS'group_name'
p16155
Nsa(dp16156
S'description'
p16157
S'The y coordinate of the circle center\n'
p16158
sS'cpp_type'
p16159
S'double'
p16160
sS'default'
p16161
S'0'
p16162
sS'name'
p16163
S'y1'
p16164
sS'required'
p16165
I01
sS'group_name'
p16166
Nsa(dp16167
S'description'
p16168
S'The z coordinate of the circle center\n'
p16169
sS'cpp_type'
p16170
S'double'
p16171
sS'default'
p16172
S'0'
p16173
sS'name'
p16174
S'z1'
p16175
sS'required'
p16176
I00
sS'group_name'
p16177
NsasS'name'
p16178
S'/ICs/LatticeSmoothCircleIC'
p16179
sa(dp16180
S'description'
p16181
g3
sS'type'
p16182
NsS'subblocks'
p16183
NsS'parameters'
p16184
(lp16185
(dp16186
S'description'
p16187
S'in 3D, whether the objects are spheres or columns\n'
p16188
sS'cpp_type'
p16189
S'bool'
p16190
sS'default'
p16191
S'1'
p16192
sS'name'
p16193
S'3D_spheres'
p16194
sS'required'
p16195
I00
sS'group_name'
p16196
Nsa(dp16197
S'description'
p16198
S'length of simulation domain in x-direction\n'
p16199
sS'cpp_type'
p16200
S'double'
p16201
sS'default'
p16202
g3
sS'name'
p16203
S'Lx'
p16204
sS'required'
p16205
I01
sS'group_name'
p16206
Nsa(dp16207
S'description'
p16208
S'length of simulation domain in y-direction\n'
p16209
sS'cpp_type'
p16210
S'double'
p16211
sS'default'
p16212
g3
sS'name'
p16213
S'Ly'
p16214
sS'required'
p16215
I01
sS'group_name'
p16216
Nsa(dp16217
S'description'
p16218
S'length of simulation domain in z-direction\n'
p16219
sS'cpp_type'
p16220
S'double'
p16221
sS'default'
p16222
S'0'
p16223
sS'name'
p16224
S'Lz'
p16225
sS'required'
p16226
I00
sS'group_name'
p16227
Nsa(dp16228
S'description'
p16229
S'The list of block ids (SubdomainID) that this object will be applied\n'
p16230
sS'cpp_type'
p16231
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p16232
sS'default'
p16233
g3
sS'name'
p16234
S'block'
p16235
sS'required'
p16236
I00
sS'group_name'
p16237
Nsa(dp16238
S'description'
p16239
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16240
sS'cpp_type'
p16241
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16242
sS'default'
p16243
g3
sS'name'
p16244
S'boundary'
p16245
sS'required'
p16246
I00
sS'group_name'
p16247
Nsa(dp16248
S'description'
p16249
S'minimum spacing of bubbles, measured from center to center\n'
p16250
sS'cpp_type'
p16251
S'double'
p16252
sS'default'
p16253
g3
sS'name'
p16254
S'bubspac'
p16255
sS'required'
p16256
I01
sS'group_name'
p16257
Nsa(dp16258
S'description'
p16259
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p16260
sS'cpp_type'
p16261
S'double'
p16262
sS'default'
p16263
S'0'
p16264
sS'name'
p16265
S'int_width'
p16266
sS'required'
p16267
I00
sS'group_name'
p16268
Nsa(dp16269
S'description'
p16270
S'The variable value inside the circle\n'
p16271
sS'cpp_type'
p16272
S'double'
p16273
sS'default'
p16274
g3
sS'name'
p16275
S'invalue'
p16276
sS'required'
p16277
I01
sS'group_name'
p16278
Nsa(dp16279
S'description'
p16280
S'The number of bubbles to be placed on GB\n'
p16281
sS'cpp_type'
p16282
S'unsigned int'
p16283
sS'default'
p16284
g3
sS'name'
p16285
S'numbub'
p16286
sS'required'
p16287
I01
sS'group_name'
p16288
Nsa(dp16289
S'description'
p16290
S'The number of tries\n'
p16291
sS'cpp_type'
p16292
S'unsigned int'
p16293
sS'default'
p16294
S'1000'
p16295
sS'name'
p16296
S'numtries'
p16297
sS'required'
p16298
I00
sS'group_name'
p16299
Nsa(dp16300
S'description'
p16301
S'The variable value outside the circle\n'
p16302
sS'cpp_type'
p16303
S'double'
p16304
sS'default'
p16305
g3
sS'name'
p16306
S'outvalue'
p16307
sS'required'
p16308
I01
sS'group_name'
p16309
Nsa(dp16310
S'description'
p16311
S'The radius of a circle\n'
p16312
sS'cpp_type'
p16313
S'double'
p16314
sS'default'
p16315
g3
sS'name'
p16316
S'radius'
p16317
sS'required'
p16318
I01
sS'group_name'
p16319
Nsa(dp16320
S'description'
p16321
S'Plus or minus Percent of random variation in the bubble radius\n'
p16322
sS'cpp_type'
p16323
S'double'
p16324
sS'default'
p16325
S'0'
p16326
sS'name'
p16327
S'radius_variation'
p16328
sS'required'
p16329
I00
sS'group_name'
p16330
Nsa(dp16331
S'description'
p16332
S'random seed\n'
p16333
sS'cpp_type'
p16334
S'unsigned int'
p16335
sS'default'
p16336
S'2000'
p16337
sS'name'
p16338
S'rand_seed'
p16339
sS'required'
p16340
I00
sS'group_name'
p16341
Nsa(dp16342
S'description'
p16343
g3
sS'cpp_type'
p16344
S'std::string'
p16345
sS'default'
p16346
S'MultiSmoothCircleIC'
p16347
sS'name'
p16348
S'type'
p16349
sS'required'
p16350
I00
sS'group_name'
p16351
Nsa(dp16352
S'description'
p16353
S'The variable this initial condition is supposed to provide values for.\n'
p16354
sS'cpp_type'
p16355
S'VariableName'
p16356
sS'default'
p16357
g3
sS'name'
p16358
S'variable'
p16359
sS'required'
p16360
I01
sS'group_name'
p16361
Nsa(dp16362
S'description'
p16363
S'The x coordinate of the circle center\n'
p16364
sS'cpp_type'
p16365
S'double'
p16366
sS'default'
p16367
S'0'
p16368
sS'name'
p16369
S'x1'
p16370
sS'required'
p16371
I01
sS'group_name'
p16372
Nsa(dp16373
S'description'
p16374
S'The y coordinate of the circle center\n'
p16375
sS'cpp_type'
p16376
S'double'
p16377
sS'default'
p16378
S'0'
p16379
sS'name'
p16380
S'y1'
p16381
sS'required'
p16382
I01
sS'group_name'
p16383
Nsa(dp16384
S'description'
p16385
S'The z coordinate of the circle center\n'
p16386
sS'cpp_type'
p16387
S'double'
p16388
sS'default'
p16389
S'0'
p16390
sS'name'
p16391
S'z1'
p16392
sS'required'
p16393
I00
sS'group_name'
p16394
NsasS'name'
p16395
S'/ICs/MultiSmoothCircleIC'
p16396
sa(dp16397
S'description'
p16398
g3
sS'type'
p16399
NsS'subblocks'
p16400
(lp16401
(dp16402
S'description'
p16403
g3
sS'type'
p16404
NsS'subblocks'
p16405
NsS'parameters'
p16406
(lp16407
(dp16408
S'description'
p16409
S'Number of grains, should be 2\n'
p16410
sS'cpp_type'
p16411
S'unsigned int'
p16412
sS'default'
p16413
g3
sS'name'
p16414
S'crys_num'
p16415
sS'required'
p16416
I01
sS'group_name'
p16417
Nsa(dp16418
S'description'
p16419
S'specifies the base name of the variables\n'
p16420
sS'cpp_type'
p16421
S'std::string'
p16422
sS'default'
p16423
g3
sS'name'
p16424
S'var_name_base'
p16425
sS'required'
p16426
I01
sS'group_name'
p16427
Nsa(dp16428
S'description'
p16429
S'The x coordinate of the lower left-hand corner of the box\n'
p16430
sS'cpp_type'
p16431
S'double'
p16432
sS'default'
p16433
g3
sS'name'
p16434
S'x1'
p16435
sS'required'
p16436
I01
sS'group_name'
p16437
Nsa(dp16438
S'description'
p16439
S'The x coordinate of the upper right-hand corner of the box\n'
p16440
sS'cpp_type'
p16441
S'double'
p16442
sS'default'
p16443
g3
sS'name'
p16444
S'x2'
p16445
sS'required'
p16446
I01
sS'group_name'
p16447
Nsa(dp16448
S'description'
p16449
S'The y coordinate of the lower left-hand corner of the box\n'
p16450
sS'cpp_type'
p16451
S'double'
p16452
sS'default'
p16453
g3
sS'name'
p16454
S'y1'
p16455
sS'required'
p16456
I01
sS'group_name'
p16457
Nsa(dp16458
S'description'
p16459
S'The y coordinate of the upper right-hand corner of the box\n'
p16460
sS'cpp_type'
p16461
S'double'
p16462
sS'default'
p16463
g3
sS'name'
p16464
S'y2'
p16465
sS'required'
p16466
I01
sS'group_name'
p16467
Nsa(dp16468
S'description'
p16469
S'The z coordinate of the lower left-hand corner of the box\n'
p16470
sS'cpp_type'
p16471
S'double'
p16472
sS'default'
p16473
S'0'
p16474
sS'name'
p16475
S'z1'
p16476
sS'required'
p16477
I00
sS'group_name'
p16478
Nsa(dp16479
S'description'
p16480
S'The z coordinate of the upper right-hand corner of the box\n'
p16481
sS'cpp_type'
p16482
S'double'
p16483
sS'default'
p16484
S'0'
p16485
sS'name'
p16486
S'z2'
p16487
sS'required'
p16488
I00
sS'group_name'
p16489
NsasS'name'
p16490
S'/ICs/PolycrystalICs/BicrystalBoundingBoxIC'
p16491
sa(dp16492
S'description'
p16493
g3
sS'type'
p16494
NsS'subblocks'
p16495
NsS'parameters'
p16496
(lp16497
(dp16498
S'description'
p16499
S'in 3D, whether the smaller grain is a spheres or columnar grain\n'
p16500
sS'cpp_type'
p16501
S'bool'
p16502
sS'default'
p16503
S'1'
p16504
sS'name'
p16505
S'3D_sphere'
p16506
sS'required'
p16507
I00
sS'group_name'
p16508
Nsa(dp16509
S'description'
p16510
S'Number of grains, should be 2\n'
p16511
sS'cpp_type'
p16512
S'unsigned int'
p16513
sS'default'
p16514
g3
sS'name'
p16515
S'crys_num'
p16516
sS'required'
p16517
I01
sS'group_name'
p16518
Nsa(dp16519
S'description'
p16520
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p16521
sS'cpp_type'
p16522
S'double'
p16523
sS'default'
p16524
S'0'
p16525
sS'name'
p16526
S'int_width'
p16527
sS'required'
p16528
I00
sS'group_name'
p16529
Nsa(dp16530
S'description'
p16531
S'Void radius\n'
p16532
sS'cpp_type'
p16533
S'double'
p16534
sS'default'
p16535
g3
sS'name'
p16536
S'radius'
p16537
sS'required'
p16538
I01
sS'group_name'
p16539
Nsa(dp16540
S'description'
p16541
S'specifies the base name of the variables\n'
p16542
sS'cpp_type'
p16543
S'std::string'
p16544
sS'default'
p16545
g3
sS'name'
p16546
S'var_name_base'
p16547
sS'required'
p16548
I01
sS'group_name'
p16549
Nsa(dp16550
S'description'
p16551
S'The x coordinate of the circle grain center\n'
p16552
sS'cpp_type'
p16553
S'double'
p16554
sS'default'
p16555
g3
sS'name'
p16556
S'x'
p16557
sS'required'
p16558
I01
sS'group_name'
p16559
Nsa(dp16560
S'description'
p16561
S'The y coordinate of the circle grain center\n'
p16562
sS'cpp_type'
p16563
S'double'
p16564
sS'default'
p16565
g3
sS'name'
p16566
S'y'
p16567
sS'required'
p16568
I01
sS'group_name'
p16569
Nsa(dp16570
S'description'
p16571
S'The z coordinate of the circle grain center\n'
p16572
sS'cpp_type'
p16573
S'double'
p16574
sS'default'
p16575
S'0'
p16576
sS'name'
p16577
S'z'
p16578
sS'required'
p16579
I00
sS'group_name'
p16580
NsasS'name'
p16581
S'/ICs/PolycrystalICs/BicrystalCircleGrainIC'
p16582
sa(dp16583
S'description'
p16584
g3
sS'type'
p16585
NsS'subblocks'
p16586
NsS'parameters'
p16587
(lp16588
(dp16589
S'description'
p16590
S'Number of order parameters\n'
p16591
sS'cpp_type'
p16592
S'unsigned int'
p16593
sS'default'
p16594
g3
sS'name'
p16595
S'crys_num'
p16596
sS'required'
p16597
I01
sS'group_name'
p16598
Nsa(dp16599
S'description'
p16600
S'Number of grains, must be a square (4, 9, 16, etc)\n'
p16601
sS'cpp_type'
p16602
S'unsigned int'
p16603
sS'default'
p16604
g3
sS'name'
p16605
S'grain_num'
p16606
sS'required'
p16607
I01
sS'group_name'
p16608
Nsa(dp16609
S'description'
p16610
S'The percent to randomly perturbate centers of grains relative to the size of the grain\n'
p16611
sS'cpp_type'
p16612
S'double'
p16613
sS'default'
p16614
S'0'
p16615
sS'name'
p16616
S'perturbation_percent'
p16617
sS'required'
p16618
I00
sS'group_name'
p16619
Nsa(dp16620
S'description'
p16621
S'The random seed\n'
p16622
sS'cpp_type'
p16623
S'unsigned int'
p16624
sS'default'
p16625
S'12444'
p16626
sS'name'
p16627
S'rand_seed'
p16628
sS'required'
p16629
I00
sS'group_name'
p16630
Nsa(dp16631
S'description'
p16632
S'specifies the base name of the variables\n'
p16633
sS'cpp_type'
p16634
S'std::string'
p16635
sS'default'
p16636
g3
sS'name'
p16637
S'var_name_base'
p16638
sS'required'
p16639
I01
sS'group_name'
p16640
Nsa(dp16641
S'description'
p16642
S'Specifies offset of hexagon grid in x-direction\n'
p16643
sS'cpp_type'
p16644
S'double'
p16645
sS'default'
p16646
S'0.5'
p16647
sS'name'
p16648
S'x_offset'
p16649
sS'required'
p16650
I00
sS'group_name'
p16651
NsasS'name'
p16652
S'/ICs/PolycrystalICs/PolycrystalHexGrainIC'
p16653
sa(dp16654
S'description'
p16655
g3
sS'type'
p16656
NsS'subblocks'
p16657
NsS'parameters'
p16658
(lp16659
(dp16660
S'description'
p16661
S'number of order parameters to create\n'
p16662
sS'cpp_type'
p16663
S'unsigned int'
p16664
sS'default'
p16665
g3
sS'name'
p16666
S'crys_num'
p16667
sS'required'
p16668
I01
sS'group_name'
p16669
Nsa(dp16670
S'name'
p16671
S'random_type'
p16672
sS'cpp_type'
p16673
S'MooseEnum'
p16674
sS'default'
p16675
g3
sS'description'
p16676
S'The type of random polycrystal initial condition. Whether one order parameter is chosen to be 1 at each node or if each order parameter continuously varies from 0 to 1\n'
p16677
sS'required'
p16678
I00
sS'options'
p16679
S'continuous discrete'
p16680
sS'group_name'
p16681
Nsa(dp16682
S'description'
p16683
S'specifies the base name of the variables\n'
p16684
sS'cpp_type'
p16685
S'std::string'
p16686
sS'default'
p16687
g3
sS'name'
p16688
S'var_name_base'
p16689
sS'required'
p16690
I01
sS'group_name'
p16691
NsasS'name'
p16692
S'/ICs/PolycrystalICs/PolycrystalRandomIC'
p16693
sa(dp16694
S'description'
p16695
g3
sS'type'
p16696
NsS'subblocks'
p16697
NsS'parameters'
p16698
(lp16699
(dp16700
S'description'
p16701
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p16702
sS'cpp_type'
p16703
S'bool'
p16704
sS'default'
p16705
S'0'
p16706
sS'name'
p16707
S'cody_test'
p16708
sS'required'
p16709
I00
sS'group_name'
p16710
Nsa(dp16711
S'description'
p16712
S'3D microstructure will be columnar in the z-direction?\n'
p16713
sS'cpp_type'
p16714
S'bool'
p16715
sS'default'
p16716
S'0'
p16717
sS'name'
p16718
S'columnar_3D'
p16719
sS'required'
p16720
I00
sS'group_name'
p16721
Nsa(dp16722
S'description'
p16723
S'number of order parameters to create\n'
p16724
sS'cpp_type'
p16725
S'unsigned int'
p16726
sS'default'
p16727
g3
sS'name'
p16728
S'crys_num'
p16729
sS'required'
p16730
I01
sS'group_name'
p16731
Nsa(dp16732
S'description'
p16733
S'number of grains to create, if it is going to greater than crys_num\n'
p16734
sS'cpp_type'
p16735
S'unsigned int'
p16736
sS'default'
p16737
g3
sS'name'
p16738
S'grain_num'
p16739
sS'required'
p16740
I01
sS'group_name'
p16741
Nsa(dp16742
S'description'
p16743
S'The random seed\n'
p16744
sS'cpp_type'
p16745
S'unsigned int'
p16746
sS'default'
p16747
S'12444'
p16748
sS'name'
p16749
S'rand_seed'
p16750
sS'required'
p16751
I00
sS'group_name'
p16752
Nsa(dp16753
S'description'
p16754
S'specifies the base name of the variables\n'
p16755
sS'cpp_type'
p16756
S'std::string'
p16757
sS'default'
p16758
g3
sS'name'
p16759
S'var_name_base'
p16760
sS'required'
p16761
I01
sS'group_name'
p16762
NsasS'name'
p16763
S'/ICs/PolycrystalICs/PolycrystalVoronoiIC'
p16764
sa(dp16765
S'description'
p16766
g3
sS'type'
p16767
NsS'subblocks'
p16768
NsS'parameters'
p16769
(lp16770
(dp16771
S'description'
p16772
S'number of order parameters to create\n'
p16773
sS'cpp_type'
p16774
S'unsigned int'
p16775
sS'default'
p16776
g3
sS'name'
p16777
S'crys_num'
p16778
sS'required'
p16779
I01
sS'group_name'
p16780
Nsa(dp16781
S'description'
p16782
S'specifies the base name of the variables\n'
p16783
sS'cpp_type'
p16784
S'std::string'
p16785
sS'default'
p16786
g3
sS'name'
p16787
S'var_name_base'
p16788
sS'required'
p16789
I01
sS'group_name'
p16790
NsasS'name'
p16791
S'/ICs/PolycrystalICs/Tricrystal2CircleGrainsIC'
p16792
sasS'parameters'
p16793
NsS'name'
p16794
S'/ICs/PolycrystalICs'
p16795
sa(dp16796
S'description'
p16797
g3
sS'type'
p16798
NsS'subblocks'
p16799
NsS'parameters'
p16800
(lp16801
(dp16802
S'description'
p16803
S'The list of block ids (SubdomainID) that this object will be applied\n'
p16804
sS'cpp_type'
p16805
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p16806
sS'default'
p16807
g3
sS'name'
p16808
S'block'
p16809
sS'required'
p16810
I00
sS'group_name'
p16811
Nsa(dp16812
S'description'
p16813
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16814
sS'cpp_type'
p16815
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16816
sS'default'
p16817
g3
sS'name'
p16818
S'boundary'
p16819
sS'required'
p16820
I00
sS'group_name'
p16821
Nsa(dp16822
S'description'
p16823
S'The index for the current order parameter\n'
p16824
sS'cpp_type'
p16825
S'unsigned int'
p16826
sS'default'
p16827
g3
sS'name'
p16828
S'crys_index'
p16829
sS'required'
p16830
I01
sS'group_name'
p16831
Nsa(dp16832
S'description'
p16833
S'Number of order parameters\n'
p16834
sS'cpp_type'
p16835
S'unsigned int'
p16836
sS'default'
p16837
g3
sS'name'
p16838
S'crys_num'
p16839
sS'required'
p16840
I01
sS'group_name'
p16841
Nsa(dp16842
S'description'
p16843
S'Type of random grain structure\n'
p16844
sS'cpp_type'
p16845
S'unsigned int'
p16846
sS'default'
p16847
g3
sS'name'
p16848
S'typ'
p16849
sS'required'
p16850
I01
sS'group_name'
p16851
Nsa(dp16852
S'description'
p16853
g3
sS'cpp_type'
p16854
S'std::string'
p16855
sS'default'
p16856
S'PolycrystalRandomIC'
p16857
sS'name'
p16858
S'type'
p16859
sS'required'
p16860
I00
sS'group_name'
p16861
Nsa(dp16862
S'description'
p16863
S'The variable this initial condition is supposed to provide values for.\n'
p16864
sS'cpp_type'
p16865
S'VariableName'
p16866
sS'default'
p16867
g3
sS'name'
p16868
S'variable'
p16869
sS'required'
p16870
I01
sS'group_name'
p16871
NsasS'name'
p16872
S'/ICs/PolycrystalRandomIC'
p16873
sa(dp16874
S'description'
p16875
g3
sS'type'
p16876
NsS'subblocks'
p16877
NsS'parameters'
p16878
(lp16879
(dp16880
S'description'
p16881
S'The list of block ids (SubdomainID) that this object will be applied\n'
p16882
sS'cpp_type'
p16883
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p16884
sS'default'
p16885
g3
sS'name'
p16886
S'block'
p16887
sS'required'
p16888
I00
sS'group_name'
p16889
Nsa(dp16890
S'description'
p16891
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16892
sS'cpp_type'
p16893
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16894
sS'default'
p16895
g3
sS'name'
p16896
S'boundary'
p16897
sS'required'
p16898
I00
sS'group_name'
p16899
Nsa(dp16900
S'description'
p16901
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p16902
sS'cpp_type'
p16903
S'bool'
p16904
sS'default'
p16905
S'0'
p16906
sS'name'
p16907
S'cody_test'
p16908
sS'required'
p16909
I00
sS'group_name'
p16910
Nsa(dp16911
S'description'
p16912
S'3D microstructure will be columnar in the z-direction?\n'
p16913
sS'cpp_type'
p16914
S'bool'
p16915
sS'default'
p16916
S'0'
p16917
sS'name'
p16918
S'columnar_3D'
p16919
sS'required'
p16920
I00
sS'group_name'
p16921
Nsa(dp16922
S'description'
p16923
S'The index for the current order parameter\n'
p16924
sS'cpp_type'
p16925
S'unsigned int'
p16926
sS'default'
p16927
g3
sS'name'
p16928
S'crys_index'
p16929
sS'required'
p16930
I01
sS'group_name'
p16931
Nsa(dp16932
S'description'
p16933
S'Number of order parameters\n'
p16934
sS'cpp_type'
p16935
S'unsigned int'
p16936
sS'default'
p16937
g3
sS'name'
p16938
S'crys_num'
p16939
sS'required'
p16940
I01
sS'group_name'
p16941
Nsa(dp16942
S'description'
p16943
S'Number of grains being represented by the order parameters\n'
p16944
sS'cpp_type'
p16945
S'unsigned int'
p16946
sS'default'
p16947
g3
sS'name'
p16948
S'grain_num'
p16949
sS'required'
p16950
I01
sS'group_name'
p16951
Nsa(dp16952
S'description'
p16953
S'The random seed\n'
p16954
sS'cpp_type'
p16955
S'unsigned int'
p16956
sS'default'
p16957
S'12444'
p16958
sS'name'
p16959
S'rand_seed'
p16960
sS'required'
p16961
I00
sS'group_name'
p16962
Nsa(dp16963
S'description'
p16964
g3
sS'cpp_type'
p16965
S'std::string'
p16966
sS'default'
p16967
S'PolycrystalReducedIC'
p16968
sS'name'
p16969
S'type'
p16970
sS'required'
p16971
I00
sS'group_name'
p16972
Nsa(dp16973
S'description'
p16974
S'The variable this initial condition is supposed to provide values for.\n'
p16975
sS'cpp_type'
p16976
S'VariableName'
p16977
sS'default'
p16978
g3
sS'name'
p16979
S'variable'
p16980
sS'required'
p16981
I01
sS'group_name'
p16982
NsasS'name'
p16983
S'/ICs/PolycrystalReducedIC'
p16984
sa(dp16985
S'description'
p16986
g3
sS'type'
p16987
NsS'subblocks'
p16988
NsS'parameters'
p16989
(lp16990
(dp16991
S'description'
p16992
S'The list of block ids (SubdomainID) that this object will be applied\n'
p16993
sS'cpp_type'
p16994
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p16995
sS'default'
p16996
g3
sS'name'
p16997
S'block'
p16998
sS'required'
p16999
I00
sS'group_name'
p17000
Nsa(dp17001
S'description'
p17002
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17003
sS'cpp_type'
p17004
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17005
sS'default'
p17006
g3
sS'name'
p17007
S'boundary'
p17008
sS'required'
p17009
I00
sS'group_name'
p17010
Nsa(dp17011
S'description'
p17012
S'Upper bound of the randomly generated values\n'
p17013
sS'cpp_type'
p17014
S'double'
p17015
sS'default'
p17016
S'1'
p17017
sS'name'
p17018
S'max'
p17019
sS'required'
p17020
I00
sS'group_name'
p17021
Nsa(dp17022
S'description'
p17023
S'Lower bound of the randomly generated values\n'
p17024
sS'cpp_type'
p17025
S'double'
p17026
sS'default'
p17027
S'0'
p17028
sS'name'
p17029
S'min'
p17030
sS'required'
p17031
I00
sS'group_name'
p17032
Nsa(dp17033
S'description'
p17034
S'Seed value for the random number generator\n'
p17035
sS'cpp_type'
p17036
S'unsigned int'
p17037
sS'default'
p17038
S'0'
p17039
sS'name'
p17040
S'seed'
p17041
sS'required'
p17042
I00
sS'group_name'
p17043
Nsa(dp17044
S'description'
p17045
g3
sS'cpp_type'
p17046
S'std::string'
p17047
sS'default'
p17048
S'RandomIC'
p17049
sS'name'
p17050
S'type'
p17051
sS'required'
p17052
I00
sS'group_name'
p17053
Nsa(dp17054
S'description'
p17055
S'The variable this initial condition is supposed to provide values for.\n'
p17056
sS'cpp_type'
p17057
S'VariableName'
p17058
sS'default'
p17059
g3
sS'name'
p17060
S'variable'
p17061
sS'required'
p17062
I01
sS'group_name'
p17063
NsasS'name'
p17064
S'/ICs/RandomIC'
p17065
sa(dp17066
S'description'
p17067
g3
sS'type'
p17068
NsS'subblocks'
p17069
NsS'parameters'
p17070
(lp17071
(dp17072
S'description'
p17073
S'The list of block ids (SubdomainID) that this object will be applied\n'
p17074
sS'cpp_type'
p17075
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p17076
sS'default'
p17077
g3
sS'name'
p17078
S'block'
p17079
sS'required'
p17080
I00
sS'group_name'
p17081
Nsa(dp17082
S'description'
p17083
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17084
sS'cpp_type'
p17085
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17086
sS'default'
p17087
g3
sS'name'
p17088
S'boundary'
p17089
sS'required'
p17090
I00
sS'group_name'
p17091
Nsa(dp17092
S'description'
p17093
S'The min value of the variable invalue the box\n'
p17094
sS'cpp_type'
p17095
S'double'
p17096
sS'default'
p17097
S'0'
p17098
sS'name'
p17099
S'mn_invalue'
p17100
sS'required'
p17101
I00
sS'group_name'
p17102
Nsa(dp17103
S'description'
p17104
S'The min value of the variable outvalue the box\n'
p17105
sS'cpp_type'
p17106
S'double'
p17107
sS'default'
p17108
S'0'
p17109
sS'name'
p17110
S'mn_outvalue'
p17111
sS'required'
p17112
I00
sS'group_name'
p17113
Nsa(dp17114
S'description'
p17115
S'The max value of the variable invalue the box\n'
p17116
sS'cpp_type'
p17117
S'double'
p17118
sS'default'
p17119
g3
sS'name'
p17120
S'mx_invalue'
p17121
sS'required'
p17122
I01
sS'group_name'
p17123
Nsa(dp17124
S'description'
p17125
S'The max value of the variable outvalue the box\n'
p17126
sS'cpp_type'
p17127
S'double'
p17128
sS'default'
p17129
g3
sS'name'
p17130
S'mx_outvalue'
p17131
sS'required'
p17132
I01
sS'group_name'
p17133
Nsa(dp17134
S'description'
p17135
g3
sS'cpp_type'
p17136
S'std::string'
p17137
sS'default'
p17138
S'RndBoundingBoxIC'
p17139
sS'name'
p17140
S'type'
p17141
sS'required'
p17142
I00
sS'group_name'
p17143
Nsa(dp17144
S'description'
p17145
S'The variable this initial condition is supposed to provide values for.\n'
p17146
sS'cpp_type'
p17147
S'VariableName'
p17148
sS'default'
p17149
g3
sS'name'
p17150
S'variable'
p17151
sS'required'
p17152
I01
sS'group_name'
p17153
Nsa(dp17154
S'description'
p17155
S'The x coordinate of the lower left-hand corner of the box\n'
p17156
sS'cpp_type'
p17157
S'double'
p17158
sS'default'
p17159
g3
sS'name'
p17160
S'x1'
p17161
sS'required'
p17162
I01
sS'group_name'
p17163
Nsa(dp17164
S'description'
p17165
S'The x coordinate of the upper right-hand corner of the box\n'
p17166
sS'cpp_type'
p17167
S'double'
p17168
sS'default'
p17169
g3
sS'name'
p17170
S'x2'
p17171
sS'required'
p17172
I01
sS'group_name'
p17173
Nsa(dp17174
S'description'
p17175
S'The y coordinate of the lower left-hand corner of the box\n'
p17176
sS'cpp_type'
p17177
S'double'
p17178
sS'default'
p17179
g3
sS'name'
p17180
S'y1'
p17181
sS'required'
p17182
I01
sS'group_name'
p17183
Nsa(dp17184
S'description'
p17185
S'The y coordinate of the upper right-hand corner of the box\n'
p17186
sS'cpp_type'
p17187
S'double'
p17188
sS'default'
p17189
g3
sS'name'
p17190
S'y2'
p17191
sS'required'
p17192
I01
sS'group_name'
p17193
Nsa(dp17194
S'description'
p17195
S'The z coordinate of the lower left-hand corner of the box\n'
p17196
sS'cpp_type'
p17197
S'double'
p17198
sS'default'
p17199
S'0'
p17200
sS'name'
p17201
S'z1'
p17202
sS'required'
p17203
I00
sS'group_name'
p17204
Nsa(dp17205
S'description'
p17206
S'The z coordinate of the upper right-hand corner of the box\n'
p17207
sS'cpp_type'
p17208
S'double'
p17209
sS'default'
p17210
S'0'
p17211
sS'name'
p17212
S'z2'
p17213
sS'required'
p17214
I00
sS'group_name'
p17215
NsasS'name'
p17216
S'/ICs/RndBoundingBoxIC'
p17217
sa(dp17218
S'description'
p17219
g3
sS'type'
p17220
NsS'subblocks'
p17221
NsS'parameters'
p17222
(lp17223
(dp17224
S'description'
p17225
S'The list of block ids (SubdomainID) that this object will be applied\n'
p17226
sS'cpp_type'
p17227
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p17228
sS'default'
p17229
g3
sS'name'
p17230
S'block'
p17231
sS'required'
p17232
I00
sS'group_name'
p17233
Nsa(dp17234
S'description'
p17235
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17236
sS'cpp_type'
p17237
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17238
sS'default'
p17239
g3
sS'name'
p17240
S'boundary'
p17241
sS'required'
p17242
I00
sS'group_name'
p17243
Nsa(dp17244
S'description'
p17245
S'The min variable value inside the circle\n'
p17246
sS'cpp_type'
p17247
S'double'
p17248
sS'default'
p17249
g3
sS'name'
p17250
S'mn_invalue'
p17251
sS'required'
p17252
I01
sS'group_name'
p17253
Nsa(dp17254
S'description'
p17255
S'The min variable value outside the circle\n'
p17256
sS'cpp_type'
p17257
S'double'
p17258
sS'default'
p17259
g3
sS'name'
p17260
S'mn_outvalue'
p17261
sS'required'
p17262
I01
sS'group_name'
p17263
Nsa(dp17264
S'description'
p17265
S'The max variable value inside the circle\n'
p17266
sS'cpp_type'
p17267
S'double'
p17268
sS'default'
p17269
g3
sS'name'
p17270
S'mx_invalue'
p17271
sS'required'
p17272
I01
sS'group_name'
p17273
Nsa(dp17274
S'description'
p17275
S'The max variable value outside the circle\n'
p17276
sS'cpp_type'
p17277
S'double'
p17278
sS'default'
p17279
g3
sS'name'
p17280
S'mx_outvalue'
p17281
sS'required'
p17282
I01
sS'group_name'
p17283
Nsa(dp17284
S'description'
p17285
S'The radius of a circle\n'
p17286
sS'cpp_type'
p17287
S'double'
p17288
sS'default'
p17289
g3
sS'name'
p17290
S'radius'
p17291
sS'required'
p17292
I01
sS'group_name'
p17293
Nsa(dp17294
S'description'
p17295
S'Seed value for the random number generator\n'
p17296
sS'cpp_type'
p17297
S'unsigned int'
p17298
sS'default'
p17299
S'12345'
p17300
sS'name'
p17301
S'seed'
p17302
sS'required'
p17303
I00
sS'group_name'
p17304
Nsa(dp17305
S'description'
p17306
g3
sS'cpp_type'
p17307
S'std::string'
p17308
sS'default'
p17309
S'RndSmoothCircleIC'
p17310
sS'name'
p17311
S'type'
p17312
sS'required'
p17313
I00
sS'group_name'
p17314
Nsa(dp17315
S'description'
p17316
S'The variable this initial condition is supposed to provide values for.\n'
p17317
sS'cpp_type'
p17318
S'VariableName'
p17319
sS'default'
p17320
g3
sS'name'
p17321
S'variable'
p17322
sS'required'
p17323
I01
sS'group_name'
p17324
Nsa(dp17325
S'description'
p17326
S'The x coordinate of the circle center\n'
p17327
sS'cpp_type'
p17328
S'double'
p17329
sS'default'
p17330
g3
sS'name'
p17331
S'x1'
p17332
sS'required'
p17333
I01
sS'group_name'
p17334
Nsa(dp17335
S'description'
p17336
S'The y coordinate of the circle center\n'
p17337
sS'cpp_type'
p17338
S'double'
p17339
sS'default'
p17340
g3
sS'name'
p17341
S'y1'
p17342
sS'required'
p17343
I01
sS'group_name'
p17344
Nsa(dp17345
S'description'
p17346
S'The z coordinate of the circle center\n'
p17347
sS'cpp_type'
p17348
S'double'
p17349
sS'default'
p17350
S'0'
p17351
sS'name'
p17352
S'z1'
p17353
sS'required'
p17354
I00
sS'group_name'
p17355
NsasS'name'
p17356
S'/ICs/RndSmoothCircleIC'
p17357
sa(dp17358
S'description'
p17359
g3
sS'type'
p17360
NsS'subblocks'
p17361
NsS'parameters'
p17362
(lp17363
(dp17364
S'description'
p17365
g3
sS'cpp_type'
p17366
S'std::string'
p17367
sS'default'
p17368
S'ScalarComponentIC'
p17369
sS'name'
p17370
S'type'
p17371
sS'required'
p17372
I00
sS'group_name'
p17373
Nsa(dp17374
S'description'
p17375
S'Initial values to initialize the scalar variable.\n'
p17376
sS'cpp_type'
p17377
S'std::vector<double, std::allocator<double> >'
p17378
sS'default'
p17379
g3
sS'name'
p17380
S'values'
p17381
sS'required'
p17382
I01
sS'group_name'
p17383
Nsa(dp17384
S'description'
p17385
S'The variable this initial condition is supposed to provide values for.\n'
p17386
sS'cpp_type'
p17387
S'VariableName'
p17388
sS'default'
p17389
g3
sS'name'
p17390
S'variable'
p17391
sS'required'
p17392
I00
sS'group_name'
p17393
NsasS'name'
p17394
S'/ICs/ScalarComponentIC'
p17395
sa(dp17396
S'description'
p17397
g3
sS'type'
p17398
NsS'subblocks'
p17399
NsS'parameters'
p17400
(lp17401
(dp17402
S'description'
p17403
g3
sS'cpp_type'
p17404
S'std::string'
p17405
sS'default'
p17406
S'ScalarConstantIC'
p17407
sS'name'
p17408
S'type'
p17409
sS'required'
p17410
I00
sS'group_name'
p17411
Nsa(dp17412
S'description'
p17413
g3
sS'cpp_type'
p17414
S'double'
p17415
sS'default'
p17416
S'0'
p17417
sS'name'
p17418
S'value'
p17419
sS'required'
p17420
I00
sS'group_name'
p17421
Nsa(dp17422
S'description'
p17423
S'The variable this initial condition is supposed to provide values for.\n'
p17424
sS'cpp_type'
p17425
S'VariableName'
p17426
sS'default'
p17427
g3
sS'name'
p17428
S'variable'
p17429
sS'required'
p17430
I00
sS'group_name'
p17431
NsasS'name'
p17432
S'/ICs/ScalarConstantIC'
p17433
sa(dp17434
S'description'
p17435
g3
sS'type'
p17436
NsS'subblocks'
p17437
NsS'parameters'
p17438
(lp17439
(dp17440
S'description'
p17441
S'in 3D, whether the objects are spheres or columns\n'
p17442
sS'cpp_type'
p17443
S'bool'
p17444
sS'default'
p17445
S'1'
p17446
sS'name'
p17447
S'3D_spheres'
p17448
sS'required'
p17449
I00
sS'group_name'
p17450
Nsa(dp17451
S'description'
p17452
S'The list of block ids (SubdomainID) that this object will be applied\n'
p17453
sS'cpp_type'
p17454
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p17455
sS'default'
p17456
g3
sS'name'
p17457
S'block'
p17458
sS'required'
p17459
I00
sS'group_name'
p17460
Nsa(dp17461
S'description'
p17462
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17463
sS'cpp_type'
p17464
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17465
sS'default'
p17466
g3
sS'name'
p17467
S'boundary'
p17468
sS'required'
p17469
I00
sS'group_name'
p17470
Nsa(dp17471
S'description'
p17472
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p17473
sS'cpp_type'
p17474
S'double'
p17475
sS'default'
p17476
S'0'
p17477
sS'name'
p17478
S'int_width'
p17479
sS'required'
p17480
I00
sS'group_name'
p17481
Nsa(dp17482
S'description'
p17483
S'The variable value inside the circle\n'
p17484
sS'cpp_type'
p17485
S'double'
p17486
sS'default'
p17487
g3
sS'name'
p17488
S'invalue'
p17489
sS'required'
p17490
I01
sS'group_name'
p17491
Nsa(dp17492
S'description'
p17493
S'The variable value outside the circle\n'
p17494
sS'cpp_type'
p17495
S'double'
p17496
sS'default'
p17497
g3
sS'name'
p17498
S'outvalue'
p17499
sS'required'
p17500
I01
sS'group_name'
p17501
Nsa(dp17502
S'description'
p17503
S'The radius of a circle\n'
p17504
sS'cpp_type'
p17505
S'double'
p17506
sS'default'
p17507
g3
sS'name'
p17508
S'radius'
p17509
sS'required'
p17510
I01
sS'group_name'
p17511
Nsa(dp17512
S'description'
p17513
g3
sS'cpp_type'
p17514
S'std::string'
p17515
sS'default'
p17516
S'SmoothCircleIC'
p17517
sS'name'
p17518
S'type'
p17519
sS'required'
p17520
I00
sS'group_name'
p17521
Nsa(dp17522
S'description'
p17523
S'The variable this initial condition is supposed to provide values for.\n'
p17524
sS'cpp_type'
p17525
S'VariableName'
p17526
sS'default'
p17527
g3
sS'name'
p17528
S'variable'
p17529
sS'required'
p17530
I01
sS'group_name'
p17531
Nsa(dp17532
S'description'
p17533
S'The x coordinate of the circle center\n'
p17534
sS'cpp_type'
p17535
S'double'
p17536
sS'default'
p17537
g3
sS'name'
p17538
S'x1'
p17539
sS'required'
p17540
I01
sS'group_name'
p17541
Nsa(dp17542
S'description'
p17543
S'The y coordinate of the circle center\n'
p17544
sS'cpp_type'
p17545
S'double'
p17546
sS'default'
p17547
g3
sS'name'
p17548
S'y1'
p17549
sS'required'
p17550
I01
sS'group_name'
p17551
Nsa(dp17552
S'description'
p17553
S'The z coordinate of the circle center\n'
p17554
sS'cpp_type'
p17555
S'double'
p17556
sS'default'
p17557
S'0'
p17558
sS'name'
p17559
S'z1'
p17560
sS'required'
p17561
I00
sS'group_name'
p17562
NsasS'name'
p17563
S'/ICs/SmoothCircleIC'
p17564
sa(dp17565
S'description'
p17566
g3
sS'type'
p17567
NsS'subblocks'
p17568
NsS'parameters'
p17569
(lp17570
(dp17571
S'description'
p17572
S'in 3D, whether the objects are spheres or columns\n'
p17573
sS'cpp_type'
p17574
S'bool'
p17575
sS'default'
p17576
S'1'
p17577
sS'name'
p17578
S'3D_spheres'
p17579
sS'required'
p17580
I00
sS'group_name'
p17581
Nsa(dp17582
S'description'
p17583
S'length of simulation domain in x-direction\n'
p17584
sS'cpp_type'
p17585
S'double'
p17586
sS'default'
p17587
S'0'
p17588
sS'name'
p17589
S'Lx'
p17590
sS'required'
p17591
I01
sS'group_name'
p17592
Nsa(dp17593
S'description'
p17594
S'length of simulation domain in y-direction\n'
p17595
sS'cpp_type'
p17596
S'double'
p17597
sS'default'
p17598
S'0'
p17599
sS'name'
p17600
S'Ly'
p17601
sS'required'
p17602
I01
sS'group_name'
p17603
Nsa(dp17604
S'description'
p17605
S'length of simulation domain in z-direction\n'
p17606
sS'cpp_type'
p17607
S'double'
p17608
sS'default'
p17609
S'0'
p17610
sS'name'
p17611
S'Lz'
p17612
sS'required'
p17613
I00
sS'group_name'
p17614
Nsa(dp17615
S'description'
p17616
S'The list of block ids (SubdomainID) that this object will be applied\n'
p17617
sS'cpp_type'
p17618
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p17619
sS'default'
p17620
g3
sS'name'
p17621
S'block'
p17622
sS'required'
p17623
I00
sS'group_name'
p17624
Nsa(dp17625
S'description'
p17626
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17627
sS'cpp_type'
p17628
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17629
sS'default'
p17630
g3
sS'name'
p17631
S'boundary'
p17632
sS'required'
p17633
I00
sS'group_name'
p17634
Nsa(dp17635
S'description'
p17636
S'minimum spacing of bubbles, measured from center to center\n'
p17637
sS'cpp_type'
p17638
S'double'
p17639
sS'default'
p17640
S'0'
p17641
sS'name'
p17642
S'bubspac'
p17643
sS'required'
p17644
I01
sS'group_name'
p17645
Nsa(dp17646
S'description'
p17647
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p17648
sS'cpp_type'
p17649
S'double'
p17650
sS'default'
p17651
S'0'
p17652
sS'name'
p17653
S'int_width'
p17654
sS'required'
p17655
I00
sS'group_name'
p17656
Nsa(dp17657
S'description'
p17658
S'The variable value inside the circle\n'
p17659
sS'cpp_type'
p17660
S'double'
p17661
sS'default'
p17662
g3
sS'name'
p17663
S'invalue'
p17664
sS'required'
p17665
I01
sS'group_name'
p17666
Nsa(dp17667
S'description'
p17668
S'The number of bubbles to be placed on GB\n'
p17669
sS'cpp_type'
p17670
S'unsigned int'
p17671
sS'default'
p17672
S'0'
p17673
sS'name'
p17674
S'numbub'
p17675
sS'required'
p17676
I01
sS'group_name'
p17677
Nsa(dp17678
S'description'
p17679
S'The number of tries\n'
p17680
sS'cpp_type'
p17681
S'unsigned int'
p17682
sS'default'
p17683
S'1000'
p17684
sS'name'
p17685
S'numtries'
p17686
sS'required'
p17687
I00
sS'group_name'
p17688
Nsa(dp17689
S'description'
p17690
S'The variable value outside the circle\n'
p17691
sS'cpp_type'
p17692
S'double'
p17693
sS'default'
p17694
g3
sS'name'
p17695
S'outvalue'
p17696
sS'required'
p17697
I01
sS'group_name'
p17698
Nsa(dp17699
S'description'
p17700
S'The radius for each circle\n'
p17701
sS'cpp_type'
p17702
S'std::vector<double, std::allocator<double> >'
p17703
sS'default'
p17704
g3
sS'name'
p17705
S'radii'
p17706
sS'required'
p17707
I01
sS'group_name'
p17708
Nsa(dp17709
S'description'
p17710
S'The radius of a circle\n'
p17711
sS'cpp_type'
p17712
S'double'
p17713
sS'default'
p17714
S'0'
p17715
sS'name'
p17716
S'radius'
p17717
sS'required'
p17718
I01
sS'group_name'
p17719
Nsa(dp17720
S'description'
p17721
S'Plus or minus Percent of random variation in the bubble radius\n'
p17722
sS'cpp_type'
p17723
S'double'
p17724
sS'default'
p17725
S'0'
p17726
sS'name'
p17727
S'radius_variation'
p17728
sS'required'
p17729
I00
sS'group_name'
p17730
Nsa(dp17731
S'description'
p17732
S'random seed\n'
p17733
sS'cpp_type'
p17734
S'unsigned int'
p17735
sS'default'
p17736
S'2000'
p17737
sS'name'
p17738
S'rand_seed'
p17739
sS'required'
p17740
I00
sS'group_name'
p17741
Nsa(dp17742
S'description'
p17743
g3
sS'cpp_type'
p17744
S'std::string'
p17745
sS'default'
p17746
S'SpecifiedSmoothCircleIC'
p17747
sS'name'
p17748
S'type'
p17749
sS'required'
p17750
I00
sS'group_name'
p17751
Nsa(dp17752
S'description'
p17753
S'The variable this initial condition is supposed to provide values for.\n'
p17754
sS'cpp_type'
p17755
S'VariableName'
p17756
sS'default'
p17757
g3
sS'name'
p17758
S'variable'
p17759
sS'required'
p17760
I01
sS'group_name'
p17761
Nsa(dp17762
S'description'
p17763
S'The x coordinate of the circle center\n'
p17764
sS'cpp_type'
p17765
S'double'
p17766
sS'default'
p17767
S'0'
p17768
sS'name'
p17769
S'x1'
p17770
sS'required'
p17771
I01
sS'group_name'
p17772
Nsa(dp17773
S'description'
p17774
S'The x-coordinate for each circle center\n'
p17775
sS'cpp_type'
p17776
S'std::vector<double, std::allocator<double> >'
p17777
sS'default'
p17778
g3
sS'name'
p17779
S'x_positions'
p17780
sS'required'
p17781
I01
sS'group_name'
p17782
Nsa(dp17783
S'description'
p17784
S'The y coordinate of the circle center\n'
p17785
sS'cpp_type'
p17786
S'double'
p17787
sS'default'
p17788
S'0'
p17789
sS'name'
p17790
S'y1'
p17791
sS'required'
p17792
I01
sS'group_name'
p17793
Nsa(dp17794
S'description'
p17795
S'The y-coordinate for each circle center\n'
p17796
sS'cpp_type'
p17797
S'std::vector<double, std::allocator<double> >'
p17798
sS'default'
p17799
g3
sS'name'
p17800
S'y_positions'
p17801
sS'required'
p17802
I01
sS'group_name'
p17803
Nsa(dp17804
S'description'
p17805
S'The z coordinate of the circle center\n'
p17806
sS'cpp_type'
p17807
S'double'
p17808
sS'default'
p17809
S'0'
p17810
sS'name'
p17811
S'z1'
p17812
sS'required'
p17813
I00
sS'group_name'
p17814
Nsa(dp17815
S'description'
p17816
S'The z-coordinate for each circle center\n'
p17817
sS'cpp_type'
p17818
S'std::vector<double, std::allocator<double> >'
p17819
sS'default'
p17820
g3
sS'name'
p17821
S'z_positions'
p17822
sS'required'
p17823
I01
sS'group_name'
p17824
NsasS'name'
p17825
S'/ICs/SpecifiedSmoothCircleIC'
p17826
sa(dp17827
S'description'
p17828
g3
sS'type'
p17829
NsS'subblocks'
p17830
NsS'parameters'
p17831
(lp17832
(dp17833
S'description'
p17834
S'The list of block ids (SubdomainID) that this object will be applied\n'
p17835
sS'cpp_type'
p17836
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p17837
sS'default'
p17838
g3
sS'name'
p17839
S'block'
p17840
sS'required'
p17841
I00
sS'group_name'
p17842
Nsa(dp17843
S'description'
p17844
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17845
sS'cpp_type'
p17846
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17847
sS'default'
p17848
g3
sS'name'
p17849
S'boundary'
p17850
sS'required'
p17851
I00
sS'group_name'
p17852
Nsa(dp17853
S'description'
p17854
S'The z coordinate of the circle center\n'
p17855
sS'cpp_type'
p17856
S'double'
p17857
sS'default'
p17858
g3
sS'name'
p17859
S'height'
p17860
sS'required'
p17861
I01
sS'group_name'
p17862
Nsa(dp17863
S'description'
p17864
S'The variable value inside the circle\n'
p17865
sS'cpp_type'
p17866
S'double'
p17867
sS'default'
p17868
g3
sS'name'
p17869
S'invalue'
p17870
sS'required'
p17871
I01
sS'group_name'
p17872
Nsa(dp17873
S'description'
p17874
S'The variable value outside the circle\n'
p17875
sS'cpp_type'
p17876
S'double'
p17877
sS'default'
p17878
g3
sS'name'
p17879
S'outvalue'
p17880
sS'required'
p17881
I01
sS'group_name'
p17882
Nsa(dp17883
S'description'
p17884
g3
sS'cpp_type'
p17885
S'std::string'
p17886
sS'default'
p17887
S'ThumbIC'
p17888
sS'name'
p17889
S'type'
p17890
sS'required'
p17891
I00
sS'group_name'
p17892
Nsa(dp17893
S'description'
p17894
S'The variable this initial condition is supposed to provide values for.\n'
p17895
sS'cpp_type'
p17896
S'VariableName'
p17897
sS'default'
p17898
g3
sS'name'
p17899
S'variable'
p17900
sS'required'
p17901
I01
sS'group_name'
p17902
Nsa(dp17903
S'description'
p17904
S'The y coordinate of the circle center\n'
p17905
sS'cpp_type'
p17906
S'double'
p17907
sS'default'
p17908
g3
sS'name'
p17909
S'width'
p17910
sS'required'
p17911
I01
sS'group_name'
p17912
Nsa(dp17913
S'description'
p17914
S'The x coordinate of the circle center\n'
p17915
sS'cpp_type'
p17916
S'double'
p17917
sS'default'
p17918
g3
sS'name'
p17919
S'xcoord'
p17920
sS'required'
p17921
I01
sS'group_name'
p17922
NsasS'name'
p17923
S'/ICs/ThumbIC'
p17924
sa(dp17925
S'description'
p17926
g3
sS'type'
p17927
NsS'subblocks'
p17928
NsS'parameters'
p17929
(lp17930
(dp17931
S'description'
p17932
S'The list of block ids (SubdomainID) that this object will be applied\n'
p17933
sS'cpp_type'
p17934
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p17935
sS'default'
p17936
g3
sS'name'
p17937
S'block'
p17938
sS'required'
p17939
I00
sS'group_name'
p17940
Nsa(dp17941
S'description'
p17942
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17943
sS'cpp_type'
p17944
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p17945
sS'default'
p17946
g3
sS'name'
p17947
S'boundary'
p17948
sS'required'
p17949
I00
sS'group_name'
p17950
Nsa(dp17951
S'description'
p17952
S'The index for the current crystal\n'
p17953
sS'cpp_type'
p17954
S'unsigned int'
p17955
sS'default'
p17956
g3
sS'name'
p17957
S'crys_index'
p17958
sS'required'
p17959
I01
sS'group_name'
p17960
Nsa(dp17961
S'description'
p17962
S'Number of crystals\n'
p17963
sS'cpp_type'
p17964
S'unsigned int'
p17965
sS'default'
p17966
g3
sS'name'
p17967
S'crys_num'
p17968
sS'required'
p17969
I01
sS'group_name'
p17970
Nsa(dp17971
S'description'
p17972
g3
sS'cpp_type'
p17973
S'std::string'
p17974
sS'default'
p17975
S'Tricrystal2CircleGrainsIC'
p17976
sS'name'
p17977
S'type'
p17978
sS'required'
p17979
I00
sS'group_name'
p17980
Nsa(dp17981
S'description'
p17982
S'The variable this initial condition is supposed to provide values for.\n'
p17983
sS'cpp_type'
p17984
S'VariableName'
p17985
sS'default'
p17986
g3
sS'name'
p17987
S'variable'
p17988
sS'required'
p17989
I01
sS'group_name'
p17990
NsasS'name'
p17991
S'/ICs/Tricrystal2CircleGrainsIC'
p17992
sasS'parameters'
p17993
NsS'name'
p17994
S'/ICs'
p17995
sa(dp17996
S'description'
p17997
g3
sS'type'
p17998
NsS'subblocks'
p17999
(lp18000
(dp18001
S'description'
p18002
g3
sS'type'
p18003
NsS'subblocks'
p18004
NsS'parameters'
p18005
(lp18006
(dp18007
S'description'
p18008
S'A string representing the Moose Object that will be built by this Action\n'
p18009
sS'cpp_type'
p18010
S'std::string'
p18011
sS'default'
p18012
g3
sS'name'
p18013
S'type'
p18014
sS'required'
p18015
I01
sS'group_name'
p18016
NsasS'name'
p18017
S'/Kernels/*'
p18018
sa(dp18019
S'description'
p18020
g3
sS'type'
p18021
NsS'subblocks'
p18022
NsS'parameters'
p18023
(lp18024
(dp18025
S'description'
p18026
S'The list of block ids (SubdomainID) that this object will be applied\n'
p18027
sS'cpp_type'
p18028
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p18029
sS'default'
p18030
g3
sS'name'
p18031
S'block'
p18032
sS'required'
p18033
I00
sS'group_name'
p18034
Nsa(dp18035
S'description'
p18036
S'Other species concentration\n'
p18037
sS'cpp_type'
p18038
S'std::vector<VariableName>'
p18039
sS'default'
p18040
g3
sS'name'
p18041
S'c'
p18042
sS'required'
p18043
I01
sS'group_name'
p18044
Nsa(dp18045
S'description'
p18046
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18047
sS'cpp_type'
p18048
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18049
sS'default'
p18050
g3
sS'name'
p18051
S'diag_save_in'
p18052
sS'required'
p18053
I00
sS'group_name'
p18054
S'Advanced'
p18055
sa(dp18056
S'description'
p18057
S'Ratio of surface energy to GB energy\n'
p18058
sS'cpp_type'
p18059
S'double'
p18060
sS'default'
p18061
S'1'
p18062
sS'name'
p18063
S'en_ratio'
p18064
sS'required'
p18065
I00
sS'group_name'
p18066
Nsa(dp18067
S'description'
p18068
S'The mobility used with the kernel\n'
p18069
sS'cpp_type'
p18070
S'std::string'
p18071
sS'default'
p18072
S'L'
p18073
sS'name'
p18074
S'mob_name'
p18075
sS'required'
p18076
I00
sS'group_name'
p18077
Nsa(dp18078
S'description'
p18079
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18080
sS'cpp_type'
p18081
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18082
sS'default'
p18083
g3
sS'name'
p18084
S'save_in'
p18085
sS'required'
p18086
I00
sS'group_name'
p18087
S'Advanced'
p18088
sa(dp18089
S'description'
p18090
S'The seed for the master random number generator\n'
p18091
sS'cpp_type'
p18092
S'unsigned int'
p18093
sS'default'
p18094
S'0'
p18095
sS'name'
p18096
S'seed'
p18097
sS'required'
p18098
I00
sS'group_name'
p18099
S'Advanced'
p18100
sa(dp18101
S'description'
p18102
g3
sS'cpp_type'
p18103
S'std::string'
p18104
sS'default'
p18105
S'ACGBPoly'
p18106
sS'name'
p18107
S'type'
p18108
sS'required'
p18109
I00
sS'group_name'
p18110
Nsa(dp18111
S'description'
p18112
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18113
sS'cpp_type'
p18114
S'bool'
p18115
sS'default'
p18116
S'0'
p18117
sS'name'
p18118
S'use_displaced_mesh'
p18119
sS'required'
p18120
I00
sS'group_name'
p18121
S'Advanced'
p18122
sa(dp18123
S'description'
p18124
S'The name of the variable that this Kernel operates on\n'
p18125
sS'cpp_type'
p18126
S'NonlinearVariableName'
p18127
sS'default'
p18128
g3
sS'name'
p18129
S'variable'
p18130
sS'required'
p18131
I01
sS'group_name'
p18132
NsasS'name'
p18133
S'/Kernels/ACGBPoly'
p18134
sa(dp18135
S'description'
p18136
g3
sS'type'
p18137
NsS'subblocks'
p18138
NsS'parameters'
p18139
(lp18140
(dp18141
S'description'
p18142
S'temperature\n'
p18143
sS'cpp_type'
p18144
S'std::vector<VariableName>'
p18145
sS'default'
p18146
g3
sS'name'
p18147
S'T'
p18148
sS'required'
p18149
I00
sS'group_name'
p18150
Nsa(dp18151
S'description'
p18152
S'The list of block ids (SubdomainID) that this object will be applied\n'
p18153
sS'cpp_type'
p18154
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p18155
sS'default'
p18156
g3
sS'name'
p18157
S'block'
p18158
sS'required'
p18159
I00
sS'group_name'
p18160
Nsa(dp18161
S'description'
p18162
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18163
sS'cpp_type'
p18164
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18165
sS'default'
p18166
g3
sS'name'
p18167
S'diag_save_in'
p18168
sS'required'
p18169
I00
sS'group_name'
p18170
S'Advanced'
p18171
sa(dp18172
S'description'
p18173
S'The mobility used with the kernel\n'
p18174
sS'cpp_type'
p18175
S'std::string'
p18176
sS'default'
p18177
S'L'
p18178
sS'name'
p18179
S'mob_name'
p18180
sS'required'
p18181
I00
sS'group_name'
p18182
Nsa(dp18183
S'description'
p18184
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18185
sS'cpp_type'
p18186
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18187
sS'default'
p18188
g3
sS'name'
p18189
S'save_in'
p18190
sS'required'
p18191
I00
sS'group_name'
p18192
S'Advanced'
p18193
sa(dp18194
S'description'
p18195
S'The seed for the master random number generator\n'
p18196
sS'cpp_type'
p18197
S'unsigned int'
p18198
sS'default'
p18199
S'0'
p18200
sS'name'
p18201
S'seed'
p18202
sS'required'
p18203
I00
sS'group_name'
p18204
S'Advanced'
p18205
sa(dp18206
S'description'
p18207
g3
sS'cpp_type'
p18208
S'std::string'
p18209
sS'default'
p18210
S'ACGrGrPoly'
p18211
sS'name'
p18212
S'type'
p18213
sS'required'
p18214
I00
sS'group_name'
p18215
Nsa(dp18216
S'description'
p18217
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18218
sS'cpp_type'
p18219
S'bool'
p18220
sS'default'
p18221
S'0'
p18222
sS'name'
p18223
S'use_displaced_mesh'
p18224
sS'required'
p18225
I00
sS'group_name'
p18226
S'Advanced'
p18227
sa(dp18228
S'description'
p18229
S'Array of coupled variable names\n'
p18230
sS'cpp_type'
p18231
S'std::vector<VariableName>'
p18232
sS'default'
p18233
g3
sS'name'
p18234
S'v'
p18235
sS'required'
p18236
I01
sS'group_name'
p18237
Nsa(dp18238
S'description'
p18239
S'The name of the variable that this Kernel operates on\n'
p18240
sS'cpp_type'
p18241
S'NonlinearVariableName'
p18242
sS'default'
p18243
g3
sS'name'
p18244
S'variable'
p18245
sS'required'
p18246
I01
sS'group_name'
p18247
NsasS'name'
p18248
S'/Kernels/ACGrGrPoly'
p18249
sa(dp18250
S'description'
p18251
g3
sS'type'
p18252
NsS'subblocks'
p18253
NsS'parameters'
p18254
(lp18255
(dp18256
S'description'
p18257
S'The list of block ids (SubdomainID) that this object will be applied\n'
p18258
sS'cpp_type'
p18259
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p18260
sS'default'
p18261
g3
sS'name'
p18262
S'block'
p18263
sS'required'
p18264
I00
sS'group_name'
p18265
Nsa(dp18266
S'description'
p18267
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18268
sS'cpp_type'
p18269
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18270
sS'default'
p18271
g3
sS'name'
p18272
S'diag_save_in'
p18273
sS'required'
p18274
I00
sS'group_name'
p18275
S'Advanced'
p18276
sa(dp18277
S'description'
p18278
S'The kappa used with the kernel\n'
p18279
sS'cpp_type'
p18280
S'std::string'
p18281
sS'default'
p18282
S'kappa_op'
p18283
sS'name'
p18284
S'kappa_name'
p18285
sS'required'
p18286
I00
sS'group_name'
p18287
Nsa(dp18288
S'description'
p18289
S'The mobility used with the kernel\n'
p18290
sS'cpp_type'
p18291
S'std::string'
p18292
sS'default'
p18293
S'L'
p18294
sS'name'
p18295
S'mob_name'
p18296
sS'required'
p18297
I00
sS'group_name'
p18298
Nsa(dp18299
S'description'
p18300
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18301
sS'cpp_type'
p18302
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18303
sS'default'
p18304
g3
sS'name'
p18305
S'save_in'
p18306
sS'required'
p18307
I00
sS'group_name'
p18308
S'Advanced'
p18309
sa(dp18310
S'description'
p18311
S'The seed for the master random number generator\n'
p18312
sS'cpp_type'
p18313
S'unsigned int'
p18314
sS'default'
p18315
S'0'
p18316
sS'name'
p18317
S'seed'
p18318
sS'required'
p18319
I00
sS'group_name'
p18320
S'Advanced'
p18321
sa(dp18322
S'description'
p18323
g3
sS'cpp_type'
p18324
S'std::string'
p18325
sS'default'
p18326
S'ACInterface'
p18327
sS'name'
p18328
S'type'
p18329
sS'required'
p18330
I00
sS'group_name'
p18331
Nsa(dp18332
S'description'
p18333
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18334
sS'cpp_type'
p18335
S'bool'
p18336
sS'default'
p18337
S'0'
p18338
sS'name'
p18339
S'use_displaced_mesh'
p18340
sS'required'
p18341
I00
sS'group_name'
p18342
S'Advanced'
p18343
sa(dp18344
S'description'
p18345
S'The name of the variable that this Kernel operates on\n'
p18346
sS'cpp_type'
p18347
S'NonlinearVariableName'
p18348
sS'default'
p18349
g3
sS'name'
p18350
S'variable'
p18351
sS'required'
p18352
I01
sS'group_name'
p18353
NsasS'name'
p18354
S'/Kernels/ACInterface'
p18355
sa(dp18356
S'description'
p18357
g3
sS'type'
p18358
NsS'subblocks'
p18359
NsS'parameters'
p18360
(lp18361
(dp18362
S'description'
p18363
S'The list of block ids (SubdomainID) that this object will be applied\n'
p18364
sS'cpp_type'
p18365
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p18366
sS'default'
p18367
g3
sS'name'
p18368
S'block'
p18369
sS'required'
p18370
I00
sS'group_name'
p18371
Nsa(dp18372
S'description'
p18373
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18374
sS'cpp_type'
p18375
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18376
sS'default'
p18377
g3
sS'name'
p18378
S'diag_save_in'
p18379
sS'required'
p18380
I00
sS'group_name'
p18381
S'Advanced'
p18382
sa(dp18383
S'description'
p18384
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18385
sS'cpp_type'
p18386
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18387
sS'default'
p18388
g3
sS'name'
p18389
S'save_in'
p18390
sS'required'
p18391
I00
sS'group_name'
p18392
S'Advanced'
p18393
sa(dp18394
S'description'
p18395
S'The seed for the master random number generator\n'
p18396
sS'cpp_type'
p18397
S'unsigned int'
p18398
sS'default'
p18399
S'0'
p18400
sS'name'
p18401
S'seed'
p18402
sS'required'
p18403
I00
sS'group_name'
p18404
S'Advanced'
p18405
sa(dp18406
S'description'
p18407
S'The Tensor to multiply the Diffusion operator by\n'
p18408
sS'cpp_type'
p18409
S'libMesh::TensorValue<double>'
p18410
sS'default'
p18411
g3
sS'name'
p18412
S'tensor_coeff'
p18413
sS'required'
p18414
I01
sS'group_name'
p18415
Nsa(dp18416
S'description'
p18417
g3
sS'cpp_type'
p18418
S'std::string'
p18419
sS'default'
p18420
S'AnisotropicDiffusion'
p18421
sS'name'
p18422
S'type'
p18423
sS'required'
p18424
I00
sS'group_name'
p18425
Nsa(dp18426
S'description'
p18427
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18428
sS'cpp_type'
p18429
S'bool'
p18430
sS'default'
p18431
S'0'
p18432
sS'name'
p18433
S'use_displaced_mesh'
p18434
sS'required'
p18435
I00
sS'group_name'
p18436
S'Advanced'
p18437
sa(dp18438
S'description'
p18439
S'The name of the variable that this Kernel operates on\n'
p18440
sS'cpp_type'
p18441
S'NonlinearVariableName'
p18442
sS'default'
p18443
g3
sS'name'
p18444
S'variable'
p18445
sS'required'
p18446
I01
sS'group_name'
p18447
NsasS'name'
p18448
S'/Kernels/AnisotropicDiffusion'
p18449
sa(dp18450
S'description'
p18451
g3
sS'type'
p18452
NsS'subblocks'
p18453
NsS'parameters'
p18454
(lp18455
(dp18456
S'description'
p18457
S'The list of block ids (SubdomainID) that this object will be applied\n'
p18458
sS'cpp_type'
p18459
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p18460
sS'default'
p18461
g3
sS'name'
p18462
S'block'
p18463
sS'required'
p18464
I00
sS'group_name'
p18465
Nsa(dp18466
S'description'
p18467
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18468
sS'cpp_type'
p18469
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18470
sS'default'
p18471
g3
sS'name'
p18472
S'diag_save_in'
p18473
sS'required'
p18474
I00
sS'group_name'
p18475
S'Advanced'
p18476
sa(dp18477
S'description'
p18478
S'A function that describes the body force\n'
p18479
sS'cpp_type'
p18480
S'FunctionName'
p18481
sS'default'
p18482
S'1'
p18483
sS'name'
p18484
S'function'
p18485
sS'required'
p18486
I00
sS'group_name'
p18487
Nsa(dp18488
S'description'
p18489
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18490
sS'cpp_type'
p18491
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18492
sS'default'
p18493
g3
sS'name'
p18494
S'save_in'
p18495
sS'required'
p18496
I00
sS'group_name'
p18497
S'Advanced'
p18498
sa(dp18499
S'description'
p18500
S'The seed for the master random number generator\n'
p18501
sS'cpp_type'
p18502
S'unsigned int'
p18503
sS'default'
p18504
S'0'
p18505
sS'name'
p18506
S'seed'
p18507
sS'required'
p18508
I00
sS'group_name'
p18509
S'Advanced'
p18510
sa(dp18511
S'description'
p18512
g3
sS'cpp_type'
p18513
S'std::string'
p18514
sS'default'
p18515
S'BodyForce'
p18516
sS'name'
p18517
S'type'
p18518
sS'required'
p18519
I00
sS'group_name'
p18520
Nsa(dp18521
S'description'
p18522
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18523
sS'cpp_type'
p18524
S'bool'
p18525
sS'default'
p18526
S'0'
p18527
sS'name'
p18528
S'use_displaced_mesh'
p18529
sS'required'
p18530
I00
sS'group_name'
p18531
S'Advanced'
p18532
sa(dp18533
S'description'
p18534
g3
sS'cpp_type'
p18535
S'double'
p18536
sS'default'
p18537
S'0'
p18538
sS'name'
p18539
S'value'
p18540
sS'required'
p18541
I00
sS'group_name'
p18542
Nsa(dp18543
S'description'
p18544
S'The name of the variable that this Kernel operates on\n'
p18545
sS'cpp_type'
p18546
S'NonlinearVariableName'
p18547
sS'default'
p18548
g3
sS'name'
p18549
S'variable'
p18550
sS'required'
p18551
I01
sS'group_name'
p18552
NsasS'name'
p18553
S'/Kernels/BodyForce'
p18554
sa(dp18555
S'description'
p18556
g3
sS'type'
p18557
NsS'subblocks'
p18558
NsS'parameters'
p18559
(lp18560
(dp18561
S'description'
p18562
S'The D mobility used with the kernel\n'
p18563
sS'cpp_type'
p18564
S'std::string'
p18565
sS'default'
p18566
S'DM'
p18567
sS'name'
p18568
S'Dmob_name'
p18569
sS'required'
p18570
I00
sS'group_name'
p18571
Nsa(dp18572
S'description'
p18573
S'The list of block ids (SubdomainID) that this object will be applied\n'
p18574
sS'cpp_type'
p18575
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p18576
sS'default'
p18577
g3
sS'name'
p18578
S'block'
p18579
sS'required'
p18580
I00
sS'group_name'
p18581
Nsa(dp18582
S'description'
p18583
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18584
sS'cpp_type'
p18585
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18586
sS'default'
p18587
g3
sS'name'
p18588
S'diag_save_in'
p18589
sS'required'
p18590
I00
sS'group_name'
p18591
S'Advanced'
p18592
sa(dp18593
S'description'
p18594
S'The gradient of the mobility used with the kernel\n'
p18595
sS'cpp_type'
p18596
S'std::string'
p18597
sS'default'
p18598
g3
sS'name'
p18599
S'grad_mob_name'
p18600
sS'required'
p18601
I01
sS'group_name'
p18602
Nsa(dp18603
S'description'
p18604
S'Jacobian information for the mobility is defined\n'
p18605
sS'cpp_type'
p18606
S'bool'
p18607
sS'default'
p18608
S'0'
p18609
sS'name'
p18610
S'has_MJac'
p18611
sS'required'
p18612
I00
sS'group_name'
p18613
Nsa(dp18614
S'description'
p18615
S'The kappa used with the kernel\n'
p18616
sS'cpp_type'
p18617
S'std::string'
p18618
sS'default'
p18619
g3
sS'name'
p18620
S'kappa_name'
p18621
sS'required'
p18622
I01
sS'group_name'
p18623
Nsa(dp18624
S'description'
p18625
S'The mobility used with the kernel\n'
p18626
sS'cpp_type'
p18627
S'std::string'
p18628
sS'default'
p18629
g3
sS'name'
p18630
S'mob_name'
p18631
sS'required'
p18632
I01
sS'group_name'
p18633
Nsa(dp18634
S'description'
p18635
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18636
sS'cpp_type'
p18637
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18638
sS'default'
p18639
g3
sS'name'
p18640
S'save_in'
p18641
sS'required'
p18642
I00
sS'group_name'
p18643
S'Advanced'
p18644
sa(dp18645
S'description'
p18646
S'The seed for the master random number generator\n'
p18647
sS'cpp_type'
p18648
S'unsigned int'
p18649
sS'default'
p18650
S'0'
p18651
sS'name'
p18652
S'seed'
p18653
sS'required'
p18654
I00
sS'group_name'
p18655
S'Advanced'
p18656
sa(dp18657
S'description'
p18658
g3
sS'cpp_type'
p18659
S'std::string'
p18660
sS'default'
p18661
S'CHInterface'
p18662
sS'name'
p18663
S'type'
p18664
sS'required'
p18665
I00
sS'group_name'
p18666
Nsa(dp18667
S'description'
p18668
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18669
sS'cpp_type'
p18670
S'bool'
p18671
sS'default'
p18672
S'0'
p18673
sS'name'
p18674
S'use_displaced_mesh'
p18675
sS'required'
p18676
I00
sS'group_name'
p18677
S'Advanced'
p18678
sa(dp18679
S'description'
p18680
S'The name of the variable that this Kernel operates on\n'
p18681
sS'cpp_type'
p18682
S'NonlinearVariableName'
p18683
sS'default'
p18684
g3
sS'name'
p18685
S'variable'
p18686
sS'required'
p18687
I01
sS'group_name'
p18688
NsasS'name'
p18689
S'/Kernels/CHInterface'
p18690
sa(dp18691
S'description'
p18692
g3
sS'type'
p18693
NsS'subblocks'
p18694
NsS'parameters'
p18695
(lp18696
(dp18697
S'description'
p18698
S'The D mobility used with the kernel\n'
p18699
sS'cpp_type'
p18700
S'std::string'
p18701
sS'default'
p18702
S'DM'
p18703
sS'name'
p18704
S'Dmob_name'
p18705
sS'required'
p18706
I00
sS'group_name'
p18707
Nsa(dp18708
S'description'
p18709
S'The list of block ids (SubdomainID) that this object will be applied\n'
p18710
sS'cpp_type'
p18711
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p18712
sS'default'
p18713
g3
sS'name'
p18714
S'block'
p18715
sS'required'
p18716
I00
sS'group_name'
p18717
Nsa(dp18718
S'description'
p18719
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18720
sS'cpp_type'
p18721
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18722
sS'default'
p18723
g3
sS'name'
p18724
S'diag_save_in'
p18725
sS'required'
p18726
I00
sS'group_name'
p18727
S'Advanced'
p18728
sa(dp18729
S'description'
p18730
S'Jacobian information for the mobility is defined\n'
p18731
sS'cpp_type'
p18732
S'bool'
p18733
sS'default'
p18734
S'0'
p18735
sS'name'
p18736
S'has_MJac'
p18737
sS'required'
p18738
I00
sS'group_name'
p18739
Nsa(dp18740
S'description'
p18741
S'The mobility used with the kernel\n'
p18742
sS'cpp_type'
p18743
S'std::string'
p18744
sS'default'
p18745
S'M'
p18746
sS'name'
p18747
S'mob_name'
p18748
sS'required'
p18749
I00
sS'group_name'
p18750
Nsa(dp18751
S'description'
p18752
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18753
sS'cpp_type'
p18754
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18755
sS'default'
p18756
g3
sS'name'
p18757
S'save_in'
p18758
sS'required'
p18759
I00
sS'group_name'
p18760
S'Advanced'
p18761
sa(dp18762
S'description'
p18763
S'The seed for the master random number generator\n'
p18764
sS'cpp_type'
p18765
S'unsigned int'
p18766
sS'default'
p18767
S'0'
p18768
sS'name'
p18769
S'seed'
p18770
sS'required'
p18771
I00
sS'group_name'
p18772
S'Advanced'
p18773
sa(dp18774
S'description'
p18775
g3
sS'cpp_type'
p18776
S'std::string'
p18777
sS'default'
p18778
S'CHMath'
p18779
sS'name'
p18780
S'type'
p18781
sS'required'
p18782
I00
sS'group_name'
p18783
Nsa(dp18784
S'description'
p18785
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18786
sS'cpp_type'
p18787
S'bool'
p18788
sS'default'
p18789
S'0'
p18790
sS'name'
p18791
S'use_displaced_mesh'
p18792
sS'required'
p18793
I00
sS'group_name'
p18794
S'Advanced'
p18795
sa(dp18796
S'description'
p18797
S'The name of the variable that this Kernel operates on\n'
p18798
sS'cpp_type'
p18799
S'NonlinearVariableName'
p18800
sS'default'
p18801
g3
sS'name'
p18802
S'variable'
p18803
sS'required'
p18804
I01
sS'group_name'
p18805
NsasS'name'
p18806
S'/Kernels/CHMath'
p18807
sa(dp18808
S'description'
p18809
g3
sS'type'
p18810
NsS'subblocks'
p18811
NsS'parameters'
p18812
(lp18813
(dp18814
S'description'
p18815
S'The list of block ids (SubdomainID) that this object will be applied\n'
p18816
sS'cpp_type'
p18817
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p18818
sS'default'
p18819
g3
sS'name'
p18820
S'block'
p18821
sS'required'
p18822
I00
sS'group_name'
p18823
Nsa(dp18824
S'description'
p18825
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18826
sS'cpp_type'
p18827
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18828
sS'default'
p18829
g3
sS'name'
p18830
S'diag_save_in'
p18831
sS'required'
p18832
I00
sS'group_name'
p18833
S'Advanced'
p18834
sa(dp18835
S'description'
p18836
S'Field variable for gradient of convective term\n'
p18837
sS'cpp_type'
p18838
S'std::vector<VariableName>'
p18839
sS'default'
p18840
g3
sS'name'
p18841
S'grad_velocity'
p18842
sS'required'
p18843
I01
sS'group_name'
p18844
Nsa(dp18845
S'description'
p18846
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18847
sS'cpp_type'
p18848
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18849
sS'default'
p18850
g3
sS'name'
p18851
S'save_in'
p18852
sS'required'
p18853
I00
sS'group_name'
p18854
S'Advanced'
p18855
sa(dp18856
S'description'
p18857
S'The seed for the master random number generator\n'
p18858
sS'cpp_type'
p18859
S'unsigned int'
p18860
sS'default'
p18861
S'0'
p18862
sS'name'
p18863
S'seed'
p18864
sS'required'
p18865
I00
sS'group_name'
p18866
S'Advanced'
p18867
sa(dp18868
S'description'
p18869
g3
sS'cpp_type'
p18870
S'std::string'
p18871
sS'default'
p18872
S'ConvectionSK'
p18873
sS'name'
p18874
S'type'
p18875
sS'required'
p18876
I00
sS'group_name'
p18877
Nsa(dp18878
S'description'
p18879
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18880
sS'cpp_type'
p18881
S'bool'
p18882
sS'default'
p18883
S'0'
p18884
sS'name'
p18885
S'use_displaced_mesh'
p18886
sS'required'
p18887
I00
sS'group_name'
p18888
S'Advanced'
p18889
sa(dp18890
S'description'
p18891
S'The name of the variable that this Kernel operates on\n'
p18892
sS'cpp_type'
p18893
S'NonlinearVariableName'
p18894
sS'default'
p18895
g3
sS'name'
p18896
S'variable'
p18897
sS'required'
p18898
I01
sS'group_name'
p18899
NsasS'name'
p18900
S'/Kernels/ConvectionSK'
p18901
sa(dp18902
S'description'
p18903
g3
sS'type'
p18904
NsS'subblocks'
p18905
NsS'parameters'
p18906
(lp18907
(dp18908
S'description'
p18909
S'The list of block ids (SubdomainID) that this object will be applied\n'
p18910
sS'cpp_type'
p18911
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p18912
sS'default'
p18913
g3
sS'name'
p18914
S'block'
p18915
sS'required'
p18916
I00
sS'group_name'
p18917
Nsa(dp18918
S'description'
p18919
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18920
sS'cpp_type'
p18921
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18922
sS'default'
p18923
g3
sS'name'
p18924
S'diag_save_in'
p18925
sS'required'
p18926
I00
sS'group_name'
p18927
S'Advanced'
p18928
sa(dp18929
S'description'
p18930
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18931
sS'cpp_type'
p18932
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18933
sS'default'
p18934
g3
sS'name'
p18935
S'save_in'
p18936
sS'required'
p18937
I00
sS'group_name'
p18938
S'Advanced'
p18939
sa(dp18940
S'description'
p18941
S'The seed for the master random number generator\n'
p18942
sS'cpp_type'
p18943
S'unsigned int'
p18944
sS'default'
p18945
S'0'
p18946
sS'name'
p18947
S'seed'
p18948
sS'required'
p18949
I00
sS'group_name'
p18950
S'Advanced'
p18951
sa(dp18952
S'description'
p18953
g3
sS'cpp_type'
p18954
S'std::string'
p18955
sS'default'
p18956
S'CoupledForce'
p18957
sS'name'
p18958
S'type'
p18959
sS'required'
p18960
I00
sS'group_name'
p18961
Nsa(dp18962
S'description'
p18963
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18964
sS'cpp_type'
p18965
S'bool'
p18966
sS'default'
p18967
S'0'
p18968
sS'name'
p18969
S'use_displaced_mesh'
p18970
sS'required'
p18971
I00
sS'group_name'
p18972
S'Advanced'
p18973
sa(dp18974
S'description'
p18975
S'The coupled variable which provides the force\n'
p18976
sS'cpp_type'
p18977
S'std::vector<VariableName>'
p18978
sS'default'
p18979
g3
sS'name'
p18980
S'v'
p18981
sS'required'
p18982
I01
sS'group_name'
p18983
Nsa(dp18984
S'description'
p18985
S'The name of the variable that this Kernel operates on\n'
p18986
sS'cpp_type'
p18987
S'NonlinearVariableName'
p18988
sS'default'
p18989
g3
sS'name'
p18990
S'variable'
p18991
sS'required'
p18992
I01
sS'group_name'
p18993
NsasS'name'
p18994
S'/Kernels/CoupledForce'
p18995
sa(dp18996
S'description'
p18997
g3
sS'type'
p18998
NsS'subblocks'
p18999
NsS'parameters'
p19000
(lp19001
(dp19002
S'description'
p19003
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19004
sS'cpp_type'
p19005
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p19006
sS'default'
p19007
g3
sS'name'
p19008
S'block'
p19009
sS'required'
p19010
I00
sS'group_name'
p19011
Nsa(dp19012
S'description'
p19013
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19014
sS'cpp_type'
p19015
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19016
sS'default'
p19017
g3
sS'name'
p19018
S'diag_save_in'
p19019
sS'required'
p19020
I00
sS'group_name'
p19021
S'Advanced'
p19022
sa(dp19023
S'description'
p19024
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19025
sS'cpp_type'
p19026
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19027
sS'default'
p19028
g3
sS'name'
p19029
S'save_in'
p19030
sS'required'
p19031
I00
sS'group_name'
p19032
S'Advanced'
p19033
sa(dp19034
S'description'
p19035
S'The seed for the master random number generator\n'
p19036
sS'cpp_type'
p19037
S'unsigned int'
p19038
sS'default'
p19039
S'0'
p19040
sS'name'
p19041
S'seed'
p19042
sS'required'
p19043
I00
sS'group_name'
p19044
S'Advanced'
p19045
sa(dp19046
S'description'
p19047
g3
sS'cpp_type'
p19048
S'std::string'
p19049
sS'default'
p19050
S'CoupledImplicitEuler'
p19051
sS'name'
p19052
S'type'
p19053
sS'required'
p19054
I00
sS'group_name'
p19055
Nsa(dp19056
S'description'
p19057
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19058
sS'cpp_type'
p19059
S'bool'
p19060
sS'default'
p19061
S'0'
p19062
sS'name'
p19063
S'use_displaced_mesh'
p19064
sS'required'
p19065
I00
sS'group_name'
p19066
S'Advanced'
p19067
sa(dp19068
S'description'
p19069
S'Coupled variable\n'
p19070
sS'cpp_type'
p19071
S'std::vector<VariableName>'
p19072
sS'default'
p19073
g3
sS'name'
p19074
S'v'
p19075
sS'required'
p19076
I01
sS'group_name'
p19077
Nsa(dp19078
S'description'
p19079
S'The name of the variable that this Kernel operates on\n'
p19080
sS'cpp_type'
p19081
S'NonlinearVariableName'
p19082
sS'default'
p19083
g3
sS'name'
p19084
S'variable'
p19085
sS'required'
p19086
I01
sS'group_name'
p19087
NsasS'name'
p19088
S'/Kernels/CoupledImplicitEuler'
p19089
sa(dp19090
S'description'
p19091
g3
sS'type'
p19092
NsS'subblocks'
p19093
NsS'parameters'
p19094
(lp19095
(dp19096
S'description'
p19097
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19098
sS'cpp_type'
p19099
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p19100
sS'default'
p19101
g3
sS'name'
p19102
S'block'
p19103
sS'required'
p19104
I00
sS'group_name'
p19105
Nsa(dp19106
S'description'
p19107
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19108
sS'cpp_type'
p19109
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19110
sS'default'
p19111
g3
sS'name'
p19112
S'diag_save_in'
p19113
sS'required'
p19114
I00
sS'group_name'
p19115
S'Advanced'
p19116
sa(dp19117
S'description'
p19118
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19119
sS'cpp_type'
p19120
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19121
sS'default'
p19122
g3
sS'name'
p19123
S'save_in'
p19124
sS'required'
p19125
I00
sS'group_name'
p19126
S'Advanced'
p19127
sa(dp19128
S'description'
p19129
S'The seed for the master random number generator\n'
p19130
sS'cpp_type'
p19131
S'unsigned int'
p19132
sS'default'
p19133
S'0'
p19134
sS'name'
p19135
S'seed'
p19136
sS'required'
p19137
I00
sS'group_name'
p19138
S'Advanced'
p19139
sa(dp19140
S'description'
p19141
g3
sS'cpp_type'
p19142
S'std::string'
p19143
sS'default'
p19144
S'Diffusion'
p19145
sS'name'
p19146
S'type'
p19147
sS'required'
p19148
I00
sS'group_name'
p19149
Nsa(dp19150
S'description'
p19151
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19152
sS'cpp_type'
p19153
S'bool'
p19154
sS'default'
p19155
S'0'
p19156
sS'name'
p19157
S'use_displaced_mesh'
p19158
sS'required'
p19159
I00
sS'group_name'
p19160
S'Advanced'
p19161
sa(dp19162
S'description'
p19163
S'The name of the variable that this Kernel operates on\n'
p19164
sS'cpp_type'
p19165
S'NonlinearVariableName'
p19166
sS'default'
p19167
g3
sS'name'
p19168
S'variable'
p19169
sS'required'
p19170
I01
sS'group_name'
p19171
NsasS'name'
p19172
S'/Kernels/Diffusion'
p19173
sa(dp19174
S'description'
p19175
g3
sS'type'
p19176
NsS'subblocks'
p19177
NsS'parameters'
p19178
(lp19179
(dp19180
S'description'
p19181
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19182
sS'cpp_type'
p19183
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p19184
sS'default'
p19185
g3
sS'name'
p19186
S'block'
p19187
sS'required'
p19188
I00
sS'group_name'
p19189
Nsa(dp19190
S'description'
p19191
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19192
sS'cpp_type'
p19193
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19194
sS'default'
p19195
g3
sS'name'
p19196
S'diag_save_in'
p19197
sS'required'
p19198
I00
sS'group_name'
p19199
S'Advanced'
p19200
sa(dp19201
S'description'
p19202
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19203
sS'cpp_type'
p19204
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19205
sS'default'
p19206
g3
sS'name'
p19207
S'save_in'
p19208
sS'required'
p19209
I00
sS'group_name'
p19210
S'Advanced'
p19211
sa(dp19212
S'description'
p19213
S'The seed for the master random number generator\n'
p19214
sS'cpp_type'
p19215
S'unsigned int'
p19216
sS'default'
p19217
S'0'
p19218
sS'name'
p19219
S'seed'
p19220
sS'required'
p19221
I00
sS'group_name'
p19222
S'Advanced'
p19223
sa(dp19224
S'description'
p19225
g3
sS'cpp_type'
p19226
S'std::string'
p19227
sS'default'
p19228
S'DiffusionSK'
p19229
sS'name'
p19230
S'type'
p19231
sS'required'
p19232
I00
sS'group_name'
p19233
Nsa(dp19234
S'description'
p19235
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19236
sS'cpp_type'
p19237
S'bool'
p19238
sS'default'
p19239
S'0'
p19240
sS'name'
p19241
S'use_displaced_mesh'
p19242
sS'required'
p19243
I00
sS'group_name'
p19244
S'Advanced'
p19245
sa(dp19246
S'description'
p19247
S'The name of the variable that this Kernel operates on\n'
p19248
sS'cpp_type'
p19249
S'NonlinearVariableName'
p19250
sS'default'
p19251
g3
sS'name'
p19252
S'variable'
p19253
sS'required'
p19254
I01
sS'group_name'
p19255
NsasS'name'
p19256
S'/Kernels/DiffusionSK'
p19257
sa(dp19258
S'description'
p19259
g3
sS'type'
p19260
NsS'subblocks'
p19261
NsS'parameters'
p19262
(lp19263
(dp19264
S'description'
p19265
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19266
sS'cpp_type'
p19267
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p19268
sS'default'
p19269
g3
sS'name'
p19270
S'block'
p19271
sS'required'
p19272
I00
sS'group_name'
p19273
Nsa(dp19274
S'description'
p19275
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19276
sS'cpp_type'
p19277
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19278
sS'default'
p19279
g3
sS'name'
p19280
S'diag_save_in'
p19281
sS'required'
p19282
I00
sS'group_name'
p19283
S'Advanced'
p19284
sa(dp19285
S'description'
p19286
S'Use for eigenvalue problem (true) or source problem (false)\n'
p19287
sS'cpp_type'
p19288
S'bool'
p19289
sS'default'
p19290
S'1'
p19291
sS'name'
p19292
S'eigen'
p19293
sS'required'
p19294
I00
sS'group_name'
p19295
Nsa(dp19296
S'description'
p19297
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19298
sS'cpp_type'
p19299
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19300
sS'default'
p19301
g3
sS'name'
p19302
S'save_in'
p19303
sS'required'
p19304
I00
sS'group_name'
p19305
S'Advanced'
p19306
sa(dp19307
S'description'
p19308
S'The seed for the master random number generator\n'
p19309
sS'cpp_type'
p19310
S'unsigned int'
p19311
sS'default'
p19312
S'0'
p19313
sS'name'
p19314
S'seed'
p19315
sS'required'
p19316
I00
sS'group_name'
p19317
S'Advanced'
p19318
sa(dp19319
S'description'
p19320
g3
sS'cpp_type'
p19321
S'std::string'
p19322
sS'default'
p19323
S'MassEigenKernel'
p19324
sS'name'
p19325
S'type'
p19326
sS'required'
p19327
I00
sS'group_name'
p19328
Nsa(dp19329
S'description'
p19330
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19331
sS'cpp_type'
p19332
S'bool'
p19333
sS'default'
p19334
S'0'
p19335
sS'name'
p19336
S'use_displaced_mesh'
p19337
sS'required'
p19338
I00
sS'group_name'
p19339
S'Advanced'
p19340
sa(dp19341
S'description'
p19342
S'The name of the variable that this Kernel operates on\n'
p19343
sS'cpp_type'
p19344
S'NonlinearVariableName'
p19345
sS'default'
p19346
g3
sS'name'
p19347
S'variable'
p19348
sS'required'
p19349
I01
sS'group_name'
p19350
NsasS'name'
p19351
S'/Kernels/MassEigenKernel'
p19352
sa(dp19353
S'description'
p19354
g3
sS'type'
p19355
NsS'subblocks'
p19356
NsS'parameters'
p19357
(lp19358
(dp19359
S'description'
p19360
S'The name of the diffusivity\n'
p19361
sS'cpp_type'
p19362
S'std::string'
p19363
sS'default'
p19364
S'D'
p19365
sS'name'
p19366
S'D_name'
p19367
sS'required'
p19368
I00
sS'group_name'
p19369
Nsa(dp19370
S'description'
p19371
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19372
sS'cpp_type'
p19373
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p19374
sS'default'
p19375
g3
sS'name'
p19376
S'block'
p19377
sS'required'
p19378
I00
sS'group_name'
p19379
Nsa(dp19380
S'description'
p19381
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19382
sS'cpp_type'
p19383
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19384
sS'default'
p19385
g3
sS'name'
p19386
S'diag_save_in'
p19387
sS'required'
p19388
I00
sS'group_name'
p19389
S'Advanced'
p19390
sa(dp19391
S'description'
p19392
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19393
sS'cpp_type'
p19394
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19395
sS'default'
p19396
g3
sS'name'
p19397
S'save_in'
p19398
sS'required'
p19399
I00
sS'group_name'
p19400
S'Advanced'
p19401
sa(dp19402
S'description'
p19403
S'The seed for the master random number generator\n'
p19404
sS'cpp_type'
p19405
S'unsigned int'
p19406
sS'default'
p19407
S'0'
p19408
sS'name'
p19409
S'seed'
p19410
sS'required'
p19411
I00
sS'group_name'
p19412
S'Advanced'
p19413
sa(dp19414
S'description'
p19415
g3
sS'cpp_type'
p19416
S'std::string'
p19417
sS'default'
p19418
S'MatDiffusion'
p19419
sS'name'
p19420
S'type'
p19421
sS'required'
p19422
I00
sS'group_name'
p19423
Nsa(dp19424
S'description'
p19425
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19426
sS'cpp_type'
p19427
S'bool'
p19428
sS'default'
p19429
S'0'
p19430
sS'name'
p19431
S'use_displaced_mesh'
p19432
sS'required'
p19433
I00
sS'group_name'
p19434
S'Advanced'
p19435
sa(dp19436
S'description'
p19437
S'The name of the variable that this Kernel operates on\n'
p19438
sS'cpp_type'
p19439
S'NonlinearVariableName'
p19440
sS'default'
p19441
g3
sS'name'
p19442
S'variable'
p19443
sS'required'
p19444
I01
sS'group_name'
p19445
NsasS'name'
p19446
S'/Kernels/MatDiffusion'
p19447
sa(dp19448
S'description'
p19449
g3
sS'type'
p19450
NsS'subblocks'
p19451
NsS'parameters'
p19452
(lp19453
(dp19454
S'description'
p19455
S'Name of temperature variable\n'
p19456
sS'cpp_type'
p19457
S'VariableName'
p19458
sS'default'
p19459
g3
sS'name'
p19460
S'T'
p19461
sS'required'
p19462
I00
sS'group_name'
p19463
Nsa(dp19464
S'description'
p19465
S'Name of coupled concentration variable\n'
p19466
sS'cpp_type'
p19467
S'VariableName'
p19468
sS'default'
p19469
S'NONE'
p19470
sS'name'
p19471
S'c'
p19472
sS'required'
p19473
I00
sS'group_name'
p19474
Nsa(dp19475
S'description'
p19476
S'specifies the number of grains to create\n'
p19477
sS'cpp_type'
p19478
S'unsigned int'
p19479
sS'default'
p19480
g3
sS'name'
p19481
S'crys_num'
p19482
sS'required'
p19483
I01
sS'group_name'
p19484
Nsa(dp19485
S'description'
p19486
S'Ratio of surface to GB energy\n'
p19487
sS'cpp_type'
p19488
S'double'
p19489
sS'default'
p19490
S'1'
p19491
sS'name'
p19492
S'en_ratio'
p19493
sS'required'
p19494
I00
sS'group_name'
p19495
Nsa(dp19496
S'description'
p19497
S'Whether kernels are implicit or not\n'
p19498
sS'cpp_type'
p19499
S'bool'
p19500
sS'default'
p19501
S'1'
p19502
sS'name'
p19503
S'implicit'
p19504
sS'required'
p19505
I00
sS'group_name'
p19506
Nsa(dp19507
S'description'
p19508
S'specifies the base name of the variables\n'
p19509
sS'cpp_type'
p19510
S'std::string'
p19511
sS'default'
p19512
g3
sS'name'
p19513
S'var_name_base'
p19514
sS'required'
p19515
I01
sS'group_name'
p19516
NsasS'name'
p19517
S'/Kernels/PolycrystalKernel'
p19518
sa(dp19519
S'description'
p19520
g3
sS'type'
p19521
NsS'subblocks'
p19522
NsS'parameters'
p19523
(lp19524
(dp19525
S'description'
p19526
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19527
sS'cpp_type'
p19528
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p19529
sS'default'
p19530
g3
sS'name'
p19531
S'block'
p19532
sS'required'
p19533
I00
sS'group_name'
p19534
Nsa(dp19535
S'description'
p19536
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19537
sS'cpp_type'
p19538
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19539
sS'default'
p19540
g3
sS'name'
p19541
S'diag_save_in'
p19542
sS'required'
p19543
I00
sS'group_name'
p19544
S'Advanced'
p19545
sa(dp19546
S'description'
p19547
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19548
sS'cpp_type'
p19549
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19550
sS'default'
p19551
g3
sS'name'
p19552
S'save_in'
p19553
sS'required'
p19554
I00
sS'group_name'
p19555
S'Advanced'
p19556
sa(dp19557
S'description'
p19558
S'The seed for the master random number generator\n'
p19559
sS'cpp_type'
p19560
S'unsigned int'
p19561
sS'default'
p19562
S'0'
p19563
sS'name'
p19564
S'seed'
p19565
sS'required'
p19566
I00
sS'group_name'
p19567
S'Advanced'
p19568
sa(dp19569
S'description'
p19570
g3
sS'cpp_type'
p19571
S'std::string'
p19572
sS'default'
p19573
S'Reaction'
p19574
sS'name'
p19575
S'type'
p19576
sS'required'
p19577
I00
sS'group_name'
p19578
Nsa(dp19579
S'description'
p19580
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19581
sS'cpp_type'
p19582
S'bool'
p19583
sS'default'
p19584
S'0'
p19585
sS'name'
p19586
S'use_displaced_mesh'
p19587
sS'required'
p19588
I00
sS'group_name'
p19589
S'Advanced'
p19590
sa(dp19591
S'description'
p19592
S'The name of the variable that this Kernel operates on\n'
p19593
sS'cpp_type'
p19594
S'NonlinearVariableName'
p19595
sS'default'
p19596
g3
sS'name'
p19597
S'variable'
p19598
sS'required'
p19599
I01
sS'group_name'
p19600
NsasS'name'
p19601
S'/Kernels/Reaction'
p19602
sa(dp19603
S'description'
p19604
g3
sS'type'
p19605
NsS'subblocks'
p19606
NsS'parameters'
p19607
(lp19608
(dp19609
S'description'
p19610
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19611
sS'cpp_type'
p19612
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p19613
sS'default'
p19614
g3
sS'name'
p19615
S'block'
p19616
sS'required'
p19617
I00
sS'group_name'
p19618
Nsa(dp19619
S'description'
p19620
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19621
sS'cpp_type'
p19622
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19623
sS'default'
p19624
g3
sS'name'
p19625
S'diag_save_in'
p19626
sS'required'
p19627
I00
sS'group_name'
p19628
S'Advanced'
p19629
sa(dp19630
S'description'
p19631
S'The Real material property you would like to output\n'
p19632
sS'cpp_type'
p19633
S'std::string'
p19634
sS'default'
p19635
g3
sS'name'
p19636
S'prop_name'
p19637
sS'required'
p19638
I01
sS'group_name'
p19639
Nsa(dp19640
S'description'
p19641
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19642
sS'cpp_type'
p19643
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19644
sS'default'
p19645
g3
sS'name'
p19646
S'save_in'
p19647
sS'required'
p19648
I00
sS'group_name'
p19649
S'Advanced'
p19650
sa(dp19651
S'description'
p19652
S'The seed for the master random number generator\n'
p19653
sS'cpp_type'
p19654
S'unsigned int'
p19655
sS'default'
p19656
S'0'
p19657
sS'name'
p19658
S'seed'
p19659
sS'required'
p19660
I00
sS'group_name'
p19661
S'Advanced'
p19662
sa(dp19663
S'description'
p19664
g3
sS'cpp_type'
p19665
S'std::string'
p19666
sS'default'
p19667
S'RealPropertyOutput'
p19668
sS'name'
p19669
S'type'
p19670
sS'required'
p19671
I00
sS'group_name'
p19672
Nsa(dp19673
S'description'
p19674
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19675
sS'cpp_type'
p19676
S'bool'
p19677
sS'default'
p19678
S'0'
p19679
sS'name'
p19680
S'use_displaced_mesh'
p19681
sS'required'
p19682
I00
sS'group_name'
p19683
S'Advanced'
p19684
sa(dp19685
S'description'
p19686
S'The name of the variable that this Kernel operates on\n'
p19687
sS'cpp_type'
p19688
S'NonlinearVariableName'
p19689
sS'default'
p19690
g3
sS'name'
p19691
S'variable'
p19692
sS'required'
p19693
I01
sS'group_name'
p19694
NsasS'name'
p19695
S'/Kernels/RealPropertyOutput'
p19696
sa(dp19697
S'description'
p19698
g3
sS'type'
p19699
NsS'subblocks'
p19700
NsS'parameters'
p19701
(lp19702
(dp19703
S'description'
p19704
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19705
sS'cpp_type'
p19706
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p19707
sS'default'
p19708
g3
sS'name'
p19709
S'block'
p19710
sS'required'
p19711
I00
sS'group_name'
p19712
Nsa(dp19713
S'description'
p19714
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19715
sS'cpp_type'
p19716
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19717
sS'default'
p19718
g3
sS'name'
p19719
S'diag_save_in'
p19720
sS'required'
p19721
I00
sS'group_name'
p19722
S'Advanced'
p19723
sa(dp19724
S'description'
p19725
S'The kappa used with the kernel\n'
p19726
sS'cpp_type'
p19727
S'std::string'
p19728
sS'default'
p19729
g3
sS'name'
p19730
S'kappa_name'
p19731
sS'required'
p19732
I01
sS'group_name'
p19733
Nsa(dp19734
S'description'
p19735
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19736
sS'cpp_type'
p19737
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19738
sS'default'
p19739
g3
sS'name'
p19740
S'save_in'
p19741
sS'required'
p19742
I00
sS'group_name'
p19743
S'Advanced'
p19744
sa(dp19745
S'description'
p19746
S'The seed for the master random number generator\n'
p19747
sS'cpp_type'
p19748
S'unsigned int'
p19749
sS'default'
p19750
S'0'
p19751
sS'name'
p19752
S'seed'
p19753
sS'required'
p19754
I00
sS'group_name'
p19755
S'Advanced'
p19756
sa(dp19757
S'description'
p19758
g3
sS'cpp_type'
p19759
S'std::string'
p19760
sS'default'
p19761
S'SplitCHMath'
p19762
sS'name'
p19763
S'type'
p19764
sS'required'
p19765
I00
sS'group_name'
p19766
Nsa(dp19767
S'description'
p19768
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19769
sS'cpp_type'
p19770
S'bool'
p19771
sS'default'
p19772
S'0'
p19773
sS'name'
p19774
S'use_displaced_mesh'
p19775
sS'required'
p19776
I00
sS'group_name'
p19777
S'Advanced'
p19778
sa(dp19779
S'description'
p19780
S'The name of the variable that this Kernel operates on\n'
p19781
sS'cpp_type'
p19782
S'NonlinearVariableName'
p19783
sS'default'
p19784
g3
sS'name'
p19785
S'variable'
p19786
sS'required'
p19787
I01
sS'group_name'
p19788
Nsa(dp19789
S'description'
p19790
S'chem poten\n'
p19791
sS'cpp_type'
p19792
S'std::vector<VariableName>'
p19793
sS'default'
p19794
g3
sS'name'
p19795
S'w'
p19796
sS'required'
p19797
I01
sS'group_name'
p19798
NsasS'name'
p19799
S'/Kernels/SplitCHMath'
p19800
sa(dp19801
S'description'
p19802
g3
sS'type'
p19803
NsS'subblocks'
p19804
NsS'parameters'
p19805
(lp19806
(dp19807
S'description'
p19808
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19809
sS'cpp_type'
p19810
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p19811
sS'default'
p19812
g3
sS'name'
p19813
S'block'
p19814
sS'required'
p19815
I00
sS'group_name'
p19816
Nsa(dp19817
S'description'
p19818
S'intermediate parameter--concentration\n'
p19819
sS'cpp_type'
p19820
S'std::vector<VariableName>'
p19821
sS'default'
p19822
g3
sS'name'
p19823
S'c'
p19824
sS'required'
p19825
I01
sS'group_name'
p19826
Nsa(dp19827
S'description'
p19828
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19829
sS'cpp_type'
p19830
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19831
sS'default'
p19832
g3
sS'name'
p19833
S'diag_save_in'
p19834
sS'required'
p19835
I00
sS'group_name'
p19836
S'Advanced'
p19837
sa(dp19838
S'description'
p19839
S'The mobility used with the kernel\n'
p19840
sS'cpp_type'
p19841
S'std::string'
p19842
sS'default'
p19843
S'mobtemp'
p19844
sS'name'
p19845
S'mob_name'
p19846
sS'required'
p19847
I00
sS'group_name'
p19848
Nsa(dp19849
S'description'
p19850
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19851
sS'cpp_type'
p19852
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19853
sS'default'
p19854
g3
sS'name'
p19855
S'save_in'
p19856
sS'required'
p19857
I00
sS'group_name'
p19858
S'Advanced'
p19859
sa(dp19860
S'description'
p19861
S'The seed for the master random number generator\n'
p19862
sS'cpp_type'
p19863
S'unsigned int'
p19864
sS'default'
p19865
S'0'
p19866
sS'name'
p19867
S'seed'
p19868
sS'required'
p19869
I00
sS'group_name'
p19870
S'Advanced'
p19871
sa(dp19872
S'description'
p19873
g3
sS'cpp_type'
p19874
S'std::string'
p19875
sS'default'
p19876
S'SplitCHWRes'
p19877
sS'name'
p19878
S'type'
p19879
sS'required'
p19880
I00
sS'group_name'
p19881
Nsa(dp19882
S'description'
p19883
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19884
sS'cpp_type'
p19885
S'bool'
p19886
sS'default'
p19887
S'0'
p19888
sS'name'
p19889
S'use_displaced_mesh'
p19890
sS'required'
p19891
I00
sS'group_name'
p19892
S'Advanced'
p19893
sa(dp19894
S'description'
p19895
S'The name of the variable that this Kernel operates on\n'
p19896
sS'cpp_type'
p19897
S'NonlinearVariableName'
p19898
sS'default'
p19899
g3
sS'name'
p19900
S'variable'
p19901
sS'required'
p19902
I01
sS'group_name'
p19903
NsasS'name'
p19904
S'/Kernels/SplitCHWRes'
p19905
sa(dp19906
S'description'
p19907
g3
sS'type'
p19908
NsS'subblocks'
p19909
NsS'parameters'
p19910
(lp19911
(dp19912
S'description'
p19913
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19914
sS'cpp_type'
p19915
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p19916
sS'default'
p19917
g3
sS'name'
p19918
S'block'
p19919
sS'required'
p19920
I00
sS'group_name'
p19921
Nsa(dp19922
S'description'
p19923
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19924
sS'cpp_type'
p19925
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19926
sS'default'
p19927
g3
sS'name'
p19928
S'diag_save_in'
p19929
sS'required'
p19930
I00
sS'group_name'
p19931
S'Advanced'
p19932
sa(dp19933
S'description'
p19934
S'True for mass matrix lumping, false otherwise\n'
p19935
sS'cpp_type'
p19936
S'bool'
p19937
sS'default'
p19938
S'0'
p19939
sS'name'
p19940
S'lumping'
p19941
sS'required'
p19942
I00
sS'group_name'
p19943
Nsa(dp19944
S'description'
p19945
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19946
sS'cpp_type'
p19947
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p19948
sS'default'
p19949
g3
sS'name'
p19950
S'save_in'
p19951
sS'required'
p19952
I00
sS'group_name'
p19953
S'Advanced'
p19954
sa(dp19955
S'description'
p19956
S'The seed for the master random number generator\n'
p19957
sS'cpp_type'
p19958
S'unsigned int'
p19959
sS'default'
p19960
S'0'
p19961
sS'name'
p19962
S'seed'
p19963
sS'required'
p19964
I00
sS'group_name'
p19965
S'Advanced'
p19966
sa(dp19967
S'description'
p19968
g3
sS'cpp_type'
p19969
S'std::string'
p19970
sS'default'
p19971
S'TimeDerivative'
p19972
sS'name'
p19973
S'type'
p19974
sS'required'
p19975
I00
sS'group_name'
p19976
Nsa(dp19977
S'description'
p19978
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19979
sS'cpp_type'
p19980
S'bool'
p19981
sS'default'
p19982
S'0'
p19983
sS'name'
p19984
S'use_displaced_mesh'
p19985
sS'required'
p19986
I00
sS'group_name'
p19987
S'Advanced'
p19988
sa(dp19989
S'description'
p19990
S'The name of the variable that this Kernel operates on\n'
p19991
sS'cpp_type'
p19992
S'NonlinearVariableName'
p19993
sS'default'
p19994
g3
sS'name'
p19995
S'variable'
p19996
sS'required'
p19997
I01
sS'group_name'
p19998
NsasS'name'
p19999
S'/Kernels/TimeDerivative'
p20000
sa(dp20001
S'description'
p20002
g3
sS'type'
p20003
NsS'subblocks'
p20004
NsS'parameters'
p20005
(lp20006
(dp20007
S'description'
p20008
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20009
sS'cpp_type'
p20010
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p20011
sS'default'
p20012
g3
sS'name'
p20013
S'block'
p20014
sS'required'
p20015
I00
sS'group_name'
p20016
Nsa(dp20017
S'description'
p20018
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p20019
sS'cpp_type'
p20020
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p20021
sS'default'
p20022
g3
sS'name'
p20023
S'diag_save_in'
p20024
sS'required'
p20025
I00
sS'group_name'
p20026
S'Advanced'
p20027
sa(dp20028
S'description'
p20029
S'The forcing function\n'
p20030
sS'cpp_type'
p20031
S'FunctionName'
p20032
sS'default'
p20033
g3
sS'name'
p20034
S'function'
p20035
sS'required'
p20036
I01
sS'group_name'
p20037
Nsa(dp20038
S'description'
p20039
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p20040
sS'cpp_type'
p20041
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p20042
sS'default'
p20043
g3
sS'name'
p20044
S'save_in'
p20045
sS'required'
p20046
I00
sS'group_name'
p20047
S'Advanced'
p20048
sa(dp20049
S'description'
p20050
S'The seed for the master random number generator\n'
p20051
sS'cpp_type'
p20052
S'unsigned int'
p20053
sS'default'
p20054
S'0'
p20055
sS'name'
p20056
S'seed'
p20057
sS'required'
p20058
I00
sS'group_name'
p20059
S'Advanced'
p20060
sa(dp20061
S'description'
p20062
g3
sS'cpp_type'
p20063
S'std::string'
p20064
sS'default'
p20065
S'UserForcingFunction'
p20066
sS'name'
p20067
S'type'
p20068
sS'required'
p20069
I00
sS'group_name'
p20070
Nsa(dp20071
S'description'
p20072
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20073
sS'cpp_type'
p20074
S'bool'
p20075
sS'default'
p20076
S'0'
p20077
sS'name'
p20078
S'use_displaced_mesh'
p20079
sS'required'
p20080
I00
sS'group_name'
p20081
S'Advanced'
p20082
sa(dp20083
S'description'
p20084
S'The name of the variable that this Kernel operates on\n'
p20085
sS'cpp_type'
p20086
S'NonlinearVariableName'
p20087
sS'default'
p20088
g3
sS'name'
p20089
S'variable'
p20090
sS'required'
p20091
I01
sS'group_name'
p20092
NsasS'name'
p20093
S'/Kernels/UserForcingFunction'
p20094
sasS'parameters'
p20095
NsS'name'
p20096
S'/Kernels'
p20097
sa(dp20098
S'description'
p20099
g3
sS'type'
p20100
NsS'subblocks'
p20101
(lp20102
(dp20103
S'description'
p20104
g3
sS'type'
p20105
NsS'subblocks'
p20106
NsS'parameters'
p20107
(lp20108
(dp20109
S'description'
p20110
S'A string representing the Moose Object that will be built by this Action\n'
p20111
sS'cpp_type'
p20112
S'std::string'
p20113
sS'default'
p20114
g3
sS'name'
p20115
S'type'
p20116
sS'required'
p20117
I01
sS'group_name'
p20118
NsasS'name'
p20119
S'/Materials/*'
p20120
sa(dp20121
S'description'
p20122
g3
sS'type'
p20123
NsS'subblocks'
p20124
NsS'parameters'
p20125
(lp20126
(dp20127
S'description'
p20128
S'GB mobility input in m^4/(J*s), that overrides the temperature dependent calculation\n'
p20129
sS'cpp_type'
p20130
S'double'
p20131
sS'default'
p20132
S'-1'
p20133
sS'name'
p20134
S'GBMobility'
p20135
sS'required'
p20136
I00
sS'group_name'
p20137
Nsa(dp20138
S'description'
p20139
S'Grain boundary energy in J/m^2\n'
p20140
sS'cpp_type'
p20141
S'double'
p20142
sS'default'
p20143
g3
sS'name'
p20144
S'GBenergy'
p20145
sS'required'
p20146
I01
sS'group_name'
p20147
Nsa(dp20148
S'description'
p20149
S'Grain boundary mobility prefactor in m^4/(J*s)\n'
p20150
sS'cpp_type'
p20151
S'double'
p20152
sS'default'
p20153
S'0'
p20154
sS'name'
p20155
S'GBmob0'
p20156
sS'required'
p20157
I00
sS'group_name'
p20158
Nsa(dp20159
S'description'
p20160
S'Grain boundary migration activation energy in eV\n'
p20161
sS'cpp_type'
p20162
S'double'
p20163
sS'default'
p20164
S'0'
p20165
sS'name'
p20166
S'Q'
p20167
sS'required'
p20168
I00
sS'group_name'
p20169
Nsa(dp20170
S'description'
p20171
S'Temperature in Kelvin\n'
p20172
sS'cpp_type'
p20173
S'std::vector<VariableName>'
p20174
sS'default'
p20175
g3
sS'name'
p20176
S'T'
p20177
sS'required'
p20178
I01
sS'group_name'
p20179
Nsa(dp20180
S'description'
p20181
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20182
sS'cpp_type'
p20183
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p20184
sS'default'
p20185
g3
sS'name'
p20186
S'block'
p20187
sS'required'
p20188
I00
sS'group_name'
p20189
Nsa(dp20190
S'description'
p20191
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20192
sS'cpp_type'
p20193
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20194
sS'default'
p20195
g3
sS'name'
p20196
S'boundary'
p20197
sS'required'
p20198
I00
sS'group_name'
p20199
Nsa(dp20200
S'description'
p20201
S'The GB energy constant \n'
p20202
sS'cpp_type'
p20203
S'double'
p20204
sS'default'
p20205
S'0.125'
p20206
sS'name'
p20207
S'f0s'
p20208
sS'required'
p20209
I00
sS'group_name'
p20210
Nsa(dp20211
S'description'
p20212
S'Length scale in m, where default is nm\n'
p20213
sS'cpp_type'
p20214
S'double'
p20215
sS'default'
p20216
S'1e-09'
p20217
sS'name'
p20218
S'length_scale'
p20219
sS'required'
p20220
I00
sS'group_name'
p20221
Nsa(dp20222
S'description'
p20223
S'Molar volume in m^3/mol, needed for temperature gradient driving force\n'
p20224
sS'cpp_type'
p20225
S'double'
p20226
sS'default'
p20227
S'2.462e-05'
p20228
sS'name'
p20229
S'molar_volume'
p20230
sS'required'
p20231
I00
sS'group_name'
p20232
Nsa(dp20233
S'description'
p20234
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p20235
sS'cpp_type'
p20236
S'std::vector<std::string, std::allocator<std::string> >'
p20237
sS'default'
p20238
g3
sS'name'
p20239
S'output_properties'
p20240
sS'required'
p20241
I00
sS'group_name'
p20242
S'Outputs'
p20243
sa(dp20244
S'description'
p20245
S'Vector of output names were you would like to restrict the output of material data (empty outputs to all)\n'
p20246
sS'cpp_type'
p20247
S'std::vector<OutputName, std::allocator<OutputName> >'
p20248
sS'default'
p20249
S'none'
p20250
sS'name'
p20251
S'outputs'
p20252
sS'required'
p20253
I00
sS'group_name'
p20254
S'Outputs'
p20255
sa(dp20256
S'description'
p20257
S'Time scale in s, where default is ns\n'
p20258
sS'cpp_type'
p20259
S'double'
p20260
sS'default'
p20261
S'1e-09'
p20262
sS'name'
p20263
S'time_scale'
p20264
sS'required'
p20265
I00
sS'group_name'
p20266
Nsa(dp20267
S'description'
p20268
g3
sS'cpp_type'
p20269
S'std::string'
p20270
sS'default'
p20271
S'GBEvolution'
p20272
sS'name'
p20273
S'type'
p20274
sS'required'
p20275
I00
sS'group_name'
p20276
Nsa(dp20277
S'description'
p20278
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20279
sS'cpp_type'
p20280
S'bool'
p20281
sS'default'
p20282
S'0'
p20283
sS'name'
p20284
S'use_displaced_mesh'
p20285
sS'required'
p20286
I00
sS'group_name'
p20287
S'Advanced'
p20288
sa(dp20289
S'description'
p20290
S'Diffuse GB width in nm \n'
p20291
sS'cpp_type'
p20292
S'double'
p20293
sS'default'
p20294
g3
sS'name'
p20295
S'wGB'
p20296
sS'required'
p20297
I01
sS'group_name'
p20298
NsasS'name'
p20299
S'/Materials/GBEvolution'
p20300
sa(dp20301
S'description'
p20302
g3
sS'type'
p20303
NsS'subblocks'
p20304
NsS'parameters'
p20305
(lp20306
(dp20307
S'description'
p20308
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20309
sS'cpp_type'
p20310
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p20311
sS'default'
p20312
g3
sS'name'
p20313
S'block'
p20314
sS'required'
p20315
I00
sS'group_name'
p20316
Nsa(dp20317
S'description'
p20318
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20319
sS'cpp_type'
p20320
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20321
sS'default'
p20322
g3
sS'name'
p20323
S'boundary'
p20324
sS'required'
p20325
I00
sS'group_name'
p20326
Nsa(dp20327
S'description'
p20328
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p20329
sS'cpp_type'
p20330
S'std::vector<std::string, std::allocator<std::string> >'
p20331
sS'default'
p20332
g3
sS'name'
p20333
S'output_properties'
p20334
sS'required'
p20335
I00
sS'group_name'
p20336
S'Outputs'
p20337
sa(dp20338
S'description'
p20339
S'Vector of output names were you would like to restrict the output of material data (empty outputs to all)\n'
p20340
sS'cpp_type'
p20341
S'std::vector<OutputName, std::allocator<OutputName> >'
p20342
sS'default'
p20343
S'none'
p20344
sS'name'
p20345
S'outputs'
p20346
sS'required'
p20347
I00
sS'group_name'
p20348
S'Outputs'
p20349
sa(dp20350
S'description'
p20351
S'The names of the properties this material will have\n'
p20352
sS'cpp_type'
p20353
S'std::vector<std::string, std::allocator<std::string> >'
p20354
sS'default'
p20355
g3
sS'name'
p20356
S'prop_names'
p20357
sS'required'
p20358
I00
sS'group_name'
p20359
Nsa(dp20360
S'description'
p20361
S'The values associated with the named properties\n'
p20362
sS'cpp_type'
p20363
S'std::vector<double, std::allocator<double> >'
p20364
sS'default'
p20365
g3
sS'name'
p20366
S'prop_values'
p20367
sS'required'
p20368
I00
sS'group_name'
p20369
Nsa(dp20370
S'description'
p20371
g3
sS'cpp_type'
p20372
S'std::string'
p20373
sS'default'
p20374
S'GenericConstantMaterial'
p20375
sS'name'
p20376
S'type'
p20377
sS'required'
p20378
I00
sS'group_name'
p20379
Nsa(dp20380
S'description'
p20381
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20382
sS'cpp_type'
p20383
S'bool'
p20384
sS'default'
p20385
S'0'
p20386
sS'name'
p20387
S'use_displaced_mesh'
p20388
sS'required'
p20389
I00
sS'group_name'
p20390
S'Advanced'
p20391
sasS'name'
p20392
S'/Materials/GenericConstantMaterial'
p20393
sa(dp20394
S'description'
p20395
g3
sS'type'
p20396
NsS'subblocks'
p20397
NsS'parameters'
p20398
(lp20399
(dp20400
S'description'
p20401
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20402
sS'cpp_type'
p20403
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p20404
sS'default'
p20405
g3
sS'name'
p20406
S'block'
p20407
sS'required'
p20408
I00
sS'group_name'
p20409
Nsa(dp20410
S'description'
p20411
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20412
sS'cpp_type'
p20413
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20414
sS'default'
p20415
g3
sS'name'
p20416
S'boundary'
p20417
sS'required'
p20418
I00
sS'group_name'
p20419
Nsa(dp20420
S'description'
p20421
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p20422
sS'cpp_type'
p20423
S'std::vector<std::string, std::allocator<std::string> >'
p20424
sS'default'
p20425
g3
sS'name'
p20426
S'output_properties'
p20427
sS'required'
p20428
I00
sS'group_name'
p20429
S'Outputs'
p20430
sa(dp20431
S'description'
p20432
S'Vector of output names were you would like to restrict the output of material data (empty outputs to all)\n'
p20433
sS'cpp_type'
p20434
S'std::vector<OutputName, std::allocator<OutputName> >'
p20435
sS'default'
p20436
S'none'
p20437
sS'name'
p20438
S'outputs'
p20439
sS'required'
p20440
I00
sS'group_name'
p20441
S'Outputs'
p20442
sa(dp20443
S'description'
p20444
S'The names of the properties this material will have\n'
p20445
sS'cpp_type'
p20446
S'std::vector<std::string, std::allocator<std::string> >'
p20447
sS'default'
p20448
g3
sS'name'
p20449
S'prop_names'
p20450
sS'required'
p20451
I00
sS'group_name'
p20452
Nsa(dp20453
S'description'
p20454
S'The corresponding names of the functions that are going to provide the values for the variables\n'
p20455
sS'cpp_type'
p20456
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p20457
sS'default'
p20458
g3
sS'name'
p20459
S'prop_values'
p20460
sS'required'
p20461
I00
sS'group_name'
p20462
Nsa(dp20463
S'description'
p20464
g3
sS'cpp_type'
p20465
S'std::string'
p20466
sS'default'
p20467
S'GenericFunctionMaterial'
p20468
sS'name'
p20469
S'type'
p20470
sS'required'
p20471
I00
sS'group_name'
p20472
Nsa(dp20473
S'description'
p20474
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20475
sS'cpp_type'
p20476
S'bool'
p20477
sS'default'
p20478
S'0'
p20479
sS'name'
p20480
S'use_displaced_mesh'
p20481
sS'required'
p20482
I00
sS'group_name'
p20483
S'Advanced'
p20484
sasS'name'
p20485
S'/Materials/GenericFunctionMaterial'
p20486
sa(dp20487
S'description'
p20488
g3
sS'type'
p20489
NsS'subblocks'
p20490
NsS'parameters'
p20491
(lp20492
(dp20493
S'description'
p20494
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20495
sS'cpp_type'
p20496
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p20497
sS'default'
p20498
g3
sS'name'
p20499
S'block'
p20500
sS'required'
p20501
I00
sS'group_name'
p20502
Nsa(dp20503
S'description'
p20504
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20505
sS'cpp_type'
p20506
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20507
sS'default'
p20508
g3
sS'name'
p20509
S'boundary'
p20510
sS'required'
p20511
I00
sS'group_name'
p20512
Nsa(dp20513
S'description'
p20514
S'The kappa parameter for the vacancy concentration\n'
p20515
sS'cpp_type'
p20516
S'double'
p20517
sS'default'
p20518
S'1'
p20519
sS'name'
p20520
S'kappa'
p20521
sS'required'
p20522
I00
sS'group_name'
p20523
Nsa(dp20524
S'description'
p20525
S'The mobility value\n'
p20526
sS'cpp_type'
p20527
S'double'
p20528
sS'default'
p20529
g3
sS'name'
p20530
S'mob'
p20531
sS'required'
p20532
I01
sS'group_name'
p20533
Nsa(dp20534
S'description'
p20535
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p20536
sS'cpp_type'
p20537
S'std::vector<std::string, std::allocator<std::string> >'
p20538
sS'default'
p20539
g3
sS'name'
p20540
S'output_properties'
p20541
sS'required'
p20542
I00
sS'group_name'
p20543
S'Outputs'
p20544
sa(dp20545
S'description'
p20546
S'Vector of output names were you would like to restrict the output of material data (empty outputs to all)\n'
p20547
sS'cpp_type'
p20548
S'std::vector<OutputName, std::allocator<OutputName> >'
p20549
sS'default'
p20550
S'none'
p20551
sS'name'
p20552
S'outputs'
p20553
sS'required'
p20554
I00
sS'group_name'
p20555
S'Outputs'
p20556
sa(dp20557
S'description'
p20558
g3
sS'cpp_type'
p20559
S'std::string'
p20560
sS'default'
p20561
S'PFMobility'
p20562
sS'name'
p20563
S'type'
p20564
sS'required'
p20565
I00
sS'group_name'
p20566
Nsa(dp20567
S'description'
p20568
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20569
sS'cpp_type'
p20570
S'bool'
p20571
sS'default'
p20572
S'0'
p20573
sS'name'
p20574
S'use_displaced_mesh'
p20575
sS'required'
p20576
I00
sS'group_name'
p20577
S'Advanced'
p20578
sasS'name'
p20579
S'/Materials/PFMobility'
p20580
sasS'parameters'
p20581
NsS'name'
p20582
S'/Materials'
p20583
sa(dp20584
S'description'
p20585
g3
sS'type'
p20586
NsS'subblocks'
p20587
(lp20588
(dp20589
S'description'
p20590
g3
sS'type'
p20591
NsS'subblocks'
p20592
(lp20593
(dp20594
S'description'
p20595
g3
sS'type'
p20596
NsS'subblocks'
p20597
NsS'parameters'
p20598
(lp20599
(dp20600
S'name'
p20601
S'centroid_partitioner_direction'
p20602
sS'cpp_type'
p20603
S'MooseEnum'
p20604
sS'default'
p20605
g3
sS'description'
p20606
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p20607
sS'required'
p20608
I00
sS'options'
p20609
S'x y z radial'
p20610
sS'group_name'
p20611
S'Partitioning'
p20612
sa(dp20613
S'name'
p20614
S'dim'
p20615
sS'cpp_type'
p20616
S'MooseEnum'
p20617
sS'default'
p20618
S'3'
p20619
sS'description'
p20620
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected.  In particular you must supply this for GMSH meshes.  Note: This is completely ignored for ExodusII meshes!\n'
p20621
sS'required'
p20622
I00
sS'options'
p20623
S'1 2 3'
p20624
sS'group_name'
p20625
S'Advanced'
p20626
sa(dp20627
S'name'
p20628
S'distribution'
p20629
sS'cpp_type'
p20630
S'MooseEnum'
p20631
sS'default'
p20632
S'DEFAULT'
p20633
sS'description'
p20634
S'PARALLEL: Always use libMesh::ParallelMesh SERIAL: Always use libMesh::SerialMesh DEFAULT: Use libMesh::SerialMesh unless --parallel-mesh is specified on the command line\n'
p20635
sS'required'
p20636
I00
sS'options'
p20637
S'PARALLEL SERIAL DEFAULT'
p20638
sS'group_name'
p20639
Nsa(dp20640
S'description'
p20641
S'The name of the mesh file to read\n'
p20642
sS'cpp_type'
p20643
S'MeshFileName'
p20644
sS'default'
p20645
g3
sS'name'
p20646
S'file'
p20647
sS'required'
p20648
I01
sS'group_name'
p20649
Nsa(dp20650
S'description'
p20651
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p20652
sS'cpp_type'
p20653
S'bool'
p20654
sS'default'
p20655
S'0'
p20656
sS'name'
p20657
S'nemesis'
p20658
sS'required'
p20659
I00
sS'group_name'
p20660
S'Advanced'
p20661
sa(dp20662
S'name'
p20663
S'partitioner'
p20664
sS'cpp_type'
p20665
S'MooseEnum'
p20666
sS'default'
p20667
S'default'
p20668
sS'description'
p20669
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p20670
sS'required'
p20671
I00
sS'options'
p20672
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p20673
sS'group_name'
p20674
S'Partitioning'
p20675
sa(dp20676
S'description'
p20677
S"If true the mesh won't be partitioned.  Probably not a good idea to use it with a serial mesh!\n"
p20678
sS'cpp_type'
p20679
S'bool'
p20680
sS'default'
p20681
S'0'
p20682
sS'name'
p20683
S'skip_partitioning'
p20684
sS'required'
p20685
I00
sS'group_name'
p20686
S'Partitioning'
p20687
sa(dp20688
S'description'
p20689
g3
sS'cpp_type'
p20690
S'std::string'
p20691
sS'default'
p20692
S'FileMesh'
p20693
sS'name'
p20694
S'type'
p20695
sS'required'
p20696
I00
sS'group_name'
p20697
NsasS'name'
p20698
S'/Mesh/<type>/FileMesh'
p20699
sa(dp20700
S'description'
p20701
g3
sS'type'
p20702
NsS'subblocks'
p20703
NsS'parameters'
p20704
(lp20705
(dp20706
S'name'
p20707
S'centroid_partitioner_direction'
p20708
sS'cpp_type'
p20709
S'MooseEnum'
p20710
sS'default'
p20711
g3
sS'description'
p20712
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p20713
sS'required'
p20714
I00
sS'options'
p20715
S'x y z radial'
p20716
sS'group_name'
p20717
S'Partitioning'
p20718
sa(dp20719
S'name'
p20720
S'dim'
p20721
sS'cpp_type'
p20722
S'MooseEnum'
p20723
sS'default'
p20724
g3
sS'description'
p20725
S'The dimension of the mesh to be generated\n'
p20726
sS'required'
p20727
I01
sS'options'
p20728
S'1 2 3'
p20729
sS'group_name'
p20730
S'Main'
p20731
sa(dp20732
S'name'
p20733
S'distribution'
p20734
sS'cpp_type'
p20735
S'MooseEnum'
p20736
sS'default'
p20737
S'DEFAULT'
p20738
sS'description'
p20739
S'PARALLEL: Always use libMesh::ParallelMesh SERIAL: Always use libMesh::SerialMesh DEFAULT: Use libMesh::SerialMesh unless --parallel-mesh is specified on the command line\n'
p20740
sS'required'
p20741
I00
sS'options'
p20742
S'PARALLEL SERIAL DEFAULT'
p20743
sS'group_name'
p20744
Nsa(dp20745
S'name'
p20746
S'elem_type'
p20747
sS'cpp_type'
p20748
S'MooseEnum'
p20749
sS'default'
p20750
g3
sS'description'
p20751
S'The type of element from libMesh to generate (default: linear element for requested dimension)\n'
p20752
sS'required'
p20753
I00
sS'options'
p20754
S'EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18'
p20755
sS'group_name'
p20756
Nsa(dp20757
S'description'
p20758
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p20759
sS'cpp_type'
p20760
S'bool'
p20761
sS'default'
p20762
S'0'
p20763
sS'name'
p20764
S'nemesis'
p20765
sS'required'
p20766
I00
sS'group_name'
p20767
S'Advanced'
p20768
sa(dp20769
S'description'
p20770
S'Number of elements in the X direction\n'
p20771
sS'cpp_type'
p20772
S'int'
p20773
sS'default'
p20774
S'1'
p20775
sS'name'
p20776
S'nx'
p20777
sS'required'
p20778
I00
sS'group_name'
p20779
Nsa(dp20780
S'description'
p20781
S'Number of elements in the Y direction\n'
p20782
sS'cpp_type'
p20783
S'int'
p20784
sS'default'
p20785
S'1'
p20786
sS'name'
p20787
S'ny'
p20788
sS'required'
p20789
I00
sS'group_name'
p20790
Nsa(dp20791
S'description'
p20792
S'Number of elements in the Z direction\n'
p20793
sS'cpp_type'
p20794
S'int'
p20795
sS'default'
p20796
S'1'
p20797
sS'name'
p20798
S'nz'
p20799
sS'required'
p20800
I00
sS'group_name'
p20801
Nsa(dp20802
S'name'
p20803
S'partitioner'
p20804
sS'cpp_type'
p20805
S'MooseEnum'
p20806
sS'default'
p20807
S'default'
p20808
sS'description'
p20809
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p20810
sS'required'
p20811
I00
sS'options'
p20812
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p20813
sS'group_name'
p20814
S'Partitioning'
p20815
sa(dp20816
S'description'
p20817
g3
sS'cpp_type'
p20818
S'std::string'
p20819
sS'default'
p20820
S'GeneratedMesh'
p20821
sS'name'
p20822
S'type'
p20823
sS'required'
p20824
I00
sS'group_name'
p20825
Nsa(dp20826
S'description'
p20827
S'Upper X Coordinate of the generated mesh\n'
p20828
sS'cpp_type'
p20829
S'double'
p20830
sS'default'
p20831
S'1'
p20832
sS'name'
p20833
S'xmax'
p20834
sS'required'
p20835
I00
sS'group_name'
p20836
Nsa(dp20837
S'description'
p20838
S'Lower X Coordinate of the generated mesh\n'
p20839
sS'cpp_type'
p20840
S'double'
p20841
sS'default'
p20842
S'0'
p20843
sS'name'
p20844
S'xmin'
p20845
sS'required'
p20846
I00
sS'group_name'
p20847
Nsa(dp20848
S'description'
p20849
S'Upper Y Coordinate of the generated mesh\n'
p20850
sS'cpp_type'
p20851
S'double'
p20852
sS'default'
p20853
S'1'
p20854
sS'name'
p20855
S'ymax'
p20856
sS'required'
p20857
I00
sS'group_name'
p20858
Nsa(dp20859
S'description'
p20860
S'Lower Y Coordinate of the generated mesh\n'
p20861
sS'cpp_type'
p20862
S'double'
p20863
sS'default'
p20864
S'0'
p20865
sS'name'
p20866
S'ymin'
p20867
sS'required'
p20868
I00
sS'group_name'
p20869
Nsa(dp20870
S'description'
p20871
S'Upper Z Coordinate of the generated mesh\n'
p20872
sS'cpp_type'
p20873
S'double'
p20874
sS'default'
p20875
S'1'
p20876
sS'name'
p20877
S'zmax'
p20878
sS'required'
p20879
I00
sS'group_name'
p20880
Nsa(dp20881
S'description'
p20882
S'Lower Z Coordinate of the generated mesh\n'
p20883
sS'cpp_type'
p20884
S'double'
p20885
sS'default'
p20886
S'0'
p20887
sS'name'
p20888
S'zmin'
p20889
sS'required'
p20890
I00
sS'group_name'
p20891
NsasS'name'
p20892
S'/Mesh/<type>/GeneratedMesh'
p20893
sa(dp20894
S'description'
p20895
g3
sS'type'
p20896
NsS'subblocks'
p20897
NsS'parameters'
p20898
(lp20899
(dp20900
S'description'
p20901
S'name of the back (z) boundary\n'
p20902
sS'cpp_type'
p20903
S'BoundaryName'
p20904
sS'default'
p20905
S'back_boundary'
p20906
sS'name'
p20907
S'back_boundary'
p20908
sS'required'
p20909
I00
sS'group_name'
p20910
Nsa(dp20911
S'description'
p20912
S'name of the bottom (y) boundary\n'
p20913
sS'cpp_type'
p20914
S'BoundaryName'
p20915
sS'default'
p20916
S'bottom_boundary'
p20917
sS'name'
p20918
S'bottom_boundary'
p20919
sS'required'
p20920
I00
sS'group_name'
p20921
Nsa(dp20922
S'name'
p20923
S'centroid_partitioner_direction'
p20924
sS'cpp_type'
p20925
S'MooseEnum'
p20926
sS'default'
p20927
g3
sS'description'
p20928
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p20929
sS'required'
p20930
I00
sS'options'
p20931
S'x y z radial'
p20932
sS'group_name'
p20933
S'Partitioning'
p20934
sa(dp20935
S'name'
p20936
S'dim'
p20937
sS'cpp_type'
p20938
S'MooseEnum'
p20939
sS'default'
p20940
S'3'
p20941
sS'description'
p20942
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected.  In particular you must supply this for GMSH meshes.  Note: This is completely ignored for ExodusII meshes!\n'
p20943
sS'required'
p20944
I00
sS'options'
p20945
S'1 2 3'
p20946
sS'group_name'
p20947
S'Advanced'
p20948
sa(dp20949
S'name'
p20950
S'distribution'
p20951
sS'cpp_type'
p20952
S'MooseEnum'
p20953
sS'default'
p20954
S'DEFAULT'
p20955
sS'description'
p20956
S'PARALLEL: Always use libMesh::ParallelMesh SERIAL: Always use libMesh::SerialMesh DEFAULT: Use libMesh::SerialMesh unless --parallel-mesh is specified on the command line\n'
p20957
sS'required'
p20958
I00
sS'options'
p20959
S'PARALLEL SERIAL DEFAULT'
p20960
sS'group_name'
p20961
Nsa(dp20962
S'description'
p20963
S'The name of the mesh file to read\n'
p20964
sS'cpp_type'
p20965
S'MeshFileName'
p20966
sS'default'
p20967
g3
sS'name'
p20968
S'file'
p20969
sS'required'
p20970
I01
sS'group_name'
p20971
Nsa(dp20972
S'description'
p20973
S'name of the front (z) boundary\n'
p20974
sS'cpp_type'
p20975
S'BoundaryName'
p20976
sS'default'
p20977
S'front_boundary'
p20978
sS'name'
p20979
S'front_boundary'
p20980
sS'required'
p20981
I00
sS'group_name'
p20982
Nsa(dp20983
S'description'
p20984
S'name of the left (x) boundary\n'
p20985
sS'cpp_type'
p20986
S'BoundaryName'
p20987
sS'default'
p20988
S'left_boundary'
p20989
sS'name'
p20990
S'left_boundary'
p20991
sS'required'
p20992
I00
sS'group_name'
p20993
Nsa(dp20994
S'description'
p20995
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p20996
sS'cpp_type'
p20997
S'bool'
p20998
sS'default'
p20999
S'0'
p21000
sS'name'
p21001
S'nemesis'
p21002
sS'required'
p21003
I00
sS'group_name'
p21004
S'Advanced'
p21005
sa(dp21006
S'name'
p21007
S'partitioner'
p21008
sS'cpp_type'
p21009
S'MooseEnum'
p21010
sS'default'
p21011
S'default'
p21012
sS'description'
p21013
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p21014
sS'required'
p21015
I00
sS'options'
p21016
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p21017
sS'group_name'
p21018
S'Partitioning'
p21019
sa(dp21020
S'description'
p21021
S'name of the right (x) boundary\n'
p21022
sS'cpp_type'
p21023
S'BoundaryName'
p21024
sS'default'
p21025
S'right_boundary'
p21026
sS'name'
p21027
S'right_boundary'
p21028
sS'required'
p21029
I00
sS'group_name'
p21030
Nsa(dp21031
S'description'
p21032
S'name of the top (y) boundary\n'
p21033
sS'cpp_type'
p21034
S'BoundaryName'
p21035
sS'default'
p21036
S'top_boundary'
p21037
sS'name'
p21038
S'top_boundary'
p21039
sS'required'
p21040
I00
sS'group_name'
p21041
Nsa(dp21042
S'description'
p21043
g3
sS'cpp_type'
p21044
S'std::string'
p21045
sS'default'
p21046
S'TiledMesh'
p21047
sS'name'
p21048
S'type'
p21049
sS'required'
p21050
I00
sS'group_name'
p21051
Nsa(dp21052
S'description'
p21053
S'Number of tiles to stitch together (left to right) in the x-direction\n'
p21054
sS'cpp_type'
p21055
S'unsigned int'
p21056
sS'default'
p21057
S'1'
p21058
sS'name'
p21059
S'x_tiles'
p21060
sS'required'
p21061
I00
sS'group_name'
p21062
Nsa(dp21063
S'description'
p21064
S'The tile width in the x direction\n'
p21065
sS'cpp_type'
p21066
S'double'
p21067
sS'default'
p21068
S'0'
p21069
sS'name'
p21070
S'x_width'
p21071
sS'required'
p21072
I00
sS'group_name'
p21073
Nsa(dp21074
S'description'
p21075
S'Number of tiles to stitch together (top to bottom) in the y-direction\n'
p21076
sS'cpp_type'
p21077
S'unsigned int'
p21078
sS'default'
p21079
S'1'
p21080
sS'name'
p21081
S'y_tiles'
p21082
sS'required'
p21083
I00
sS'group_name'
p21084
Nsa(dp21085
S'description'
p21086
S'The tile width in the y direction\n'
p21087
sS'cpp_type'
p21088
S'double'
p21089
sS'default'
p21090
S'0'
p21091
sS'name'
p21092
S'y_width'
p21093
sS'required'
p21094
I00
sS'group_name'
p21095
Nsa(dp21096
S'description'
p21097
S'Number of tiles to stitch together (front to back) in the z-direction\n'
p21098
sS'cpp_type'
p21099
S'unsigned int'
p21100
sS'default'
p21101
S'1'
p21102
sS'name'
p21103
S'z_tiles'
p21104
sS'required'
p21105
I00
sS'group_name'
p21106
Nsa(dp21107
S'description'
p21108
S'The tile width in the z direction\n'
p21109
sS'cpp_type'
p21110
S'double'
p21111
sS'default'
p21112
S'0'
p21113
sS'name'
p21114
S'z_width'
p21115
sS'required'
p21116
I00
sS'group_name'
p21117
NsasS'name'
p21118
S'/Mesh/<type>/TiledMesh'
p21119
sasS'parameters'
p21120
NsS'name'
p21121
S'/Mesh/<type>'
p21122
sa(dp21123
S'description'
p21124
g3
sS'type'
p21125
NsS'subblocks'
p21126
(lp21127
(dp21128
S'description'
p21129
g3
sS'type'
p21130
NsS'subblocks'
p21131
NsS'parameters'
p21132
(lp21133
(dp21134
S'description'
p21135
S'Master side ID\n'
p21136
sS'cpp_type'
p21137
S'BoundaryName'
p21138
sS'default'
p21139
g3
sS'name'
p21140
S'master'
p21141
sS'required'
p21142
I01
sS'group_name'
p21143
Nsa(dp21144
S'description'
p21145
S'Slave side ID\n'
p21146
sS'cpp_type'
p21147
S'BoundaryName'
p21148
sS'default'
p21149
g3
sS'name'
p21150
S'slave'
p21151
sS'required'
p21152
I01
sS'group_name'
p21153
Nsa(dp21154
S'description'
p21155
S'Subdomain name that is the mortar interface\n'
p21156
sS'cpp_type'
p21157
S'SubdomainName'
p21158
sS'default'
p21159
g3
sS'name'
p21160
S'subdomain'
p21161
sS'required'
p21162
I01
sS'group_name'
p21163
NsasS'name'
p21164
S'/Mesh/MortarInterfaces/*'
p21165
sasS'parameters'
p21166
NsS'name'
p21167
S'/Mesh/MortarInterfaces'
p21168
sasS'parameters'
p21169
(lp21170
(dp21171
S'description'
p21172
S'The variables corresponding to the x y z displacements of the mesh.  If this is provided then the displacements will be taken into account during the computation.\n'
p21173
sS'cpp_type'
p21174
S'std::vector<std::string, std::allocator<std::string> >'
p21175
sS'default'
p21176
g3
sS'name'
p21177
S'displacements'
p21178
sS'required'
p21179
I00
sS'group_name'
p21180
Nsa(dp21181
S'description'
p21182
S'IDs of the block id/name pairs\n'
p21183
sS'cpp_type'
p21184
S'std::vector<unsigned short, std::allocator<unsigned short> >'
p21185
sS'default'
p21186
g3
sS'name'
p21187
S'block_id'
p21188
sS'required'
p21189
I00
sS'group_name'
p21190
S'Add Names'
p21191
sa(dp21192
S'description'
p21193
S'Names of the block id/name pairs (must correspond with "block_id"\n'
p21194
sS'cpp_type'
p21195
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p21196
sS'default'
p21197
g3
sS'name'
p21198
S'block_name'
p21199
sS'required'
p21200
I00
sS'group_name'
p21201
S'Add Names'
p21202
sa(dp21203
S'description'
p21204
S'IDs of the boundary id/name pairs\n'
p21205
sS'cpp_type'
p21206
S'std::vector<short, std::allocator<short> >'
p21207
sS'default'
p21208
g3
sS'name'
p21209
S'boundary_id'
p21210
sS'required'
p21211
I00
sS'group_name'
p21212
S'Add Names'
p21213
sa(dp21214
S'description'
p21215
S'Names of the boundary id/name pairs (must correspond with "boundary_id"\n'
p21216
sS'cpp_type'
p21217
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21218
sS'default'
p21219
g3
sS'name'
p21220
S'boundary_name'
p21221
sS'required'
p21222
I00
sS'group_name'
p21223
S'Add Names'
p21224
sa(dp21225
S'description'
p21226
S'If true, construct side lists from the nodesets in the mesh (i.e. if every node on a give side is in a nodeset then add that side to a sideset\n'
p21227
sS'cpp_type'
p21228
S'bool'
p21229
sS'default'
p21230
S'0'
p21231
sS'name'
p21232
S'construct_side_list_from_node_list'
p21233
sS'required'
p21234
I00
sS'group_name'
p21235
S'Advanced'
p21236
sa(dp21237
S'description'
p21238
S'Boundaries to be ghosted if using Nemesis\n'
p21239
sS'cpp_type'
p21240
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21241
sS'default'
p21242
g3
sS'name'
p21243
S'ghosted_boundaries'
p21244
sS'required'
p21245
I00
sS'group_name'
p21246
S'Advanced'
p21247
sa(dp21248
S'description'
p21249
S"If you are using ghosted boundaries you will want to set this value to a vector of amounts to inflate the bounding boxes by.  ie if you are running a 3D problem you might set it to '0.2 0.1 0.4'\n"
p21250
sS'cpp_type'
p21251
S'std::vector<double, std::allocator<double> >'
p21252
sS'default'
p21253
g3
sS'name'
p21254
S'ghosted_boundaries_inflation'
p21255
sS'required'
p21256
I00
sS'group_name'
p21257
S'Advanced'
p21258
sa(dp21259
S'description'
p21260
S'The number of nodes to consider in the NearestNode neighborhood.\n'
p21261
sS'cpp_type'
p21262
S'unsigned int'
p21263
sS'default'
p21264
S'40'
p21265
sS'name'
p21266
S'patch_size'
p21267
sS'required'
p21268
I00
sS'group_name'
p21269
S'Advanced'
p21270
sa(dp21271
S'description'
p21272
S'Converts a first order mesh to a second order mesh.  Note: This is NOT needed if you are reading an actual first order mesh.\n'
p21273
sS'cpp_type'
p21274
S'bool'
p21275
sS'default'
p21276
S'0'
p21277
sS'name'
p21278
S'second_order'
p21279
sS'required'
p21280
I00
sS'group_name'
p21281
S'Advanced'
p21282
sa(dp21283
S'description'
p21284
S'A string representing the Moose Object that will be built by this Action\n'
p21285
sS'cpp_type'
p21286
S'std::string'
p21287
sS'default'
p21288
S'FileMesh'
p21289
sS'name'
p21290
S'type'
p21291
sS'required'
p21292
I01
sS'group_name'
p21293
Nsa(dp21294
S'description'
p21295
S'Specify the level of uniform refinement applied to the initial mesh\n'
p21296
sS'cpp_type'
p21297
S'unsigned int'
p21298
sS'default'
p21299
S'0'
p21300
sS'name'
p21301
S'uniform_refine'
p21302
sS'required'
p21303
I00
sS'group_name'
p21304
NsasS'name'
p21305
S'/Mesh'
p21306
sa(dp21307
S'description'
p21308
g3
sS'type'
p21309
NsS'subblocks'
p21310
(lp21311
(dp21312
S'description'
p21313
g3
sS'type'
p21314
NsS'subblocks'
p21315
NsS'parameters'
p21316
(lp21317
(dp21318
S'description'
p21319
S'A string representing the Moose Object that will be built by this Action\n'
p21320
sS'cpp_type'
p21321
S'std::string'
p21322
sS'default'
p21323
g3
sS'name'
p21324
S'type'
p21325
sS'required'
p21326
I01
sS'group_name'
p21327
NsasS'name'
p21328
S'/MeshModifiers/*'
p21329
sa(dp21330
S'description'
p21331
g3
sS'type'
p21332
NsS'subblocks'
p21333
NsS'parameters'
p21334
(lp21335
(dp21336
S'description'
p21337
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p21338
sS'cpp_type'
p21339
S'bool'
p21340
sS'default'
p21341
S'0'
p21342
sS'name'
p21343
S'fixed_normal'
p21344
sS'required'
p21345
I00
sS'group_name'
p21346
Nsa(dp21347
S'description'
p21348
g3
sS'cpp_type'
p21349
S'std::string'
p21350
sS'default'
p21351
S'AddAllSideSetsByNormals'
p21352
sS'name'
p21353
S'type'
p21354
sS'required'
p21355
I00
sS'group_name'
p21356
Nsa(dp21357
S'description'
p21358
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p21359
sS'cpp_type'
p21360
S'double'
p21361
sS'default'
p21362
S'0.1'
p21363
sS'name'
p21364
S'variance'
p21365
sS'required'
p21366
I00
sS'group_name'
p21367
NsasS'name'
p21368
S'/MeshModifiers/AddAllSideSetsByNormals'
p21369
sa(dp21370
S'description'
p21371
g3
sS'type'
p21372
NsS'subblocks'
p21373
NsS'parameters'
p21374
(lp21375
(dp21376
S'description'
p21377
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p21378
sS'cpp_type'
p21379
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21380
sS'default'
p21381
g3
sS'name'
p21382
S'boundary'
p21383
sS'required'
p21384
I01
sS'group_name'
p21385
Nsa(dp21386
S'description'
p21387
S'The nodes with coordinates you want to be in the nodeset (Either this parameter or "nodes" must be supplied).\n'
p21388
sS'cpp_type'
p21389
S'std::vector<double, std::allocator<double> >'
p21390
sS'default'
p21391
g3
sS'name'
p21392
S'coord'
p21393
sS'required'
p21394
I00
sS'group_name'
p21395
Nsa(dp21396
S'description'
p21397
S'The nodes you want to be in the nodeset (Either this parameter or "coord" must be supplied).\n'
p21398
sS'cpp_type'
p21399
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p21400
sS'default'
p21401
g3
sS'name'
p21402
S'nodes'
p21403
sS'required'
p21404
I00
sS'group_name'
p21405
Nsa(dp21406
S'description'
p21407
S'The tolerance in which two nodes are considered identical\n'
p21408
sS'cpp_type'
p21409
S'double'
p21410
sS'default'
p21411
S'1e-06'
p21412
sS'name'
p21413
S'tolerance'
p21414
sS'required'
p21415
I00
sS'group_name'
p21416
Nsa(dp21417
S'description'
p21418
g3
sS'cpp_type'
p21419
S'std::string'
p21420
sS'default'
p21421
S'AddExtraNodeset'
p21422
sS'name'
p21423
S'type'
p21424
sS'required'
p21425
I00
sS'group_name'
p21426
NsasS'name'
p21427
S'/MeshModifiers/AddExtraNodeset'
p21428
sa(dp21429
S'description'
p21430
g3
sS'type'
p21431
NsS'subblocks'
p21432
NsS'parameters'
p21433
(lp21434
(dp21435
S'description'
p21436
S'The boundary that will be applied to the bottom of the extruded mesh\n'
p21437
sS'cpp_type'
p21438
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21439
sS'default'
p21440
g3
sS'name'
p21441
S'bottom_sideset'
p21442
sS'required'
p21443
I00
sS'group_name'
p21444
Nsa(dp21445
S'description'
p21446
S'The direction and length of the extrusion\n'
p21447
sS'cpp_type'
p21448
S'libMesh::VectorValue<double>'
p21449
sS'default'
p21450
g3
sS'name'
p21451
S'extrusion_vector'
p21452
sS'required'
p21453
I01
sS'group_name'
p21454
Nsa(dp21455
S'description'
p21456
S'The number of layers in the extruded mesh\n'
p21457
sS'cpp_type'
p21458
S'unsigned int'
p21459
sS'default'
p21460
g3
sS'name'
p21461
S'num_layers'
p21462
sS'required'
p21463
I01
sS'group_name'
p21464
Nsa(dp21465
S'description'
p21466
S'The boundary that will be to the top of the extruded mesh\n'
p21467
sS'cpp_type'
p21468
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21469
sS'default'
p21470
g3
sS'name'
p21471
S'top_sideset'
p21472
sS'required'
p21473
I00
sS'group_name'
p21474
Nsa(dp21475
S'description'
p21476
g3
sS'cpp_type'
p21477
S'std::string'
p21478
sS'default'
p21479
S'MeshExtruder'
p21480
sS'name'
p21481
S'type'
p21482
sS'required'
p21483
I00
sS'group_name'
p21484
NsasS'name'
p21485
S'/MeshModifiers/MeshExtruder'
p21486
sa(dp21487
S'description'
p21488
g3
sS'type'
p21489
NsS'subblocks'
p21490
NsS'parameters'
p21491
(lp21492
(dp21493
S'description'
p21494
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21495
sS'cpp_type'
p21496
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p21497
sS'default'
p21498
g3
sS'name'
p21499
S'block'
p21500
sS'required'
p21501
I00
sS'group_name'
p21502
Nsa(dp21503
S'description'
p21504
S'The list of boundary IDs to create on the supplied subdomain\n'
p21505
sS'cpp_type'
p21506
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21507
sS'default'
p21508
g3
sS'name'
p21509
S'boundary'
p21510
sS'required'
p21511
I00
sS'group_name'
p21512
Nsa(dp21513
S'description'
p21514
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p21515
sS'cpp_type'
p21516
S'bool'
p21517
sS'default'
p21518
S'0'
p21519
sS'name'
p21520
S'fixed_normal'
p21521
sS'required'
p21522
I00
sS'group_name'
p21523
Nsa(dp21524
S'description'
p21525
S'If supplied, only faces with normal equal to this, up to normal_tol, will be added to the sidesets specified\n'
p21526
sS'cpp_type'
p21527
S'libMesh::Point'
p21528
sS'default'
p21529
g3
sS'name'
p21530
S'normal'
p21531
sS'required'
p21532
I00
sS'group_name'
p21533
Nsa(dp21534
S'description'
p21535
S'If normal is supplied then faces are only added if face_normal.normal_hat >= 1 - normal_tol, where normal_hat = normal/|normal|\n'
p21536
sS'cpp_type'
p21537
S'double'
p21538
sS'default'
p21539
S'0.1'
p21540
sS'name'
p21541
S'normal_tol'
p21542
sS'required'
p21543
I00
sS'group_name'
p21544
Nsa(dp21545
S'description'
p21546
g3
sS'cpp_type'
p21547
S'std::string'
p21548
sS'default'
p21549
S'SideSetsAroundSubdomain'
p21550
sS'name'
p21551
S'type'
p21552
sS'required'
p21553
I00
sS'group_name'
p21554
Nsa(dp21555
S'description'
p21556
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p21557
sS'cpp_type'
p21558
S'double'
p21559
sS'default'
p21560
S'0.1'
p21561
sS'name'
p21562
S'variance'
p21563
sS'required'
p21564
I00
sS'group_name'
p21565
NsasS'name'
p21566
S'/MeshModifiers/SideSetsAroundSubdomain'
p21567
sa(dp21568
S'description'
p21569
g3
sS'type'
p21570
NsS'subblocks'
p21571
NsS'parameters'
p21572
(lp21573
(dp21574
S'description'
p21575
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p21576
sS'cpp_type'
p21577
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21578
sS'default'
p21579
g3
sS'name'
p21580
S'boundary'
p21581
sS'required'
p21582
I01
sS'group_name'
p21583
Nsa(dp21584
S'description'
p21585
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p21586
sS'cpp_type'
p21587
S'bool'
p21588
sS'default'
p21589
S'0'
p21590
sS'name'
p21591
S'fixed_normal'
p21592
sS'required'
p21593
I00
sS'group_name'
p21594
Nsa(dp21595
S'description'
p21596
S'The first block for which to draw a sideset between\n'
p21597
sS'cpp_type'
p21598
S'SubdomainName'
p21599
sS'default'
p21600
g3
sS'name'
p21601
S'master_block'
p21602
sS'required'
p21603
I01
sS'group_name'
p21604
Nsa(dp21605
S'description'
p21606
S'The second block for which to draw a sideset between\n'
p21607
sS'cpp_type'
p21608
S'SubdomainName'
p21609
sS'default'
p21610
g3
sS'name'
p21611
S'paired_block'
p21612
sS'required'
p21613
I01
sS'group_name'
p21614
Nsa(dp21615
S'description'
p21616
g3
sS'cpp_type'
p21617
S'std::string'
p21618
sS'default'
p21619
S'SideSetsBetweenSubdomains'
p21620
sS'name'
p21621
S'type'
p21622
sS'required'
p21623
I00
sS'group_name'
p21624
Nsa(dp21625
S'description'
p21626
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p21627
sS'cpp_type'
p21628
S'double'
p21629
sS'default'
p21630
S'0.1'
p21631
sS'name'
p21632
S'variance'
p21633
sS'required'
p21634
I00
sS'group_name'
p21635
NsasS'name'
p21636
S'/MeshModifiers/SideSetsBetweenSubdomains'
p21637
sa(dp21638
S'description'
p21639
g3
sS'type'
p21640
NsS'subblocks'
p21641
NsS'parameters'
p21642
(lp21643
(dp21644
S'description'
p21645
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p21646
sS'cpp_type'
p21647
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21648
sS'default'
p21649
g3
sS'name'
p21650
S'boundary'
p21651
sS'required'
p21652
I01
sS'group_name'
p21653
Nsa(dp21654
S'description'
p21655
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p21656
sS'cpp_type'
p21657
S'bool'
p21658
sS'default'
p21659
S'0'
p21660
sS'name'
p21661
S'fixed_normal'
p21662
sS'required'
p21663
I00
sS'group_name'
p21664
Nsa(dp21665
S'description'
p21666
S'A list of normals for which to start painting sidesets\n'
p21667
sS'cpp_type'
p21668
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p21669
sS'default'
p21670
g3
sS'name'
p21671
S'normals'
p21672
sS'required'
p21673
I01
sS'group_name'
p21674
Nsa(dp21675
S'description'
p21676
g3
sS'cpp_type'
p21677
S'std::string'
p21678
sS'default'
p21679
S'SideSetsFromNormals'
p21680
sS'name'
p21681
S'type'
p21682
sS'required'
p21683
I00
sS'group_name'
p21684
Nsa(dp21685
S'description'
p21686
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p21687
sS'cpp_type'
p21688
S'double'
p21689
sS'default'
p21690
S'0.1'
p21691
sS'name'
p21692
S'variance'
p21693
sS'required'
p21694
I00
sS'group_name'
p21695
NsasS'name'
p21696
S'/MeshModifiers/SideSetsFromNormals'
p21697
sa(dp21698
S'description'
p21699
g3
sS'type'
p21700
NsS'subblocks'
p21701
NsS'parameters'
p21702
(lp21703
(dp21704
S'description'
p21705
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p21706
sS'cpp_type'
p21707
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p21708
sS'default'
p21709
g3
sS'name'
p21710
S'boundary'
p21711
sS'required'
p21712
I01
sS'group_name'
p21713
Nsa(dp21714
S'description'
p21715
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p21716
sS'cpp_type'
p21717
S'bool'
p21718
sS'default'
p21719
S'0'
p21720
sS'name'
p21721
S'fixed_normal'
p21722
sS'required'
p21723
I00
sS'group_name'
p21724
Nsa(dp21725
S'description'
p21726
S'A list of points from which to start painting sidesets\n'
p21727
sS'cpp_type'
p21728
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p21729
sS'default'
p21730
g3
sS'name'
p21731
S'points'
p21732
sS'required'
p21733
I01
sS'group_name'
p21734
Nsa(dp21735
S'description'
p21736
g3
sS'cpp_type'
p21737
S'std::string'
p21738
sS'default'
p21739
S'SideSetsFromPoints'
p21740
sS'name'
p21741
S'type'
p21742
sS'required'
p21743
I00
sS'group_name'
p21744
Nsa(dp21745
S'description'
p21746
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p21747
sS'cpp_type'
p21748
S'double'
p21749
sS'default'
p21750
S'0.1'
p21751
sS'name'
p21752
S'variance'
p21753
sS'required'
p21754
I00
sS'group_name'
p21755
NsasS'name'
p21756
S'/MeshModifiers/SideSetsFromPoints'
p21757
sa(dp21758
S'description'
p21759
g3
sS'type'
p21760
NsS'subblocks'
p21761
NsS'parameters'
p21762
(lp21763
(dp21764
S'name'
p21765
S'transform'
p21766
sS'cpp_type'
p21767
S'MooseEnum'
p21768
sS'default'
p21769
g3
sS'description'
p21770
S'The type of transformation to perform (TRANSLATE, ROTATE, SCALE)\n'
p21771
sS'required'
p21772
I01
sS'options'
p21773
S'TRANSLATE ROTATE SCALE'
p21774
sS'group_name'
p21775
Nsa(dp21776
S'description'
p21777
g3
sS'cpp_type'
p21778
S'std::string'
p21779
sS'default'
p21780
S'Transform'
p21781
sS'name'
p21782
S'type'
p21783
sS'required'
p21784
I00
sS'group_name'
p21785
Nsa(dp21786
S'description'
p21787
S'The value to use for the transformation. When using TRANSLATE or SCALE, the xyz coordinates are applied in each direction respectively. When using ROTATE, the coordinates are interpreted as phi, theta and psi.\n'
p21788
sS'cpp_type'
p21789
S'libMesh::VectorValue<double>'
p21790
sS'default'
p21791
g3
sS'name'
p21792
S'vector_value'
p21793
sS'required'
p21794
I01
sS'group_name'
p21795
NsasS'name'
p21796
S'/MeshModifiers/Transform'
p21797
sasS'parameters'
p21798
NsS'name'
p21799
S'/MeshModifiers'
p21800
sa(dp21801
S'description'
p21802
g3
sS'type'
p21803
NsS'subblocks'
p21804
(lp21805
(dp21806
S'description'
p21807
g3
sS'type'
p21808
NsS'subblocks'
p21809
NsS'parameters'
p21810
(lp21811
(dp21812
S'description'
p21813
S'A string representing the Moose Object that will be built by this Action\n'
p21814
sS'cpp_type'
p21815
S'std::string'
p21816
sS'default'
p21817
g3
sS'name'
p21818
S'type'
p21819
sS'required'
p21820
I01
sS'group_name'
p21821
NsasS'name'
p21822
S'/MultiApps/*'
p21823
sa(dp21824
S'description'
p21825
g3
sS'type'
p21826
NsS'subblocks'
p21827
NsS'parameters'
p21828
(lp21829
(dp21830
S'name'
p21831
S'app_type'
p21832
sS'cpp_type'
p21833
S'MooseEnum'
p21834
sS'default'
p21835
g3
sS'description'
p21836
S'The type of application to build.\n'
p21837
sS'required'
p21838
I01
sS'options'
p21839
S'OtterApp'
p21840
sS'group_name'
p21841
Nsa(dp21842
S'description'
p21843
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p21844
sS'cpp_type'
p21845
S'double'
p21846
sS'default'
p21847
S'0.01'
p21848
sS'name'
p21849
S'bounding_box_inflation'
p21850
sS'required'
p21851
I00
sS'group_name'
p21852
Nsa(dp21853
S'name'
p21854
S'execute_on'
p21855
sS'cpp_type'
p21856
S'MooseEnum'
p21857
sS'default'
p21858
S'timestep_begin'
p21859
sS'description'
p21860
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p21861
sS'required'
p21862
I00
sS'options'
p21863
S'initial residual jacobian timestep timestep_begin custom'
p21864
sS'group_name'
p21865
Nsa(dp21866
S'description'
p21867
S'The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.\n'
p21868
sS'cpp_type'
p21869
S'std::vector<std::string, std::allocator<std::string> >'
p21870
sS'default'
p21871
g3
sS'name'
p21872
S'input_files'
p21873
sS'required'
p21874
I01
sS'group_name'
p21875
Nsa(dp21876
S'description'
p21877
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p21878
sS'cpp_type'
p21879
S'unsigned int'
p21880
sS'default'
p21881
S'4294967295'
p21882
sS'name'
p21883
S'max_procs_per_app'
p21884
sS'required'
p21885
I00
sS'group_name'
p21886
Nsa(dp21887
S'description'
p21888
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p21889
sS'cpp_type'
p21890
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p21891
sS'default'
p21892
g3
sS'name'
p21893
S'move_apps'
p21894
sS'required'
p21895
I00
sS'group_name'
p21896
Nsa(dp21897
S'description'
p21898
S'The positions corresponding to each move_app.\n'
p21899
sS'cpp_type'
p21900
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p21901
sS'default'
p21902
g3
sS'name'
p21903
S'move_positions'
p21904
sS'required'
p21905
I00
sS'group_name'
p21906
Nsa(dp21907
S'description'
p21908
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p21909
sS'cpp_type'
p21910
S'double'
p21911
sS'default'
p21912
S'1.79769e+308'
p21913
sS'name'
p21914
S'move_time'
p21915
sS'required'
p21916
I00
sS'group_name'
p21917
Nsa(dp21918
S'description'
p21919
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p21920
sS'cpp_type'
p21921
S'bool'
p21922
sS'default'
p21923
S'0'
p21924
sS'name'
p21925
S'output_in_position'
p21926
sS'required'
p21927
I00
sS'group_name'
p21928
Nsa(dp21929
S'description'
p21930
S"The positions of the App locations.  Each set of 3 values will represent a Point.  Either this must be supplied or 'positions_file'\n"
p21931
sS'cpp_type'
p21932
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p21933
sS'default'
p21934
g3
sS'name'
p21935
S'positions'
p21936
sS'required'
p21937
I00
sS'group_name'
p21938
Nsa(dp21939
S'description'
p21940
S"A filename that should be looked in for positions. Each set of 3 values in that file will represent a Point.  Either this must be supplied or 'positions'\n"
p21941
sS'cpp_type'
p21942
S'FileName'
p21943
sS'default'
p21944
g3
sS'name'
p21945
S'positions_file'
p21946
sS'required'
p21947
I00
sS'group_name'
p21948
Nsa(dp21949
S'description'
p21950
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p21951
sS'cpp_type'
p21952
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p21953
sS'default'
p21954
g3
sS'name'
p21955
S'reset_apps'
p21956
sS'required'
p21957
I00
sS'group_name'
p21958
Nsa(dp21959
S'description'
p21960
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p21961
sS'cpp_type'
p21962
S'double'
p21963
sS'default'
p21964
S'1.79769e+308'
p21965
sS'name'
p21966
S'reset_time'
p21967
sS'required'
p21968
I00
sS'group_name'
p21969
Nsa(dp21970
S'description'
p21971
g3
sS'cpp_type'
p21972
S'std::string'
p21973
sS'default'
p21974
S'FullSolveMultiApp'
p21975
sS'name'
p21976
S'type'
p21977
sS'required'
p21978
I00
sS'group_name'
p21979
Nsa(dp21980
S'description'
p21981
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21982
sS'cpp_type'
p21983
S'bool'
p21984
sS'default'
p21985
S'0'
p21986
sS'name'
p21987
S'use_displaced_mesh'
p21988
sS'required'
p21989
I00
sS'group_name'
p21990
S'Advanced'
p21991
sasS'name'
p21992
S'/MultiApps/FullSolveMultiApp'
p21993
sa(dp21994
S'description'
p21995
g3
sS'type'
p21996
NsS'subblocks'
p21997
NsS'parameters'
p21998
(lp21999
(dp22000
S'name'
p22001
S'app_type'
p22002
sS'cpp_type'
p22003
S'MooseEnum'
p22004
sS'default'
p22005
g3
sS'description'
p22006
S'The type of application to build.\n'
p22007
sS'required'
p22008
I01
sS'options'
p22009
S'OtterApp'
p22010
sS'group_name'
p22011
Nsa(dp22012
S'description'
p22013
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p22014
sS'cpp_type'
p22015
S'double'
p22016
sS'default'
p22017
S'0.01'
p22018
sS'name'
p22019
S'bounding_box_inflation'
p22020
sS'required'
p22021
I00
sS'group_name'
p22022
Nsa(dp22023
S'description'
p22024
S"If true this will allow failed solves to attempt to 'catch up' using smaller timesteps.\n"
p22025
sS'cpp_type'
p22026
S'bool'
p22027
sS'default'
p22028
S'0'
p22029
sS'name'
p22030
S'catch_up'
p22031
sS'required'
p22032
I00
sS'group_name'
p22033
Nsa(dp22034
S'description'
p22035
S'If true then while sub_cycling a steady state check will be done.  In this mode output will only be done once the MultiApp reaches the target time or steady state is reached\n'
p22036
sS'cpp_type'
p22037
S'bool'
p22038
sS'default'
p22039
S'0'
p22040
sS'name'
p22041
S'detect_steady_state'
p22042
sS'required'
p22043
I00
sS'group_name'
p22044
Nsa(dp22045
S'name'
p22046
S'execute_on'
p22047
sS'cpp_type'
p22048
S'MooseEnum'
p22049
sS'default'
p22050
S'timestep_begin'
p22051
sS'description'
p22052
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p22053
sS'required'
p22054
I00
sS'options'
p22055
S'initial residual jacobian timestep timestep_begin custom'
p22056
sS'group_name'
p22057
Nsa(dp22058
S'description'
p22059
S'The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.\n'
p22060
sS'cpp_type'
p22061
S'std::vector<std::string, std::allocator<std::string> >'
p22062
sS'default'
p22063
g3
sS'name'
p22064
S'input_files'
p22065
sS'required'
p22066
I01
sS'group_name'
p22067
Nsa(dp22068
S'description'
p22069
S'Only valid when sub_cycling.  This allows transferred values to be interpolated over the time frame the MultiApp is executing over when sub_cycling\n'
p22070
sS'cpp_type'
p22071
S'bool'
p22072
sS'default'
p22073
S'0'
p22074
sS'name'
p22075
S'interpolate_transfers'
p22076
sS'required'
p22077
I00
sS'group_name'
p22078
Nsa(dp22079
S'description'
p22080
S'Maximum number of steps to allow an app to take when trying to catch back up after a failed solve.\n'
p22081
sS'cpp_type'
p22082
S'double'
p22083
sS'default'
p22084
S'2'
p22085
sS'name'
p22086
S'max_catch_up_steps'
p22087
sS'required'
p22088
I00
sS'group_name'
p22089
Nsa(dp22090
S'description'
p22091
S'Maximum number of solve failures tolerated while sub_cycling.\n'
p22092
sS'cpp_type'
p22093
S'unsigned int'
p22094
sS'default'
p22095
S'0'
p22096
sS'name'
p22097
S'max_failures'
p22098
sS'required'
p22099
I00
sS'group_name'
p22100
Nsa(dp22101
S'description'
p22102
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p22103
sS'cpp_type'
p22104
S'unsigned int'
p22105
sS'default'
p22106
S'4294967295'
p22107
sS'name'
p22108
S'max_procs_per_app'
p22109
sS'required'
p22110
I00
sS'group_name'
p22111
Nsa(dp22112
S'description'
p22113
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p22114
sS'cpp_type'
p22115
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p22116
sS'default'
p22117
g3
sS'name'
p22118
S'move_apps'
p22119
sS'required'
p22120
I00
sS'group_name'
p22121
Nsa(dp22122
S'description'
p22123
S'The positions corresponding to each move_app.\n'
p22124
sS'cpp_type'
p22125
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p22126
sS'default'
p22127
g3
sS'name'
p22128
S'move_positions'
p22129
sS'required'
p22130
I00
sS'group_name'
p22131
Nsa(dp22132
S'description'
p22133
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p22134
sS'cpp_type'
p22135
S'double'
p22136
sS'default'
p22137
S'1.79769e+308'
p22138
sS'name'
p22139
S'move_time'
p22140
sS'required'
p22141
I00
sS'group_name'
p22142
Nsa(dp22143
S'description'
p22144
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p22145
sS'cpp_type'
p22146
S'bool'
p22147
sS'default'
p22148
S'0'
p22149
sS'name'
p22150
S'output_in_position'
p22151
sS'required'
p22152
I00
sS'group_name'
p22153
Nsa(dp22154
S'description'
p22155
S'If true when sub_cycling every sub-cycle will be output.\n'
p22156
sS'cpp_type'
p22157
S'bool'
p22158
sS'default'
p22159
S'0'
p22160
sS'name'
p22161
S'output_sub_cycles'
p22162
sS'required'
p22163
I00
sS'group_name'
p22164
Nsa(dp22165
S'description'
p22166
S"The positions of the App locations.  Each set of 3 values will represent a Point.  Either this must be supplied or 'positions_file'\n"
p22167
sS'cpp_type'
p22168
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p22169
sS'default'
p22170
g3
sS'name'
p22171
S'positions'
p22172
sS'required'
p22173
I00
sS'group_name'
p22174
Nsa(dp22175
S'description'
p22176
S"A filename that should be looked in for positions. Each set of 3 values in that file will represent a Point.  Either this must be supplied or 'positions'\n"
p22177
sS'cpp_type'
p22178
S'FileName'
p22179
sS'default'
p22180
g3
sS'name'
p22181
S'positions_file'
p22182
sS'required'
p22183
I00
sS'group_name'
p22184
Nsa(dp22185
S'description'
p22186
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p22187
sS'cpp_type'
p22188
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p22189
sS'default'
p22190
g3
sS'name'
p22191
S'reset_apps'
p22192
sS'required'
p22193
I00
sS'group_name'
p22194
Nsa(dp22195
S'description'
p22196
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p22197
sS'cpp_type'
p22198
S'double'
p22199
sS'default'
p22200
S'1.79769e+308'
p22201
sS'name'
p22202
S'reset_time'
p22203
sS'required'
p22204
I00
sS'group_name'
p22205
Nsa(dp22206
S'description'
p22207
S'The relative difference between the new solution and the old solution that will be considered to be at steady state\n'
p22208
sS'cpp_type'
p22209
S'double'
p22210
sS'default'
p22211
S'1e-08'
p22212
sS'name'
p22213
S'steady_state_tol'
p22214
sS'required'
p22215
I00
sS'group_name'
p22216
Nsa(dp22217
S'description'
p22218
S"Set to true to allow this MultiApp to take smaller timesteps than the rest of the simulation.  More than one timestep will be performed for each 'master' timestep\n"
p22219
sS'cpp_type'
p22220
S'bool'
p22221
sS'default'
p22222
S'0'
p22223
sS'name'
p22224
S'sub_cycling'
p22225
sS'required'
p22226
I00
sS'group_name'
p22227
Nsa(dp22228
S'description'
p22229
S"If true this MultiApp won't participate in dt decisions and will always be fast-forwarded to the current time.\n"
p22230
sS'cpp_type'
p22231
S'bool'
p22232
sS'default'
p22233
S'0'
p22234
sS'name'
p22235
S'tolerate_failure'
p22236
sS'required'
p22237
I00
sS'group_name'
p22238
Nsa(dp22239
S'description'
p22240
g3
sS'cpp_type'
p22241
S'std::string'
p22242
sS'default'
p22243
S'TransientMultiApp'
p22244
sS'name'
p22245
S'type'
p22246
sS'required'
p22247
I00
sS'group_name'
p22248
Nsa(dp22249
S'description'
p22250
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22251
sS'cpp_type'
p22252
S'bool'
p22253
sS'default'
p22254
S'0'
p22255
sS'name'
p22256
S'use_displaced_mesh'
p22257
sS'required'
p22258
I00
sS'group_name'
p22259
S'Advanced'
p22260
sasS'name'
p22261
S'/MultiApps/TransientMultiApp'
p22262
sasS'parameters'
p22263
NsS'name'
p22264
S'/MultiApps'
p22265
sa(dp22266
S'description'
p22267
g3
sS'type'
p22268
NsS'subblocks'
p22269
NsS'parameters'
p22270
(lp22271
(dp22272
S'description'
p22273
S'The boundary ID or name where the normals will be computed\n'
p22274
sS'cpp_type'
p22275
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p22276
sS'default'
p22277
S'ANY_BOUNDARY_ID'
p22278
sS'name'
p22279
S'boundary'
p22280
sS'required'
p22281
I00
sS'group_name'
p22282
Nsa(dp22283
S'description'
p22284
S"boundary ID or name with nodes at 'corners'\n"
p22285
sS'cpp_type'
p22286
S'BoundaryName'
p22287
sS'default'
p22288
g3
sS'name'
p22289
S'corner_boundary'
p22290
sS'required'
p22291
I00
sS'group_name'
p22292
Nsa(dp22293
S'name'
p22294
S'order'
p22295
sS'cpp_type'
p22296
S'MooseEnum'
p22297
sS'default'
p22298
S'FIRST'
p22299
sS'description'
p22300
S'Specifies the order of variables that hold the nodal normals. Needs to match the order of the mesh\n'
p22301
sS'required'
p22302
I00
sS'options'
p22303
S'FIRST SECOND'
p22304
sS'group_name'
p22305
NsasS'name'
p22306
S'/NodalNormals'
p22307
sa(dp22308
S'description'
p22309
g3
sS'type'
p22310
NsS'subblocks'
p22311
(lp22312
(dp22313
S'description'
p22314
g3
sS'type'
p22315
NsS'subblocks'
p22316
NsS'parameters'
p22317
(lp22318
(dp22319
S'description'
p22320
S'A string representing the Moose Object that will be built by this Action\n'
p22321
sS'cpp_type'
p22322
S'std::string'
p22323
sS'default'
p22324
g3
sS'name'
p22325
S'type'
p22326
sS'required'
p22327
I01
sS'group_name'
p22328
NsasS'name'
p22329
S'/Outputs/*'
p22330
sa(dp22331
S'description'
p22332
g3
sS'type'
p22333
NsS'subblocks'
p22334
NsS'parameters'
p22335
(lp22336
(dp22337
S'description'
p22338
S"Append '_displaced' to the output file base\n"
p22339
sS'cpp_type'
p22340
S'bool'
p22341
sS'default'
p22342
S'0'
p22343
sS'name'
p22344
S'append_displaced'
p22345
sS'required'
p22346
I00
sS'group_name'
p22347
S'Displaced'
p22348
sa(dp22349
S'description'
p22350
S'Append existing file on restart\n'
p22351
sS'cpp_type'
p22352
S'bool'
p22353
sS'default'
p22354
S'0'
p22355
sS'name'
p22356
S'append_restart'
p22357
sS'required'
p22358
I00
sS'group_name'
p22359
Nsa(dp22360
S'description'
p22361
S'Time at which this output object stop operating\n'
p22362
sS'cpp_type'
p22363
S'double'
p22364
sS'default'
p22365
g3
sS'name'
p22366
S'end_time'
p22367
sS'required'
p22368
I00
sS'group_name'
p22369
S'Timing'
p22370
sa(dp22371
S'description'
p22372
S'The desired solution output name without an extension\n'
p22373
sS'cpp_type'
p22374
S'std::string'
p22375
sS'default'
p22376
g3
sS'name'
p22377
S'file_base'
p22378
sS'required'
p22379
I00
sS'group_name'
p22380
Nsa(dp22381
S'description'
p22382
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p22383
sS'cpp_type'
p22384
S'std::vector<VariableName, std::allocator<VariableName> >'
p22385
sS'default'
p22386
g3
sS'name'
p22387
S'hide'
p22388
sS'required'
p22389
I00
sS'group_name'
p22390
S'Variables'
p22391
sa(dp22392
S'description'
p22393
S'The interval at which time steps are output to the solution file\n'
p22394
sS'cpp_type'
p22395
S'unsigned int'
p22396
sS'default'
p22397
S'1'
p22398
sS'name'
p22399
S'interval'
p22400
sS'required'
p22401
I00
sS'group_name'
p22402
S'Timing'
p22403
sa(dp22404
S'description'
p22405
S'Number of divisions applied to time step when outputting linear residuals\n'
p22406
sS'cpp_type'
p22407
S'double'
p22408
sS'default'
p22409
S'1000'
p22410
sS'name'
p22411
S'linear_residual_dt_divisor'
p22412
sS'required'
p22413
I00
sS'group_name'
p22414
S'PETSc'
p22415
sa(dp22416
S'description'
p22417
S'Specifies an end time to begin output on each linear residual evaluation\n'
p22418
sS'cpp_type'
p22419
S'double'
p22420
sS'default'
p22421
g3
sS'name'
p22422
S'linear_residual_end_time'
p22423
sS'required'
p22424
I00
sS'group_name'
p22425
S'PETSc'
p22426
sa(dp22427
S'description'
p22428
S'Specifies a start time to begin output on each linear residual evaluation\n'
p22429
sS'cpp_type'
p22430
S'double'
p22431
sS'default'
p22432
g3
sS'name'
p22433
S'linear_residual_start_time'
p22434
sS'required'
p22435
I00
sS'group_name'
p22436
S'PETSc'
p22437
sa(dp22438
S'description'
p22439
S'Specifies whether output occurs on each linear residual evaluation\n'
p22440
sS'cpp_type'
p22441
S'bool'
p22442
sS'default'
p22443
S'0'
p22444
sS'name'
p22445
S'linear_residuals'
p22446
sS'required'
p22447
I00
sS'group_name'
p22448
S'PETSc'
p22449
sa(dp22450
S'description'
p22451
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p22452
sS'cpp_type'
p22453
S'double'
p22454
sS'default'
p22455
S'1000'
p22456
sS'name'
p22457
S'nonlinear_residual_dt_divisor'
p22458
sS'required'
p22459
I00
sS'group_name'
p22460
S'PETSc'
p22461
sa(dp22462
S'description'
p22463
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p22464
sS'cpp_type'
p22465
S'double'
p22466
sS'default'
p22467
g3
sS'name'
p22468
S'nonlinear_residual_end_time'
p22469
sS'required'
p22470
I00
sS'group_name'
p22471
S'PETSc'
p22472
sa(dp22473
S'description'
p22474
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p22475
sS'cpp_type'
p22476
S'double'
p22477
sS'default'
p22478
g3
sS'name'
p22479
S'nonlinear_residual_start_time'
p22480
sS'required'
p22481
I00
sS'group_name'
p22482
S'PETSc'
p22483
sa(dp22484
S'description'
p22485
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p22486
sS'cpp_type'
p22487
S'bool'
p22488
sS'default'
p22489
S'0'
p22490
sS'name'
p22491
S'nonlinear_residuals'
p22492
sS'required'
p22493
I00
sS'group_name'
p22494
S'PETSc'
p22495
sa(dp22496
S'description'
p22497
S'When true all time attempted time steps are output\n'
p22498
sS'cpp_type'
p22499
S'bool'
p22500
sS'default'
p22501
S'0'
p22502
sS'name'
p22503
S'output_failed'
p22504
sS'required'
p22505
I00
sS'group_name'
p22506
Nsa(dp22507
S'description'
p22508
S'Force the final time step to be output, regardless of output interval\n'
p22509
sS'cpp_type'
p22510
S'bool'
p22511
sS'default'
p22512
S'0'
p22513
sS'name'
p22514
S'output_final'
p22515
sS'required'
p22516
I00
sS'group_name'
p22517
S'Timing'
p22518
sa(dp22519
S'description'
p22520
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p22521
sS'cpp_type'
p22522
S'std::vector<std::string, std::allocator<std::string> >'
p22523
sS'default'
p22524
g3
sS'name'
p22525
S'output_if_base_contains'
p22526
sS'required'
p22527
I00
sS'group_name'
p22528
S'Advanced'
p22529
sa(dp22530
S'description'
p22531
S'Request that the initial condition is output to the solution file\n'
p22532
sS'cpp_type'
p22533
S'bool'
p22534
sS'default'
p22535
S'0'
p22536
sS'name'
p22537
S'output_initial'
p22538
sS'required'
p22539
I00
sS'group_name'
p22540
S'Timing'
p22541
sa(dp22542
S'description'
p22543
S'Request that all intermediate steps (not initial or final) are output\n'
p22544
sS'cpp_type'
p22545
S'bool'
p22546
sS'default'
p22547
S'1'
p22548
sS'name'
p22549
S'output_intermediate'
p22550
sS'required'
p22551
I00
sS'group_name'
p22552
Nsa(dp22553
S'description'
p22554
S'Enable/disable the output of postprocessors\n'
p22555
sS'cpp_type'
p22556
S'bool'
p22557
sS'default'
p22558
S'1'
p22559
sS'name'
p22560
S'output_postprocessors'
p22561
sS'required'
p22562
I00
sS'group_name'
p22563
S'Variables'
p22564
sa(dp22565
S'description'
p22566
S'Enable/disable the output of aux scalar variables\n'
p22567
sS'cpp_type'
p22568
S'bool'
p22569
sS'default'
p22570
S'1'
p22571
sS'name'
p22572
S'output_scalar_variables'
p22573
sS'required'
p22574
I00
sS'group_name'
p22575
S'Variables'
p22576
sa(dp22577
S'description'
p22578
S'Toggles the display of the system information prior to the solve\n'
p22579
sS'cpp_type'
p22580
S'bool'
p22581
sS'default'
p22582
S'1'
p22583
sS'name'
p22584
S'output_system_information'
p22585
sS'required'
p22586
I00
sS'group_name'
p22587
Nsa(dp22588
S'description'
p22589
S'Enable/disable the output of VectorPostprocessors\n'
p22590
sS'cpp_type'
p22591
S'bool'
p22592
sS'default'
p22593
S'1'
p22594
sS'name'
p22595
S'output_vector_postprocessors'
p22596
sS'required'
p22597
I00
sS'group_name'
p22598
S'Variables'
p22599
sa(dp22600
S'description'
p22601
S"Enable/disable sequential file output (enable by default when 'use_displace = true', otherwise defaults to false\n"
p22602
sS'cpp_type'
p22603
S'bool'
p22604
sS'default'
p22605
g3
sS'name'
p22606
S'sequence'
p22607
sS'required'
p22608
I00
sS'group_name'
p22609
Nsa(dp22610
S'description'
p22611
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p22612
sS'cpp_type'
p22613
S'std::vector<VariableName, std::allocator<VariableName> >'
p22614
sS'default'
p22615
g3
sS'name'
p22616
S'show'
p22617
sS'required'
p22618
I00
sS'group_name'
p22619
S'Variables'
p22620
sa(dp22621
S'description'
p22622
S'Time at which this output object begins to operate\n'
p22623
sS'cpp_type'
p22624
S'double'
p22625
sS'default'
p22626
g3
sS'name'
p22627
S'start_time'
p22628
sS'required'
p22629
I00
sS'group_name'
p22630
S'Timing'
p22631
sa(dp22632
S'description'
p22633
S'Only export results at sync times\n'
p22634
sS'cpp_type'
p22635
S'bool'
p22636
sS'default'
p22637
S'0'
p22638
sS'name'
p22639
S'sync_only'
p22640
sS'required'
p22641
I00
sS'group_name'
p22642
S'Timing'
p22643
sa(dp22644
S'description'
p22645
S'Times at which the output and solution is forced to occur\n'
p22646
sS'cpp_type'
p22647
S'std::vector<double, std::allocator<double> >'
p22648
sS'default'
p22649
g3
sS'name'
p22650
S'sync_times'
p22651
sS'required'
p22652
I00
sS'group_name'
p22653
S'Timing'
p22654
sa(dp22655
S'description'
p22656
S'Time tolerance utilized checking start and end times\n'
p22657
sS'cpp_type'
p22658
S'double'
p22659
sS'default'
p22660
S'1e-14'
p22661
sS'name'
p22662
S'time_tolerance'
p22663
sS'required'
p22664
I00
sS'group_name'
p22665
S'Timing'
p22666
sa(dp22667
S'description'
p22668
g3
sS'cpp_type'
p22669
S'std::string'
p22670
sS'default'
p22671
S'CSV'
p22672
sS'name'
p22673
S'type'
p22674
sS'required'
p22675
I00
sS'group_name'
p22676
Nsa(dp22677
S'description'
p22678
S'Enable/disable the use of the displaced mesh for outputting\n'
p22679
sS'cpp_type'
p22680
S'bool'
p22681
sS'default'
p22682
S'0'
p22683
sS'name'
p22684
S'use_displaced'
p22685
sS'required'
p22686
I00
sS'group_name'
p22687
NsasS'name'
p22688
S'/Outputs/CSV'
p22689
sa(dp22690
S'description'
p22691
g3
sS'type'
p22692
NsS'subblocks'
p22693
NsS'parameters'
p22694
(lp22695
(dp22696
S'description'
p22697
S"Append '_displaced' to the output file base\n"
p22698
sS'cpp_type'
p22699
S'bool'
p22700
sS'default'
p22701
S'0'
p22702
sS'name'
p22703
S'append_displaced'
p22704
sS'required'
p22705
I00
sS'group_name'
p22706
S'Displaced'
p22707
sa(dp22708
S'description'
p22709
S'Toggle the output of binary files\n'
p22710
sS'cpp_type'
p22711
S'bool'
p22712
sS'default'
p22713
S'1'
p22714
sS'name'
p22715
S'binary'
p22716
sS'required'
p22717
I00
sS'group_name'
p22718
S'Advanced'
p22719
sa(dp22720
S'description'
p22721
S'Output elemental nonlinear variables as nodal\n'
p22722
sS'cpp_type'
p22723
S'bool'
p22724
sS'default'
p22725
S'0'
p22726
sS'name'
p22727
S'elemental_as_nodal'
p22728
sS'required'
p22729
I00
sS'group_name'
p22730
S'Variables'
p22731
sa(dp22732
S'description'
p22733
S'Time at which this output object stop operating\n'
p22734
sS'cpp_type'
p22735
S'double'
p22736
sS'default'
p22737
g3
sS'name'
p22738
S'end_time'
p22739
sS'required'
p22740
I00
sS'group_name'
p22741
S'Timing'
p22742
sa(dp22743
S'description'
p22744
S'The desired solution output name without an extension\n'
p22745
sS'cpp_type'
p22746
S'std::string'
p22747
sS'default'
p22748
g3
sS'name'
p22749
S'file_base'
p22750
sS'required'
p22751
I00
sS'group_name'
p22752
Nsa(dp22753
S'description'
p22754
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p22755
sS'cpp_type'
p22756
S'std::vector<VariableName, std::allocator<VariableName> >'
p22757
sS'default'
p22758
g3
sS'name'
p22759
S'hide'
p22760
sS'required'
p22761
I00
sS'group_name'
p22762
S'Variables'
p22763
sa(dp22764
S'description'
p22765
S'The interval at which time steps are output to the solution file\n'
p22766
sS'cpp_type'
p22767
S'unsigned int'
p22768
sS'default'
p22769
S'1'
p22770
sS'name'
p22771
S'interval'
p22772
sS'required'
p22773
I00
sS'group_name'
p22774
S'Timing'
p22775
sa(dp22776
S'description'
p22777
S'Number of the restart files to save\n'
p22778
sS'cpp_type'
p22779
S'unsigned int'
p22780
sS'default'
p22781
S'2'
p22782
sS'name'
p22783
S'num_files'
p22784
sS'required'
p22785
I00
sS'group_name'
p22786
Nsa(dp22787
S'description'
p22788
S'When true all time attempted time steps are output\n'
p22789
sS'cpp_type'
p22790
S'bool'
p22791
sS'default'
p22792
S'0'
p22793
sS'name'
p22794
S'output_failed'
p22795
sS'required'
p22796
I00
sS'group_name'
p22797
Nsa(dp22798
S'description'
p22799
S'Force the final time step to be output, regardless of output interval\n'
p22800
sS'cpp_type'
p22801
S'bool'
p22802
sS'default'
p22803
S'0'
p22804
sS'name'
p22805
S'output_final'
p22806
sS'required'
p22807
I00
sS'group_name'
p22808
S'Timing'
p22809
sa(dp22810
S'description'
p22811
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p22812
sS'cpp_type'
p22813
S'std::vector<std::string, std::allocator<std::string> >'
p22814
sS'default'
p22815
g3
sS'name'
p22816
S'output_if_base_contains'
p22817
sS'required'
p22818
I00
sS'group_name'
p22819
S'Advanced'
p22820
sa(dp22821
S'description'
p22822
S'Request that the initial condition is output to the solution file\n'
p22823
sS'cpp_type'
p22824
S'bool'
p22825
sS'default'
p22826
S'0'
p22827
sS'name'
p22828
S'output_initial'
p22829
sS'required'
p22830
I00
sS'group_name'
p22831
S'Timing'
p22832
sa(dp22833
S'description'
p22834
S'Output the input file\n'
p22835
sS'cpp_type'
p22836
S'bool'
p22837
sS'default'
p22838
S'0'
p22839
sS'name'
p22840
S'output_input'
p22841
sS'required'
p22842
I00
sS'group_name'
p22843
Nsa(dp22844
S'description'
p22845
S'Request that all intermediate steps (not initial or final) are output\n'
p22846
sS'cpp_type'
p22847
S'bool'
p22848
sS'default'
p22849
S'1'
p22850
sS'name'
p22851
S'output_intermediate'
p22852
sS'required'
p22853
I00
sS'group_name'
p22854
Nsa(dp22855
S'description'
p22856
S'Toggles the display of the system information prior to the solve\n'
p22857
sS'cpp_type'
p22858
S'bool'
p22859
sS'default'
p22860
S'1'
p22861
sS'name'
p22862
S'output_system_information'
p22863
sS'required'
p22864
I00
sS'group_name'
p22865
Nsa(dp22866
S'description'
p22867
S'The number of for extension suffix (e.g., out.e-s002)\n'
p22868
sS'cpp_type'
p22869
S'unsigned int'
p22870
sS'default'
p22871
S'4'
p22872
sS'name'
p22873
S'padding'
p22874
sS'required'
p22875
I00
sS'group_name'
p22876
S'Advanced'
p22877
sa(dp22878
S'description'
p22879
S'Output scalar variables as nodal\n'
p22880
sS'cpp_type'
p22881
S'bool'
p22882
sS'default'
p22883
S'0'
p22884
sS'name'
p22885
S'scalar_as_nodal'
p22886
sS'required'
p22887
I00
sS'group_name'
p22888
S'Variables'
p22889
sa(dp22890
S'description'
p22891
S"Enable/disable sequential file output (enable by default when 'use_displace = true', otherwise defaults to false\n"
p22892
sS'cpp_type'
p22893
S'bool'
p22894
sS'default'
p22895
g3
sS'name'
p22896
S'sequence'
p22897
sS'required'
p22898
I00
sS'group_name'
p22899
Nsa(dp22900
S'description'
p22901
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p22902
sS'cpp_type'
p22903
S'std::vector<VariableName, std::allocator<VariableName> >'
p22904
sS'default'
p22905
g3
sS'name'
p22906
S'show'
p22907
sS'required'
p22908
I00
sS'group_name'
p22909
S'Variables'
p22910
sa(dp22911
S'description'
p22912
S'Time at which this output object begins to operate\n'
p22913
sS'cpp_type'
p22914
S'double'
p22915
sS'default'
p22916
g3
sS'name'
p22917
S'start_time'
p22918
sS'required'
p22919
I00
sS'group_name'
p22920
S'Timing'
p22921
sa(dp22922
S'description'
p22923
S'This will be appended to the file_base to create the directory name for checkpoint files.\n'
p22924
sS'cpp_type'
p22925
S'std::string'
p22926
sS'default'
p22927
S'cp'
p22928
sS'name'
p22929
S'suffix'
p22930
sS'required'
p22931
I00
sS'group_name'
p22932
Nsa(dp22933
S'description'
p22934
S'Only export results at sync times\n'
p22935
sS'cpp_type'
p22936
S'bool'
p22937
sS'default'
p22938
S'0'
p22939
sS'name'
p22940
S'sync_only'
p22941
sS'required'
p22942
I00
sS'group_name'
p22943
S'Timing'
p22944
sa(dp22945
S'description'
p22946
S'Times at which the output and solution is forced to occur\n'
p22947
sS'cpp_type'
p22948
S'std::vector<double, std::allocator<double> >'
p22949
sS'default'
p22950
g3
sS'name'
p22951
S'sync_times'
p22952
sS'required'
p22953
I00
sS'group_name'
p22954
S'Timing'
p22955
sa(dp22956
S'description'
p22957
S'Time tolerance utilized checking start and end times\n'
p22958
sS'cpp_type'
p22959
S'double'
p22960
sS'default'
p22961
S'1e-14'
p22962
sS'name'
p22963
S'time_tolerance'
p22964
sS'required'
p22965
I00
sS'group_name'
p22966
S'Timing'
p22967
sa(dp22968
S'description'
p22969
g3
sS'cpp_type'
p22970
S'std::string'
p22971
sS'default'
p22972
S'Checkpoint'
p22973
sS'name'
p22974
S'type'
p22975
sS'required'
p22976
I00
sS'group_name'
p22977
Nsa(dp22978
S'description'
p22979
S'Enable/disable the use of the displaced mesh for outputting\n'
p22980
sS'cpp_type'
p22981
S'bool'
p22982
sS'default'
p22983
S'0'
p22984
sS'name'
p22985
S'use_displaced'
p22986
sS'required'
p22987
I00
sS'group_name'
p22988
NsasS'name'
p22989
S'/Outputs/Checkpoint'
p22990
sa(dp22991
S'description'
p22992
g3
sS'type'
p22993
NsS'subblocks'
p22994
NsS'parameters'
p22995
(lp22996
(dp22997
S'description'
p22998
S'If true, all variable norms will be printed after each solve\n'
p22999
sS'cpp_type'
p23000
S'bool'
p23001
sS'default'
p23002
S'0'
p23003
sS'name'
p23004
S'all_variable_norms'
p23005
sS'required'
p23006
I00
sS'group_name'
p23007
S'Norms'
p23008
sa(dp23009
S'description'
p23010
S"Append '_displaced' to the output file base\n"
p23011
sS'cpp_type'
p23012
S'bool'
p23013
sS'default'
p23014
S'0'
p23015
sS'name'
p23016
S'append_displaced'
p23017
sS'required'
p23018
I00
sS'group_name'
p23019
S'Displaced'
p23020
sa(dp23021
S'description'
p23022
S'Time at which this output object stop operating\n'
p23023
sS'cpp_type'
p23024
S'double'
p23025
sS'default'
p23026
g3
sS'name'
p23027
S'end_time'
p23028
sS'required'
p23029
I00
sS'group_name'
p23030
S'Timing'
p23031
sa(dp23032
S'description'
p23033
S'The desired solution output name without an extension\n'
p23034
sS'cpp_type'
p23035
S'std::string'
p23036
sS'default'
p23037
g3
sS'name'
p23038
S'file_base'
p23039
sS'required'
p23040
I00
sS'group_name'
p23041
Nsa(dp23042
S'name'
p23043
S'fit_mode'
p23044
sS'cpp_type'
p23045
S'MooseEnum'
p23046
sS'default'
p23047
S'ENVIRONMENT'
p23048
sS'description'
p23049
S'Specifies the wrapping mode for post-processor tables that are printed to the screen (ENVIRONMENT: Read "MOOSE_PPS_WIDTH" for desired width, AUTO: Attempt to determine width automatically (serial only), <n>: Desired width\n'
p23050
sS'required'
p23051
I00
sS'options'
p23052
S'ENVIRONMENT AUTO 80 120 160'
p23053
sS'group_name'
p23054
Nsa(dp23055
S'description'
p23056
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p23057
sS'cpp_type'
p23058
S'std::vector<VariableName, std::allocator<VariableName> >'
p23059
sS'default'
p23060
g3
sS'name'
p23061
S'hide'
p23062
sS'required'
p23063
I00
sS'group_name'
p23064
S'Variables'
p23065
sa(dp23066
S'description'
p23067
S'The interval at which time steps are output to the solution file\n'
p23068
sS'cpp_type'
p23069
S'unsigned int'
p23070
sS'default'
p23071
S'1'
p23072
sS'name'
p23073
S'interval'
p23074
sS'required'
p23075
I00
sS'group_name'
p23076
S'Timing'
p23077
sa(dp23078
S'description'
p23079
S'Number of divisions applied to time step when outputting linear residuals\n'
p23080
sS'cpp_type'
p23081
S'double'
p23082
sS'default'
p23083
S'1000'
p23084
sS'name'
p23085
S'linear_residual_dt_divisor'
p23086
sS'required'
p23087
I00
sS'group_name'
p23088
S'PETSc'
p23089
sa(dp23090
S'description'
p23091
S'Specifies an end time to begin output on each linear residual evaluation\n'
p23092
sS'cpp_type'
p23093
S'double'
p23094
sS'default'
p23095
g3
sS'name'
p23096
S'linear_residual_end_time'
p23097
sS'required'
p23098
I00
sS'group_name'
p23099
S'PETSc'
p23100
sa(dp23101
S'description'
p23102
S'Specifies a start time to begin output on each linear residual evaluation\n'
p23103
sS'cpp_type'
p23104
S'double'
p23105
sS'default'
p23106
g3
sS'name'
p23107
S'linear_residual_start_time'
p23108
sS'required'
p23109
I00
sS'group_name'
p23110
S'PETSc'
p23111
sa(dp23112
S'description'
p23113
S'Specifies whether output occurs on each linear residual evaluation\n'
p23114
sS'cpp_type'
p23115
S'bool'
p23116
sS'default'
p23117
S'0'
p23118
sS'name'
p23119
S'linear_residuals'
p23120
sS'required'
p23121
I00
sS'group_name'
p23122
S'PETSc'
p23123
sa(dp23124
S'description'
p23125
S'The maximum number of postprocessor/scalar values displayed on screen during a timestep (set to 0 for unlimited)\n'
p23126
sS'cpp_type'
p23127
S'unsigned int'
p23128
sS'default'
p23129
S'15'
p23130
sS'name'
p23131
S'max_rows'
p23132
sS'required'
p23133
I00
sS'group_name'
p23134
S'Advanced'
p23135
sa(dp23136
S'description'
p23137
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p23138
sS'cpp_type'
p23139
S'double'
p23140
sS'default'
p23141
S'1000'
p23142
sS'name'
p23143
S'nonlinear_residual_dt_divisor'
p23144
sS'required'
p23145
I00
sS'group_name'
p23146
S'PETSc'
p23147
sa(dp23148
S'description'
p23149
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p23150
sS'cpp_type'
p23151
S'double'
p23152
sS'default'
p23153
g3
sS'name'
p23154
S'nonlinear_residual_end_time'
p23155
sS'required'
p23156
I00
sS'group_name'
p23157
S'PETSc'
p23158
sa(dp23159
S'description'
p23160
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p23161
sS'cpp_type'
p23162
S'double'
p23163
sS'default'
p23164
g3
sS'name'
p23165
S'nonlinear_residual_start_time'
p23166
sS'required'
p23167
I00
sS'group_name'
p23168
S'PETSc'
p23169
sa(dp23170
S'description'
p23171
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p23172
sS'cpp_type'
p23173
S'bool'
p23174
sS'default'
p23175
S'1'
p23176
sS'name'
p23177
S'nonlinear_residuals'
p23178
sS'required'
p23179
I00
sS'group_name'
p23180
S'PETSc'
p23181
sa(dp23182
S'description'
p23183
S'Multiplier utilized to determine if a residual norm is an outlier. If the variable residual is less than multiplier[0] times the total residual it is colored red. If the variable residual is less than multiplier[1] times the average residual it is colored yellow.\n'
p23184
sS'cpp_type'
p23185
S'std::vector<double, std::allocator<double> >'
p23186
sS'default'
p23187
S'0.8 2'
p23188
sS'name'
p23189
S'outlier_multiplier'
p23190
sS'required'
p23191
I00
sS'group_name'
p23192
S'Norms'
p23193
sa(dp23194
S'description'
p23195
S'If true, outlier variable norms will be printed after each solve\n'
p23196
sS'cpp_type'
p23197
S'bool'
p23198
sS'default'
p23199
S'1'
p23200
sS'name'
p23201
S'outlier_variable_norms'
p23202
sS'required'
p23203
I00
sS'group_name'
p23204
S'Norms'
p23205
sa(dp23206
S'description'
p23207
S'When true all time attempted time steps are output\n'
p23208
sS'cpp_type'
p23209
S'bool'
p23210
sS'default'
p23211
S'1'
p23212
sS'name'
p23213
S'output_failed'
p23214
sS'required'
p23215
I00
sS'group_name'
p23216
Nsa(dp23217
S'description'
p23218
S'Output to the file\n'
p23219
sS'cpp_type'
p23220
S'bool'
p23221
sS'default'
p23222
S'0'
p23223
sS'name'
p23224
S'output_file'
p23225
sS'required'
p23226
I00
sS'group_name'
p23227
Nsa(dp23228
S'description'
p23229
S'Force the final time step to be output, regardless of output interval\n'
p23230
sS'cpp_type'
p23231
S'bool'
p23232
sS'default'
p23233
S'0'
p23234
sS'name'
p23235
S'output_final'
p23236
sS'required'
p23237
I00
sS'group_name'
p23238
S'Timing'
p23239
sa(dp23240
S'description'
p23241
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p23242
sS'cpp_type'
p23243
S'std::vector<std::string, std::allocator<std::string> >'
p23244
sS'default'
p23245
g3
sS'name'
p23246
S'output_if_base_contains'
p23247
sS'required'
p23248
I00
sS'group_name'
p23249
S'Advanced'
p23250
sa(dp23251
S'description'
p23252
S'Request that the initial condition is output to the solution file\n'
p23253
sS'cpp_type'
p23254
S'bool'
p23255
sS'default'
p23256
S'0'
p23257
sS'name'
p23258
S'output_initial'
p23259
sS'required'
p23260
I00
sS'group_name'
p23261
S'Timing'
p23262
sa(dp23263
S'description'
p23264
S'Request that all intermediate steps (not initial or final) are output\n'
p23265
sS'cpp_type'
p23266
S'bool'
p23267
sS'default'
p23268
S'1'
p23269
sS'name'
p23270
S'output_intermediate'
p23271
sS'required'
p23272
I00
sS'group_name'
p23273
Nsa(dp23274
S'description'
p23275
S'Enable/disable the output of postprocessors\n'
p23276
sS'cpp_type'
p23277
S'bool'
p23278
sS'default'
p23279
S'1'
p23280
sS'name'
p23281
S'output_postprocessors'
p23282
sS'required'
p23283
I00
sS'group_name'
p23284
S'Variables'
p23285
sa(dp23286
S'description'
p23287
S'Enable/disable the output of aux scalar variables\n'
p23288
sS'cpp_type'
p23289
S'bool'
p23290
sS'default'
p23291
S'1'
p23292
sS'name'
p23293
S'output_scalar_variables'
p23294
sS'required'
p23295
I00
sS'group_name'
p23296
S'Variables'
p23297
sa(dp23298
S'description'
p23299
S'Output to the screen\n'
p23300
sS'cpp_type'
p23301
S'bool'
p23302
sS'default'
p23303
S'1'
p23304
sS'name'
p23305
S'output_screen'
p23306
sS'required'
p23307
I00
sS'group_name'
p23308
Nsa(dp23309
S'description'
p23310
S'Toggles the display of the system information prior to the solve\n'
p23311
sS'cpp_type'
p23312
S'bool'
p23313
sS'default'
p23314
S'1'
p23315
sS'name'
p23316
S'output_system_information'
p23317
sS'required'
p23318
I00
sS'group_name'
p23319
Nsa(dp23320
S'description'
p23321
S'The number of for extension suffix (e.g., out.e-s002)\n'
p23322
sS'cpp_type'
p23323
S'unsigned int'
p23324
sS'default'
p23325
S'4'
p23326
sS'name'
p23327
S'padding'
p23328
sS'required'
p23329
I00
sS'group_name'
p23330
S'Advanced'
p23331
sa(dp23332
S'description'
p23333
S"Print the libMesh performance log header (requires that 'perf_log = true')\n"
p23334
sS'cpp_type'
p23335
S'bool'
p23336
sS'default'
p23337
g3
sS'name'
p23338
S'perf_header'
p23339
sS'required'
p23340
I00
sS'group_name'
p23341
S'Perf Log'
p23342
sa(dp23343
S'description'
p23344
S'If true, all performance logs will be printed. The individual log settings will override this option.\n'
p23345
sS'cpp_type'
p23346
S'bool'
p23347
sS'default'
p23348
S'0'
p23349
sS'name'
p23350
S'perf_log'
p23351
sS'required'
p23352
I00
sS'group_name'
p23353
S'Perf Log'
p23354
sa(dp23355
S'description'
p23356
S'Control the printing of time and dt in scientific notation\n'
p23357
sS'cpp_type'
p23358
S'bool'
p23359
sS'default'
p23360
S'0'
p23361
sS'name'
p23362
S'scientific_time'
p23363
sS'required'
p23364
I00
sS'group_name'
p23365
Nsa(dp23366
S'description'
p23367
S"Enable/disable sequential file output (enable by default when 'use_displace = true', otherwise defaults to false\n"
p23368
sS'cpp_type'
p23369
S'bool'
p23370
sS'default'
p23371
g3
sS'name'
p23372
S'sequence'
p23373
sS'required'
p23374
I00
sS'group_name'
p23375
Nsa(dp23376
S'description'
p23377
S"Toggles the printing of the 'Setup Performance' log\n"
p23378
sS'cpp_type'
p23379
S'bool'
p23380
sS'default'
p23381
g3
sS'name'
p23382
S'setup_log'
p23383
sS'required'
p23384
I00
sS'group_name'
p23385
S'Perf Log'
p23386
sa(dp23387
S'description'
p23388
S'Specifies whether or not the Setup Performance log should be printed before the first time step.  It will still be printed at the end if perf_log is also enabled and likewise disabled if perf_log is false\n'
p23389
sS'cpp_type'
p23390
S'bool'
p23391
sS'default'
p23392
S'0'
p23393
sS'name'
p23394
S'setup_log_early'
p23395
sS'required'
p23396
I00
sS'group_name'
p23397
S'Perf Log'
p23398
sa(dp23399
S'description'
p23400
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p23401
sS'cpp_type'
p23402
S'std::vector<VariableName, std::allocator<VariableName> >'
p23403
sS'default'
p23404
g3
sS'name'
p23405
S'show'
p23406
sS'required'
p23407
I00
sS'group_name'
p23408
S'Variables'
p23409
sa(dp23410
S'description'
p23411
S"Toggles the printing of the 'Moose Test Performance' log\n"
p23412
sS'cpp_type'
p23413
S'bool'
p23414
sS'default'
p23415
g3
sS'name'
p23416
S'solve_log'
p23417
sS'required'
p23418
I00
sS'group_name'
p23419
S'Perf Log'
p23420
sa(dp23421
S'description'
p23422
S'Time at which this output object begins to operate\n'
p23423
sS'cpp_type'
p23424
S'double'
p23425
sS'default'
p23426
g3
sS'name'
p23427
S'start_time'
p23428
sS'required'
p23429
I00
sS'group_name'
p23430
S'Timing'
p23431
sa(dp23432
S'description'
p23433
S'Only export results at sync times\n'
p23434
sS'cpp_type'
p23435
S'bool'
p23436
sS'default'
p23437
S'0'
p23438
sS'name'
p23439
S'sync_only'
p23440
sS'required'
p23441
I00
sS'group_name'
p23442
S'Timing'
p23443
sa(dp23444
S'description'
p23445
S'Times at which the output and solution is forced to occur\n'
p23446
sS'cpp_type'
p23447
S'std::vector<double, std::allocator<double> >'
p23448
sS'default'
p23449
g3
sS'name'
p23450
S'sync_times'
p23451
sS'required'
p23452
I00
sS'group_name'
p23453
S'Timing'
p23454
sa(dp23455
S'description'
p23456
S'The number of significant digits that are printed on time related outputs\n'
p23457
sS'cpp_type'
p23458
S'unsigned int'
p23459
sS'default'
p23460
g3
sS'name'
p23461
S'time_precision'
p23462
sS'required'
p23463
I00
sS'group_name'
p23464
Nsa(dp23465
S'description'
p23466
S'Time tolerance utilized checking start and end times\n'
p23467
sS'cpp_type'
p23468
S'double'
p23469
sS'default'
p23470
S'1e-14'
p23471
sS'name'
p23472
S'time_tolerance'
p23473
sS'required'
p23474
I00
sS'group_name'
p23475
S'Timing'
p23476
sa(dp23477
S'description'
p23478
g3
sS'cpp_type'
p23479
S'std::string'
p23480
sS'default'
p23481
S'Console'
p23482
sS'name'
p23483
S'type'
p23484
sS'required'
p23485
I00
sS'group_name'
p23486
Nsa(dp23487
S'description'
p23488
S'If true, color will be added to the output\n'
p23489
sS'cpp_type'
p23490
S'bool'
p23491
sS'default'
p23492
S'1'
p23493
sS'name'
p23494
S'use_color'
p23495
sS'required'
p23496
I00
sS'group_name'
p23497
Nsa(dp23498
S'description'
p23499
S'Enable/disable the use of the displaced mesh for outputting\n'
p23500
sS'cpp_type'
p23501
S'bool'
p23502
sS'default'
p23503
S'0'
p23504
sS'name'
p23505
S'use_displaced'
p23506
sS'required'
p23507
I00
sS'group_name'
p23508
Nsa(dp23509
S'description'
p23510
S'Print detailed diagnostics on timestep calculation\n'
p23511
sS'cpp_type'
p23512
S'bool'
p23513
sS'default'
p23514
S'0'
p23515
sS'name'
p23516
S'verbose'
p23517
sS'required'
p23518
I00
sS'group_name'
p23519
S'Advanced'
p23520
sasS'name'
p23521
S'/Outputs/Console'
p23522
sa(dp23523
S'description'
p23524
g3
sS'type'
p23525
NsS'subblocks'
p23526
NsS'parameters'
p23527
(lp23528
(dp23529
S'description'
p23530
S"Append '_displaced' to the output file base\n"
p23531
sS'cpp_type'
p23532
S'bool'
p23533
sS'default'
p23534
S'0'
p23535
sS'name'
p23536
S'append_displaced'
p23537
sS'required'
p23538
I00
sS'group_name'
p23539
S'Displaced'
p23540
sa(dp23541
S'description'
p23542
S'Time at which this output object stop operating\n'
p23543
sS'cpp_type'
p23544
S'double'
p23545
sS'default'
p23546
g3
sS'name'
p23547
S'end_time'
p23548
sS'required'
p23549
I00
sS'group_name'
p23550
S'Timing'
p23551
sa(dp23552
S'description'
p23553
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p23554
sS'cpp_type'
p23555
S'std::vector<VariableName, std::allocator<VariableName> >'
p23556
sS'default'
p23557
g3
sS'name'
p23558
S'hide'
p23559
sS'required'
p23560
I00
sS'group_name'
p23561
S'Variables'
p23562
sa(dp23563
S'description'
p23564
S'The interval at which time steps are output to the solution file\n'
p23565
sS'cpp_type'
p23566
S'unsigned int'
p23567
sS'default'
p23568
S'1'
p23569
sS'name'
p23570
S'interval'
p23571
sS'required'
p23572
I00
sS'group_name'
p23573
S'Timing'
p23574
sa(dp23575
S'description'
p23576
S'Number of divisions applied to time step when outputting linear residuals\n'
p23577
sS'cpp_type'
p23578
S'double'
p23579
sS'default'
p23580
S'1000'
p23581
sS'name'
p23582
S'linear_residual_dt_divisor'
p23583
sS'required'
p23584
I00
sS'group_name'
p23585
S'PETSc'
p23586
sa(dp23587
S'description'
p23588
S'Specifies an end time to begin output on each linear residual evaluation\n'
p23589
sS'cpp_type'
p23590
S'double'
p23591
sS'default'
p23592
g3
sS'name'
p23593
S'linear_residual_end_time'
p23594
sS'required'
p23595
I00
sS'group_name'
p23596
S'PETSc'
p23597
sa(dp23598
S'description'
p23599
S'Specifies a start time to begin output on each linear residual evaluation\n'
p23600
sS'cpp_type'
p23601
S'double'
p23602
sS'default'
p23603
g3
sS'name'
p23604
S'linear_residual_start_time'
p23605
sS'required'
p23606
I00
sS'group_name'
p23607
S'PETSc'
p23608
sa(dp23609
S'description'
p23610
S'Specifies whether output occurs on each linear residual evaluation\n'
p23611
sS'cpp_type'
p23612
S'bool'
p23613
sS'default'
p23614
S'0'
p23615
sS'name'
p23616
S'linear_residuals'
p23617
sS'required'
p23618
I00
sS'group_name'
p23619
S'PETSc'
p23620
sa(dp23621
S'description'
p23622
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p23623
sS'cpp_type'
p23624
S'double'
p23625
sS'default'
p23626
S'1000'
p23627
sS'name'
p23628
S'nonlinear_residual_dt_divisor'
p23629
sS'required'
p23630
I00
sS'group_name'
p23631
S'PETSc'
p23632
sa(dp23633
S'description'
p23634
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p23635
sS'cpp_type'
p23636
S'double'
p23637
sS'default'
p23638
g3
sS'name'
p23639
S'nonlinear_residual_end_time'
p23640
sS'required'
p23641
I00
sS'group_name'
p23642
S'PETSc'
p23643
sa(dp23644
S'description'
p23645
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p23646
sS'cpp_type'
p23647
S'double'
p23648
sS'default'
p23649
g3
sS'name'
p23650
S'nonlinear_residual_start_time'
p23651
sS'required'
p23652
I00
sS'group_name'
p23653
S'PETSc'
p23654
sa(dp23655
S'description'
p23656
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p23657
sS'cpp_type'
p23658
S'bool'
p23659
sS'default'
p23660
S'0'
p23661
sS'name'
p23662
S'nonlinear_residuals'
p23663
sS'required'
p23664
I00
sS'group_name'
p23665
S'PETSc'
p23666
sa(dp23667
S'description'
p23668
S'Enable/disable the output of elemental nonlinear variables\n'
p23669
sS'cpp_type'
p23670
S'bool'
p23671
sS'default'
p23672
S'1'
p23673
sS'name'
p23674
S'output_elemental_variables'
p23675
sS'required'
p23676
I00
sS'group_name'
p23677
S'Variables'
p23678
sa(dp23679
S'description'
p23680
S'When true all time attempted time steps are output\n'
p23681
sS'cpp_type'
p23682
S'bool'
p23683
sS'default'
p23684
S'0'
p23685
sS'name'
p23686
S'output_failed'
p23687
sS'required'
p23688
I00
sS'group_name'
p23689
Nsa(dp23690
S'description'
p23691
S'Force the final time step to be output, regardless of output interval\n'
p23692
sS'cpp_type'
p23693
S'bool'
p23694
sS'default'
p23695
S'0'
p23696
sS'name'
p23697
S'output_final'
p23698
sS'required'
p23699
I00
sS'group_name'
p23700
S'Timing'
p23701
sa(dp23702
S'description'
p23703
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p23704
sS'cpp_type'
p23705
S'std::vector<std::string, std::allocator<std::string> >'
p23706
sS'default'
p23707
g3
sS'name'
p23708
S'output_if_base_contains'
p23709
sS'required'
p23710
I00
sS'group_name'
p23711
S'Advanced'
p23712
sa(dp23713
S'description'
p23714
S'Request that the initial condition is output to the solution file\n'
p23715
sS'cpp_type'
p23716
S'bool'
p23717
sS'default'
p23718
S'0'
p23719
sS'name'
p23720
S'output_initial'
p23721
sS'required'
p23722
I00
sS'group_name'
p23723
S'Timing'
p23724
sa(dp23725
S'description'
p23726
S'Request that all intermediate steps (not initial or final) are output\n'
p23727
sS'cpp_type'
p23728
S'bool'
p23729
sS'default'
p23730
S'1'
p23731
sS'name'
p23732
S'output_intermediate'
p23733
sS'required'
p23734
I00
sS'group_name'
p23735
Nsa(dp23736
S'description'
p23737
S'Enable/disable the output of nodal nonlinear variables\n'
p23738
sS'cpp_type'
p23739
S'bool'
p23740
sS'default'
p23741
S'1'
p23742
sS'name'
p23743
S'output_nodal_variables'
p23744
sS'required'
p23745
I00
sS'group_name'
p23746
S'Variables'
p23747
sa(dp23748
S'description'
p23749
S'The number of for extension suffix (e.g., out.e-s002)\n'
p23750
sS'cpp_type'
p23751
S'unsigned int'
p23752
sS'default'
p23753
S'4'
p23754
sS'name'
p23755
S'padding'
p23756
sS'required'
p23757
I00
sS'group_name'
p23758
S'Advanced'
p23759
sa(dp23760
S'description'
p23761
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p23762
sS'cpp_type'
p23763
S'std::vector<VariableName, std::allocator<VariableName> >'
p23764
sS'default'
p23765
g3
sS'name'
p23766
S'show'
p23767
sS'required'
p23768
I00
sS'group_name'
p23769
S'Variables'
p23770
sa(dp23771
S'description'
p23772
S'Print the residual norms of the individual solution variables at each nonlinear iteration\n'
p23773
sS'cpp_type'
p23774
S'bool'
p23775
sS'default'
p23776
S'0'
p23777
sS'name'
p23778
S'show_var_residual_norms'
p23779
sS'required'
p23780
I00
sS'group_name'
p23781
Nsa(dp23782
S'description'
p23783
S'Time at which this output object begins to operate\n'
p23784
sS'cpp_type'
p23785
S'double'
p23786
sS'default'
p23787
g3
sS'name'
p23788
S'start_time'
p23789
sS'required'
p23790
I00
sS'group_name'
p23791
S'Timing'
p23792
sa(dp23793
S'description'
p23794
S'Only export results at sync times\n'
p23795
sS'cpp_type'
p23796
S'bool'
p23797
sS'default'
p23798
S'0'
p23799
sS'name'
p23800
S'sync_only'
p23801
sS'required'
p23802
I00
sS'group_name'
p23803
S'Timing'
p23804
sa(dp23805
S'description'
p23806
S'Times at which the output and solution is forced to occur\n'
p23807
sS'cpp_type'
p23808
S'std::vector<double, std::allocator<double> >'
p23809
sS'default'
p23810
g3
sS'name'
p23811
S'sync_times'
p23812
sS'required'
p23813
I00
sS'group_name'
p23814
S'Timing'
p23815
sa(dp23816
S'description'
p23817
S'Time tolerance utilized checking start and end times\n'
p23818
sS'cpp_type'
p23819
S'double'
p23820
sS'default'
p23821
S'1e-14'
p23822
sS'name'
p23823
S'time_tolerance'
p23824
sS'required'
p23825
I00
sS'group_name'
p23826
S'Timing'
p23827
sa(dp23828
S'description'
p23829
g3
sS'cpp_type'
p23830
S'std::string'
p23831
sS'default'
p23832
S'DebugOutput'
p23833
sS'name'
p23834
S'type'
p23835
sS'required'
p23836
I00
sS'group_name'
p23837
Nsa(dp23838
S'description'
p23839
S'Enable/disable the use of the displaced mesh for outputting\n'
p23840
sS'cpp_type'
p23841
S'bool'
p23842
sS'default'
p23843
S'0'
p23844
sS'name'
p23845
S'use_displaced'
p23846
sS'required'
p23847
I00
sS'group_name'
p23848
NsasS'name'
p23849
S'/Outputs/DebugOutput'
p23850
sa(dp23851
S'description'
p23852
g3
sS'type'
p23853
NsS'subblocks'
p23854
NsS'parameters'
p23855
(lp23856
(dp23857
S'description'
p23858
S"Append '_displaced' to the output file base\n"
p23859
sS'cpp_type'
p23860
S'bool'
p23861
sS'default'
p23862
S'0'
p23863
sS'name'
p23864
S'append_displaced'
p23865
sS'required'
p23866
I00
sS'group_name'
p23867
S'Displaced'
p23868
sa(dp23869
S'description'
p23870
S"Append '_oversample' to the output file base\n"
p23871
sS'cpp_type'
p23872
S'bool'
p23873
sS'default'
p23874
S'0'
p23875
sS'name'
p23876
S'append_oversample'
p23877
sS'required'
p23878
I00
sS'group_name'
p23879
S'Oversampling'
p23880
sa(dp23881
S'description'
p23882
S'Output elemental nonlinear variables as nodal\n'
p23883
sS'cpp_type'
p23884
S'bool'
p23885
sS'default'
p23886
S'0'
p23887
sS'name'
p23888
S'elemental_as_nodal'
p23889
sS'required'
p23890
I00
sS'group_name'
p23891
S'Variables'
p23892
sa(dp23893
S'description'
p23894
S'Time at which this output object stop operating\n'
p23895
sS'cpp_type'
p23896
S'double'
p23897
sS'default'
p23898
g3
sS'name'
p23899
S'end_time'
p23900
sS'required'
p23901
I00
sS'group_name'
p23902
S'Timing'
p23903
sa(dp23904
S'description'
p23905
S'The name of the mesh file to read, for oversampling\n'
p23906
sS'cpp_type'
p23907
S'MeshFileName'
p23908
sS'default'
p23909
g3
sS'name'
p23910
S'file'
p23911
sS'required'
p23912
I00
sS'group_name'
p23913
S'Oversampling'
p23914
sa(dp23915
S'description'
p23916
S'The desired solution output name without an extension\n'
p23917
sS'cpp_type'
p23918
S'std::string'
p23919
sS'default'
p23920
g3
sS'name'
p23921
S'file_base'
p23922
sS'required'
p23923
I00
sS'group_name'
p23924
Nsa(dp23925
S'description'
p23926
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p23927
sS'cpp_type'
p23928
S'std::vector<VariableName, std::allocator<VariableName> >'
p23929
sS'default'
p23930
g3
sS'name'
p23931
S'hide'
p23932
sS'required'
p23933
I00
sS'group_name'
p23934
S'Variables'
p23935
sa(dp23936
S'description'
p23937
S'The interval at which time steps are output to the solution file\n'
p23938
sS'cpp_type'
p23939
S'unsigned int'
p23940
sS'default'
p23941
S'1'
p23942
sS'name'
p23943
S'interval'
p23944
sS'required'
p23945
I00
sS'group_name'
p23946
S'Timing'
p23947
sa(dp23948
S'description'
p23949
S'Number of divisions applied to time step when outputting linear residuals\n'
p23950
sS'cpp_type'
p23951
S'double'
p23952
sS'default'
p23953
S'1000'
p23954
sS'name'
p23955
S'linear_residual_dt_divisor'
p23956
sS'required'
p23957
I00
sS'group_name'
p23958
S'PETSc'
p23959
sa(dp23960
S'description'
p23961
S'Specifies an end time to begin output on each linear residual evaluation\n'
p23962
sS'cpp_type'
p23963
S'double'
p23964
sS'default'
p23965
g3
sS'name'
p23966
S'linear_residual_end_time'
p23967
sS'required'
p23968
I00
sS'group_name'
p23969
S'PETSc'
p23970
sa(dp23971
S'description'
p23972
S'Specifies a start time to begin output on each linear residual evaluation\n'
p23973
sS'cpp_type'
p23974
S'double'
p23975
sS'default'
p23976
g3
sS'name'
p23977
S'linear_residual_start_time'
p23978
sS'required'
p23979
I00
sS'group_name'
p23980
S'PETSc'
p23981
sa(dp23982
S'description'
p23983
S'Specifies whether output occurs on each linear residual evaluation\n'
p23984
sS'cpp_type'
p23985
S'bool'
p23986
sS'default'
p23987
S'0'
p23988
sS'name'
p23989
S'linear_residuals'
p23990
sS'required'
p23991
I00
sS'group_name'
p23992
S'PETSc'
p23993
sa(dp23994
S'description'
p23995
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p23996
sS'cpp_type'
p23997
S'double'
p23998
sS'default'
p23999
S'1000'
p24000
sS'name'
p24001
S'nonlinear_residual_dt_divisor'
p24002
sS'required'
p24003
I00
sS'group_name'
p24004
S'PETSc'
p24005
sa(dp24006
S'description'
p24007
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p24008
sS'cpp_type'
p24009
S'double'
p24010
sS'default'
p24011
g3
sS'name'
p24012
S'nonlinear_residual_end_time'
p24013
sS'required'
p24014
I00
sS'group_name'
p24015
S'PETSc'
p24016
sa(dp24017
S'description'
p24018
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p24019
sS'cpp_type'
p24020
S'double'
p24021
sS'default'
p24022
g3
sS'name'
p24023
S'nonlinear_residual_start_time'
p24024
sS'required'
p24025
I00
sS'group_name'
p24026
S'PETSc'
p24027
sa(dp24028
S'description'
p24029
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p24030
sS'cpp_type'
p24031
S'bool'
p24032
sS'default'
p24033
S'0'
p24034
sS'name'
p24035
S'nonlinear_residuals'
p24036
sS'required'
p24037
I00
sS'group_name'
p24038
S'PETSc'
p24039
sa(dp24040
S'description'
p24041
S'Enable/disable the output of elemental nonlinear variables\n'
p24042
sS'cpp_type'
p24043
S'bool'
p24044
sS'default'
p24045
S'1'
p24046
sS'name'
p24047
S'output_elemental_variables'
p24048
sS'required'
p24049
I00
sS'group_name'
p24050
S'Variables'
p24051
sa(dp24052
S'description'
p24053
S'When true all time attempted time steps are output\n'
p24054
sS'cpp_type'
p24055
S'bool'
p24056
sS'default'
p24057
S'0'
p24058
sS'name'
p24059
S'output_failed'
p24060
sS'required'
p24061
I00
sS'group_name'
p24062
Nsa(dp24063
S'description'
p24064
S'Force the final time step to be output, regardless of output interval\n'
p24065
sS'cpp_type'
p24066
S'bool'
p24067
sS'default'
p24068
S'0'
p24069
sS'name'
p24070
S'output_final'
p24071
sS'required'
p24072
I00
sS'group_name'
p24073
S'Timing'
p24074
sa(dp24075
S'description'
p24076
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p24077
sS'cpp_type'
p24078
S'std::vector<std::string, std::allocator<std::string> >'
p24079
sS'default'
p24080
g3
sS'name'
p24081
S'output_if_base_contains'
p24082
sS'required'
p24083
I00
sS'group_name'
p24084
S'Advanced'
p24085
sa(dp24086
S'description'
p24087
S'Request that the initial condition is output to the solution file\n'
p24088
sS'cpp_type'
p24089
S'bool'
p24090
sS'default'
p24091
S'0'
p24092
sS'name'
p24093
S'output_initial'
p24094
sS'required'
p24095
I00
sS'group_name'
p24096
S'Timing'
p24097
sa(dp24098
S'description'
p24099
S'Output the input file\n'
p24100
sS'cpp_type'
p24101
S'bool'
p24102
sS'default'
p24103
S'0'
p24104
sS'name'
p24105
S'output_input'
p24106
sS'required'
p24107
I00
sS'group_name'
p24108
Nsa(dp24109
S'description'
p24110
S'Request that all intermediate steps (not initial or final) are output\n'
p24111
sS'cpp_type'
p24112
S'bool'
p24113
sS'default'
p24114
S'1'
p24115
sS'name'
p24116
S'output_intermediate'
p24117
sS'required'
p24118
I00
sS'group_name'
p24119
Nsa(dp24120
S'description'
p24121
S'Enable/disable the output of nodal nonlinear variables\n'
p24122
sS'cpp_type'
p24123
S'bool'
p24124
sS'default'
p24125
S'1'
p24126
sS'name'
p24127
S'output_nodal_variables'
p24128
sS'required'
p24129
I00
sS'group_name'
p24130
S'Variables'
p24131
sa(dp24132
S'description'
p24133
S'Enable/disable the output of postprocessors\n'
p24134
sS'cpp_type'
p24135
S'bool'
p24136
sS'default'
p24137
S'1'
p24138
sS'name'
p24139
S'output_postprocessors'
p24140
sS'required'
p24141
I00
sS'group_name'
p24142
S'Variables'
p24143
sa(dp24144
S'description'
p24145
S'Enable/disable the output of aux scalar variables\n'
p24146
sS'cpp_type'
p24147
S'bool'
p24148
sS'default'
p24149
S'1'
p24150
sS'name'
p24151
S'output_scalar_variables'
p24152
sS'required'
p24153
I00
sS'group_name'
p24154
S'Variables'
p24155
sa(dp24156
S'description'
p24157
S'Toggles the display of the system information prior to the solve\n'
p24158
sS'cpp_type'
p24159
S'bool'
p24160
sS'default'
p24161
S'1'
p24162
sS'name'
p24163
S'output_system_information'
p24164
sS'required'
p24165
I00
sS'group_name'
p24166
Nsa(dp24167
S'description'
p24168
S'Set to true to enable oversampling\n'
p24169
sS'cpp_type'
p24170
S'bool'
p24171
sS'default'
p24172
S'0'
p24173
sS'name'
p24174
S'oversample'
p24175
sS'required'
p24176
I00
sS'group_name'
p24177
S'Oversampling'
p24178
sa(dp24179
S'description'
p24180
S'The number of for extension suffix (e.g., out.e-s002)\n'
p24181
sS'cpp_type'
p24182
S'unsigned int'
p24183
sS'default'
p24184
S'3'
p24185
sS'name'
p24186
S'padding'
p24187
sS'required'
p24188
I00
sS'group_name'
p24189
S'Advanced'
p24190
sa(dp24191
S'description'
p24192
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p24193
sS'cpp_type'
p24194
S'libMesh::Point'
p24195
sS'default'
p24196
g3
sS'name'
p24197
S'position'
p24198
sS'required'
p24199
I00
sS'group_name'
p24200
S'Oversampling'
p24201
sa(dp24202
S'description'
p24203
S'Number of uniform refinements for oversampling\n'
p24204
sS'cpp_type'
p24205
S'unsigned int'
p24206
sS'default'
p24207
S'0'
p24208
sS'name'
p24209
S'refinements'
p24210
sS'required'
p24211
I00
sS'group_name'
p24212
S'Oversampling'
p24213
sa(dp24214
S'description'
p24215
S'Output scalar variables as nodal\n'
p24216
sS'cpp_type'
p24217
S'bool'
p24218
sS'default'
p24219
S'0'
p24220
sS'name'
p24221
S'scalar_as_nodal'
p24222
sS'required'
p24223
I00
sS'group_name'
p24224
S'Variables'
p24225
sa(dp24226
S'description'
p24227
S"Enable/disable sequential file output (enable by default when 'use_displace = true', otherwise defaults to false\n"
p24228
sS'cpp_type'
p24229
S'bool'
p24230
sS'default'
p24231
g3
sS'name'
p24232
S'sequence'
p24233
sS'required'
p24234
I00
sS'group_name'
p24235
Nsa(dp24236
S'description'
p24237
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p24238
sS'cpp_type'
p24239
S'std::vector<VariableName, std::allocator<VariableName> >'
p24240
sS'default'
p24241
g3
sS'name'
p24242
S'show'
p24243
sS'required'
p24244
I00
sS'group_name'
p24245
S'Variables'
p24246
sa(dp24247
S'description'
p24248
S'Time at which this output object begins to operate\n'
p24249
sS'cpp_type'
p24250
S'double'
p24251
sS'default'
p24252
g3
sS'name'
p24253
S'start_time'
p24254
sS'required'
p24255
I00
sS'group_name'
p24256
S'Timing'
p24257
sa(dp24258
S'description'
p24259
S'Only export results at sync times\n'
p24260
sS'cpp_type'
p24261
S'bool'
p24262
sS'default'
p24263
S'0'
p24264
sS'name'
p24265
S'sync_only'
p24266
sS'required'
p24267
I00
sS'group_name'
p24268
S'Timing'
p24269
sa(dp24270
S'description'
p24271
S'Times at which the output and solution is forced to occur\n'
p24272
sS'cpp_type'
p24273
S'std::vector<double, std::allocator<double> >'
p24274
sS'default'
p24275
g3
sS'name'
p24276
S'sync_times'
p24277
sS'required'
p24278
I00
sS'group_name'
p24279
S'Timing'
p24280
sa(dp24281
S'description'
p24282
S'Time tolerance utilized checking start and end times\n'
p24283
sS'cpp_type'
p24284
S'double'
p24285
sS'default'
p24286
S'1e-14'
p24287
sS'name'
p24288
S'time_tolerance'
p24289
sS'required'
p24290
I00
sS'group_name'
p24291
S'Timing'
p24292
sa(dp24293
S'description'
p24294
g3
sS'cpp_type'
p24295
S'std::string'
p24296
sS'default'
p24297
S'Exodus'
p24298
sS'name'
p24299
S'type'
p24300
sS'required'
p24301
I00
sS'group_name'
p24302
Nsa(dp24303
S'description'
p24304
S'Enable/disable the use of the displaced mesh for outputting\n'
p24305
sS'cpp_type'
p24306
S'bool'
p24307
sS'default'
p24308
S'0'
p24309
sS'name'
p24310
S'use_displaced'
p24311
sS'required'
p24312
I00
sS'group_name'
p24313
NsasS'name'
p24314
S'/Outputs/Exodus'
p24315
sa(dp24316
S'description'
p24317
g3
sS'type'
p24318
NsS'subblocks'
p24319
NsS'parameters'
p24320
(lp24321
(dp24322
S'description'
p24323
S"Append '_displaced' to the output file base\n"
p24324
sS'cpp_type'
p24325
S'bool'
p24326
sS'default'
p24327
S'0'
p24328
sS'name'
p24329
S'append_displaced'
p24330
sS'required'
p24331
I00
sS'group_name'
p24332
S'Displaced'
p24333
sa(dp24334
S'description'
p24335
S"Append '_oversample' to the output file base\n"
p24336
sS'cpp_type'
p24337
S'bool'
p24338
sS'default'
p24339
S'0'
p24340
sS'name'
p24341
S'append_oversample'
p24342
sS'required'
p24343
I00
sS'group_name'
p24344
S'Oversampling'
p24345
sa(dp24346
S'description'
p24347
S'Output the file in binary format\n'
p24348
sS'cpp_type'
p24349
S'bool'
p24350
sS'default'
p24351
S'1'
p24352
sS'name'
p24353
S'binary'
p24354
sS'required'
p24355
I00
sS'group_name'
p24356
S'Advanced'
p24357
sa(dp24358
S'description'
p24359
S'Output elemental nonlinear variables as nodal\n'
p24360
sS'cpp_type'
p24361
S'bool'
p24362
sS'default'
p24363
S'0'
p24364
sS'name'
p24365
S'elemental_as_nodal'
p24366
sS'required'
p24367
I00
sS'group_name'
p24368
S'Variables'
p24369
sa(dp24370
S'description'
p24371
S'Time at which this output object stop operating\n'
p24372
sS'cpp_type'
p24373
S'double'
p24374
sS'default'
p24375
g3
sS'name'
p24376
S'end_time'
p24377
sS'required'
p24378
I00
sS'group_name'
p24379
S'Timing'
p24380
sa(dp24381
S'description'
p24382
S'The name of the mesh file to read, for oversampling\n'
p24383
sS'cpp_type'
p24384
S'MeshFileName'
p24385
sS'default'
p24386
g3
sS'name'
p24387
S'file'
p24388
sS'required'
p24389
I00
sS'group_name'
p24390
S'Oversampling'
p24391
sa(dp24392
S'description'
p24393
S'The desired solution output name without an extension\n'
p24394
sS'cpp_type'
p24395
S'std::string'
p24396
sS'default'
p24397
g3
sS'name'
p24398
S'file_base'
p24399
sS'required'
p24400
I00
sS'group_name'
p24401
Nsa(dp24402
S'description'
p24403
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p24404
sS'cpp_type'
p24405
S'std::vector<VariableName, std::allocator<VariableName> >'
p24406
sS'default'
p24407
g3
sS'name'
p24408
S'hide'
p24409
sS'required'
p24410
I00
sS'group_name'
p24411
S'Variables'
p24412
sa(dp24413
S'description'
p24414
S'The interval at which time steps are output to the solution file\n'
p24415
sS'cpp_type'
p24416
S'unsigned int'
p24417
sS'default'
p24418
S'1'
p24419
sS'name'
p24420
S'interval'
p24421
sS'required'
p24422
I00
sS'group_name'
p24423
S'Timing'
p24424
sa(dp24425
S'description'
p24426
S'Number of divisions applied to time step when outputting linear residuals\n'
p24427
sS'cpp_type'
p24428
S'double'
p24429
sS'default'
p24430
S'1000'
p24431
sS'name'
p24432
S'linear_residual_dt_divisor'
p24433
sS'required'
p24434
I00
sS'group_name'
p24435
S'PETSc'
p24436
sa(dp24437
S'description'
p24438
S'Specifies an end time to begin output on each linear residual evaluation\n'
p24439
sS'cpp_type'
p24440
S'double'
p24441
sS'default'
p24442
g3
sS'name'
p24443
S'linear_residual_end_time'
p24444
sS'required'
p24445
I00
sS'group_name'
p24446
S'PETSc'
p24447
sa(dp24448
S'description'
p24449
S'Specifies a start time to begin output on each linear residual evaluation\n'
p24450
sS'cpp_type'
p24451
S'double'
p24452
sS'default'
p24453
g3
sS'name'
p24454
S'linear_residual_start_time'
p24455
sS'required'
p24456
I00
sS'group_name'
p24457
S'PETSc'
p24458
sa(dp24459
S'description'
p24460
S'Specifies whether output occurs on each linear residual evaluation\n'
p24461
sS'cpp_type'
p24462
S'bool'
p24463
sS'default'
p24464
S'0'
p24465
sS'name'
p24466
S'linear_residuals'
p24467
sS'required'
p24468
I00
sS'group_name'
p24469
S'PETSc'
p24470
sa(dp24471
S'description'
p24472
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p24473
sS'cpp_type'
p24474
S'double'
p24475
sS'default'
p24476
S'1000'
p24477
sS'name'
p24478
S'nonlinear_residual_dt_divisor'
p24479
sS'required'
p24480
I00
sS'group_name'
p24481
S'PETSc'
p24482
sa(dp24483
S'description'
p24484
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p24485
sS'cpp_type'
p24486
S'double'
p24487
sS'default'
p24488
g3
sS'name'
p24489
S'nonlinear_residual_end_time'
p24490
sS'required'
p24491
I00
sS'group_name'
p24492
S'PETSc'
p24493
sa(dp24494
S'description'
p24495
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p24496
sS'cpp_type'
p24497
S'double'
p24498
sS'default'
p24499
g3
sS'name'
p24500
S'nonlinear_residual_start_time'
p24501
sS'required'
p24502
I00
sS'group_name'
p24503
S'PETSc'
p24504
sa(dp24505
S'description'
p24506
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p24507
sS'cpp_type'
p24508
S'bool'
p24509
sS'default'
p24510
S'0'
p24511
sS'name'
p24512
S'nonlinear_residuals'
p24513
sS'required'
p24514
I00
sS'group_name'
p24515
S'PETSc'
p24516
sa(dp24517
S'description'
p24518
S'Enable/disable the output of elemental nonlinear variables\n'
p24519
sS'cpp_type'
p24520
S'bool'
p24521
sS'default'
p24522
S'1'
p24523
sS'name'
p24524
S'output_elemental_variables'
p24525
sS'required'
p24526
I00
sS'group_name'
p24527
S'Variables'
p24528
sa(dp24529
S'description'
p24530
S'When true all time attempted time steps are output\n'
p24531
sS'cpp_type'
p24532
S'bool'
p24533
sS'default'
p24534
S'0'
p24535
sS'name'
p24536
S'output_failed'
p24537
sS'required'
p24538
I00
sS'group_name'
p24539
Nsa(dp24540
S'description'
p24541
S'Force the final time step to be output, regardless of output interval\n'
p24542
sS'cpp_type'
p24543
S'bool'
p24544
sS'default'
p24545
S'0'
p24546
sS'name'
p24547
S'output_final'
p24548
sS'required'
p24549
I00
sS'group_name'
p24550
S'Timing'
p24551
sa(dp24552
S'description'
p24553
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p24554
sS'cpp_type'
p24555
S'std::vector<std::string, std::allocator<std::string> >'
p24556
sS'default'
p24557
g3
sS'name'
p24558
S'output_if_base_contains'
p24559
sS'required'
p24560
I00
sS'group_name'
p24561
S'Advanced'
p24562
sa(dp24563
S'description'
p24564
S'Request that the initial condition is output to the solution file\n'
p24565
sS'cpp_type'
p24566
S'bool'
p24567
sS'default'
p24568
S'0'
p24569
sS'name'
p24570
S'output_initial'
p24571
sS'required'
p24572
I00
sS'group_name'
p24573
S'Timing'
p24574
sa(dp24575
S'description'
p24576
S'Output the input file\n'
p24577
sS'cpp_type'
p24578
S'bool'
p24579
sS'default'
p24580
S'0'
p24581
sS'name'
p24582
S'output_input'
p24583
sS'required'
p24584
I00
sS'group_name'
p24585
Nsa(dp24586
S'description'
p24587
S'Request that all intermediate steps (not initial or final) are output\n'
p24588
sS'cpp_type'
p24589
S'bool'
p24590
sS'default'
p24591
S'1'
p24592
sS'name'
p24593
S'output_intermediate'
p24594
sS'required'
p24595
I00
sS'group_name'
p24596
Nsa(dp24597
S'description'
p24598
S'Enable/disable the output of nodal nonlinear variables\n'
p24599
sS'cpp_type'
p24600
S'bool'
p24601
sS'default'
p24602
S'1'
p24603
sS'name'
p24604
S'output_nodal_variables'
p24605
sS'required'
p24606
I00
sS'group_name'
p24607
S'Variables'
p24608
sa(dp24609
S'description'
p24610
S'Toggles the display of the system information prior to the solve\n'
p24611
sS'cpp_type'
p24612
S'bool'
p24613
sS'default'
p24614
S'1'
p24615
sS'name'
p24616
S'output_system_information'
p24617
sS'required'
p24618
I00
sS'group_name'
p24619
Nsa(dp24620
S'description'
p24621
S'Set to true to enable oversampling\n'
p24622
sS'cpp_type'
p24623
S'bool'
p24624
sS'default'
p24625
S'0'
p24626
sS'name'
p24627
S'oversample'
p24628
sS'required'
p24629
I00
sS'group_name'
p24630
S'Oversampling'
p24631
sa(dp24632
S'description'
p24633
S'The number of for extension suffix (e.g., out.e-s002)\n'
p24634
sS'cpp_type'
p24635
S'unsigned int'
p24636
sS'default'
p24637
S'4'
p24638
sS'name'
p24639
S'padding'
p24640
sS'required'
p24641
I00
sS'group_name'
p24642
S'Advanced'
p24643
sa(dp24644
S'description'
p24645
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p24646
sS'cpp_type'
p24647
S'libMesh::Point'
p24648
sS'default'
p24649
g3
sS'name'
p24650
S'position'
p24651
sS'required'
p24652
I00
sS'group_name'
p24653
S'Oversampling'
p24654
sa(dp24655
S'description'
p24656
S'Number of uniform refinements for oversampling\n'
p24657
sS'cpp_type'
p24658
S'unsigned int'
p24659
sS'default'
p24660
S'0'
p24661
sS'name'
p24662
S'refinements'
p24663
sS'required'
p24664
I00
sS'group_name'
p24665
S'Oversampling'
p24666
sa(dp24667
S'description'
p24668
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p24669
sS'cpp_type'
p24670
S'std::vector<VariableName, std::allocator<VariableName> >'
p24671
sS'default'
p24672
g3
sS'name'
p24673
S'show'
p24674
sS'required'
p24675
I00
sS'group_name'
p24676
S'Variables'
p24677
sa(dp24678
S'description'
p24679
S'Time at which this output object begins to operate\n'
p24680
sS'cpp_type'
p24681
S'double'
p24682
sS'default'
p24683
g3
sS'name'
p24684
S'start_time'
p24685
sS'required'
p24686
I00
sS'group_name'
p24687
S'Timing'
p24688
sa(dp24689
S'description'
p24690
S'Only export results at sync times\n'
p24691
sS'cpp_type'
p24692
S'bool'
p24693
sS'default'
p24694
S'0'
p24695
sS'name'
p24696
S'sync_only'
p24697
sS'required'
p24698
I00
sS'group_name'
p24699
S'Timing'
p24700
sa(dp24701
S'description'
p24702
S'Times at which the output and solution is forced to occur\n'
p24703
sS'cpp_type'
p24704
S'std::vector<double, std::allocator<double> >'
p24705
sS'default'
p24706
g3
sS'name'
p24707
S'sync_times'
p24708
sS'required'
p24709
I00
sS'group_name'
p24710
S'Timing'
p24711
sa(dp24712
S'description'
p24713
S'Time tolerance utilized checking start and end times\n'
p24714
sS'cpp_type'
p24715
S'double'
p24716
sS'default'
p24717
S'1e-14'
p24718
sS'name'
p24719
S'time_tolerance'
p24720
sS'required'
p24721
I00
sS'group_name'
p24722
S'Timing'
p24723
sa(dp24724
S'description'
p24725
g3
sS'cpp_type'
p24726
S'std::string'
p24727
sS'default'
p24728
S'GMV'
p24729
sS'name'
p24730
S'type'
p24731
sS'required'
p24732
I00
sS'group_name'
p24733
Nsa(dp24734
S'description'
p24735
S'Enable/disable the use of the displaced mesh for outputting\n'
p24736
sS'cpp_type'
p24737
S'bool'
p24738
sS'default'
p24739
S'0'
p24740
sS'name'
p24741
S'use_displaced'
p24742
sS'required'
p24743
I00
sS'group_name'
p24744
NsasS'name'
p24745
S'/Outputs/GMV'
p24746
sa(dp24747
S'description'
p24748
g3
sS'type'
p24749
NsS'subblocks'
p24750
NsS'parameters'
p24751
(lp24752
(dp24753
S'description'
p24754
S"Append '_displaced' to the output file base\n"
p24755
sS'cpp_type'
p24756
S'bool'
p24757
sS'default'
p24758
S'0'
p24759
sS'name'
p24760
S'append_displaced'
p24761
sS'required'
p24762
I00
sS'group_name'
p24763
S'Displaced'
p24764
sa(dp24765
S'description'
p24766
S'Time at which this output object stop operating\n'
p24767
sS'cpp_type'
p24768
S'double'
p24769
sS'default'
p24770
g3
sS'name'
p24771
S'end_time'
p24772
sS'required'
p24773
I00
sS'group_name'
p24774
S'Timing'
p24775
sa(dp24776
S'name'
p24777
S'extension'
p24778
sS'cpp_type'
p24779
S'MooseEnum'
p24780
sS'default'
p24781
S'png'
p24782
sS'description'
p24783
S'GUN plot file extension\n'
p24784
sS'required'
p24785
I00
sS'options'
p24786
S'png ps gif'
p24787
sS'group_name'
p24788
Nsa(dp24789
S'description'
p24790
S'The desired solution output name without an extension\n'
p24791
sS'cpp_type'
p24792
S'std::string'
p24793
sS'default'
p24794
g3
sS'name'
p24795
S'file_base'
p24796
sS'required'
p24797
I00
sS'group_name'
p24798
Nsa(dp24799
S'description'
p24800
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p24801
sS'cpp_type'
p24802
S'std::vector<VariableName, std::allocator<VariableName> >'
p24803
sS'default'
p24804
g3
sS'name'
p24805
S'hide'
p24806
sS'required'
p24807
I00
sS'group_name'
p24808
S'Variables'
p24809
sa(dp24810
S'description'
p24811
S'The interval at which time steps are output to the solution file\n'
p24812
sS'cpp_type'
p24813
S'unsigned int'
p24814
sS'default'
p24815
S'1'
p24816
sS'name'
p24817
S'interval'
p24818
sS'required'
p24819
I00
sS'group_name'
p24820
S'Timing'
p24821
sa(dp24822
S'description'
p24823
S'Number of divisions applied to time step when outputting linear residuals\n'
p24824
sS'cpp_type'
p24825
S'double'
p24826
sS'default'
p24827
S'1000'
p24828
sS'name'
p24829
S'linear_residual_dt_divisor'
p24830
sS'required'
p24831
I00
sS'group_name'
p24832
S'PETSc'
p24833
sa(dp24834
S'description'
p24835
S'Specifies an end time to begin output on each linear residual evaluation\n'
p24836
sS'cpp_type'
p24837
S'double'
p24838
sS'default'
p24839
g3
sS'name'
p24840
S'linear_residual_end_time'
p24841
sS'required'
p24842
I00
sS'group_name'
p24843
S'PETSc'
p24844
sa(dp24845
S'description'
p24846
S'Specifies a start time to begin output on each linear residual evaluation\n'
p24847
sS'cpp_type'
p24848
S'double'
p24849
sS'default'
p24850
g3
sS'name'
p24851
S'linear_residual_start_time'
p24852
sS'required'
p24853
I00
sS'group_name'
p24854
S'PETSc'
p24855
sa(dp24856
S'description'
p24857
S'Specifies whether output occurs on each linear residual evaluation\n'
p24858
sS'cpp_type'
p24859
S'bool'
p24860
sS'default'
p24861
S'0'
p24862
sS'name'
p24863
S'linear_residuals'
p24864
sS'required'
p24865
I00
sS'group_name'
p24866
S'PETSc'
p24867
sa(dp24868
S'description'
p24869
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p24870
sS'cpp_type'
p24871
S'double'
p24872
sS'default'
p24873
S'1000'
p24874
sS'name'
p24875
S'nonlinear_residual_dt_divisor'
p24876
sS'required'
p24877
I00
sS'group_name'
p24878
S'PETSc'
p24879
sa(dp24880
S'description'
p24881
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p24882
sS'cpp_type'
p24883
S'double'
p24884
sS'default'
p24885
g3
sS'name'
p24886
S'nonlinear_residual_end_time'
p24887
sS'required'
p24888
I00
sS'group_name'
p24889
S'PETSc'
p24890
sa(dp24891
S'description'
p24892
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p24893
sS'cpp_type'
p24894
S'double'
p24895
sS'default'
p24896
g3
sS'name'
p24897
S'nonlinear_residual_start_time'
p24898
sS'required'
p24899
I00
sS'group_name'
p24900
S'PETSc'
p24901
sa(dp24902
S'description'
p24903
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p24904
sS'cpp_type'
p24905
S'bool'
p24906
sS'default'
p24907
S'0'
p24908
sS'name'
p24909
S'nonlinear_residuals'
p24910
sS'required'
p24911
I00
sS'group_name'
p24912
S'PETSc'
p24913
sa(dp24914
S'description'
p24915
S'When true all time attempted time steps are output\n'
p24916
sS'cpp_type'
p24917
S'bool'
p24918
sS'default'
p24919
S'0'
p24920
sS'name'
p24921
S'output_failed'
p24922
sS'required'
p24923
I00
sS'group_name'
p24924
Nsa(dp24925
S'description'
p24926
S'Force the final time step to be output, regardless of output interval\n'
p24927
sS'cpp_type'
p24928
S'bool'
p24929
sS'default'
p24930
S'0'
p24931
sS'name'
p24932
S'output_final'
p24933
sS'required'
p24934
I00
sS'group_name'
p24935
S'Timing'
p24936
sa(dp24937
S'description'
p24938
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p24939
sS'cpp_type'
p24940
S'std::vector<std::string, std::allocator<std::string> >'
p24941
sS'default'
p24942
g3
sS'name'
p24943
S'output_if_base_contains'
p24944
sS'required'
p24945
I00
sS'group_name'
p24946
S'Advanced'
p24947
sa(dp24948
S'description'
p24949
S'Request that the initial condition is output to the solution file\n'
p24950
sS'cpp_type'
p24951
S'bool'
p24952
sS'default'
p24953
S'0'
p24954
sS'name'
p24955
S'output_initial'
p24956
sS'required'
p24957
I00
sS'group_name'
p24958
S'Timing'
p24959
sa(dp24960
S'description'
p24961
S'Request that all intermediate steps (not initial or final) are output\n'
p24962
sS'cpp_type'
p24963
S'bool'
p24964
sS'default'
p24965
S'1'
p24966
sS'name'
p24967
S'output_intermediate'
p24968
sS'required'
p24969
I00
sS'group_name'
p24970
Nsa(dp24971
S'description'
p24972
S'Enable/disable the output of postprocessors\n'
p24973
sS'cpp_type'
p24974
S'bool'
p24975
sS'default'
p24976
S'1'
p24977
sS'name'
p24978
S'output_postprocessors'
p24979
sS'required'
p24980
I00
sS'group_name'
p24981
S'Variables'
p24982
sa(dp24983
S'description'
p24984
S'Enable/disable the output of aux scalar variables\n'
p24985
sS'cpp_type'
p24986
S'bool'
p24987
sS'default'
p24988
S'1'
p24989
sS'name'
p24990
S'output_scalar_variables'
p24991
sS'required'
p24992
I00
sS'group_name'
p24993
S'Variables'
p24994
sa(dp24995
S'description'
p24996
S'Toggles the display of the system information prior to the solve\n'
p24997
sS'cpp_type'
p24998
S'bool'
p24999
sS'default'
p25000
S'1'
p25001
sS'name'
p25002
S'output_system_information'
p25003
sS'required'
p25004
I00
sS'group_name'
p25005
Nsa(dp25006
S'description'
p25007
S"Enable/disable sequential file output (enable by default when 'use_displace = true', otherwise defaults to false\n"
p25008
sS'cpp_type'
p25009
S'bool'
p25010
sS'default'
p25011
g3
sS'name'
p25012
S'sequence'
p25013
sS'required'
p25014
I00
sS'group_name'
p25015
Nsa(dp25016
S'description'
p25017
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p25018
sS'cpp_type'
p25019
S'std::vector<VariableName, std::allocator<VariableName> >'
p25020
sS'default'
p25021
g3
sS'name'
p25022
S'show'
p25023
sS'required'
p25024
I00
sS'group_name'
p25025
S'Variables'
p25026
sa(dp25027
S'description'
p25028
S'Time at which this output object begins to operate\n'
p25029
sS'cpp_type'
p25030
S'double'
p25031
sS'default'
p25032
g3
sS'name'
p25033
S'start_time'
p25034
sS'required'
p25035
I00
sS'group_name'
p25036
S'Timing'
p25037
sa(dp25038
S'description'
p25039
S'Only export results at sync times\n'
p25040
sS'cpp_type'
p25041
S'bool'
p25042
sS'default'
p25043
S'0'
p25044
sS'name'
p25045
S'sync_only'
p25046
sS'required'
p25047
I00
sS'group_name'
p25048
S'Timing'
p25049
sa(dp25050
S'description'
p25051
S'Times at which the output and solution is forced to occur\n'
p25052
sS'cpp_type'
p25053
S'std::vector<double, std::allocator<double> >'
p25054
sS'default'
p25055
g3
sS'name'
p25056
S'sync_times'
p25057
sS'required'
p25058
I00
sS'group_name'
p25059
S'Timing'
p25060
sa(dp25061
S'description'
p25062
S'Time tolerance utilized checking start and end times\n'
p25063
sS'cpp_type'
p25064
S'double'
p25065
sS'default'
p25066
S'1e-14'
p25067
sS'name'
p25068
S'time_tolerance'
p25069
sS'required'
p25070
I00
sS'group_name'
p25071
S'Timing'
p25072
sa(dp25073
S'description'
p25074
g3
sS'cpp_type'
p25075
S'std::string'
p25076
sS'default'
p25077
S'GNUPlot'
p25078
sS'name'
p25079
S'type'
p25080
sS'required'
p25081
I00
sS'group_name'
p25082
Nsa(dp25083
S'description'
p25084
S'Enable/disable the use of the displaced mesh for outputting\n'
p25085
sS'cpp_type'
p25086
S'bool'
p25087
sS'default'
p25088
S'0'
p25089
sS'name'
p25090
S'use_displaced'
p25091
sS'required'
p25092
I00
sS'group_name'
p25093
NsasS'name'
p25094
S'/Outputs/GNUPlot'
p25095
sa(dp25096
S'description'
p25097
g3
sS'type'
p25098
NsS'subblocks'
p25099
NsS'parameters'
p25100
(lp25101
(dp25102
S'description'
p25103
S"Append '_displaced' to the output file base\n"
p25104
sS'cpp_type'
p25105
S'bool'
p25106
sS'default'
p25107
S'0'
p25108
sS'name'
p25109
S'append_displaced'
p25110
sS'required'
p25111
I00
sS'group_name'
p25112
S'Displaced'
p25113
sa(dp25114
S'description'
p25115
S"Append '_oversample' to the output file base\n"
p25116
sS'cpp_type'
p25117
S'bool'
p25118
sS'default'
p25119
S'0'
p25120
sS'name'
p25121
S'append_oversample'
p25122
sS'required'
p25123
I00
sS'group_name'
p25124
S'Oversampling'
p25125
sa(dp25126
S'description'
p25127
S'Output elemental nonlinear variables as nodal\n'
p25128
sS'cpp_type'
p25129
S'bool'
p25130
sS'default'
p25131
S'0'
p25132
sS'name'
p25133
S'elemental_as_nodal'
p25134
sS'required'
p25135
I00
sS'group_name'
p25136
S'Variables'
p25137
sa(dp25138
S'description'
p25139
S'Time at which this output object stop operating\n'
p25140
sS'cpp_type'
p25141
S'double'
p25142
sS'default'
p25143
g3
sS'name'
p25144
S'end_time'
p25145
sS'required'
p25146
I00
sS'group_name'
p25147
S'Timing'
p25148
sa(dp25149
S'description'
p25150
S'The name of the mesh file to read, for oversampling\n'
p25151
sS'cpp_type'
p25152
S'MeshFileName'
p25153
sS'default'
p25154
g3
sS'name'
p25155
S'file'
p25156
sS'required'
p25157
I00
sS'group_name'
p25158
S'Oversampling'
p25159
sa(dp25160
S'description'
p25161
S'The desired solution output name without an extension\n'
p25162
sS'cpp_type'
p25163
S'std::string'
p25164
sS'default'
p25165
g3
sS'name'
p25166
S'file_base'
p25167
sS'required'
p25168
I00
sS'group_name'
p25169
Nsa(dp25170
S'description'
p25171
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p25172
sS'cpp_type'
p25173
S'std::vector<VariableName, std::allocator<VariableName> >'
p25174
sS'default'
p25175
g3
sS'name'
p25176
S'hide'
p25177
sS'required'
p25178
I00
sS'group_name'
p25179
S'Variables'
p25180
sa(dp25181
S'description'
p25182
S'The interval at which time steps are output to the solution file\n'
p25183
sS'cpp_type'
p25184
S'unsigned int'
p25185
sS'default'
p25186
S'1'
p25187
sS'name'
p25188
S'interval'
p25189
sS'required'
p25190
I00
sS'group_name'
p25191
S'Timing'
p25192
sa(dp25193
S'description'
p25194
S'Number of divisions applied to time step when outputting linear residuals\n'
p25195
sS'cpp_type'
p25196
S'double'
p25197
sS'default'
p25198
S'1000'
p25199
sS'name'
p25200
S'linear_residual_dt_divisor'
p25201
sS'required'
p25202
I00
sS'group_name'
p25203
S'PETSc'
p25204
sa(dp25205
S'description'
p25206
S'Specifies an end time to begin output on each linear residual evaluation\n'
p25207
sS'cpp_type'
p25208
S'double'
p25209
sS'default'
p25210
g3
sS'name'
p25211
S'linear_residual_end_time'
p25212
sS'required'
p25213
I00
sS'group_name'
p25214
S'PETSc'
p25215
sa(dp25216
S'description'
p25217
S'Specifies a start time to begin output on each linear residual evaluation\n'
p25218
sS'cpp_type'
p25219
S'double'
p25220
sS'default'
p25221
g3
sS'name'
p25222
S'linear_residual_start_time'
p25223
sS'required'
p25224
I00
sS'group_name'
p25225
S'PETSc'
p25226
sa(dp25227
S'description'
p25228
S'Specifies whether output occurs on each linear residual evaluation\n'
p25229
sS'cpp_type'
p25230
S'bool'
p25231
sS'default'
p25232
S'0'
p25233
sS'name'
p25234
S'linear_residuals'
p25235
sS'required'
p25236
I00
sS'group_name'
p25237
S'PETSc'
p25238
sa(dp25239
S'description'
p25240
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p25241
sS'cpp_type'
p25242
S'double'
p25243
sS'default'
p25244
S'1000'
p25245
sS'name'
p25246
S'nonlinear_residual_dt_divisor'
p25247
sS'required'
p25248
I00
sS'group_name'
p25249
S'PETSc'
p25250
sa(dp25251
S'description'
p25252
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p25253
sS'cpp_type'
p25254
S'double'
p25255
sS'default'
p25256
g3
sS'name'
p25257
S'nonlinear_residual_end_time'
p25258
sS'required'
p25259
I00
sS'group_name'
p25260
S'PETSc'
p25261
sa(dp25262
S'description'
p25263
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p25264
sS'cpp_type'
p25265
S'double'
p25266
sS'default'
p25267
g3
sS'name'
p25268
S'nonlinear_residual_start_time'
p25269
sS'required'
p25270
I00
sS'group_name'
p25271
S'PETSc'
p25272
sa(dp25273
S'description'
p25274
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p25275
sS'cpp_type'
p25276
S'bool'
p25277
sS'default'
p25278
S'0'
p25279
sS'name'
p25280
S'nonlinear_residuals'
p25281
sS'required'
p25282
I00
sS'group_name'
p25283
S'PETSc'
p25284
sa(dp25285
S'description'
p25286
S'Enable/disable the output of elemental nonlinear variables\n'
p25287
sS'cpp_type'
p25288
S'bool'
p25289
sS'default'
p25290
S'1'
p25291
sS'name'
p25292
S'output_elemental_variables'
p25293
sS'required'
p25294
I00
sS'group_name'
p25295
S'Variables'
p25296
sa(dp25297
S'description'
p25298
S'When true all time attempted time steps are output\n'
p25299
sS'cpp_type'
p25300
S'bool'
p25301
sS'default'
p25302
S'0'
p25303
sS'name'
p25304
S'output_failed'
p25305
sS'required'
p25306
I00
sS'group_name'
p25307
Nsa(dp25308
S'description'
p25309
S'Force the final time step to be output, regardless of output interval\n'
p25310
sS'cpp_type'
p25311
S'bool'
p25312
sS'default'
p25313
S'0'
p25314
sS'name'
p25315
S'output_final'
p25316
sS'required'
p25317
I00
sS'group_name'
p25318
S'Timing'
p25319
sa(dp25320
S'description'
p25321
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p25322
sS'cpp_type'
p25323
S'std::vector<std::string, std::allocator<std::string> >'
p25324
sS'default'
p25325
g3
sS'name'
p25326
S'output_if_base_contains'
p25327
sS'required'
p25328
I00
sS'group_name'
p25329
S'Advanced'
p25330
sa(dp25331
S'description'
p25332
S'Request that the initial condition is output to the solution file\n'
p25333
sS'cpp_type'
p25334
S'bool'
p25335
sS'default'
p25336
S'0'
p25337
sS'name'
p25338
S'output_initial'
p25339
sS'required'
p25340
I00
sS'group_name'
p25341
S'Timing'
p25342
sa(dp25343
S'description'
p25344
S'Output the input file\n'
p25345
sS'cpp_type'
p25346
S'bool'
p25347
sS'default'
p25348
S'0'
p25349
sS'name'
p25350
S'output_input'
p25351
sS'required'
p25352
I00
sS'group_name'
p25353
Nsa(dp25354
S'description'
p25355
S'Request that all intermediate steps (not initial or final) are output\n'
p25356
sS'cpp_type'
p25357
S'bool'
p25358
sS'default'
p25359
S'1'
p25360
sS'name'
p25361
S'output_intermediate'
p25362
sS'required'
p25363
I00
sS'group_name'
p25364
Nsa(dp25365
S'description'
p25366
S'Enable/disable the output of nodal nonlinear variables\n'
p25367
sS'cpp_type'
p25368
S'bool'
p25369
sS'default'
p25370
S'1'
p25371
sS'name'
p25372
S'output_nodal_variables'
p25373
sS'required'
p25374
I00
sS'group_name'
p25375
S'Variables'
p25376
sa(dp25377
S'description'
p25378
S'Enable/disable the output of postprocessors\n'
p25379
sS'cpp_type'
p25380
S'bool'
p25381
sS'default'
p25382
S'1'
p25383
sS'name'
p25384
S'output_postprocessors'
p25385
sS'required'
p25386
I00
sS'group_name'
p25387
S'Variables'
p25388
sa(dp25389
S'description'
p25390
S'Enable/disable the output of aux scalar variables\n'
p25391
sS'cpp_type'
p25392
S'bool'
p25393
sS'default'
p25394
S'1'
p25395
sS'name'
p25396
S'output_scalar_variables'
p25397
sS'required'
p25398
I00
sS'group_name'
p25399
S'Variables'
p25400
sa(dp25401
S'description'
p25402
S'Toggles the display of the system information prior to the solve\n'
p25403
sS'cpp_type'
p25404
S'bool'
p25405
sS'default'
p25406
S'1'
p25407
sS'name'
p25408
S'output_system_information'
p25409
sS'required'
p25410
I00
sS'group_name'
p25411
Nsa(dp25412
S'description'
p25413
S'Set to true to enable oversampling\n'
p25414
sS'cpp_type'
p25415
S'bool'
p25416
sS'default'
p25417
S'0'
p25418
sS'name'
p25419
S'oversample'
p25420
sS'required'
p25421
I00
sS'group_name'
p25422
S'Oversampling'
p25423
sa(dp25424
S'description'
p25425
S'The number of for extension suffix (e.g., out.e-s002)\n'
p25426
sS'cpp_type'
p25427
S'unsigned int'
p25428
sS'default'
p25429
S'4'
p25430
sS'name'
p25431
S'padding'
p25432
sS'required'
p25433
I00
sS'group_name'
p25434
S'Advanced'
p25435
sa(dp25436
S'description'
p25437
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p25438
sS'cpp_type'
p25439
S'libMesh::Point'
p25440
sS'default'
p25441
g3
sS'name'
p25442
S'position'
p25443
sS'required'
p25444
I00
sS'group_name'
p25445
S'Oversampling'
p25446
sa(dp25447
S'description'
p25448
S'Number of uniform refinements for oversampling\n'
p25449
sS'cpp_type'
p25450
S'unsigned int'
p25451
sS'default'
p25452
S'0'
p25453
sS'name'
p25454
S'refinements'
p25455
sS'required'
p25456
I00
sS'group_name'
p25457
S'Oversampling'
p25458
sa(dp25459
S'description'
p25460
S'Output scalar variables as nodal\n'
p25461
sS'cpp_type'
p25462
S'bool'
p25463
sS'default'
p25464
S'0'
p25465
sS'name'
p25466
S'scalar_as_nodal'
p25467
sS'required'
p25468
I00
sS'group_name'
p25469
S'Variables'
p25470
sa(dp25471
S'description'
p25472
S"Enable/disable sequential file output (enable by default when 'use_displace = true', otherwise defaults to false\n"
p25473
sS'cpp_type'
p25474
S'bool'
p25475
sS'default'
p25476
g3
sS'name'
p25477
S'sequence'
p25478
sS'required'
p25479
I00
sS'group_name'
p25480
Nsa(dp25481
S'description'
p25482
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p25483
sS'cpp_type'
p25484
S'std::vector<VariableName, std::allocator<VariableName> >'
p25485
sS'default'
p25486
g3
sS'name'
p25487
S'show'
p25488
sS'required'
p25489
I00
sS'group_name'
p25490
S'Variables'
p25491
sa(dp25492
S'description'
p25493
S'Time at which this output object begins to operate\n'
p25494
sS'cpp_type'
p25495
S'double'
p25496
sS'default'
p25497
g3
sS'name'
p25498
S'start_time'
p25499
sS'required'
p25500
I00
sS'group_name'
p25501
S'Timing'
p25502
sa(dp25503
S'description'
p25504
S'Only export results at sync times\n'
p25505
sS'cpp_type'
p25506
S'bool'
p25507
sS'default'
p25508
S'0'
p25509
sS'name'
p25510
S'sync_only'
p25511
sS'required'
p25512
I00
sS'group_name'
p25513
S'Timing'
p25514
sa(dp25515
S'description'
p25516
S'Times at which the output and solution is forced to occur\n'
p25517
sS'cpp_type'
p25518
S'std::vector<double, std::allocator<double> >'
p25519
sS'default'
p25520
g3
sS'name'
p25521
S'sync_times'
p25522
sS'required'
p25523
I00
sS'group_name'
p25524
S'Timing'
p25525
sa(dp25526
S'description'
p25527
S'Time tolerance utilized checking start and end times\n'
p25528
sS'cpp_type'
p25529
S'double'
p25530
sS'default'
p25531
S'1e-14'
p25532
sS'name'
p25533
S'time_tolerance'
p25534
sS'required'
p25535
I00
sS'group_name'
p25536
S'Timing'
p25537
sa(dp25538
S'description'
p25539
g3
sS'cpp_type'
p25540
S'std::string'
p25541
sS'default'
p25542
S'Nemesis'
p25543
sS'name'
p25544
S'type'
p25545
sS'required'
p25546
I00
sS'group_name'
p25547
Nsa(dp25548
S'description'
p25549
S'Enable/disable the use of the displaced mesh for outputting\n'
p25550
sS'cpp_type'
p25551
S'bool'
p25552
sS'default'
p25553
S'0'
p25554
sS'name'
p25555
S'use_displaced'
p25556
sS'required'
p25557
I00
sS'group_name'
p25558
NsasS'name'
p25559
S'/Outputs/Nemesis'
p25560
sa(dp25561
S'description'
p25562
g3
sS'type'
p25563
NsS'subblocks'
p25564
NsS'parameters'
p25565
(lp25566
(dp25567
S'description'
p25568
S"Append '_displaced' to the output file base\n"
p25569
sS'cpp_type'
p25570
S'bool'
p25571
sS'default'
p25572
S'0'
p25573
sS'name'
p25574
S'append_displaced'
p25575
sS'required'
p25576
I00
sS'group_name'
p25577
S'Displaced'
p25578
sa(dp25579
S'description'
p25580
S'Output elemental nonlinear variables as nodal\n'
p25581
sS'cpp_type'
p25582
S'bool'
p25583
sS'default'
p25584
S'0'
p25585
sS'name'
p25586
S'elemental_as_nodal'
p25587
sS'required'
p25588
I00
sS'group_name'
p25589
S'Variables'
p25590
sa(dp25591
S'description'
p25592
S'Time at which this output object stop operating\n'
p25593
sS'cpp_type'
p25594
S'double'
p25595
sS'default'
p25596
g3
sS'name'
p25597
S'end_time'
p25598
sS'required'
p25599
I00
sS'group_name'
p25600
S'Timing'
p25601
sa(dp25602
S'description'
p25603
S'The desired solution output name without an extension\n'
p25604
sS'cpp_type'
p25605
S'std::string'
p25606
sS'default'
p25607
g3
sS'name'
p25608
S'file_base'
p25609
sS'required'
p25610
I00
sS'group_name'
p25611
Nsa(dp25612
S'description'
p25613
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p25614
sS'cpp_type'
p25615
S'std::vector<VariableName, std::allocator<VariableName> >'
p25616
sS'default'
p25617
g3
sS'name'
p25618
S'hide'
p25619
sS'required'
p25620
I00
sS'group_name'
p25621
S'Variables'
p25622
sa(dp25623
S'description'
p25624
S'The interval at which time steps are output to the solution file\n'
p25625
sS'cpp_type'
p25626
S'unsigned int'
p25627
sS'default'
p25628
S'1'
p25629
sS'name'
p25630
S'interval'
p25631
sS'required'
p25632
I00
sS'group_name'
p25633
S'Timing'
p25634
sa(dp25635
S'description'
p25636
S'When true all time attempted time steps are output\n'
p25637
sS'cpp_type'
p25638
S'bool'
p25639
sS'default'
p25640
S'0'
p25641
sS'name'
p25642
S'output_failed'
p25643
sS'required'
p25644
I00
sS'group_name'
p25645
Nsa(dp25646
S'description'
p25647
S'Force the final time step to be output, regardless of output interval\n'
p25648
sS'cpp_type'
p25649
S'bool'
p25650
sS'default'
p25651
S'0'
p25652
sS'name'
p25653
S'output_final'
p25654
sS'required'
p25655
I00
sS'group_name'
p25656
S'Timing'
p25657
sa(dp25658
S'description'
p25659
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p25660
sS'cpp_type'
p25661
S'std::vector<std::string, std::allocator<std::string> >'
p25662
sS'default'
p25663
g3
sS'name'
p25664
S'output_if_base_contains'
p25665
sS'required'
p25666
I00
sS'group_name'
p25667
S'Advanced'
p25668
sa(dp25669
S'description'
p25670
S'Request that the initial condition is output to the solution file\n'
p25671
sS'cpp_type'
p25672
S'bool'
p25673
sS'default'
p25674
S'0'
p25675
sS'name'
p25676
S'output_initial'
p25677
sS'required'
p25678
I00
sS'group_name'
p25679
S'Timing'
p25680
sa(dp25681
S'description'
p25682
S'Output the input file\n'
p25683
sS'cpp_type'
p25684
S'bool'
p25685
sS'default'
p25686
S'0'
p25687
sS'name'
p25688
S'output_input'
p25689
sS'required'
p25690
I00
sS'group_name'
p25691
Nsa(dp25692
S'description'
p25693
S'Request that all intermediate steps (not initial or final) are output\n'
p25694
sS'cpp_type'
p25695
S'bool'
p25696
sS'default'
p25697
S'1'
p25698
sS'name'
p25699
S'output_intermediate'
p25700
sS'required'
p25701
I00
sS'group_name'
p25702
Nsa(dp25703
S'description'
p25704
S'Toggles the display of the system information prior to the solve\n'
p25705
sS'cpp_type'
p25706
S'bool'
p25707
sS'default'
p25708
S'1'
p25709
sS'name'
p25710
S'output_system_information'
p25711
sS'required'
p25712
I00
sS'group_name'
p25713
Nsa(dp25714
S'description'
p25715
S'Output scalar variables as nodal\n'
p25716
sS'cpp_type'
p25717
S'bool'
p25718
sS'default'
p25719
S'0'
p25720
sS'name'
p25721
S'scalar_as_nodal'
p25722
sS'required'
p25723
I00
sS'group_name'
p25724
S'Variables'
p25725
sa(dp25726
S'description'
p25727
S"Enable/disable sequential file output (enable by default when 'use_displace = true', otherwise defaults to false\n"
p25728
sS'cpp_type'
p25729
S'bool'
p25730
sS'default'
p25731
g3
sS'name'
p25732
S'sequence'
p25733
sS'required'
p25734
I00
sS'group_name'
p25735
Nsa(dp25736
S'description'
p25737
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p25738
sS'cpp_type'
p25739
S'std::vector<VariableName, std::allocator<VariableName> >'
p25740
sS'default'
p25741
g3
sS'name'
p25742
S'show'
p25743
sS'required'
p25744
I00
sS'group_name'
p25745
S'Variables'
p25746
sa(dp25747
S'description'
p25748
S'Time at which this output object begins to operate\n'
p25749
sS'cpp_type'
p25750
S'double'
p25751
sS'default'
p25752
g3
sS'name'
p25753
S'start_time'
p25754
sS'required'
p25755
I00
sS'group_name'
p25756
S'Timing'
p25757
sa(dp25758
S'description'
p25759
S'Only export results at sync times\n'
p25760
sS'cpp_type'
p25761
S'bool'
p25762
sS'default'
p25763
S'0'
p25764
sS'name'
p25765
S'sync_only'
p25766
sS'required'
p25767
I00
sS'group_name'
p25768
S'Timing'
p25769
sa(dp25770
S'description'
p25771
S'Times at which the output and solution is forced to occur\n'
p25772
sS'cpp_type'
p25773
S'std::vector<double, std::allocator<double> >'
p25774
sS'default'
p25775
g3
sS'name'
p25776
S'sync_times'
p25777
sS'required'
p25778
I00
sS'group_name'
p25779
S'Timing'
p25780
sa(dp25781
S'description'
p25782
S'Time tolerance utilized checking start and end times\n'
p25783
sS'cpp_type'
p25784
S'double'
p25785
sS'default'
p25786
S'1e-14'
p25787
sS'name'
p25788
S'time_tolerance'
p25789
sS'required'
p25790
I00
sS'group_name'
p25791
S'Timing'
p25792
sa(dp25793
S'description'
p25794
g3
sS'cpp_type'
p25795
S'std::string'
p25796
sS'default'
p25797
S'SolutionHistory'
p25798
sS'name'
p25799
S'type'
p25800
sS'required'
p25801
I00
sS'group_name'
p25802
Nsa(dp25803
S'description'
p25804
S'Enable/disable the use of the displaced mesh for outputting\n'
p25805
sS'cpp_type'
p25806
S'bool'
p25807
sS'default'
p25808
S'0'
p25809
sS'name'
p25810
S'use_displaced'
p25811
sS'required'
p25812
I00
sS'group_name'
p25813
NsasS'name'
p25814
S'/Outputs/SolutionHistory'
p25815
sa(dp25816
S'description'
p25817
g3
sS'type'
p25818
NsS'subblocks'
p25819
NsS'parameters'
p25820
(lp25821
(dp25822
S'description'
p25823
S"Append '_displaced' to the output file base\n"
p25824
sS'cpp_type'
p25825
S'bool'
p25826
sS'default'
p25827
S'0'
p25828
sS'name'
p25829
S'append_displaced'
p25830
sS'required'
p25831
I00
sS'group_name'
p25832
S'Displaced'
p25833
sa(dp25834
S'description'
p25835
S"Append '_oversample' to the output file base\n"
p25836
sS'cpp_type'
p25837
S'bool'
p25838
sS'default'
p25839
S'0'
p25840
sS'name'
p25841
S'append_oversample'
p25842
sS'required'
p25843
I00
sS'group_name'
p25844
S'Oversampling'
p25845
sa(dp25846
S'description'
p25847
S'If true, append to an existing ASCII file rather than creating a new file each time\n'
p25848
sS'cpp_type'
p25849
S'bool'
p25850
sS'default'
p25851
S'0'
p25852
sS'name'
p25853
S'ascii_append'
p25854
sS'required'
p25855
I00
sS'group_name'
p25856
Nsa(dp25857
S'description'
p25858
S'Set Tecplot files to output in binary format\n'
p25859
sS'cpp_type'
p25860
S'bool'
p25861
sS'default'
p25862
S'0'
p25863
sS'name'
p25864
S'binary'
p25865
sS'required'
p25866
I00
sS'group_name'
p25867
S'Advanced'
p25868
sa(dp25869
S'description'
p25870
S'Output elemental nonlinear variables as nodal\n'
p25871
sS'cpp_type'
p25872
S'bool'
p25873
sS'default'
p25874
S'0'
p25875
sS'name'
p25876
S'elemental_as_nodal'
p25877
sS'required'
p25878
I00
sS'group_name'
p25879
S'Variables'
p25880
sa(dp25881
S'description'
p25882
S'Time at which this output object stop operating\n'
p25883
sS'cpp_type'
p25884
S'double'
p25885
sS'default'
p25886
g3
sS'name'
p25887
S'end_time'
p25888
sS'required'
p25889
I00
sS'group_name'
p25890
S'Timing'
p25891
sa(dp25892
S'description'
p25893
S'The name of the mesh file to read, for oversampling\n'
p25894
sS'cpp_type'
p25895
S'MeshFileName'
p25896
sS'default'
p25897
g3
sS'name'
p25898
S'file'
p25899
sS'required'
p25900
I00
sS'group_name'
p25901
S'Oversampling'
p25902
sa(dp25903
S'description'
p25904
S'The desired solution output name without an extension\n'
p25905
sS'cpp_type'
p25906
S'std::string'
p25907
sS'default'
p25908
g3
sS'name'
p25909
S'file_base'
p25910
sS'required'
p25911
I00
sS'group_name'
p25912
Nsa(dp25913
S'description'
p25914
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p25915
sS'cpp_type'
p25916
S'std::vector<VariableName, std::allocator<VariableName> >'
p25917
sS'default'
p25918
g3
sS'name'
p25919
S'hide'
p25920
sS'required'
p25921
I00
sS'group_name'
p25922
S'Variables'
p25923
sa(dp25924
S'description'
p25925
S'The interval at which time steps are output to the solution file\n'
p25926
sS'cpp_type'
p25927
S'unsigned int'
p25928
sS'default'
p25929
S'1'
p25930
sS'name'
p25931
S'interval'
p25932
sS'required'
p25933
I00
sS'group_name'
p25934
S'Timing'
p25935
sa(dp25936
S'description'
p25937
S'Number of divisions applied to time step when outputting linear residuals\n'
p25938
sS'cpp_type'
p25939
S'double'
p25940
sS'default'
p25941
S'1000'
p25942
sS'name'
p25943
S'linear_residual_dt_divisor'
p25944
sS'required'
p25945
I00
sS'group_name'
p25946
S'PETSc'
p25947
sa(dp25948
S'description'
p25949
S'Specifies an end time to begin output on each linear residual evaluation\n'
p25950
sS'cpp_type'
p25951
S'double'
p25952
sS'default'
p25953
g3
sS'name'
p25954
S'linear_residual_end_time'
p25955
sS'required'
p25956
I00
sS'group_name'
p25957
S'PETSc'
p25958
sa(dp25959
S'description'
p25960
S'Specifies a start time to begin output on each linear residual evaluation\n'
p25961
sS'cpp_type'
p25962
S'double'
p25963
sS'default'
p25964
g3
sS'name'
p25965
S'linear_residual_start_time'
p25966
sS'required'
p25967
I00
sS'group_name'
p25968
S'PETSc'
p25969
sa(dp25970
S'description'
p25971
S'Specifies whether output occurs on each linear residual evaluation\n'
p25972
sS'cpp_type'
p25973
S'bool'
p25974
sS'default'
p25975
S'0'
p25976
sS'name'
p25977
S'linear_residuals'
p25978
sS'required'
p25979
I00
sS'group_name'
p25980
S'PETSc'
p25981
sa(dp25982
S'description'
p25983
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p25984
sS'cpp_type'
p25985
S'double'
p25986
sS'default'
p25987
S'1000'
p25988
sS'name'
p25989
S'nonlinear_residual_dt_divisor'
p25990
sS'required'
p25991
I00
sS'group_name'
p25992
S'PETSc'
p25993
sa(dp25994
S'description'
p25995
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p25996
sS'cpp_type'
p25997
S'double'
p25998
sS'default'
p25999
g3
sS'name'
p26000
S'nonlinear_residual_end_time'
p26001
sS'required'
p26002
I00
sS'group_name'
p26003
S'PETSc'
p26004
sa(dp26005
S'description'
p26006
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p26007
sS'cpp_type'
p26008
S'double'
p26009
sS'default'
p26010
g3
sS'name'
p26011
S'nonlinear_residual_start_time'
p26012
sS'required'
p26013
I00
sS'group_name'
p26014
S'PETSc'
p26015
sa(dp26016
S'description'
p26017
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p26018
sS'cpp_type'
p26019
S'bool'
p26020
sS'default'
p26021
S'0'
p26022
sS'name'
p26023
S'nonlinear_residuals'
p26024
sS'required'
p26025
I00
sS'group_name'
p26026
S'PETSc'
p26027
sa(dp26028
S'description'
p26029
S'When true all time attempted time steps are output\n'
p26030
sS'cpp_type'
p26031
S'bool'
p26032
sS'default'
p26033
S'0'
p26034
sS'name'
p26035
S'output_failed'
p26036
sS'required'
p26037
I00
sS'group_name'
p26038
Nsa(dp26039
S'description'
p26040
S'Force the final time step to be output, regardless of output interval\n'
p26041
sS'cpp_type'
p26042
S'bool'
p26043
sS'default'
p26044
S'0'
p26045
sS'name'
p26046
S'output_final'
p26047
sS'required'
p26048
I00
sS'group_name'
p26049
S'Timing'
p26050
sa(dp26051
S'description'
p26052
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p26053
sS'cpp_type'
p26054
S'std::vector<std::string, std::allocator<std::string> >'
p26055
sS'default'
p26056
g3
sS'name'
p26057
S'output_if_base_contains'
p26058
sS'required'
p26059
I00
sS'group_name'
p26060
S'Advanced'
p26061
sa(dp26062
S'description'
p26063
S'Request that the initial condition is output to the solution file\n'
p26064
sS'cpp_type'
p26065
S'bool'
p26066
sS'default'
p26067
S'0'
p26068
sS'name'
p26069
S'output_initial'
p26070
sS'required'
p26071
I00
sS'group_name'
p26072
S'Timing'
p26073
sa(dp26074
S'description'
p26075
S'Output the input file\n'
p26076
sS'cpp_type'
p26077
S'bool'
p26078
sS'default'
p26079
S'0'
p26080
sS'name'
p26081
S'output_input'
p26082
sS'required'
p26083
I00
sS'group_name'
p26084
Nsa(dp26085
S'description'
p26086
S'Request that all intermediate steps (not initial or final) are output\n'
p26087
sS'cpp_type'
p26088
S'bool'
p26089
sS'default'
p26090
S'1'
p26091
sS'name'
p26092
S'output_intermediate'
p26093
sS'required'
p26094
I00
sS'group_name'
p26095
Nsa(dp26096
S'description'
p26097
S'Toggles the display of the system information prior to the solve\n'
p26098
sS'cpp_type'
p26099
S'bool'
p26100
sS'default'
p26101
S'1'
p26102
sS'name'
p26103
S'output_system_information'
p26104
sS'required'
p26105
I00
sS'group_name'
p26106
Nsa(dp26107
S'description'
p26108
S'Set to true to enable oversampling\n'
p26109
sS'cpp_type'
p26110
S'bool'
p26111
sS'default'
p26112
S'0'
p26113
sS'name'
p26114
S'oversample'
p26115
sS'required'
p26116
I00
sS'group_name'
p26117
S'Oversampling'
p26118
sa(dp26119
S'description'
p26120
S'The number of for extension suffix (e.g., out.e-s002)\n'
p26121
sS'cpp_type'
p26122
S'unsigned int'
p26123
sS'default'
p26124
S'4'
p26125
sS'name'
p26126
S'padding'
p26127
sS'required'
p26128
I00
sS'group_name'
p26129
S'Advanced'
p26130
sa(dp26131
S'description'
p26132
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p26133
sS'cpp_type'
p26134
S'libMesh::Point'
p26135
sS'default'
p26136
g3
sS'name'
p26137
S'position'
p26138
sS'required'
p26139
I00
sS'group_name'
p26140
S'Oversampling'
p26141
sa(dp26142
S'description'
p26143
S'Number of uniform refinements for oversampling\n'
p26144
sS'cpp_type'
p26145
S'unsigned int'
p26146
sS'default'
p26147
S'0'
p26148
sS'name'
p26149
S'refinements'
p26150
sS'required'
p26151
I00
sS'group_name'
p26152
S'Oversampling'
p26153
sa(dp26154
S'description'
p26155
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p26156
sS'cpp_type'
p26157
S'std::vector<VariableName, std::allocator<VariableName> >'
p26158
sS'default'
p26159
g3
sS'name'
p26160
S'show'
p26161
sS'required'
p26162
I00
sS'group_name'
p26163
S'Variables'
p26164
sa(dp26165
S'description'
p26166
S'Time at which this output object begins to operate\n'
p26167
sS'cpp_type'
p26168
S'double'
p26169
sS'default'
p26170
g3
sS'name'
p26171
S'start_time'
p26172
sS'required'
p26173
I00
sS'group_name'
p26174
S'Timing'
p26175
sa(dp26176
S'description'
p26177
S'Only export results at sync times\n'
p26178
sS'cpp_type'
p26179
S'bool'
p26180
sS'default'
p26181
S'0'
p26182
sS'name'
p26183
S'sync_only'
p26184
sS'required'
p26185
I00
sS'group_name'
p26186
S'Timing'
p26187
sa(dp26188
S'description'
p26189
S'Times at which the output and solution is forced to occur\n'
p26190
sS'cpp_type'
p26191
S'std::vector<double, std::allocator<double> >'
p26192
sS'default'
p26193
g3
sS'name'
p26194
S'sync_times'
p26195
sS'required'
p26196
I00
sS'group_name'
p26197
S'Timing'
p26198
sa(dp26199
S'description'
p26200
S'Time tolerance utilized checking start and end times\n'
p26201
sS'cpp_type'
p26202
S'double'
p26203
sS'default'
p26204
S'1e-14'
p26205
sS'name'
p26206
S'time_tolerance'
p26207
sS'required'
p26208
I00
sS'group_name'
p26209
S'Timing'
p26210
sa(dp26211
S'description'
p26212
g3
sS'cpp_type'
p26213
S'std::string'
p26214
sS'default'
p26215
S'Tecplot'
p26216
sS'name'
p26217
S'type'
p26218
sS'required'
p26219
I00
sS'group_name'
p26220
Nsa(dp26221
S'description'
p26222
S'Enable/disable the use of the displaced mesh for outputting\n'
p26223
sS'cpp_type'
p26224
S'bool'
p26225
sS'default'
p26226
S'0'
p26227
sS'name'
p26228
S'use_displaced'
p26229
sS'required'
p26230
I00
sS'group_name'
p26231
NsasS'name'
p26232
S'/Outputs/Tecplot'
p26233
sa(dp26234
S'description'
p26235
g3
sS'type'
p26236
NsS'subblocks'
p26237
NsS'parameters'
p26238
(lp26239
(dp26240
S'description'
p26241
S"Append '_displaced' to the output file base\n"
p26242
sS'cpp_type'
p26243
S'bool'
p26244
sS'default'
p26245
S'0'
p26246
sS'name'
p26247
S'append_displaced'
p26248
sS'required'
p26249
I00
sS'group_name'
p26250
S'Displaced'
p26251
sa(dp26252
S'description'
p26253
S"Append '_oversample' to the output file base\n"
p26254
sS'cpp_type'
p26255
S'bool'
p26256
sS'default'
p26257
S'0'
p26258
sS'name'
p26259
S'append_oversample'
p26260
sS'required'
p26261
I00
sS'group_name'
p26262
S'Oversampling'
p26263
sa(dp26264
S'description'
p26265
S'Output elemental nonlinear variables as nodal\n'
p26266
sS'cpp_type'
p26267
S'bool'
p26268
sS'default'
p26269
S'0'
p26270
sS'name'
p26271
S'elemental_as_nodal'
p26272
sS'required'
p26273
I00
sS'group_name'
p26274
S'Variables'
p26275
sa(dp26276
S'description'
p26277
S'Time at which this output object stop operating\n'
p26278
sS'cpp_type'
p26279
S'double'
p26280
sS'default'
p26281
g3
sS'name'
p26282
S'end_time'
p26283
sS'required'
p26284
I00
sS'group_name'
p26285
S'Timing'
p26286
sa(dp26287
S'description'
p26288
S'The name of the mesh file to read, for oversampling\n'
p26289
sS'cpp_type'
p26290
S'MeshFileName'
p26291
sS'default'
p26292
g3
sS'name'
p26293
S'file'
p26294
sS'required'
p26295
I00
sS'group_name'
p26296
S'Oversampling'
p26297
sa(dp26298
S'description'
p26299
S'The desired solution output name without an extension\n'
p26300
sS'cpp_type'
p26301
S'std::string'
p26302
sS'default'
p26303
g3
sS'name'
p26304
S'file_base'
p26305
sS'required'
p26306
I00
sS'group_name'
p26307
Nsa(dp26308
S'description'
p26309
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p26310
sS'cpp_type'
p26311
S'std::vector<VariableName, std::allocator<VariableName> >'
p26312
sS'default'
p26313
g3
sS'name'
p26314
S'hide'
p26315
sS'required'
p26316
I00
sS'group_name'
p26317
S'Variables'
p26318
sa(dp26319
S'description'
p26320
S'The interval at which time steps are output to the solution file\n'
p26321
sS'cpp_type'
p26322
S'unsigned int'
p26323
sS'default'
p26324
S'1'
p26325
sS'name'
p26326
S'interval'
p26327
sS'required'
p26328
I00
sS'group_name'
p26329
S'Timing'
p26330
sa(dp26331
S'description'
p26332
S'Number of divisions applied to time step when outputting linear residuals\n'
p26333
sS'cpp_type'
p26334
S'double'
p26335
sS'default'
p26336
S'1000'
p26337
sS'name'
p26338
S'linear_residual_dt_divisor'
p26339
sS'required'
p26340
I00
sS'group_name'
p26341
S'PETSc'
p26342
sa(dp26343
S'description'
p26344
S'Specifies an end time to begin output on each linear residual evaluation\n'
p26345
sS'cpp_type'
p26346
S'double'
p26347
sS'default'
p26348
g3
sS'name'
p26349
S'linear_residual_end_time'
p26350
sS'required'
p26351
I00
sS'group_name'
p26352
S'PETSc'
p26353
sa(dp26354
S'description'
p26355
S'Specifies a start time to begin output on each linear residual evaluation\n'
p26356
sS'cpp_type'
p26357
S'double'
p26358
sS'default'
p26359
g3
sS'name'
p26360
S'linear_residual_start_time'
p26361
sS'required'
p26362
I00
sS'group_name'
p26363
S'PETSc'
p26364
sa(dp26365
S'description'
p26366
S'Specifies whether output occurs on each linear residual evaluation\n'
p26367
sS'cpp_type'
p26368
S'bool'
p26369
sS'default'
p26370
S'0'
p26371
sS'name'
p26372
S'linear_residuals'
p26373
sS'required'
p26374
I00
sS'group_name'
p26375
S'PETSc'
p26376
sa(dp26377
S'description'
p26378
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p26379
sS'cpp_type'
p26380
S'double'
p26381
sS'default'
p26382
S'1000'
p26383
sS'name'
p26384
S'nonlinear_residual_dt_divisor'
p26385
sS'required'
p26386
I00
sS'group_name'
p26387
S'PETSc'
p26388
sa(dp26389
S'description'
p26390
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p26391
sS'cpp_type'
p26392
S'double'
p26393
sS'default'
p26394
g3
sS'name'
p26395
S'nonlinear_residual_end_time'
p26396
sS'required'
p26397
I00
sS'group_name'
p26398
S'PETSc'
p26399
sa(dp26400
S'description'
p26401
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p26402
sS'cpp_type'
p26403
S'double'
p26404
sS'default'
p26405
g3
sS'name'
p26406
S'nonlinear_residual_start_time'
p26407
sS'required'
p26408
I00
sS'group_name'
p26409
S'PETSc'
p26410
sa(dp26411
S'description'
p26412
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p26413
sS'cpp_type'
p26414
S'bool'
p26415
sS'default'
p26416
S'0'
p26417
sS'name'
p26418
S'nonlinear_residuals'
p26419
sS'required'
p26420
I00
sS'group_name'
p26421
S'PETSc'
p26422
sa(dp26423
S'description'
p26424
S'When true all time attempted time steps are output\n'
p26425
sS'cpp_type'
p26426
S'bool'
p26427
sS'default'
p26428
S'0'
p26429
sS'name'
p26430
S'output_failed'
p26431
sS'required'
p26432
I00
sS'group_name'
p26433
Nsa(dp26434
S'description'
p26435
S'Force the final time step to be output, regardless of output interval\n'
p26436
sS'cpp_type'
p26437
S'bool'
p26438
sS'default'
p26439
S'0'
p26440
sS'name'
p26441
S'output_final'
p26442
sS'required'
p26443
I00
sS'group_name'
p26444
S'Timing'
p26445
sa(dp26446
S'description'
p26447
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p26448
sS'cpp_type'
p26449
S'std::vector<std::string, std::allocator<std::string> >'
p26450
sS'default'
p26451
g3
sS'name'
p26452
S'output_if_base_contains'
p26453
sS'required'
p26454
I00
sS'group_name'
p26455
S'Advanced'
p26456
sa(dp26457
S'description'
p26458
S'Request that the initial condition is output to the solution file\n'
p26459
sS'cpp_type'
p26460
S'bool'
p26461
sS'default'
p26462
S'0'
p26463
sS'name'
p26464
S'output_initial'
p26465
sS'required'
p26466
I00
sS'group_name'
p26467
S'Timing'
p26468
sa(dp26469
S'description'
p26470
S'Output the input file\n'
p26471
sS'cpp_type'
p26472
S'bool'
p26473
sS'default'
p26474
S'0'
p26475
sS'name'
p26476
S'output_input'
p26477
sS'required'
p26478
I00
sS'group_name'
p26479
Nsa(dp26480
S'description'
p26481
S'Request that all intermediate steps (not initial or final) are output\n'
p26482
sS'cpp_type'
p26483
S'bool'
p26484
sS'default'
p26485
S'1'
p26486
sS'name'
p26487
S'output_intermediate'
p26488
sS'required'
p26489
I00
sS'group_name'
p26490
Nsa(dp26491
S'description'
p26492
S'Toggles the display of the system information prior to the solve\n'
p26493
sS'cpp_type'
p26494
S'bool'
p26495
sS'default'
p26496
S'1'
p26497
sS'name'
p26498
S'output_system_information'
p26499
sS'required'
p26500
I00
sS'group_name'
p26501
Nsa(dp26502
S'description'
p26503
S'Set to true to enable oversampling\n'
p26504
sS'cpp_type'
p26505
S'bool'
p26506
sS'default'
p26507
S'0'
p26508
sS'name'
p26509
S'oversample'
p26510
sS'required'
p26511
I00
sS'group_name'
p26512
S'Oversampling'
p26513
sa(dp26514
S'description'
p26515
S'The number of for extension suffix (e.g., out.e-s002)\n'
p26516
sS'cpp_type'
p26517
S'unsigned int'
p26518
sS'default'
p26519
S'4'
p26520
sS'name'
p26521
S'padding'
p26522
sS'required'
p26523
I00
sS'group_name'
p26524
S'Advanced'
p26525
sa(dp26526
S'description'
p26527
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p26528
sS'cpp_type'
p26529
S'libMesh::Point'
p26530
sS'default'
p26531
g3
sS'name'
p26532
S'position'
p26533
sS'required'
p26534
I00
sS'group_name'
p26535
S'Oversampling'
p26536
sa(dp26537
S'description'
p26538
S'Number of uniform refinements for oversampling\n'
p26539
sS'cpp_type'
p26540
S'unsigned int'
p26541
sS'default'
p26542
S'0'
p26543
sS'name'
p26544
S'refinements'
p26545
sS'required'
p26546
I00
sS'group_name'
p26547
S'Oversampling'
p26548
sa(dp26549
S'description'
p26550
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p26551
sS'cpp_type'
p26552
S'std::vector<VariableName, std::allocator<VariableName> >'
p26553
sS'default'
p26554
g3
sS'name'
p26555
S'show'
p26556
sS'required'
p26557
I00
sS'group_name'
p26558
S'Variables'
p26559
sa(dp26560
S'description'
p26561
S'Time at which this output object begins to operate\n'
p26562
sS'cpp_type'
p26563
S'double'
p26564
sS'default'
p26565
g3
sS'name'
p26566
S'start_time'
p26567
sS'required'
p26568
I00
sS'group_name'
p26569
S'Timing'
p26570
sa(dp26571
S'description'
p26572
S'Only export results at sync times\n'
p26573
sS'cpp_type'
p26574
S'bool'
p26575
sS'default'
p26576
S'0'
p26577
sS'name'
p26578
S'sync_only'
p26579
sS'required'
p26580
I00
sS'group_name'
p26581
S'Timing'
p26582
sa(dp26583
S'description'
p26584
S'Times at which the output and solution is forced to occur\n'
p26585
sS'cpp_type'
p26586
S'std::vector<double, std::allocator<double> >'
p26587
sS'default'
p26588
g3
sS'name'
p26589
S'sync_times'
p26590
sS'required'
p26591
I00
sS'group_name'
p26592
S'Timing'
p26593
sa(dp26594
S'description'
p26595
S'Time tolerance utilized checking start and end times\n'
p26596
sS'cpp_type'
p26597
S'double'
p26598
sS'default'
p26599
S'1e-14'
p26600
sS'name'
p26601
S'time_tolerance'
p26602
sS'required'
p26603
I00
sS'group_name'
p26604
S'Timing'
p26605
sa(dp26606
S'description'
p26607
g3
sS'cpp_type'
p26608
S'std::string'
p26609
sS'default'
p26610
S'XDA'
p26611
sS'name'
p26612
S'type'
p26613
sS'required'
p26614
I00
sS'group_name'
p26615
Nsa(dp26616
S'description'
p26617
S'Enable/disable the use of the displaced mesh for outputting\n'
p26618
sS'cpp_type'
p26619
S'bool'
p26620
sS'default'
p26621
S'0'
p26622
sS'name'
p26623
S'use_displaced'
p26624
sS'required'
p26625
I00
sS'group_name'
p26626
NsasS'name'
p26627
S'/Outputs/XDA'
p26628
sa(dp26629
S'description'
p26630
g3
sS'type'
p26631
NsS'subblocks'
p26632
NsS'parameters'
p26633
(lp26634
(dp26635
S'description'
p26636
S"Append '_displaced' to the output file base\n"
p26637
sS'cpp_type'
p26638
S'bool'
p26639
sS'default'
p26640
S'0'
p26641
sS'name'
p26642
S'append_displaced'
p26643
sS'required'
p26644
I00
sS'group_name'
p26645
S'Displaced'
p26646
sa(dp26647
S'description'
p26648
S"Append '_oversample' to the output file base\n"
p26649
sS'cpp_type'
p26650
S'bool'
p26651
sS'default'
p26652
S'0'
p26653
sS'name'
p26654
S'append_oversample'
p26655
sS'required'
p26656
I00
sS'group_name'
p26657
S'Oversampling'
p26658
sa(dp26659
S'description'
p26660
S'Output elemental nonlinear variables as nodal\n'
p26661
sS'cpp_type'
p26662
S'bool'
p26663
sS'default'
p26664
S'0'
p26665
sS'name'
p26666
S'elemental_as_nodal'
p26667
sS'required'
p26668
I00
sS'group_name'
p26669
S'Variables'
p26670
sa(dp26671
S'description'
p26672
S'Time at which this output object stop operating\n'
p26673
sS'cpp_type'
p26674
S'double'
p26675
sS'default'
p26676
g3
sS'name'
p26677
S'end_time'
p26678
sS'required'
p26679
I00
sS'group_name'
p26680
S'Timing'
p26681
sa(dp26682
S'description'
p26683
S'The name of the mesh file to read, for oversampling\n'
p26684
sS'cpp_type'
p26685
S'MeshFileName'
p26686
sS'default'
p26687
g3
sS'name'
p26688
S'file'
p26689
sS'required'
p26690
I00
sS'group_name'
p26691
S'Oversampling'
p26692
sa(dp26693
S'description'
p26694
S'The desired solution output name without an extension\n'
p26695
sS'cpp_type'
p26696
S'std::string'
p26697
sS'default'
p26698
g3
sS'name'
p26699
S'file_base'
p26700
sS'required'
p26701
I00
sS'group_name'
p26702
Nsa(dp26703
S'description'
p26704
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p26705
sS'cpp_type'
p26706
S'std::vector<VariableName, std::allocator<VariableName> >'
p26707
sS'default'
p26708
g3
sS'name'
p26709
S'hide'
p26710
sS'required'
p26711
I00
sS'group_name'
p26712
S'Variables'
p26713
sa(dp26714
S'description'
p26715
S'The interval at which time steps are output to the solution file\n'
p26716
sS'cpp_type'
p26717
S'unsigned int'
p26718
sS'default'
p26719
S'1'
p26720
sS'name'
p26721
S'interval'
p26722
sS'required'
p26723
I00
sS'group_name'
p26724
S'Timing'
p26725
sa(dp26726
S'description'
p26727
S'Number of divisions applied to time step when outputting linear residuals\n'
p26728
sS'cpp_type'
p26729
S'double'
p26730
sS'default'
p26731
S'1000'
p26732
sS'name'
p26733
S'linear_residual_dt_divisor'
p26734
sS'required'
p26735
I00
sS'group_name'
p26736
S'PETSc'
p26737
sa(dp26738
S'description'
p26739
S'Specifies an end time to begin output on each linear residual evaluation\n'
p26740
sS'cpp_type'
p26741
S'double'
p26742
sS'default'
p26743
g3
sS'name'
p26744
S'linear_residual_end_time'
p26745
sS'required'
p26746
I00
sS'group_name'
p26747
S'PETSc'
p26748
sa(dp26749
S'description'
p26750
S'Specifies a start time to begin output on each linear residual evaluation\n'
p26751
sS'cpp_type'
p26752
S'double'
p26753
sS'default'
p26754
g3
sS'name'
p26755
S'linear_residual_start_time'
p26756
sS'required'
p26757
I00
sS'group_name'
p26758
S'PETSc'
p26759
sa(dp26760
S'description'
p26761
S'Specifies whether output occurs on each linear residual evaluation\n'
p26762
sS'cpp_type'
p26763
S'bool'
p26764
sS'default'
p26765
S'0'
p26766
sS'name'
p26767
S'linear_residuals'
p26768
sS'required'
p26769
I00
sS'group_name'
p26770
S'PETSc'
p26771
sa(dp26772
S'description'
p26773
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p26774
sS'cpp_type'
p26775
S'double'
p26776
sS'default'
p26777
S'1000'
p26778
sS'name'
p26779
S'nonlinear_residual_dt_divisor'
p26780
sS'required'
p26781
I00
sS'group_name'
p26782
S'PETSc'
p26783
sa(dp26784
S'description'
p26785
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p26786
sS'cpp_type'
p26787
S'double'
p26788
sS'default'
p26789
g3
sS'name'
p26790
S'nonlinear_residual_end_time'
p26791
sS'required'
p26792
I00
sS'group_name'
p26793
S'PETSc'
p26794
sa(dp26795
S'description'
p26796
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p26797
sS'cpp_type'
p26798
S'double'
p26799
sS'default'
p26800
g3
sS'name'
p26801
S'nonlinear_residual_start_time'
p26802
sS'required'
p26803
I00
sS'group_name'
p26804
S'PETSc'
p26805
sa(dp26806
S'description'
p26807
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p26808
sS'cpp_type'
p26809
S'bool'
p26810
sS'default'
p26811
S'0'
p26812
sS'name'
p26813
S'nonlinear_residuals'
p26814
sS'required'
p26815
I00
sS'group_name'
p26816
S'PETSc'
p26817
sa(dp26818
S'description'
p26819
S'When true all time attempted time steps are output\n'
p26820
sS'cpp_type'
p26821
S'bool'
p26822
sS'default'
p26823
S'0'
p26824
sS'name'
p26825
S'output_failed'
p26826
sS'required'
p26827
I00
sS'group_name'
p26828
Nsa(dp26829
S'description'
p26830
S'Force the final time step to be output, regardless of output interval\n'
p26831
sS'cpp_type'
p26832
S'bool'
p26833
sS'default'
p26834
S'0'
p26835
sS'name'
p26836
S'output_final'
p26837
sS'required'
p26838
I00
sS'group_name'
p26839
S'Timing'
p26840
sa(dp26841
S'description'
p26842
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p26843
sS'cpp_type'
p26844
S'std::vector<std::string, std::allocator<std::string> >'
p26845
sS'default'
p26846
g3
sS'name'
p26847
S'output_if_base_contains'
p26848
sS'required'
p26849
I00
sS'group_name'
p26850
S'Advanced'
p26851
sa(dp26852
S'description'
p26853
S'Request that the initial condition is output to the solution file\n'
p26854
sS'cpp_type'
p26855
S'bool'
p26856
sS'default'
p26857
S'0'
p26858
sS'name'
p26859
S'output_initial'
p26860
sS'required'
p26861
I00
sS'group_name'
p26862
S'Timing'
p26863
sa(dp26864
S'description'
p26865
S'Output the input file\n'
p26866
sS'cpp_type'
p26867
S'bool'
p26868
sS'default'
p26869
S'0'
p26870
sS'name'
p26871
S'output_input'
p26872
sS'required'
p26873
I00
sS'group_name'
p26874
Nsa(dp26875
S'description'
p26876
S'Request that all intermediate steps (not initial or final) are output\n'
p26877
sS'cpp_type'
p26878
S'bool'
p26879
sS'default'
p26880
S'1'
p26881
sS'name'
p26882
S'output_intermediate'
p26883
sS'required'
p26884
I00
sS'group_name'
p26885
Nsa(dp26886
S'description'
p26887
S'Toggles the display of the system information prior to the solve\n'
p26888
sS'cpp_type'
p26889
S'bool'
p26890
sS'default'
p26891
S'1'
p26892
sS'name'
p26893
S'output_system_information'
p26894
sS'required'
p26895
I00
sS'group_name'
p26896
Nsa(dp26897
S'description'
p26898
S'Set to true to enable oversampling\n'
p26899
sS'cpp_type'
p26900
S'bool'
p26901
sS'default'
p26902
S'0'
p26903
sS'name'
p26904
S'oversample'
p26905
sS'required'
p26906
I00
sS'group_name'
p26907
S'Oversampling'
p26908
sa(dp26909
S'description'
p26910
S'The number of for extension suffix (e.g., out.e-s002)\n'
p26911
sS'cpp_type'
p26912
S'unsigned int'
p26913
sS'default'
p26914
S'4'
p26915
sS'name'
p26916
S'padding'
p26917
sS'required'
p26918
I00
sS'group_name'
p26919
S'Advanced'
p26920
sa(dp26921
S'description'
p26922
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p26923
sS'cpp_type'
p26924
S'libMesh::Point'
p26925
sS'default'
p26926
g3
sS'name'
p26927
S'position'
p26928
sS'required'
p26929
I00
sS'group_name'
p26930
S'Oversampling'
p26931
sa(dp26932
S'description'
p26933
S'Number of uniform refinements for oversampling\n'
p26934
sS'cpp_type'
p26935
S'unsigned int'
p26936
sS'default'
p26937
S'0'
p26938
sS'name'
p26939
S'refinements'
p26940
sS'required'
p26941
I00
sS'group_name'
p26942
S'Oversampling'
p26943
sa(dp26944
S'description'
p26945
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p26946
sS'cpp_type'
p26947
S'std::vector<VariableName, std::allocator<VariableName> >'
p26948
sS'default'
p26949
g3
sS'name'
p26950
S'show'
p26951
sS'required'
p26952
I00
sS'group_name'
p26953
S'Variables'
p26954
sa(dp26955
S'description'
p26956
S'Time at which this output object begins to operate\n'
p26957
sS'cpp_type'
p26958
S'double'
p26959
sS'default'
p26960
g3
sS'name'
p26961
S'start_time'
p26962
sS'required'
p26963
I00
sS'group_name'
p26964
S'Timing'
p26965
sa(dp26966
S'description'
p26967
S'Only export results at sync times\n'
p26968
sS'cpp_type'
p26969
S'bool'
p26970
sS'default'
p26971
S'0'
p26972
sS'name'
p26973
S'sync_only'
p26974
sS'required'
p26975
I00
sS'group_name'
p26976
S'Timing'
p26977
sa(dp26978
S'description'
p26979
S'Times at which the output and solution is forced to occur\n'
p26980
sS'cpp_type'
p26981
S'std::vector<double, std::allocator<double> >'
p26982
sS'default'
p26983
g3
sS'name'
p26984
S'sync_times'
p26985
sS'required'
p26986
I00
sS'group_name'
p26987
S'Timing'
p26988
sa(dp26989
S'description'
p26990
S'Time tolerance utilized checking start and end times\n'
p26991
sS'cpp_type'
p26992
S'double'
p26993
sS'default'
p26994
S'1e-14'
p26995
sS'name'
p26996
S'time_tolerance'
p26997
sS'required'
p26998
I00
sS'group_name'
p26999
S'Timing'
p27000
sa(dp27001
S'description'
p27002
g3
sS'cpp_type'
p27003
S'std::string'
p27004
sS'default'
p27005
S'XDR'
p27006
sS'name'
p27007
S'type'
p27008
sS'required'
p27009
I00
sS'group_name'
p27010
Nsa(dp27011
S'description'
p27012
S'Enable/disable the use of the displaced mesh for outputting\n'
p27013
sS'cpp_type'
p27014
S'bool'
p27015
sS'default'
p27016
S'0'
p27017
sS'name'
p27018
S'use_displaced'
p27019
sS'required'
p27020
I00
sS'group_name'
p27021
NsasS'name'
p27022
S'/Outputs/XDR'
p27023
sasS'parameters'
p27024
(lp27025
(dp27026
S'description'
p27027
S'Create checkpoint files using the default options.\n'
p27028
sS'cpp_type'
p27029
S'bool'
p27030
sS'default'
p27031
S'0'
p27032
sS'name'
p27033
S'checkpoint'
p27034
sS'required'
p27035
I00
sS'group_name'
p27036
Nsa(dp27037
S'description'
p27038
S'Output the results using the default settings for Console output\n'
p27039
sS'cpp_type'
p27040
S'bool'
p27041
sS'default'
p27042
S'0'
p27043
sS'name'
p27044
S'console'
p27045
sS'required'
p27046
I00
sS'group_name'
p27047
Nsa(dp27048
S'description'
p27049
S'Output the scalar variable and postprocessors to a *.csv file using the default CSV output.\n'
p27050
sS'cpp_type'
p27051
S'bool'
p27052
sS'default'
p27053
S'0'
p27054
sS'name'
p27055
S'csv'
p27056
sS'required'
p27057
I00
sS'group_name'
p27058
Nsa(dp27059
S'description'
p27060
S'Output the results using the default settings for Exodus output\n'
p27061
sS'cpp_type'
p27062
S'bool'
p27063
sS'default'
p27064
S'0'
p27065
sS'name'
p27066
S'exodus'
p27067
sS'required'
p27068
I00
sS'group_name'
p27069
Nsa(dp27070
S'description'
p27071
S'Common file base name to be utilized with all output objects\n'
p27072
sS'cpp_type'
p27073
S'std::string'
p27074
sS'default'
p27075
g3
sS'name'
p27076
S'file_base'
p27077
sS'required'
p27078
I00
sS'group_name'
p27079
Nsa(dp27080
S'description'
p27081
S'Output the results using the default settings for GMV output\n'
p27082
sS'cpp_type'
p27083
S'bool'
p27084
sS'default'
p27085
S'0'
p27086
sS'name'
p27087
S'gmv'
p27088
sS'required'
p27089
I00
sS'group_name'
p27090
Nsa(dp27091
S'description'
p27092
S'Output the scalar and postprocessor results using the default settings for GNUPlot output\n'
p27093
sS'cpp_type'
p27094
S'bool'
p27095
sS'default'
p27096
S'0'
p27097
sS'name'
p27098
S'gnuplot'
p27099
sS'required'
p27100
I00
sS'group_name'
p27101
Nsa(dp27102
S'description'
p27103
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p27104
sS'cpp_type'
p27105
S'std::vector<VariableName, std::allocator<VariableName> >'
p27106
sS'default'
p27107
g3
sS'name'
p27108
S'hide'
p27109
sS'required'
p27110
I00
sS'group_name'
p27111
Nsa(dp27112
S'description'
p27113
S'The interval at which timesteps are output to the solution file\n'
p27114
sS'cpp_type'
p27115
S'unsigned int'
p27116
sS'default'
p27117
S'1'
p27118
sS'name'
p27119
S'interval'
p27120
sS'required'
p27121
I00
sS'group_name'
p27122
Nsa(dp27123
S'description'
p27124
S'Output the results using the default settings for Nemesis output\n'
p27125
sS'cpp_type'
p27126
S'bool'
p27127
sS'default'
p27128
S'0'
p27129
sS'name'
p27130
S'nemesis'
p27131
sS'required'
p27132
I00
sS'group_name'
p27133
Nsa(dp27134
S'description'
p27135
S'Force the final timestep to be output, regardless of output interval\n'
p27136
sS'cpp_type'
p27137
S'bool'
p27138
sS'default'
p27139
S'0'
p27140
sS'name'
p27141
S'output_final'
p27142
sS'required'
p27143
I00
sS'group_name'
p27144
Nsa(dp27145
S'description'
p27146
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p27147
sS'cpp_type'
p27148
S'std::vector<std::string, std::allocator<std::string> >'
p27149
sS'default'
p27150
g3
sS'name'
p27151
S'output_if_base_contains'
p27152
sS'required'
p27153
I00
sS'group_name'
p27154
Nsa(dp27155
S'description'
p27156
S'Request that the initial condition is output to the solution file\n'
p27157
sS'cpp_type'
p27158
S'bool'
p27159
sS'default'
p27160
S'0'
p27161
sS'name'
p27162
S'output_initial'
p27163
sS'required'
p27164
I00
sS'group_name'
p27165
Nsa(dp27166
S'description'
p27167
S'Request that all intermediate steps (not initial or final) are output\n'
p27168
sS'cpp_type'
p27169
S'bool'
p27170
sS'default'
p27171
S'1'
p27172
sS'name'
p27173
S'output_intermediate'
p27174
sS'required'
p27175
I00
sS'group_name'
p27176
Nsa(dp27177
S'description'
p27178
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p27179
sS'cpp_type'
p27180
S'std::vector<VariableName, std::allocator<VariableName> >'
p27181
sS'default'
p27182
g3
sS'name'
p27183
S'show'
p27184
sS'required'
p27185
I00
sS'group_name'
p27186
Nsa(dp27187
S'description'
p27188
S'Print a solution history file (.slh) using the default settings\n'
p27189
sS'cpp_type'
p27190
S'bool'
p27191
sS'default'
p27192
S'0'
p27193
sS'name'
p27194
S'solution_history'
p27195
sS'required'
p27196
I00
sS'group_name'
p27197
Nsa(dp27198
S'description'
p27199
S'Times at which the output and solution is forced to occur\n'
p27200
sS'cpp_type'
p27201
S'std::vector<double, std::allocator<double> >'
p27202
sS'default'
p27203
g3
sS'name'
p27204
S'sync_times'
p27205
sS'required'
p27206
I00
sS'group_name'
p27207
Nsa(dp27208
S'description'
p27209
S'Output the results using the default settings for Tecplot output\n'
p27210
sS'cpp_type'
p27211
S'bool'
p27212
sS'default'
p27213
S'0'
p27214
sS'name'
p27215
S'tecplot'
p27216
sS'required'
p27217
I00
sS'group_name'
p27218
Nsa(dp27219
S'description'
p27220
S'Output the results using the default settings for XDA/XDR output (ascii)\n'
p27221
sS'cpp_type'
p27222
S'bool'
p27223
sS'default'
p27224
S'0'
p27225
sS'name'
p27226
S'xda'
p27227
sS'required'
p27228
I00
sS'group_name'
p27229
Nsa(dp27230
S'description'
p27231
S'Output the results using the default settings for XDA/XDR output (binary)\n'
p27232
sS'cpp_type'
p27233
S'bool'
p27234
sS'default'
p27235
S'0'
p27236
sS'name'
p27237
S'xdr'
p27238
sS'required'
p27239
I00
sS'group_name'
p27240
NsasS'name'
p27241
S'/Outputs'
p27242
sa(dp27243
S'description'
p27244
g3
sS'type'
p27245
NsS'subblocks'
p27246
(lp27247
(dp27248
S'description'
p27249
g3
sS'type'
p27250
NsS'subblocks'
p27251
NsS'parameters'
p27252
(lp27253
(dp27254
S'description'
p27255
S'A string representing the Moose Object that will be built by this Action\n'
p27256
sS'cpp_type'
p27257
S'std::string'
p27258
sS'default'
p27259
g3
sS'name'
p27260
S'type'
p27261
sS'required'
p27262
I01
sS'group_name'
p27263
NsasS'name'
p27264
S'/Postprocessors/*'
p27265
sa(dp27266
S'description'
p27267
g3
sS'type'
p27268
NsS'subblocks'
p27269
NsS'parameters'
p27270
(lp27271
(dp27272
S'description'
p27273
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p27274
sS'cpp_type'
p27275
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p27276
sS'default'
p27277
g3
sS'name'
p27278
S'boundary'
p27279
sS'required'
p27280
I00
sS'group_name'
p27281
Nsa(dp27282
S'name'
p27283
S'execute_on'
p27284
sS'cpp_type'
p27285
S'MooseEnum'
p27286
sS'default'
p27287
S'timestep'
p27288
sS'description'
p27289
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p27290
sS'required'
p27291
I00
sS'options'
p27292
S'initial residual jacobian timestep timestep_begin custom'
p27293
sS'group_name'
p27294
Nsa(dp27295
S'description'
p27296
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p27297
sS'cpp_type'
p27298
S'std::vector<OutputName, std::allocator<OutputName> >'
p27299
sS'default'
p27300
g3
sS'name'
p27301
S'outputs'
p27302
sS'required'
p27303
I00
sS'group_name'
p27304
S'Advanced'
p27305
sa(dp27306
S'description'
p27307
g3
sS'cpp_type'
p27308
S'std::string'
p27309
sS'default'
p27310
S'AreaPostprocessor'
p27311
sS'name'
p27312
S'type'
p27313
sS'required'
p27314
I00
sS'group_name'
p27315
Nsa(dp27316
S'description'
p27317
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27318
sS'cpp_type'
p27319
S'bool'
p27320
sS'default'
p27321
S'0'
p27322
sS'name'
p27323
S'use_displaced_mesh'
p27324
sS'required'
p27325
I00
sS'group_name'
p27326
S'Advanced'
p27327
sasS'name'
p27328
S'/Postprocessors/AreaPostprocessor'
p27329
sa(dp27330
S'description'
p27331
g3
sS'type'
p27332
NsS'subblocks'
p27333
NsS'parameters'
p27334
(lp27335
(dp27336
S'description'
p27337
S'The list of block ids (SubdomainID) that this object will be applied\n'
p27338
sS'cpp_type'
p27339
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p27340
sS'default'
p27341
g3
sS'name'
p27342
S'block'
p27343
sS'required'
p27344
I00
sS'group_name'
p27345
Nsa(dp27346
S'name'
p27347
S'execute_on'
p27348
sS'cpp_type'
p27349
S'MooseEnum'
p27350
sS'default'
p27351
S'timestep'
p27352
sS'description'
p27353
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p27354
sS'required'
p27355
I00
sS'options'
p27356
S'initial residual jacobian timestep timestep_begin custom'
p27357
sS'group_name'
p27358
Nsa(dp27359
S'description'
p27360
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p27361
sS'cpp_type'
p27362
S'std::vector<OutputName, std::allocator<OutputName> >'
p27363
sS'default'
p27364
g3
sS'name'
p27365
S'outputs'
p27366
sS'required'
p27367
I00
sS'group_name'
p27368
S'Advanced'
p27369
sa(dp27370
S'description'
p27371
S'The seed for the master random number generator\n'
p27372
sS'cpp_type'
p27373
S'unsigned int'
p27374
sS'default'
p27375
S'0'
p27376
sS'name'
p27377
S'seed'
p27378
sS'required'
p27379
I00
sS'group_name'
p27380
S'Advanced'
p27381
sa(dp27382
S'description'
p27383
g3
sS'cpp_type'
p27384
S'std::string'
p27385
sS'default'
p27386
S'AverageElementSize'
p27387
sS'name'
p27388
S'type'
p27389
sS'required'
p27390
I00
sS'group_name'
p27391
Nsa(dp27392
S'description'
p27393
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27394
sS'cpp_type'
p27395
S'bool'
p27396
sS'default'
p27397
S'0'
p27398
sS'name'
p27399
S'use_displaced_mesh'
p27400
sS'required'
p27401
I00
sS'group_name'
p27402
S'Advanced'
p27403
sa(dp27404
S'description'
p27405
S'The name of the variable that this object operates on\n'
p27406
sS'cpp_type'
p27407
S'VariableName'
p27408
sS'default'
p27409
g3
sS'name'
p27410
S'variable'
p27411
sS'required'
p27412
I01
sS'group_name'
p27413
NsasS'name'
p27414
S'/Postprocessors/AverageElementSize'
p27415
sa(dp27416
S'description'
p27417
g3
sS'type'
p27418
NsS'subblocks'
p27419
NsS'parameters'
p27420
(lp27421
(dp27422
S'description'
p27423
S'The list of block ids (SubdomainID) that this object will be applied\n'
p27424
sS'cpp_type'
p27425
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p27426
sS'default'
p27427
g3
sS'name'
p27428
S'block'
p27429
sS'required'
p27430
I00
sS'group_name'
p27431
Nsa(dp27432
S'description'
p27433
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p27434
sS'cpp_type'
p27435
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p27436
sS'default'
p27437
g3
sS'name'
p27438
S'boundary'
p27439
sS'required'
p27440
I00
sS'group_name'
p27441
Nsa(dp27442
S'name'
p27443
S'execute_on'
p27444
sS'cpp_type'
p27445
S'MooseEnum'
p27446
sS'default'
p27447
S'timestep'
p27448
sS'description'
p27449
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p27450
sS'required'
p27451
I00
sS'options'
p27452
S'initial residual jacobian timestep timestep_begin custom'
p27453
sS'group_name'
p27454
Nsa(dp27455
S'description'
p27456
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p27457
sS'cpp_type'
p27458
S'std::vector<OutputName, std::allocator<OutputName> >'
p27459
sS'default'
p27460
g3
sS'name'
p27461
S'outputs'
p27462
sS'required'
p27463
I00
sS'group_name'
p27464
S'Advanced'
p27465
sa(dp27466
S'description'
p27467
S'The seed for the master random number generator\n'
p27468
sS'cpp_type'
p27469
S'unsigned int'
p27470
sS'default'
p27471
S'0'
p27472
sS'name'
p27473
S'seed'
p27474
sS'required'
p27475
I00
sS'group_name'
p27476
S'Advanced'
p27477
sa(dp27478
S'description'
p27479
g3
sS'cpp_type'
p27480
S'std::string'
p27481
sS'default'
p27482
S'AverageNodalVariableValue'
p27483
sS'name'
p27484
S'type'
p27485
sS'required'
p27486
I00
sS'group_name'
p27487
Nsa(dp27488
S'description'
p27489
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27490
sS'cpp_type'
p27491
S'bool'
p27492
sS'default'
p27493
S'0'
p27494
sS'name'
p27495
S'use_displaced_mesh'
p27496
sS'required'
p27497
I00
sS'group_name'
p27498
S'Advanced'
p27499
sa(dp27500
S'description'
p27501
S'The name of the variable that this postprocessor operates on\n'
p27502
sS'cpp_type'
p27503
S'VariableName'
p27504
sS'default'
p27505
g3
sS'name'
p27506
S'variable'
p27507
sS'required'
p27508
I01
sS'group_name'
p27509
NsasS'name'
p27510
S'/Postprocessors/AverageNodalVariableValue'
p27511
sa(dp27512
S'description'
p27513
g3
sS'type'
p27514
NsS'subblocks'
p27515
NsS'parameters'
p27516
(lp27517
(dp27518
S'description'
p27519
S'The list of block ids (SubdomainID) that this object will be applied\n'
p27520
sS'cpp_type'
p27521
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p27522
sS'default'
p27523
g3
sS'name'
p27524
S'block'
p27525
sS'required'
p27526
I00
sS'group_name'
p27527
Nsa(dp27528
S'name'
p27529
S'execute_on'
p27530
sS'cpp_type'
p27531
S'MooseEnum'
p27532
sS'default'
p27533
S'timestep'
p27534
sS'description'
p27535
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p27536
sS'required'
p27537
I00
sS'options'
p27538
S'initial residual jacobian timestep timestep_begin custom'
p27539
sS'group_name'
p27540
Nsa(dp27541
S'description'
p27542
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p27543
sS'cpp_type'
p27544
S'std::vector<OutputName, std::allocator<OutputName> >'
p27545
sS'default'
p27546
g3
sS'name'
p27547
S'outputs'
p27548
sS'required'
p27549
I00
sS'group_name'
p27550
S'Advanced'
p27551
sa(dp27552
S'description'
p27553
S'The seed for the master random number generator\n'
p27554
sS'cpp_type'
p27555
S'unsigned int'
p27556
sS'default'
p27557
S'0'
p27558
sS'name'
p27559
S'seed'
p27560
sS'required'
p27561
I00
sS'group_name'
p27562
S'Advanced'
p27563
sa(dp27564
S'description'
p27565
g3
sS'cpp_type'
p27566
S'std::string'
p27567
sS'default'
p27568
S'ElementAverageTimeDerivative'
p27569
sS'name'
p27570
S'type'
p27571
sS'required'
p27572
I00
sS'group_name'
p27573
Nsa(dp27574
S'description'
p27575
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27576
sS'cpp_type'
p27577
S'bool'
p27578
sS'default'
p27579
S'0'
p27580
sS'name'
p27581
S'use_displaced_mesh'
p27582
sS'required'
p27583
I00
sS'group_name'
p27584
S'Advanced'
p27585
sa(dp27586
S'description'
p27587
S'The name of the variable that this object operates on\n'
p27588
sS'cpp_type'
p27589
S'VariableName'
p27590
sS'default'
p27591
g3
sS'name'
p27592
S'variable'
p27593
sS'required'
p27594
I01
sS'group_name'
p27595
NsasS'name'
p27596
S'/Postprocessors/ElementAverageTimeDerivative'
p27597
sa(dp27598
S'description'
p27599
g3
sS'type'
p27600
NsS'subblocks'
p27601
NsS'parameters'
p27602
(lp27603
(dp27604
S'description'
p27605
S'The list of block ids (SubdomainID) that this object will be applied\n'
p27606
sS'cpp_type'
p27607
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p27608
sS'default'
p27609
g3
sS'name'
p27610
S'block'
p27611
sS'required'
p27612
I00
sS'group_name'
p27613
Nsa(dp27614
S'name'
p27615
S'execute_on'
p27616
sS'cpp_type'
p27617
S'MooseEnum'
p27618
sS'default'
p27619
S'timestep'
p27620
sS'description'
p27621
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p27622
sS'required'
p27623
I00
sS'options'
p27624
S'initial residual jacobian timestep timestep_begin custom'
p27625
sS'group_name'
p27626
Nsa(dp27627
S'description'
p27628
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p27629
sS'cpp_type'
p27630
S'std::vector<OutputName, std::allocator<OutputName> >'
p27631
sS'default'
p27632
g3
sS'name'
p27633
S'outputs'
p27634
sS'required'
p27635
I00
sS'group_name'
p27636
S'Advanced'
p27637
sa(dp27638
S'description'
p27639
S'The seed for the master random number generator\n'
p27640
sS'cpp_type'
p27641
S'unsigned int'
p27642
sS'default'
p27643
S'0'
p27644
sS'name'
p27645
S'seed'
p27646
sS'required'
p27647
I00
sS'group_name'
p27648
S'Advanced'
p27649
sa(dp27650
S'description'
p27651
g3
sS'cpp_type'
p27652
S'std::string'
p27653
sS'default'
p27654
S'ElementAverageValue'
p27655
sS'name'
p27656
S'type'
p27657
sS'required'
p27658
I00
sS'group_name'
p27659
Nsa(dp27660
S'description'
p27661
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27662
sS'cpp_type'
p27663
S'bool'
p27664
sS'default'
p27665
S'0'
p27666
sS'name'
p27667
S'use_displaced_mesh'
p27668
sS'required'
p27669
I00
sS'group_name'
p27670
S'Advanced'
p27671
sa(dp27672
S'description'
p27673
S'The name of the variable that this object operates on\n'
p27674
sS'cpp_type'
p27675
S'VariableName'
p27676
sS'default'
p27677
g3
sS'name'
p27678
S'variable'
p27679
sS'required'
p27680
I01
sS'group_name'
p27681
NsasS'name'
p27682
S'/Postprocessors/ElementAverageValue'
p27683
sa(dp27684
S'description'
p27685
g3
sS'type'
p27686
NsS'subblocks'
p27687
NsS'parameters'
p27688
(lp27689
(dp27690
S'description'
p27691
S'The list of block ids (SubdomainID) that this object will be applied\n'
p27692
sS'cpp_type'
p27693
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p27694
sS'default'
p27695
g3
sS'name'
p27696
S'block'
p27697
sS'required'
p27698
I00
sS'group_name'
p27699
Nsa(dp27700
S'name'
p27701
S'execute_on'
p27702
sS'cpp_type'
p27703
S'MooseEnum'
p27704
sS'default'
p27705
S'timestep'
p27706
sS'description'
p27707
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p27708
sS'required'
p27709
I00
sS'options'
p27710
S'initial residual jacobian timestep timestep_begin custom'
p27711
sS'group_name'
p27712
Nsa(dp27713
S'description'
p27714
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p27715
sS'cpp_type'
p27716
S'std::vector<OutputName, std::allocator<OutputName> >'
p27717
sS'default'
p27718
g3
sS'name'
p27719
S'outputs'
p27720
sS'required'
p27721
I00
sS'group_name'
p27722
S'Advanced'
p27723
sa(dp27724
S'description'
p27725
S'The seed for the master random number generator\n'
p27726
sS'cpp_type'
p27727
S'unsigned int'
p27728
sS'default'
p27729
S'0'
p27730
sS'name'
p27731
S'seed'
p27732
sS'required'
p27733
I00
sS'group_name'
p27734
S'Advanced'
p27735
sa(dp27736
S'description'
p27737
g3
sS'cpp_type'
p27738
S'std::string'
p27739
sS'default'
p27740
S'ElementExtremeValue'
p27741
sS'name'
p27742
S'type'
p27743
sS'required'
p27744
I00
sS'group_name'
p27745
Nsa(dp27746
S'description'
p27747
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27748
sS'cpp_type'
p27749
S'bool'
p27750
sS'default'
p27751
S'0'
p27752
sS'name'
p27753
S'use_displaced_mesh'
p27754
sS'required'
p27755
I00
sS'group_name'
p27756
S'Advanced'
p27757
sa(dp27758
S'name'
p27759
S'value_type'
p27760
sS'cpp_type'
p27761
S'MooseEnum'
p27762
sS'default'
p27763
S'max'
p27764
sS'description'
p27765
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p27766
sS'required'
p27767
I00
sS'options'
p27768
S'max min'
p27769
sS'group_name'
p27770
Nsa(dp27771
S'description'
p27772
S'The name of the variable that this postprocessor operates on\n'
p27773
sS'cpp_type'
p27774
S'VariableName'
p27775
sS'default'
p27776
g3
sS'name'
p27777
S'variable'
p27778
sS'required'
p27779
I01
sS'group_name'
p27780
NsasS'name'
p27781
S'/Postprocessors/ElementExtremeValue'
p27782
sa(dp27783
S'description'
p27784
g3
sS'type'
p27785
NsS'subblocks'
p27786
NsS'parameters'
p27787
(lp27788
(dp27789
S'description'
p27790
S'The list of block ids (SubdomainID) that this object will be applied\n'
p27791
sS'cpp_type'
p27792
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p27793
sS'default'
p27794
g3
sS'name'
p27795
S'block'
p27796
sS'required'
p27797
I00
sS'group_name'
p27798
Nsa(dp27799
S'name'
p27800
S'execute_on'
p27801
sS'cpp_type'
p27802
S'MooseEnum'
p27803
sS'default'
p27804
S'timestep'
p27805
sS'description'
p27806
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p27807
sS'required'
p27808
I00
sS'options'
p27809
S'initial residual jacobian timestep timestep_begin custom'
p27810
sS'group_name'
p27811
Nsa(dp27812
S'description'
p27813
S'The analytic solution to compare against\n'
p27814
sS'cpp_type'
p27815
S'FunctionName'
p27816
sS'default'
p27817
g3
sS'name'
p27818
S'function'
p27819
sS'required'
p27820
I01
sS'group_name'
p27821
Nsa(dp27822
S'description'
p27823
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p27824
sS'cpp_type'
p27825
S'std::vector<OutputName, std::allocator<OutputName> >'
p27826
sS'default'
p27827
g3
sS'name'
p27828
S'outputs'
p27829
sS'required'
p27830
I00
sS'group_name'
p27831
S'Advanced'
p27832
sa(dp27833
S'description'
p27834
S'The seed for the master random number generator\n'
p27835
sS'cpp_type'
p27836
S'unsigned int'
p27837
sS'default'
p27838
S'0'
p27839
sS'name'
p27840
S'seed'
p27841
sS'required'
p27842
I00
sS'group_name'
p27843
S'Advanced'
p27844
sa(dp27845
S'description'
p27846
g3
sS'cpp_type'
p27847
S'std::string'
p27848
sS'default'
p27849
S'ElementH1Error'
p27850
sS'name'
p27851
S'type'
p27852
sS'required'
p27853
I00
sS'group_name'
p27854
Nsa(dp27855
S'description'
p27856
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27857
sS'cpp_type'
p27858
S'bool'
p27859
sS'default'
p27860
S'0'
p27861
sS'name'
p27862
S'use_displaced_mesh'
p27863
sS'required'
p27864
I00
sS'group_name'
p27865
S'Advanced'
p27866
sa(dp27867
S'description'
p27868
S'The name of the variable that this object operates on\n'
p27869
sS'cpp_type'
p27870
S'VariableName'
p27871
sS'default'
p27872
g3
sS'name'
p27873
S'variable'
p27874
sS'required'
p27875
I01
sS'group_name'
p27876
NsasS'name'
p27877
S'/Postprocessors/ElementH1Error'
p27878
sa(dp27879
S'description'
p27880
g3
sS'type'
p27881
NsS'subblocks'
p27882
NsS'parameters'
p27883
(lp27884
(dp27885
S'description'
p27886
S'The list of block ids (SubdomainID) that this object will be applied\n'
p27887
sS'cpp_type'
p27888
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p27889
sS'default'
p27890
g3
sS'name'
p27891
S'block'
p27892
sS'required'
p27893
I00
sS'group_name'
p27894
Nsa(dp27895
S'name'
p27896
S'execute_on'
p27897
sS'cpp_type'
p27898
S'MooseEnum'
p27899
sS'default'
p27900
S'timestep'
p27901
sS'description'
p27902
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p27903
sS'required'
p27904
I00
sS'options'
p27905
S'initial residual jacobian timestep timestep_begin custom'
p27906
sS'group_name'
p27907
Nsa(dp27908
S'description'
p27909
S'The analytic solution to compare against\n'
p27910
sS'cpp_type'
p27911
S'FunctionName'
p27912
sS'default'
p27913
g3
sS'name'
p27914
S'function'
p27915
sS'required'
p27916
I01
sS'group_name'
p27917
Nsa(dp27918
S'description'
p27919
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p27920
sS'cpp_type'
p27921
S'std::vector<OutputName, std::allocator<OutputName> >'
p27922
sS'default'
p27923
g3
sS'name'
p27924
S'outputs'
p27925
sS'required'
p27926
I00
sS'group_name'
p27927
S'Advanced'
p27928
sa(dp27929
S'description'
p27930
S'The seed for the master random number generator\n'
p27931
sS'cpp_type'
p27932
S'unsigned int'
p27933
sS'default'
p27934
S'0'
p27935
sS'name'
p27936
S'seed'
p27937
sS'required'
p27938
I00
sS'group_name'
p27939
S'Advanced'
p27940
sa(dp27941
S'description'
p27942
g3
sS'cpp_type'
p27943
S'std::string'
p27944
sS'default'
p27945
S'ElementH1SemiError'
p27946
sS'name'
p27947
S'type'
p27948
sS'required'
p27949
I00
sS'group_name'
p27950
Nsa(dp27951
S'description'
p27952
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27953
sS'cpp_type'
p27954
S'bool'
p27955
sS'default'
p27956
S'0'
p27957
sS'name'
p27958
S'use_displaced_mesh'
p27959
sS'required'
p27960
I00
sS'group_name'
p27961
S'Advanced'
p27962
sa(dp27963
S'description'
p27964
S'The name of the variable that this object operates on\n'
p27965
sS'cpp_type'
p27966
S'VariableName'
p27967
sS'default'
p27968
g3
sS'name'
p27969
S'variable'
p27970
sS'required'
p27971
I01
sS'group_name'
p27972
NsasS'name'
p27973
S'/Postprocessors/ElementH1SemiError'
p27974
sa(dp27975
S'description'
p27976
g3
sS'type'
p27977
NsS'subblocks'
p27978
NsS'parameters'
p27979
(lp27980
(dp27981
S'description'
p27982
S'The list of block ids (SubdomainID) that this object will be applied\n'
p27983
sS'cpp_type'
p27984
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p27985
sS'default'
p27986
g3
sS'name'
p27987
S'block'
p27988
sS'required'
p27989
I00
sS'group_name'
p27990
Nsa(dp27991
S'name'
p27992
S'execute_on'
p27993
sS'cpp_type'
p27994
S'MooseEnum'
p27995
sS'default'
p27996
S'timestep'
p27997
sS'description'
p27998
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p27999
sS'required'
p28000
I00
sS'options'
p28001
S'initial residual jacobian timestep timestep_begin custom'
p28002
sS'group_name'
p28003
Nsa(dp28004
S'description'
p28005
S'The name of the material property\n'
p28006
sS'cpp_type'
p28007
S'std::string'
p28008
sS'default'
p28009
g3
sS'name'
p28010
S'mat_prop'
p28011
sS'required'
p28012
I01
sS'group_name'
p28013
Nsa(dp28014
S'description'
p28015
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p28016
sS'cpp_type'
p28017
S'std::vector<OutputName, std::allocator<OutputName> >'
p28018
sS'default'
p28019
g3
sS'name'
p28020
S'outputs'
p28021
sS'required'
p28022
I00
sS'group_name'
p28023
S'Advanced'
p28024
sa(dp28025
S'description'
p28026
S'The seed for the master random number generator\n'
p28027
sS'cpp_type'
p28028
S'unsigned int'
p28029
sS'default'
p28030
S'0'
p28031
sS'name'
p28032
S'seed'
p28033
sS'required'
p28034
I00
sS'group_name'
p28035
S'Advanced'
p28036
sa(dp28037
S'description'
p28038
g3
sS'cpp_type'
p28039
S'std::string'
p28040
sS'default'
p28041
S'ElementIntegralMaterialProperty'
p28042
sS'name'
p28043
S'type'
p28044
sS'required'
p28045
I00
sS'group_name'
p28046
Nsa(dp28047
S'description'
p28048
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28049
sS'cpp_type'
p28050
S'bool'
p28051
sS'default'
p28052
S'0'
p28053
sS'name'
p28054
S'use_displaced_mesh'
p28055
sS'required'
p28056
I00
sS'group_name'
p28057
S'Advanced'
p28058
sasS'name'
p28059
S'/Postprocessors/ElementIntegralMaterialProperty'
p28060
sa(dp28061
S'description'
p28062
g3
sS'type'
p28063
NsS'subblocks'
p28064
NsS'parameters'
p28065
(lp28066
(dp28067
S'description'
p28068
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28069
sS'cpp_type'
p28070
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p28071
sS'default'
p28072
g3
sS'name'
p28073
S'block'
p28074
sS'required'
p28075
I00
sS'group_name'
p28076
Nsa(dp28077
S'name'
p28078
S'execute_on'
p28079
sS'cpp_type'
p28080
S'MooseEnum'
p28081
sS'default'
p28082
S'timestep'
p28083
sS'description'
p28084
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p28085
sS'required'
p28086
I00
sS'options'
p28087
S'initial residual jacobian timestep timestep_begin custom'
p28088
sS'group_name'
p28089
Nsa(dp28090
S'description'
p28091
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p28092
sS'cpp_type'
p28093
S'std::vector<OutputName, std::allocator<OutputName> >'
p28094
sS'default'
p28095
g3
sS'name'
p28096
S'outputs'
p28097
sS'required'
p28098
I00
sS'group_name'
p28099
S'Advanced'
p28100
sa(dp28101
S'description'
p28102
S'The seed for the master random number generator\n'
p28103
sS'cpp_type'
p28104
S'unsigned int'
p28105
sS'default'
p28106
S'0'
p28107
sS'name'
p28108
S'seed'
p28109
sS'required'
p28110
I00
sS'group_name'
p28111
S'Advanced'
p28112
sa(dp28113
S'description'
p28114
g3
sS'cpp_type'
p28115
S'std::string'
p28116
sS'default'
p28117
S'ElementIntegralVariablePostprocessor'
p28118
sS'name'
p28119
S'type'
p28120
sS'required'
p28121
I00
sS'group_name'
p28122
Nsa(dp28123
S'description'
p28124
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28125
sS'cpp_type'
p28126
S'bool'
p28127
sS'default'
p28128
S'0'
p28129
sS'name'
p28130
S'use_displaced_mesh'
p28131
sS'required'
p28132
I00
sS'group_name'
p28133
S'Advanced'
p28134
sa(dp28135
S'description'
p28136
S'The name of the variable that this object operates on\n'
p28137
sS'cpp_type'
p28138
S'VariableName'
p28139
sS'default'
p28140
g3
sS'name'
p28141
S'variable'
p28142
sS'required'
p28143
I01
sS'group_name'
p28144
NsasS'name'
p28145
S'/Postprocessors/ElementIntegralVariablePostprocessor'
p28146
sa(dp28147
S'description'
p28148
g3
sS'type'
p28149
NsS'subblocks'
p28150
NsS'parameters'
p28151
(lp28152
(dp28153
S'description'
p28154
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28155
sS'cpp_type'
p28156
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p28157
sS'default'
p28158
g3
sS'name'
p28159
S'block'
p28160
sS'required'
p28161
I00
sS'group_name'
p28162
Nsa(dp28163
S'name'
p28164
S'execute_on'
p28165
sS'cpp_type'
p28166
S'MooseEnum'
p28167
sS'default'
p28168
S'timestep'
p28169
sS'description'
p28170
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p28171
sS'required'
p28172
I00
sS'options'
p28173
S'initial residual jacobian timestep timestep_begin custom'
p28174
sS'group_name'
p28175
Nsa(dp28176
S'description'
p28177
S'The analytic solution to compare against\n'
p28178
sS'cpp_type'
p28179
S'FunctionName'
p28180
sS'default'
p28181
g3
sS'name'
p28182
S'function'
p28183
sS'required'
p28184
I01
sS'group_name'
p28185
Nsa(dp28186
S'description'
p28187
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p28188
sS'cpp_type'
p28189
S'std::vector<OutputName, std::allocator<OutputName> >'
p28190
sS'default'
p28191
g3
sS'name'
p28192
S'outputs'
p28193
sS'required'
p28194
I00
sS'group_name'
p28195
S'Advanced'
p28196
sa(dp28197
S'description'
p28198
S'The seed for the master random number generator\n'
p28199
sS'cpp_type'
p28200
S'unsigned int'
p28201
sS'default'
p28202
S'0'
p28203
sS'name'
p28204
S'seed'
p28205
sS'required'
p28206
I00
sS'group_name'
p28207
S'Advanced'
p28208
sa(dp28209
S'description'
p28210
g3
sS'cpp_type'
p28211
S'std::string'
p28212
sS'default'
p28213
S'ElementL2Error'
p28214
sS'name'
p28215
S'type'
p28216
sS'required'
p28217
I00
sS'group_name'
p28218
Nsa(dp28219
S'description'
p28220
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28221
sS'cpp_type'
p28222
S'bool'
p28223
sS'default'
p28224
S'0'
p28225
sS'name'
p28226
S'use_displaced_mesh'
p28227
sS'required'
p28228
I00
sS'group_name'
p28229
S'Advanced'
p28230
sa(dp28231
S'description'
p28232
S'The name of the variable that this object operates on\n'
p28233
sS'cpp_type'
p28234
S'VariableName'
p28235
sS'default'
p28236
g3
sS'name'
p28237
S'variable'
p28238
sS'required'
p28239
I01
sS'group_name'
p28240
NsasS'name'
p28241
S'/Postprocessors/ElementL2Error'
p28242
sa(dp28243
S'description'
p28244
g3
sS'type'
p28245
NsS'subblocks'
p28246
NsS'parameters'
p28247
(lp28248
(dp28249
S'description'
p28250
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28251
sS'cpp_type'
p28252
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p28253
sS'default'
p28254
g3
sS'name'
p28255
S'block'
p28256
sS'required'
p28257
I00
sS'group_name'
p28258
Nsa(dp28259
S'name'
p28260
S'execute_on'
p28261
sS'cpp_type'
p28262
S'MooseEnum'
p28263
sS'default'
p28264
S'timestep'
p28265
sS'description'
p28266
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p28267
sS'required'
p28268
I00
sS'options'
p28269
S'initial residual jacobian timestep timestep_begin custom'
p28270
sS'group_name'
p28271
Nsa(dp28272
S'description'
p28273
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p28274
sS'cpp_type'
p28275
S'std::vector<OutputName, std::allocator<OutputName> >'
p28276
sS'default'
p28277
g3
sS'name'
p28278
S'outputs'
p28279
sS'required'
p28280
I00
sS'group_name'
p28281
S'Advanced'
p28282
sa(dp28283
S'description'
p28284
S'The seed for the master random number generator\n'
p28285
sS'cpp_type'
p28286
S'unsigned int'
p28287
sS'default'
p28288
S'0'
p28289
sS'name'
p28290
S'seed'
p28291
sS'required'
p28292
I00
sS'group_name'
p28293
S'Advanced'
p28294
sa(dp28295
S'description'
p28296
g3
sS'cpp_type'
p28297
S'std::string'
p28298
sS'default'
p28299
S'ElementL2Norm'
p28300
sS'name'
p28301
S'type'
p28302
sS'required'
p28303
I00
sS'group_name'
p28304
Nsa(dp28305
S'description'
p28306
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28307
sS'cpp_type'
p28308
S'bool'
p28309
sS'default'
p28310
S'0'
p28311
sS'name'
p28312
S'use_displaced_mesh'
p28313
sS'required'
p28314
I00
sS'group_name'
p28315
S'Advanced'
p28316
sa(dp28317
S'description'
p28318
S'The name of the variable that this object operates on\n'
p28319
sS'cpp_type'
p28320
S'VariableName'
p28321
sS'default'
p28322
g3
sS'name'
p28323
S'variable'
p28324
sS'required'
p28325
I01
sS'group_name'
p28326
NsasS'name'
p28327
S'/Postprocessors/ElementL2Norm'
p28328
sa(dp28329
S'description'
p28330
g3
sS'type'
p28331
NsS'subblocks'
p28332
NsS'parameters'
p28333
(lp28334
(dp28335
S'description'
p28336
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28337
sS'cpp_type'
p28338
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p28339
sS'default'
p28340
g3
sS'name'
p28341
S'block'
p28342
sS'required'
p28343
I00
sS'group_name'
p28344
Nsa(dp28345
S'name'
p28346
S'execute_on'
p28347
sS'cpp_type'
p28348
S'MooseEnum'
p28349
sS'default'
p28350
S'timestep'
p28351
sS'description'
p28352
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p28353
sS'required'
p28354
I00
sS'options'
p28355
S'initial residual jacobian timestep timestep_begin custom'
p28356
sS'group_name'
p28357
Nsa(dp28358
S'description'
p28359
S'The analytic solution to compare against\n'
p28360
sS'cpp_type'
p28361
S'FunctionName'
p28362
sS'default'
p28363
g3
sS'name'
p28364
S'function_x'
p28365
sS'required'
p28366
I01
sS'group_name'
p28367
Nsa(dp28368
S'description'
p28369
S'The analytic solution to compare against\n'
p28370
sS'cpp_type'
p28371
S'FunctionName'
p28372
sS'default'
p28373
S'0'
p28374
sS'name'
p28375
S'function_y'
p28376
sS'required'
p28377
I00
sS'group_name'
p28378
Nsa(dp28379
S'description'
p28380
S'The analytic solution to compare against\n'
p28381
sS'cpp_type'
p28382
S'FunctionName'
p28383
sS'default'
p28384
S'0'
p28385
sS'name'
p28386
S'function_z'
p28387
sS'required'
p28388
I00
sS'group_name'
p28389
Nsa(dp28390
S'description'
p28391
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p28392
sS'cpp_type'
p28393
S'std::vector<OutputName, std::allocator<OutputName> >'
p28394
sS'default'
p28395
g3
sS'name'
p28396
S'outputs'
p28397
sS'required'
p28398
I00
sS'group_name'
p28399
S'Advanced'
p28400
sa(dp28401
S'description'
p28402
S'The seed for the master random number generator\n'
p28403
sS'cpp_type'
p28404
S'unsigned int'
p28405
sS'default'
p28406
S'0'
p28407
sS'name'
p28408
S'seed'
p28409
sS'required'
p28410
I00
sS'group_name'
p28411
S'Advanced'
p28412
sa(dp28413
S'description'
p28414
g3
sS'cpp_type'
p28415
S'std::string'
p28416
sS'default'
p28417
S'ElementVectorL2Error'
p28418
sS'name'
p28419
S'type'
p28420
sS'required'
p28421
I00
sS'group_name'
p28422
Nsa(dp28423
S'description'
p28424
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28425
sS'cpp_type'
p28426
S'bool'
p28427
sS'default'
p28428
S'0'
p28429
sS'name'
p28430
S'use_displaced_mesh'
p28431
sS'required'
p28432
I00
sS'group_name'
p28433
S'Advanced'
p28434
sa(dp28435
S'description'
p28436
S'The FE solution in x direction\n'
p28437
sS'cpp_type'
p28438
S'std::vector<VariableName>'
p28439
sS'default'
p28440
g3
sS'name'
p28441
S'var_x'
p28442
sS'required'
p28443
I01
sS'group_name'
p28444
Nsa(dp28445
S'description'
p28446
S'The FE solution in y direction\n'
p28447
sS'cpp_type'
p28448
S'std::vector<VariableName>'
p28449
sS'default'
p28450
S'0'
p28451
sS'name'
p28452
S'var_y'
p28453
sS'required'
p28454
I00
sS'group_name'
p28455
Nsa(dp28456
S'description'
p28457
S'The FE solution in z direction\n'
p28458
sS'cpp_type'
p28459
S'std::vector<VariableName>'
p28460
sS'default'
p28461
S'0'
p28462
sS'name'
p28463
S'var_z'
p28464
sS'required'
p28465
I00
sS'group_name'
p28466
NsasS'name'
p28467
S'/Postprocessors/ElementVectorL2Error'
p28468
sa(dp28469
S'description'
p28470
g3
sS'type'
p28471
NsS'subblocks'
p28472
NsS'parameters'
p28473
(lp28474
(dp28475
S'description'
p28476
S'The ID of the element where we monitor\n'
p28477
sS'cpp_type'
p28478
S'unsigned int'
p28479
sS'default'
p28480
g3
sS'name'
p28481
S'elementid'
p28482
sS'required'
p28483
I01
sS'group_name'
p28484
Nsa(dp28485
S'name'
p28486
S'execute_on'
p28487
sS'cpp_type'
p28488
S'MooseEnum'
p28489
sS'default'
p28490
S'timestep'
p28491
sS'description'
p28492
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p28493
sS'required'
p28494
I00
sS'options'
p28495
S'initial residual jacobian timestep timestep_begin custom'
p28496
sS'group_name'
p28497
Nsa(dp28498
S'description'
p28499
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p28500
sS'cpp_type'
p28501
S'std::vector<OutputName, std::allocator<OutputName> >'
p28502
sS'default'
p28503
g3
sS'name'
p28504
S'outputs'
p28505
sS'required'
p28506
I00
sS'group_name'
p28507
S'Advanced'
p28508
sa(dp28509
S'description'
p28510
g3
sS'cpp_type'
p28511
S'std::string'
p28512
sS'default'
p28513
S'ElementalVariableValue'
p28514
sS'name'
p28515
S'type'
p28516
sS'required'
p28517
I00
sS'group_name'
p28518
Nsa(dp28519
S'description'
p28520
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28521
sS'cpp_type'
p28522
S'bool'
p28523
sS'default'
p28524
S'0'
p28525
sS'name'
p28526
S'use_displaced_mesh'
p28527
sS'required'
p28528
I00
sS'group_name'
p28529
S'Advanced'
p28530
sa(dp28531
S'description'
p28532
S'The variable to be monitored\n'
p28533
sS'cpp_type'
p28534
S'VariableName'
p28535
sS'default'
p28536
g3
sS'name'
p28537
S'variable'
p28538
sS'required'
p28539
I01
sS'group_name'
p28540
NsasS'name'
p28541
S'/Postprocessors/ElementalVariableValue'
p28542
sa(dp28543
S'description'
p28544
g3
sS'type'
p28545
NsS'subblocks'
p28546
NsS'parameters'
p28547
(lp28548
(dp28549
S'name'
p28550
S'execute_on'
p28551
sS'cpp_type'
p28552
S'MooseEnum'
p28553
sS'default'
p28554
S'timestep'
p28555
sS'description'
p28556
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p28557
sS'required'
p28558
I00
sS'options'
p28559
S'initial residual jacobian timestep timestep_begin custom'
p28560
sS'group_name'
p28561
Nsa(dp28562
S'description'
p28563
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p28564
sS'cpp_type'
p28565
S'std::vector<OutputName, std::allocator<OutputName> >'
p28566
sS'default'
p28567
g3
sS'name'
p28568
S'outputs'
p28569
sS'required'
p28570
I00
sS'group_name'
p28571
S'Advanced'
p28572
sa(dp28573
S'description'
p28574
g3
sS'cpp_type'
p28575
S'std::string'
p28576
sS'default'
p28577
S'EmptyPostprocessor'
p28578
sS'name'
p28579
S'type'
p28580
sS'required'
p28581
I00
sS'group_name'
p28582
Nsa(dp28583
S'description'
p28584
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28585
sS'cpp_type'
p28586
S'bool'
p28587
sS'default'
p28588
S'0'
p28589
sS'name'
p28590
S'use_displaced_mesh'
p28591
sS'required'
p28592
I00
sS'group_name'
p28593
S'Advanced'
p28594
sasS'name'
p28595
S'/Postprocessors/EmptyPostprocessor'
p28596
sa(dp28597
S'description'
p28598
g3
sS'type'
p28599
NsS'subblocks'
p28600
NsS'parameters'
p28601
(lp28602
(dp28603
S'description'
p28604
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28605
sS'cpp_type'
p28606
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p28607
sS'default'
p28608
g3
sS'name'
p28609
S'block'
p28610
sS'required'
p28611
I00
sS'group_name'
p28612
Nsa(dp28613
S'description'
p28614
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28615
sS'cpp_type'
p28616
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p28617
sS'default'
p28618
g3
sS'name'
p28619
S'boundary'
p28620
sS'required'
p28621
I00
sS'group_name'
p28622
Nsa(dp28623
S'name'
p28624
S'execute_on'
p28625
sS'cpp_type'
p28626
S'MooseEnum'
p28627
sS'default'
p28628
S'timestep'
p28629
sS'description'
p28630
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p28631
sS'required'
p28632
I00
sS'options'
p28633
S'initial residual jacobian timestep timestep_begin custom'
p28634
sS'group_name'
p28635
Nsa(dp28636
S'description'
p28637
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p28638
sS'cpp_type'
p28639
S'std::vector<OutputName, std::allocator<OutputName> >'
p28640
sS'default'
p28641
g3
sS'name'
p28642
S'outputs'
p28643
sS'required'
p28644
I00
sS'group_name'
p28645
S'Advanced'
p28646
sa(dp28647
S'description'
p28648
S'The seed for the master random number generator\n'
p28649
sS'cpp_type'
p28650
S'unsigned int'
p28651
sS'default'
p28652
S'0'
p28653
sS'name'
p28654
S'seed'
p28655
sS'required'
p28656
I00
sS'group_name'
p28657
S'Advanced'
p28658
sa(dp28659
S'description'
p28660
g3
sS'cpp_type'
p28661
S'std::string'
p28662
sS'default'
p28663
S'NodalExtremeValue'
p28664
sS'name'
p28665
S'type'
p28666
sS'required'
p28667
I00
sS'group_name'
p28668
Nsa(dp28669
S'description'
p28670
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28671
sS'cpp_type'
p28672
S'bool'
p28673
sS'default'
p28674
S'0'
p28675
sS'name'
p28676
S'use_displaced_mesh'
p28677
sS'required'
p28678
I00
sS'group_name'
p28679
S'Advanced'
p28680
sa(dp28681
S'name'
p28682
S'value_type'
p28683
sS'cpp_type'
p28684
S'MooseEnum'
p28685
sS'default'
p28686
S'max'
p28687
sS'description'
p28688
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p28689
sS'required'
p28690
I00
sS'options'
p28691
S'max min'
p28692
sS'group_name'
p28693
Nsa(dp28694
S'description'
p28695
S'The name of the variable that this postprocessor operates on\n'
p28696
sS'cpp_type'
p28697
S'VariableName'
p28698
sS'default'
p28699
g3
sS'name'
p28700
S'variable'
p28701
sS'required'
p28702
I01
sS'group_name'
p28703
NsasS'name'
p28704
S'/Postprocessors/NodalExtremeValue'
p28705
sa(dp28706
S'description'
p28707
g3
sS'type'
p28708
NsS'subblocks'
p28709
NsS'parameters'
p28710
(lp28711
(dp28712
S'description'
p28713
S'An optional file name where bubble volumes can be output.\n'
p28714
sS'cpp_type'
p28715
S'FileName'
p28716
sS'default'
p28717
g3
sS'name'
p28718
S'bubble_volume_file'
p28719
sS'required'
p28720
I00
sS'group_name'
p28721
Nsa(dp28722
S'description'
p28723
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p28724
sS'cpp_type'
p28725
S'bool'
p28726
sS'default'
p28727
S'0'
p28728
sS'name'
p28729
S'condense_map_info'
p28730
sS'required'
p28731
I00
sS'group_name'
p28732
Nsa(dp28733
S'description'
p28734
S'The threshold for which an existing bubble may be extended (defaults to "threshold")\n'
p28735
sS'cpp_type'
p28736
S'double'
p28737
sS'default'
p28738
g3
sS'name'
p28739
S'connecting_threshold'
p28740
sS'required'
p28741
I00
sS'group_name'
p28742
Nsa(dp28743
S'description'
p28744
S'If supplied, will be used to find the scaled threshold of the bubble edges\n'
p28745
sS'cpp_type'
p28746
S'PostprocessorName'
p28747
sS'default'
p28748
g3
sS'name'
p28749
S'elem_avg_value'
p28750
sS'required'
p28751
I00
sS'group_name'
p28752
Nsa(dp28753
S'description'
p28754
S'Instruct the UO to populate the variable index map.\n'
p28755
sS'cpp_type'
p28756
S'bool'
p28757
sS'default'
p28758
S'0'
p28759
sS'name'
p28760
S'enable_var_coloring'
p28761
sS'required'
p28762
I00
sS'group_name'
p28763
Nsa(dp28764
S'name'
p28765
S'execute_on'
p28766
sS'cpp_type'
p28767
S'MooseEnum'
p28768
sS'default'
p28769
S'timestep'
p28770
sS'description'
p28771
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p28772
sS'required'
p28773
I00
sS'options'
p28774
S'initial residual jacobian timestep timestep_begin custom'
p28775
sS'group_name'
p28776
Nsa(dp28777
S'description'
p28778
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p28779
sS'cpp_type'
p28780
S'std::vector<OutputName, std::allocator<OutputName> >'
p28781
sS'default'
p28782
g3
sS'name'
p28783
S'outputs'
p28784
sS'required'
p28785
I00
sS'group_name'
p28786
S'Advanced'
p28787
sa(dp28788
S'description'
p28789
S'The threshold value for which a new bubble may be started\n'
p28790
sS'cpp_type'
p28791
S'double'
p28792
sS'default'
p28793
S'0.5'
p28794
sS'name'
p28795
S'threshold'
p28796
sS'required'
p28797
I00
sS'group_name'
p28798
Nsa(dp28799
S'description'
p28800
S'Calculate memory usage\n'
p28801
sS'cpp_type'
p28802
S'bool'
p28803
sS'default'
p28804
S'0'
p28805
sS'name'
p28806
S'track_memory_usage'
p28807
sS'required'
p28808
I00
sS'group_name'
p28809
Nsa(dp28810
S'description'
p28811
g3
sS'cpp_type'
p28812
S'std::string'
p28813
sS'default'
p28814
S'NodalFloodCount'
p28815
sS'name'
p28816
S'type'
p28817
sS'required'
p28818
I00
sS'group_name'
p28819
Nsa(dp28820
S'description'
p28821
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28822
sS'cpp_type'
p28823
S'bool'
p28824
sS'default'
p28825
S'0'
p28826
sS'name'
p28827
S'use_displaced_mesh'
p28828
sS'required'
p28829
I00
sS'group_name'
p28830
S'Advanced'
p28831
sa(dp28832
S'description'
p28833
S'Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n'
p28834
sS'cpp_type'
p28835
S'bool'
p28836
sS'default'
p28837
S'0'
p28838
sS'name'
p28839
S'use_global_numbering'
p28840
sS'required'
p28841
I00
sS'group_name'
p28842
Nsa(dp28843
S'description'
p28844
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p28845
sS'cpp_type'
p28846
S'bool'
p28847
sS'default'
p28848
S'1'
p28849
sS'name'
p28850
S'use_single_map'
p28851
sS'required'
p28852
I00
sS'group_name'
p28853
Nsa(dp28854
S'description'
p28855
S'Ths variable(s) for which to find connected regions of interests, i.e. "bubbles".\n'
p28856
sS'cpp_type'
p28857
S'std::vector<VariableName>'
p28858
sS'default'
p28859
g3
sS'name'
p28860
S'variable'
p28861
sS'required'
p28862
I01
sS'group_name'
p28863
NsasS'name'
p28864
S'/Postprocessors/NodalFloodCount'
p28865
sa(dp28866
S'description'
p28867
g3
sS'type'
p28868
NsS'subblocks'
p28869
NsS'parameters'
p28870
(lp28871
(dp28872
S'description'
p28873
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28874
sS'cpp_type'
p28875
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p28876
sS'default'
p28877
g3
sS'name'
p28878
S'block'
p28879
sS'required'
p28880
I00
sS'group_name'
p28881
Nsa(dp28882
S'description'
p28883
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28884
sS'cpp_type'
p28885
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p28886
sS'default'
p28887
g3
sS'name'
p28888
S'boundary'
p28889
sS'required'
p28890
I00
sS'group_name'
p28891
Nsa(dp28892
S'name'
p28893
S'execute_on'
p28894
sS'cpp_type'
p28895
S'MooseEnum'
p28896
sS'default'
p28897
S'timestep'
p28898
sS'description'
p28899
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p28900
sS'required'
p28901
I00
sS'options'
p28902
S'initial residual jacobian timestep timestep_begin custom'
p28903
sS'group_name'
p28904
Nsa(dp28905
S'description'
p28906
S'The analytic solution to compare against\n'
p28907
sS'cpp_type'
p28908
S'FunctionName'
p28909
sS'default'
p28910
g3
sS'name'
p28911
S'function'
p28912
sS'required'
p28913
I01
sS'group_name'
p28914
Nsa(dp28915
S'description'
p28916
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p28917
sS'cpp_type'
p28918
S'std::vector<OutputName, std::allocator<OutputName> >'
p28919
sS'default'
p28920
g3
sS'name'
p28921
S'outputs'
p28922
sS'required'
p28923
I00
sS'group_name'
p28924
S'Advanced'
p28925
sa(dp28926
S'description'
p28927
S'The seed for the master random number generator\n'
p28928
sS'cpp_type'
p28929
S'unsigned int'
p28930
sS'default'
p28931
S'0'
p28932
sS'name'
p28933
S'seed'
p28934
sS'required'
p28935
I00
sS'group_name'
p28936
S'Advanced'
p28937
sa(dp28938
S'description'
p28939
g3
sS'cpp_type'
p28940
S'std::string'
p28941
sS'default'
p28942
S'NodalL2Error'
p28943
sS'name'
p28944
S'type'
p28945
sS'required'
p28946
I00
sS'group_name'
p28947
Nsa(dp28948
S'description'
p28949
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28950
sS'cpp_type'
p28951
S'bool'
p28952
sS'default'
p28953
S'0'
p28954
sS'name'
p28955
S'use_displaced_mesh'
p28956
sS'required'
p28957
I00
sS'group_name'
p28958
S'Advanced'
p28959
sa(dp28960
S'description'
p28961
S'The name of the variable that this postprocessor operates on\n'
p28962
sS'cpp_type'
p28963
S'VariableName'
p28964
sS'default'
p28965
g3
sS'name'
p28966
S'variable'
p28967
sS'required'
p28968
I01
sS'group_name'
p28969
NsasS'name'
p28970
S'/Postprocessors/NodalL2Error'
p28971
sa(dp28972
S'description'
p28973
g3
sS'type'
p28974
NsS'subblocks'
p28975
NsS'parameters'
p28976
(lp28977
(dp28978
S'description'
p28979
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28980
sS'cpp_type'
p28981
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p28982
sS'default'
p28983
g3
sS'name'
p28984
S'block'
p28985
sS'required'
p28986
I00
sS'group_name'
p28987
Nsa(dp28988
S'description'
p28989
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28990
sS'cpp_type'
p28991
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p28992
sS'default'
p28993
g3
sS'name'
p28994
S'boundary'
p28995
sS'required'
p28996
I00
sS'group_name'
p28997
Nsa(dp28998
S'name'
p28999
S'execute_on'
p29000
sS'cpp_type'
p29001
S'MooseEnum'
p29002
sS'default'
p29003
S'timestep'
p29004
sS'description'
p29005
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p29006
sS'required'
p29007
I00
sS'options'
p29008
S'initial residual jacobian timestep timestep_begin custom'
p29009
sS'group_name'
p29010
Nsa(dp29011
S'description'
p29012
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p29013
sS'cpp_type'
p29014
S'std::vector<OutputName, std::allocator<OutputName> >'
p29015
sS'default'
p29016
g3
sS'name'
p29017
S'outputs'
p29018
sS'required'
p29019
I00
sS'group_name'
p29020
S'Advanced'
p29021
sa(dp29022
S'description'
p29023
S'The seed for the master random number generator\n'
p29024
sS'cpp_type'
p29025
S'unsigned int'
p29026
sS'default'
p29027
S'0'
p29028
sS'name'
p29029
S'seed'
p29030
sS'required'
p29031
I00
sS'group_name'
p29032
S'Advanced'
p29033
sa(dp29034
S'description'
p29035
g3
sS'cpp_type'
p29036
S'std::string'
p29037
sS'default'
p29038
S'NodalL2Norm'
p29039
sS'name'
p29040
S'type'
p29041
sS'required'
p29042
I00
sS'group_name'
p29043
Nsa(dp29044
S'description'
p29045
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29046
sS'cpp_type'
p29047
S'bool'
p29048
sS'default'
p29049
S'0'
p29050
sS'name'
p29051
S'use_displaced_mesh'
p29052
sS'required'
p29053
I00
sS'group_name'
p29054
S'Advanced'
p29055
sa(dp29056
S'description'
p29057
S'The name of the variable that this postprocessor operates on\n'
p29058
sS'cpp_type'
p29059
S'VariableName'
p29060
sS'default'
p29061
g3
sS'name'
p29062
S'variable'
p29063
sS'required'
p29064
I01
sS'group_name'
p29065
NsasS'name'
p29066
S'/Postprocessors/NodalL2Norm'
p29067
sa(dp29068
S'description'
p29069
g3
sS'type'
p29070
NsS'subblocks'
p29071
NsS'parameters'
p29072
(lp29073
(dp29074
S'description'
p29075
S'The list of block ids (SubdomainID) that this object will be applied\n'
p29076
sS'cpp_type'
p29077
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p29078
sS'default'
p29079
g3
sS'name'
p29080
S'block'
p29081
sS'required'
p29082
I00
sS'group_name'
p29083
Nsa(dp29084
S'description'
p29085
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p29086
sS'cpp_type'
p29087
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p29088
sS'default'
p29089
g3
sS'name'
p29090
S'boundary'
p29091
sS'required'
p29092
I00
sS'group_name'
p29093
Nsa(dp29094
S'name'
p29095
S'execute_on'
p29096
sS'cpp_type'
p29097
S'MooseEnum'
p29098
sS'default'
p29099
S'timestep'
p29100
sS'description'
p29101
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p29102
sS'required'
p29103
I00
sS'options'
p29104
S'initial residual jacobian timestep timestep_begin custom'
p29105
sS'group_name'
p29106
Nsa(dp29107
S'description'
p29108
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p29109
sS'cpp_type'
p29110
S'std::vector<OutputName, std::allocator<OutputName> >'
p29111
sS'default'
p29112
g3
sS'name'
p29113
S'outputs'
p29114
sS'required'
p29115
I00
sS'group_name'
p29116
S'Advanced'
p29117
sa(dp29118
S'description'
p29119
S'The seed for the master random number generator\n'
p29120
sS'cpp_type'
p29121
S'unsigned int'
p29122
sS'default'
p29123
S'0'
p29124
sS'name'
p29125
S'seed'
p29126
sS'required'
p29127
I00
sS'group_name'
p29128
S'Advanced'
p29129
sa(dp29130
S'description'
p29131
g3
sS'cpp_type'
p29132
S'std::string'
p29133
sS'default'
p29134
S'NodalMaxValue'
p29135
sS'name'
p29136
S'type'
p29137
sS'required'
p29138
I00
sS'group_name'
p29139
Nsa(dp29140
S'description'
p29141
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29142
sS'cpp_type'
p29143
S'bool'
p29144
sS'default'
p29145
S'0'
p29146
sS'name'
p29147
S'use_displaced_mesh'
p29148
sS'required'
p29149
I00
sS'group_name'
p29150
S'Advanced'
p29151
sa(dp29152
S'description'
p29153
S'The name of the variable that this postprocessor operates on\n'
p29154
sS'cpp_type'
p29155
S'VariableName'
p29156
sS'default'
p29157
g3
sS'name'
p29158
S'variable'
p29159
sS'required'
p29160
I01
sS'group_name'
p29161
NsasS'name'
p29162
S'/Postprocessors/NodalMaxValue'
p29163
sa(dp29164
S'description'
p29165
g3
sS'type'
p29166
NsS'subblocks'
p29167
NsS'parameters'
p29168
(lp29169
(dp29170
S'description'
p29171
S'The list of block ids (SubdomainID) that this object will be applied\n'
p29172
sS'cpp_type'
p29173
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p29174
sS'default'
p29175
g3
sS'name'
p29176
S'block'
p29177
sS'required'
p29178
I00
sS'group_name'
p29179
Nsa(dp29180
S'description'
p29181
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p29182
sS'cpp_type'
p29183
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p29184
sS'default'
p29185
g3
sS'name'
p29186
S'boundary'
p29187
sS'required'
p29188
I00
sS'group_name'
p29189
Nsa(dp29190
S'name'
p29191
S'execute_on'
p29192
sS'cpp_type'
p29193
S'MooseEnum'
p29194
sS'default'
p29195
S'timestep'
p29196
sS'description'
p29197
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p29198
sS'required'
p29199
I00
sS'options'
p29200
S'initial residual jacobian timestep timestep_begin custom'
p29201
sS'group_name'
p29202
Nsa(dp29203
S'description'
p29204
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p29205
sS'cpp_type'
p29206
S'std::vector<OutputName, std::allocator<OutputName> >'
p29207
sS'default'
p29208
g3
sS'name'
p29209
S'outputs'
p29210
sS'required'
p29211
I00
sS'group_name'
p29212
S'Advanced'
p29213
sa(dp29214
S'description'
p29215
S'The seed for the master random number generator\n'
p29216
sS'cpp_type'
p29217
S'unsigned int'
p29218
sS'default'
p29219
S'0'
p29220
sS'name'
p29221
S'seed'
p29222
sS'required'
p29223
I00
sS'group_name'
p29224
S'Advanced'
p29225
sa(dp29226
S'description'
p29227
g3
sS'cpp_type'
p29228
S'std::string'
p29229
sS'default'
p29230
S'NodalProxyMaxValue'
p29231
sS'name'
p29232
S'type'
p29233
sS'required'
p29234
I00
sS'group_name'
p29235
Nsa(dp29236
S'description'
p29237
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29238
sS'cpp_type'
p29239
S'bool'
p29240
sS'default'
p29241
S'0'
p29242
sS'name'
p29243
S'use_displaced_mesh'
p29244
sS'required'
p29245
I00
sS'group_name'
p29246
S'Advanced'
p29247
sa(dp29248
S'description'
p29249
S'The name of the variable that this postprocessor operates on\n'
p29250
sS'cpp_type'
p29251
S'VariableName'
p29252
sS'default'
p29253
g3
sS'name'
p29254
S'variable'
p29255
sS'required'
p29256
I01
sS'group_name'
p29257
NsasS'name'
p29258
S'/Postprocessors/NodalProxyMaxValue'
p29259
sa(dp29260
S'description'
p29261
g3
sS'type'
p29262
NsS'subblocks'
p29263
NsS'parameters'
p29264
(lp29265
(dp29266
S'description'
p29267
S'The list of block ids (SubdomainID) that this object will be applied\n'
p29268
sS'cpp_type'
p29269
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p29270
sS'default'
p29271
g3
sS'name'
p29272
S'block'
p29273
sS'required'
p29274
I00
sS'group_name'
p29275
Nsa(dp29276
S'description'
p29277
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p29278
sS'cpp_type'
p29279
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p29280
sS'default'
p29281
g3
sS'name'
p29282
S'boundary'
p29283
sS'required'
p29284
I00
sS'group_name'
p29285
Nsa(dp29286
S'name'
p29287
S'execute_on'
p29288
sS'cpp_type'
p29289
S'MooseEnum'
p29290
sS'default'
p29291
S'timestep'
p29292
sS'description'
p29293
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p29294
sS'required'
p29295
I00
sS'options'
p29296
S'initial residual jacobian timestep timestep_begin custom'
p29297
sS'group_name'
p29298
Nsa(dp29299
S'description'
p29300
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p29301
sS'cpp_type'
p29302
S'std::vector<OutputName, std::allocator<OutputName> >'
p29303
sS'default'
p29304
g3
sS'name'
p29305
S'outputs'
p29306
sS'required'
p29307
I00
sS'group_name'
p29308
S'Advanced'
p29309
sa(dp29310
S'description'
p29311
S'The seed for the master random number generator\n'
p29312
sS'cpp_type'
p29313
S'unsigned int'
p29314
sS'default'
p29315
S'0'
p29316
sS'name'
p29317
S'seed'
p29318
sS'required'
p29319
I00
sS'group_name'
p29320
S'Advanced'
p29321
sa(dp29322
S'description'
p29323
g3
sS'cpp_type'
p29324
S'std::string'
p29325
sS'default'
p29326
S'NodalSum'
p29327
sS'name'
p29328
S'type'
p29329
sS'required'
p29330
I00
sS'group_name'
p29331
Nsa(dp29332
S'description'
p29333
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29334
sS'cpp_type'
p29335
S'bool'
p29336
sS'default'
p29337
S'0'
p29338
sS'name'
p29339
S'use_displaced_mesh'
p29340
sS'required'
p29341
I00
sS'group_name'
p29342
S'Advanced'
p29343
sa(dp29344
S'description'
p29345
S'The name of the variable that this postprocessor operates on\n'
p29346
sS'cpp_type'
p29347
S'VariableName'
p29348
sS'default'
p29349
g3
sS'name'
p29350
S'variable'
p29351
sS'required'
p29352
I01
sS'group_name'
p29353
NsasS'name'
p29354
S'/Postprocessors/NodalSum'
p29355
sa(dp29356
S'description'
p29357
g3
sS'type'
p29358
NsS'subblocks'
p29359
NsS'parameters'
p29360
(lp29361
(dp29362
S'name'
p29363
S'execute_on'
p29364
sS'cpp_type'
p29365
S'MooseEnum'
p29366
sS'default'
p29367
S'timestep'
p29368
sS'description'
p29369
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p29370
sS'required'
p29371
I00
sS'options'
p29372
S'initial residual jacobian timestep timestep_begin custom'
p29373
sS'group_name'
p29374
Nsa(dp29375
S'description'
p29376
S'The ID of the node where we monitor\n'
p29377
sS'cpp_type'
p29378
S'unsigned int'
p29379
sS'default'
p29380
g3
sS'name'
p29381
S'nodeid'
p29382
sS'required'
p29383
I01
sS'group_name'
p29384
Nsa(dp29385
S'description'
p29386
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p29387
sS'cpp_type'
p29388
S'std::vector<OutputName, std::allocator<OutputName> >'
p29389
sS'default'
p29390
g3
sS'name'
p29391
S'outputs'
p29392
sS'required'
p29393
I00
sS'group_name'
p29394
S'Advanced'
p29395
sa(dp29396
S'description'
p29397
g3
sS'cpp_type'
p29398
S'std::string'
p29399
sS'default'
p29400
S'NodalVariableValue'
p29401
sS'name'
p29402
S'type'
p29403
sS'required'
p29404
I00
sS'group_name'
p29405
Nsa(dp29406
S'description'
p29407
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29408
sS'cpp_type'
p29409
S'bool'
p29410
sS'default'
p29411
S'0'
p29412
sS'name'
p29413
S'use_displaced_mesh'
p29414
sS'required'
p29415
I00
sS'group_name'
p29416
S'Advanced'
p29417
sa(dp29418
S'description'
p29419
S'The variable to be monitored\n'
p29420
sS'cpp_type'
p29421
S'VariableName'
p29422
sS'default'
p29423
g3
sS'name'
p29424
S'variable'
p29425
sS'required'
p29426
I01
sS'group_name'
p29427
NsasS'name'
p29428
S'/Postprocessors/NodalVariableValue'
p29429
sa(dp29430
S'description'
p29431
g3
sS'type'
p29432
NsS'subblocks'
p29433
NsS'parameters'
p29434
(lp29435
(dp29436
S'description'
p29437
S'filename for Avrami analysis info (ln time and Avrami)\n'
p29438
sS'cpp_type'
p29439
S'FileName'
p29440
sS'default'
p29441
g3
sS'name'
p29442
S'Avrami_file'
p29443
sS'required'
p29444
I00
sS'group_name'
p29445
Nsa(dp29446
S'description'
p29447
S'An optional file name where bubble volumes can be output.\n'
p29448
sS'cpp_type'
p29449
S'FileName'
p29450
sS'default'
p29451
g3
sS'name'
p29452
S'bubble_volume_file'
p29453
sS'required'
p29454
I00
sS'group_name'
p29455
Nsa(dp29456
S'description'
p29457
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p29458
sS'cpp_type'
p29459
S'bool'
p29460
sS'default'
p29461
S'0'
p29462
sS'name'
p29463
S'condense_map_info'
p29464
sS'required'
p29465
I00
sS'group_name'
p29466
Nsa(dp29467
S'description'
p29468
S'The threshold for which an existing bubble may be extended (defaults to "threshold")\n'
p29469
sS'cpp_type'
p29470
S'double'
p29471
sS'default'
p29472
g3
sS'name'
p29473
S'connecting_threshold'
p29474
sS'required'
p29475
I00
sS'group_name'
p29476
Nsa(dp29477
S'description'
p29478
S'If supplied, will be used to find the scaled threshold of the bubble edges\n'
p29479
sS'cpp_type'
p29480
S'PostprocessorName'
p29481
sS'default'
p29482
g3
sS'name'
p29483
S'elem_avg_value'
p29484
sS'required'
p29485
I00
sS'group_name'
p29486
Nsa(dp29487
S'description'
p29488
S'Instruct the UO to populate the variable index map.\n'
p29489
sS'cpp_type'
p29490
S'bool'
p29491
sS'default'
p29492
S'0'
p29493
sS'name'
p29494
S'enable_var_coloring'
p29495
sS'required'
p29496
I00
sS'group_name'
p29497
Nsa(dp29498
S'description'
p29499
S'Equilibrium volume fraction of 2nd phase for Avrami analysis\n'
p29500
sS'cpp_type'
p29501
S'double'
p29502
sS'default'
p29503
S'-1'
p29504
sS'name'
p29505
S'equil_fraction'
p29506
sS'required'
p29507
I00
sS'group_name'
p29508
Nsa(dp29509
S'name'
p29510
S'execute_on'
p29511
sS'cpp_type'
p29512
S'MooseEnum'
p29513
sS'default'
p29514
S'timestep'
p29515
sS'description'
p29516
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p29517
sS'required'
p29518
I00
sS'options'
p29519
S'initial residual jacobian timestep timestep_begin custom'
p29520
sS'group_name'
p29521
Nsa(dp29522
S'description'
p29523
S'Postprocessor from which to get mesh volume\n'
p29524
sS'cpp_type'
p29525
S'PostprocessorName'
p29526
sS'default'
p29527
g3
sS'name'
p29528
S'mesh_volume'
p29529
sS'required'
p29530
I01
sS'group_name'
p29531
Nsa(dp29532
S'description'
p29533
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p29534
sS'cpp_type'
p29535
S'std::vector<OutputName, std::allocator<OutputName> >'
p29536
sS'default'
p29537
g3
sS'name'
p29538
S'outputs'
p29539
sS'required'
p29540
I00
sS'group_name'
p29541
S'Advanced'
p29542
sa(dp29543
S'description'
p29544
S'The threshold value for which a new bubble may be started\n'
p29545
sS'cpp_type'
p29546
S'double'
p29547
sS'default'
p29548
S'0.5'
p29549
sS'name'
p29550
S'threshold'
p29551
sS'required'
p29552
I00
sS'group_name'
p29553
Nsa(dp29554
S'description'
p29555
S'Calculate memory usage\n'
p29556
sS'cpp_type'
p29557
S'bool'
p29558
sS'default'
p29559
S'0'
p29560
sS'name'
p29561
S'track_memory_usage'
p29562
sS'required'
p29563
I00
sS'group_name'
p29564
Nsa(dp29565
S'description'
p29566
g3
sS'cpp_type'
p29567
S'std::string'
p29568
sS'default'
p29569
S'NodalVolumeFraction'
p29570
sS'name'
p29571
S'type'
p29572
sS'required'
p29573
I00
sS'group_name'
p29574
Nsa(dp29575
S'description'
p29576
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29577
sS'cpp_type'
p29578
S'bool'
p29579
sS'default'
p29580
S'0'
p29581
sS'name'
p29582
S'use_displaced_mesh'
p29583
sS'required'
p29584
I00
sS'group_name'
p29585
S'Advanced'
p29586
sa(dp29587
S'description'
p29588
S'Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n'
p29589
sS'cpp_type'
p29590
S'bool'
p29591
sS'default'
p29592
S'0'
p29593
sS'name'
p29594
S'use_global_numbering'
p29595
sS'required'
p29596
I00
sS'group_name'
p29597
Nsa(dp29598
S'description'
p29599
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p29600
sS'cpp_type'
p29601
S'bool'
p29602
sS'default'
p29603
S'1'
p29604
sS'name'
p29605
S'use_single_map'
p29606
sS'required'
p29607
I00
sS'group_name'
p29608
Nsa(dp29609
S'description'
p29610
S'Ths variable(s) for which to find connected regions of interests, i.e. "bubbles".\n'
p29611
sS'cpp_type'
p29612
S'std::vector<VariableName>'
p29613
sS'default'
p29614
g3
sS'name'
p29615
S'variable'
p29616
sS'required'
p29617
I01
sS'group_name'
p29618
NsasS'name'
p29619
S'/Postprocessors/NodalVolumeFraction'
p29620
sa(dp29621
S'description'
p29622
g3
sS'type'
p29623
NsS'subblocks'
p29624
NsS'parameters'
p29625
(lp29626
(dp29627
S'name'
p29628
S'execute_on'
p29629
sS'cpp_type'
p29630
S'MooseEnum'
p29631
sS'default'
p29632
S'timestep'
p29633
sS'description'
p29634
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p29635
sS'required'
p29636
I00
sS'options'
p29637
S'initial residual jacobian timestep timestep_begin custom'
p29638
sS'group_name'
p29639
Nsa(dp29640
S'description'
p29641
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p29642
sS'cpp_type'
p29643
S'std::vector<OutputName, std::allocator<OutputName> >'
p29644
sS'default'
p29645
g3
sS'name'
p29646
S'outputs'
p29647
sS'required'
p29648
I00
sS'group_name'
p29649
S'Advanced'
p29650
sa(dp29651
S'description'
p29652
g3
sS'cpp_type'
p29653
S'std::string'
p29654
sS'default'
p29655
S'NumDOFs'
p29656
sS'name'
p29657
S'type'
p29658
sS'required'
p29659
I00
sS'group_name'
p29660
Nsa(dp29661
S'description'
p29662
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29663
sS'cpp_type'
p29664
S'bool'
p29665
sS'default'
p29666
S'0'
p29667
sS'name'
p29668
S'use_displaced_mesh'
p29669
sS'required'
p29670
I00
sS'group_name'
p29671
S'Advanced'
p29672
sasS'name'
p29673
S'/Postprocessors/NumDOFs'
p29674
sa(dp29675
S'description'
p29676
g3
sS'type'
p29677
NsS'subblocks'
p29678
NsS'parameters'
p29679
(lp29680
(dp29681
S'name'
p29682
S'execute_on'
p29683
sS'cpp_type'
p29684
S'MooseEnum'
p29685
sS'default'
p29686
S'timestep'
p29687
sS'description'
p29688
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p29689
sS'required'
p29690
I00
sS'options'
p29691
S'initial residual jacobian timestep timestep_begin custom'
p29692
sS'group_name'
p29693
Nsa(dp29694
S'description'
p29695
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p29696
sS'cpp_type'
p29697
S'std::vector<OutputName, std::allocator<OutputName> >'
p29698
sS'default'
p29699
g3
sS'name'
p29700
S'outputs'
p29701
sS'required'
p29702
I00
sS'group_name'
p29703
S'Advanced'
p29704
sa(dp29705
S'description'
p29706
g3
sS'cpp_type'
p29707
S'std::string'
p29708
sS'default'
p29709
S'NumElems'
p29710
sS'name'
p29711
S'type'
p29712
sS'required'
p29713
I00
sS'group_name'
p29714
Nsa(dp29715
S'description'
p29716
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29717
sS'cpp_type'
p29718
S'bool'
p29719
sS'default'
p29720
S'0'
p29721
sS'name'
p29722
S'use_displaced_mesh'
p29723
sS'required'
p29724
I00
sS'group_name'
p29725
S'Advanced'
p29726
sasS'name'
p29727
S'/Postprocessors/NumElems'
p29728
sa(dp29729
S'description'
p29730
g3
sS'type'
p29731
NsS'subblocks'
p29732
NsS'parameters'
p29733
(lp29734
(dp29735
S'name'
p29736
S'execute_on'
p29737
sS'cpp_type'
p29738
S'MooseEnum'
p29739
sS'default'
p29740
S'timestep'
p29741
sS'description'
p29742
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p29743
sS'required'
p29744
I00
sS'options'
p29745
S'initial residual jacobian timestep timestep_begin custom'
p29746
sS'group_name'
p29747
Nsa(dp29748
S'description'
p29749
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p29750
sS'cpp_type'
p29751
S'std::vector<OutputName, std::allocator<OutputName> >'
p29752
sS'default'
p29753
g3
sS'name'
p29754
S'outputs'
p29755
sS'required'
p29756
I00
sS'group_name'
p29757
S'Advanced'
p29758
sa(dp29759
S'description'
p29760
g3
sS'cpp_type'
p29761
S'std::string'
p29762
sS'default'
p29763
S'NumLinearIterations'
p29764
sS'name'
p29765
S'type'
p29766
sS'required'
p29767
I00
sS'group_name'
p29768
Nsa(dp29769
S'description'
p29770
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29771
sS'cpp_type'
p29772
S'bool'
p29773
sS'default'
p29774
S'0'
p29775
sS'name'
p29776
S'use_displaced_mesh'
p29777
sS'required'
p29778
I00
sS'group_name'
p29779
S'Advanced'
p29780
sasS'name'
p29781
S'/Postprocessors/NumLinearIterations'
p29782
sa(dp29783
S'description'
p29784
g3
sS'type'
p29785
NsS'subblocks'
p29786
NsS'parameters'
p29787
(lp29788
(dp29789
S'name'
p29790
S'execute_on'
p29791
sS'cpp_type'
p29792
S'MooseEnum'
p29793
sS'default'
p29794
S'timestep'
p29795
sS'description'
p29796
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p29797
sS'required'
p29798
I00
sS'options'
p29799
S'initial residual jacobian timestep timestep_begin custom'
p29800
sS'group_name'
p29801
Nsa(dp29802
S'description'
p29803
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p29804
sS'cpp_type'
p29805
S'std::vector<OutputName, std::allocator<OutputName> >'
p29806
sS'default'
p29807
g3
sS'name'
p29808
S'outputs'
p29809
sS'required'
p29810
I00
sS'group_name'
p29811
S'Advanced'
p29812
sa(dp29813
S'description'
p29814
g3
sS'cpp_type'
p29815
S'std::string'
p29816
sS'default'
p29817
S'NumNodes'
p29818
sS'name'
p29819
S'type'
p29820
sS'required'
p29821
I00
sS'group_name'
p29822
Nsa(dp29823
S'description'
p29824
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29825
sS'cpp_type'
p29826
S'bool'
p29827
sS'default'
p29828
S'0'
p29829
sS'name'
p29830
S'use_displaced_mesh'
p29831
sS'required'
p29832
I00
sS'group_name'
p29833
S'Advanced'
p29834
sasS'name'
p29835
S'/Postprocessors/NumNodes'
p29836
sa(dp29837
S'description'
p29838
g3
sS'type'
p29839
NsS'subblocks'
p29840
NsS'parameters'
p29841
(lp29842
(dp29843
S'name'
p29844
S'execute_on'
p29845
sS'cpp_type'
p29846
S'MooseEnum'
p29847
sS'default'
p29848
S'timestep'
p29849
sS'description'
p29850
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p29851
sS'required'
p29852
I00
sS'options'
p29853
S'initial residual jacobian timestep timestep_begin custom'
p29854
sS'group_name'
p29855
Nsa(dp29856
S'description'
p29857
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p29858
sS'cpp_type'
p29859
S'std::vector<OutputName, std::allocator<OutputName> >'
p29860
sS'default'
p29861
g3
sS'name'
p29862
S'outputs'
p29863
sS'required'
p29864
I00
sS'group_name'
p29865
S'Advanced'
p29866
sa(dp29867
S'description'
p29868
g3
sS'cpp_type'
p29869
S'std::string'
p29870
sS'default'
p29871
S'NumNonlinearIterations'
p29872
sS'name'
p29873
S'type'
p29874
sS'required'
p29875
I00
sS'group_name'
p29876
Nsa(dp29877
S'description'
p29878
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29879
sS'cpp_type'
p29880
S'bool'
p29881
sS'default'
p29882
S'0'
p29883
sS'name'
p29884
S'use_displaced_mesh'
p29885
sS'required'
p29886
I00
sS'group_name'
p29887
S'Advanced'
p29888
sasS'name'
p29889
S'/Postprocessors/NumNonlinearIterations'
p29890
sa(dp29891
S'description'
p29892
g3
sS'type'
p29893
NsS'subblocks'
p29894
NsS'parameters'
p29895
(lp29896
(dp29897
S'name'
p29898
S'execute_on'
p29899
sS'cpp_type'
p29900
S'MooseEnum'
p29901
sS'default'
p29902
S'timestep'
p29903
sS'description'
p29904
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p29905
sS'required'
p29906
I00
sS'options'
p29907
S'initial residual jacobian timestep timestep_begin custom'
p29908
sS'group_name'
p29909
Nsa(dp29910
S'description'
p29911
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p29912
sS'cpp_type'
p29913
S'std::vector<OutputName, std::allocator<OutputName> >'
p29914
sS'default'
p29915
g3
sS'name'
p29916
S'outputs'
p29917
sS'required'
p29918
I00
sS'group_name'
p29919
S'Advanced'
p29920
sa(dp29921
S'description'
p29922
g3
sS'cpp_type'
p29923
S'std::string'
p29924
sS'default'
p29925
S'NumResidualEvaluations'
p29926
sS'name'
p29927
S'type'
p29928
sS'required'
p29929
I00
sS'group_name'
p29930
Nsa(dp29931
S'description'
p29932
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29933
sS'cpp_type'
p29934
S'bool'
p29935
sS'default'
p29936
S'0'
p29937
sS'name'
p29938
S'use_displaced_mesh'
p29939
sS'required'
p29940
I00
sS'group_name'
p29941
S'Advanced'
p29942
sasS'name'
p29943
S'/Postprocessors/NumResidualEvaluations'
p29944
sa(dp29945
S'description'
p29946
g3
sS'type'
p29947
NsS'subblocks'
p29948
NsS'parameters'
p29949
(lp29950
(dp29951
S'name'
p29952
S'execute_on'
p29953
sS'cpp_type'
p29954
S'MooseEnum'
p29955
sS'default'
p29956
S'timestep'
p29957
sS'description'
p29958
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p29959
sS'required'
p29960
I00
sS'options'
p29961
S'initial residual jacobian timestep timestep_begin custom'
p29962
sS'group_name'
p29963
Nsa(dp29964
S'description'
p29965
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p29966
sS'cpp_type'
p29967
S'std::vector<OutputName, std::allocator<OutputName> >'
p29968
sS'default'
p29969
g3
sS'name'
p29970
S'outputs'
p29971
sS'required'
p29972
I00
sS'group_name'
p29973
S'Advanced'
p29974
sa(dp29975
S'name'
p29976
S'system'
p29977
sS'cpp_type'
p29978
S'MooseEnum'
p29979
sS'default'
p29980
S'nonlinear'
p29981
sS'description'
p29982
S'The system for which you want to print the number of variables.\n'
p29983
sS'required'
p29984
I00
sS'options'
p29985
S'nonlinear auxiliary'
p29986
sS'group_name'
p29987
Nsa(dp29988
S'description'
p29989
g3
sS'cpp_type'
p29990
S'std::string'
p29991
sS'default'
p29992
S'NumVars'
p29993
sS'name'
p29994
S'type'
p29995
sS'required'
p29996
I00
sS'group_name'
p29997
Nsa(dp29998
S'description'
p29999
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30000
sS'cpp_type'
p30001
S'bool'
p30002
sS'default'
p30003
S'0'
p30004
sS'name'
p30005
S'use_displaced_mesh'
p30006
sS'required'
p30007
I00
sS'group_name'
p30008
S'Advanced'
p30009
sasS'name'
p30010
S'/Postprocessors/NumVars'
p30011
sa(dp30012
S'description'
p30013
g3
sS'type'
p30014
NsS'subblocks'
p30015
NsS'parameters'
p30016
(lp30017
(dp30018
S'name'
p30019
S'column'
p30020
sS'cpp_type'
p30021
S'MooseEnum'
p30022
sS'default'
p30023
g3
sS'description'
p30024
S'The column you want the value of.\n'
p30025
sS'required'
p30026
I01
sS'options'
p30027
S'n_calls total_time average_time total_time_with_sub average_time_with_sub percent_of_active_time percent_of_active_time_with_sub'
p30028
sS'group_name'
p30029
Nsa(dp30030
S'description'
p30031
S'The name of the event.\n'
p30032
sS'cpp_type'
p30033
S'std::string'
p30034
sS'default'
p30035
g3
sS'name'
p30036
S'event'
p30037
sS'required'
p30038
I01
sS'group_name'
p30039
Nsa(dp30040
S'name'
p30041
S'execute_on'
p30042
sS'cpp_type'
p30043
S'MooseEnum'
p30044
sS'default'
p30045
S'timestep'
p30046
sS'description'
p30047
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p30048
sS'required'
p30049
I00
sS'options'
p30050
S'initial residual jacobian timestep timestep_begin custom'
p30051
sS'group_name'
p30052
Nsa(dp30053
S'description'
p30054
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p30055
sS'cpp_type'
p30056
S'std::vector<OutputName, std::allocator<OutputName> >'
p30057
sS'default'
p30058
g3
sS'name'
p30059
S'outputs'
p30060
sS'required'
p30061
I00
sS'group_name'
p30062
S'Advanced'
p30063
sa(dp30064
S'description'
p30065
g3
sS'cpp_type'
p30066
S'std::string'
p30067
sS'default'
p30068
S'PerformanceData'
p30069
sS'name'
p30070
S'type'
p30071
sS'required'
p30072
I00
sS'group_name'
p30073
Nsa(dp30074
S'description'
p30075
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30076
sS'cpp_type'
p30077
S'bool'
p30078
sS'default'
p30079
S'0'
p30080
sS'name'
p30081
S'use_displaced_mesh'
p30082
sS'required'
p30083
I00
sS'group_name'
p30084
S'Advanced'
p30085
sasS'name'
p30086
S'/Postprocessors/PerformanceData'
p30087
sa(dp30088
S'description'
p30089
g3
sS'type'
p30090
NsS'subblocks'
p30091
NsS'parameters'
p30092
(lp30093
(dp30094
S'name'
p30095
S'execute_on'
p30096
sS'cpp_type'
p30097
S'MooseEnum'
p30098
sS'default'
p30099
S'timestep'
p30100
sS'description'
p30101
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p30102
sS'required'
p30103
I00
sS'options'
p30104
S'initial residual jacobian timestep timestep_begin custom'
p30105
sS'group_name'
p30106
Nsa(dp30107
S'description'
p30108
S'Name of the function to plot (i.e. sample)\n'
p30109
sS'cpp_type'
p30110
S'FunctionName'
p30111
sS'default'
p30112
g3
sS'name'
p30113
S'function'
p30114
sS'required'
p30115
I01
sS'group_name'
p30116
Nsa(dp30117
S'description'
p30118
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p30119
sS'cpp_type'
p30120
S'std::vector<OutputName, std::allocator<OutputName> >'
p30121
sS'default'
p30122
g3
sS'name'
p30123
S'outputs'
p30124
sS'required'
p30125
I00
sS'group_name'
p30126
S'Advanced'
p30127
sa(dp30128
S'description'
p30129
S'A point in space to be given to the function\n'
p30130
sS'cpp_type'
p30131
S'libMesh::Point'
p30132
sS'default'
p30133
g3
sS'name'
p30134
S'point'
p30135
sS'required'
p30136
I00
sS'group_name'
p30137
Nsa(dp30138
S'description'
p30139
S'A scale factor to be applied to the function\n'
p30140
sS'cpp_type'
p30141
S'double'
p30142
sS'default'
p30143
S'1'
p30144
sS'name'
p30145
S'scale_factor'
p30146
sS'required'
p30147
I00
sS'group_name'
p30148
Nsa(dp30149
S'description'
p30150
g3
sS'cpp_type'
p30151
S'std::string'
p30152
sS'default'
p30153
S'PlotFunction'
p30154
sS'name'
p30155
S'type'
p30156
sS'required'
p30157
I00
sS'group_name'
p30158
Nsa(dp30159
S'description'
p30160
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30161
sS'cpp_type'
p30162
S'bool'
p30163
sS'default'
p30164
S'0'
p30165
sS'name'
p30166
S'use_displaced_mesh'
p30167
sS'required'
p30168
I00
sS'group_name'
p30169
S'Advanced'
p30170
sasS'name'
p30171
S'/Postprocessors/PlotFunction'
p30172
sa(dp30173
S'description'
p30174
g3
sS'type'
p30175
NsS'subblocks'
p30176
NsS'parameters'
p30177
(lp30178
(dp30179
S'name'
p30180
S'execute_on'
p30181
sS'cpp_type'
p30182
S'MooseEnum'
p30183
sS'default'
p30184
S'timestep'
p30185
sS'description'
p30186
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p30187
sS'required'
p30188
I00
sS'options'
p30189
S'initial residual jacobian timestep timestep_begin custom'
p30190
sS'group_name'
p30191
Nsa(dp30192
S'description'
p30193
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p30194
sS'cpp_type'
p30195
S'std::vector<OutputName, std::allocator<OutputName> >'
p30196
sS'default'
p30197
g3
sS'name'
p30198
S'outputs'
p30199
sS'required'
p30200
I00
sS'group_name'
p30201
S'Advanced'
p30202
sa(dp30203
S'description'
p30204
S'The physical point where the solution will be evaluated.\n'
p30205
sS'cpp_type'
p30206
S'libMesh::Point'
p30207
sS'default'
p30208
g3
sS'name'
p30209
S'point'
p30210
sS'required'
p30211
I01
sS'group_name'
p30212
Nsa(dp30213
S'description'
p30214
g3
sS'cpp_type'
p30215
S'std::string'
p30216
sS'default'
p30217
S'PointValue'
p30218
sS'name'
p30219
S'type'
p30220
sS'required'
p30221
I00
sS'group_name'
p30222
Nsa(dp30223
S'description'
p30224
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30225
sS'cpp_type'
p30226
S'bool'
p30227
sS'default'
p30228
S'0'
p30229
sS'name'
p30230
S'use_displaced_mesh'
p30231
sS'required'
p30232
I00
sS'group_name'
p30233
S'Advanced'
p30234
sa(dp30235
S'description'
p30236
S'The name of the variable that this postprocessor operates on.\n'
p30237
sS'cpp_type'
p30238
S'VariableName'
p30239
sS'default'
p30240
g3
sS'name'
p30241
S'variable'
p30242
sS'required'
p30243
I01
sS'group_name'
p30244
NsasS'name'
p30245
S'/Postprocessors/PointValue'
p30246
sa(dp30247
S'description'
p30248
g3
sS'type'
p30249
NsS'subblocks'
p30250
NsS'parameters'
p30251
(lp30252
(dp30253
S'name'
p30254
S'execute_on'
p30255
sS'cpp_type'
p30256
S'MooseEnum'
p30257
sS'default'
p30258
S'timestep'
p30259
sS'description'
p30260
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p30261
sS'required'
p30262
I00
sS'options'
p30263
S'initial residual jacobian timestep timestep_begin custom'
p30264
sS'group_name'
p30265
Nsa(dp30266
S'description'
p30267
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p30268
sS'cpp_type'
p30269
S'std::vector<OutputName, std::allocator<OutputName> >'
p30270
sS'default'
p30271
g3
sS'name'
p30272
S'outputs'
p30273
sS'required'
p30274
I00
sS'group_name'
p30275
S'Advanced'
p30276
sa(dp30277
S'description'
p30278
S'Name of the parameter to be exposed\n'
p30279
sS'cpp_type'
p30280
S'std::string'
p30281
sS'default'
p30282
g3
sS'name'
p30283
S'param_name'
p30284
sS'required'
p30285
I01
sS'group_name'
p30286
Nsa(dp30287
S'description'
p30288
g3
sS'cpp_type'
p30289
S'std::string'
p30290
sS'default'
p30291
S'ProblemRealParameter'
p30292
sS'name'
p30293
S'type'
p30294
sS'required'
p30295
I00
sS'group_name'
p30296
Nsa(dp30297
S'description'
p30298
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30299
sS'cpp_type'
p30300
S'bool'
p30301
sS'default'
p30302
S'0'
p30303
sS'name'
p30304
S'use_displaced_mesh'
p30305
sS'required'
p30306
I00
sS'group_name'
p30307
S'Advanced'
p30308
sasS'name'
p30309
S'/Postprocessors/ProblemRealParameter'
p30310
sa(dp30311
S'description'
p30312
g3
sS'type'
p30313
NsS'subblocks'
p30314
NsS'parameters'
p30315
(lp30316
(dp30317
S'description'
p30318
S'The default value\n'
p30319
sS'cpp_type'
p30320
S'double'
p30321
sS'default'
p30322
g3
sS'name'
p30323
S'default'
p30324
sS'required'
p30325
I00
sS'group_name'
p30326
Nsa(dp30327
S'name'
p30328
S'execute_on'
p30329
sS'cpp_type'
p30330
S'MooseEnum'
p30331
sS'default'
p30332
S'timestep'
p30333
sS'description'
p30334
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p30335
sS'required'
p30336
I00
sS'options'
p30337
S'initial residual jacobian timestep timestep_begin custom'
p30338
sS'group_name'
p30339
Nsa(dp30340
S'description'
p30341
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p30342
sS'cpp_type'
p30343
S'std::vector<OutputName, std::allocator<OutputName> >'
p30344
sS'default'
p30345
g3
sS'name'
p30346
S'outputs'
p30347
sS'required'
p30348
I00
sS'group_name'
p30349
S'Advanced'
p30350
sa(dp30351
S'description'
p30352
g3
sS'cpp_type'
p30353
S'std::string'
p30354
sS'default'
p30355
S'Receiver'
p30356
sS'name'
p30357
S'type'
p30358
sS'required'
p30359
I00
sS'group_name'
p30360
Nsa(dp30361
S'description'
p30362
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30363
sS'cpp_type'
p30364
S'bool'
p30365
sS'default'
p30366
S'0'
p30367
sS'name'
p30368
S'use_displaced_mesh'
p30369
sS'required'
p30370
I00
sS'group_name'
p30371
S'Advanced'
p30372
sasS'name'
p30373
S'/Postprocessors/Receiver'
p30374
sa(dp30375
S'description'
p30376
g3
sS'type'
p30377
NsS'subblocks'
p30378
NsS'parameters'
p30379
(lp30380
(dp30381
S'name'
p30382
S'execute_on'
p30383
sS'cpp_type'
p30384
S'MooseEnum'
p30385
sS'default'
p30386
S'timestep'
p30387
sS'description'
p30388
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p30389
sS'required'
p30390
I00
sS'options'
p30391
S'initial residual jacobian timestep timestep_begin custom'
p30392
sS'group_name'
p30393
Nsa(dp30394
S'description'
p30395
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p30396
sS'cpp_type'
p30397
S'std::vector<OutputName, std::allocator<OutputName> >'
p30398
sS'default'
p30399
g3
sS'name'
p30400
S'outputs'
p30401
sS'required'
p30402
I00
sS'group_name'
p30403
S'Advanced'
p30404
sa(dp30405
S'description'
p30406
g3
sS'cpp_type'
p30407
S'std::string'
p30408
sS'default'
p30409
S'Residual'
p30410
sS'name'
p30411
S'type'
p30412
sS'required'
p30413
I00
sS'group_name'
p30414
Nsa(dp30415
S'description'
p30416
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30417
sS'cpp_type'
p30418
S'bool'
p30419
sS'default'
p30420
S'0'
p30421
sS'name'
p30422
S'use_displaced_mesh'
p30423
sS'required'
p30424
I00
sS'group_name'
p30425
S'Advanced'
p30426
sasS'name'
p30427
S'/Postprocessors/Residual'
p30428
sa(dp30429
S'description'
p30430
g3
sS'type'
p30431
NsS'subblocks'
p30432
NsS'parameters'
p30433
(lp30434
(dp30435
S'name'
p30436
S'execute_on'
p30437
sS'cpp_type'
p30438
S'MooseEnum'
p30439
sS'default'
p30440
S'timestep'
p30441
sS'description'
p30442
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p30443
sS'required'
p30444
I00
sS'options'
p30445
S'initial residual jacobian timestep timestep_begin custom'
p30446
sS'group_name'
p30447
Nsa(dp30448
S'description'
p30449
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p30450
sS'cpp_type'
p30451
S'std::vector<OutputName, std::allocator<OutputName> >'
p30452
sS'default'
p30453
g3
sS'name'
p30454
S'outputs'
p30455
sS'required'
p30456
I00
sS'group_name'
p30457
S'Advanced'
p30458
sa(dp30459
S'name'
p30460
S'time_type'
p30461
sS'cpp_type'
p30462
S'MooseEnum'
p30463
sS'default'
p30464
g3
sS'description'
p30465
S'Whether to output the total elapsed or just the active time\n'
p30466
sS'required'
p30467
I01
sS'options'
p30468
S'alive active'
p30469
sS'group_name'
p30470
Nsa(dp30471
S'description'
p30472
g3
sS'cpp_type'
p30473
S'std::string'
p30474
sS'default'
p30475
S'RunTime'
p30476
sS'name'
p30477
S'type'
p30478
sS'required'
p30479
I00
sS'group_name'
p30480
Nsa(dp30481
S'description'
p30482
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30483
sS'cpp_type'
p30484
S'bool'
p30485
sS'default'
p30486
S'0'
p30487
sS'name'
p30488
S'use_displaced_mesh'
p30489
sS'required'
p30490
I00
sS'group_name'
p30491
S'Advanced'
p30492
sasS'name'
p30493
S'/Postprocessors/RunTime'
p30494
sa(dp30495
S'description'
p30496
g3
sS'type'
p30497
NsS'subblocks'
p30498
NsS'parameters'
p30499
(lp30500
(dp30501
S'name'
p30502
S'execute_on'
p30503
sS'cpp_type'
p30504
S'MooseEnum'
p30505
sS'default'
p30506
S'timestep'
p30507
sS'description'
p30508
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p30509
sS'required'
p30510
I00
sS'options'
p30511
S'initial residual jacobian timestep timestep_begin custom'
p30512
sS'group_name'
p30513
Nsa(dp30514
S'description'
p30515
S'The analytic solution to compare against\n'
p30516
sS'cpp_type'
p30517
S'FunctionName'
p30518
sS'default'
p30519
g3
sS'name'
p30520
S'function'
p30521
sS'required'
p30522
I01
sS'group_name'
p30523
Nsa(dp30524
S'description'
p30525
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p30526
sS'cpp_type'
p30527
S'std::vector<OutputName, std::allocator<OutputName> >'
p30528
sS'default'
p30529
g3
sS'name'
p30530
S'outputs'
p30531
sS'required'
p30532
I00
sS'group_name'
p30533
S'Advanced'
p30534
sa(dp30535
S'description'
p30536
g3
sS'cpp_type'
p30537
S'std::string'
p30538
sS'default'
p30539
S'ScalarL2Error'
p30540
sS'name'
p30541
S'type'
p30542
sS'required'
p30543
I00
sS'group_name'
p30544
Nsa(dp30545
S'description'
p30546
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30547
sS'cpp_type'
p30548
S'bool'
p30549
sS'default'
p30550
S'0'
p30551
sS'name'
p30552
S'use_displaced_mesh'
p30553
sS'required'
p30554
I00
sS'group_name'
p30555
S'Advanced'
p30556
sa(dp30557
S'description'
p30558
S'The name of the scalar variable\n'
p30559
sS'cpp_type'
p30560
S'VariableName'
p30561
sS'default'
p30562
g3
sS'name'
p30563
S'variable'
p30564
sS'required'
p30565
I01
sS'group_name'
p30566
NsasS'name'
p30567
S'/Postprocessors/ScalarL2Error'
p30568
sa(dp30569
S'description'
p30570
g3
sS'type'
p30571
NsS'subblocks'
p30572
NsS'parameters'
p30573
(lp30574
(dp30575
S'description'
p30576
S'Component to output for this variable\n'
p30577
sS'cpp_type'
p30578
S'unsigned int'
p30579
sS'default'
p30580
S'0'
p30581
sS'name'
p30582
S'component'
p30583
sS'required'
p30584
I00
sS'group_name'
p30585
Nsa(dp30586
S'name'
p30587
S'execute_on'
p30588
sS'cpp_type'
p30589
S'MooseEnum'
p30590
sS'default'
p30591
S'timestep'
p30592
sS'description'
p30593
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p30594
sS'required'
p30595
I00
sS'options'
p30596
S'initial residual jacobian timestep timestep_begin custom'
p30597
sS'group_name'
p30598
Nsa(dp30599
S'description'
p30600
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p30601
sS'cpp_type'
p30602
S'std::vector<OutputName, std::allocator<OutputName> >'
p30603
sS'default'
p30604
g3
sS'name'
p30605
S'outputs'
p30606
sS'required'
p30607
I00
sS'group_name'
p30608
S'Advanced'
p30609
sa(dp30610
S'description'
p30611
g3
sS'cpp_type'
p30612
S'std::string'
p30613
sS'default'
p30614
S'ScalarVariable'
p30615
sS'name'
p30616
S'type'
p30617
sS'required'
p30618
I00
sS'group_name'
p30619
Nsa(dp30620
S'description'
p30621
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30622
sS'cpp_type'
p30623
S'bool'
p30624
sS'default'
p30625
S'0'
p30626
sS'name'
p30627
S'use_displaced_mesh'
p30628
sS'required'
p30629
I00
sS'group_name'
p30630
S'Advanced'
p30631
sa(dp30632
S'description'
p30633
S'Name of the variable\n'
p30634
sS'cpp_type'
p30635
S'VariableName'
p30636
sS'default'
p30637
g3
sS'name'
p30638
S'variable'
p30639
sS'required'
p30640
I01
sS'group_name'
p30641
NsasS'name'
p30642
S'/Postprocessors/ScalarVariable'
p30643
sa(dp30644
S'description'
p30645
g3
sS'type'
p30646
NsS'subblocks'
p30647
NsS'parameters'
p30648
(lp30649
(dp30650
S'description'
p30651
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p30652
sS'cpp_type'
p30653
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p30654
sS'default'
p30655
g3
sS'name'
p30656
S'boundary'
p30657
sS'required'
p30658
I00
sS'group_name'
p30659
Nsa(dp30660
S'name'
p30661
S'execute_on'
p30662
sS'cpp_type'
p30663
S'MooseEnum'
p30664
sS'default'
p30665
S'timestep'
p30666
sS'description'
p30667
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p30668
sS'required'
p30669
I00
sS'options'
p30670
S'initial residual jacobian timestep timestep_begin custom'
p30671
sS'group_name'
p30672
Nsa(dp30673
S'description'
p30674
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p30675
sS'cpp_type'
p30676
S'std::vector<OutputName, std::allocator<OutputName> >'
p30677
sS'default'
p30678
g3
sS'name'
p30679
S'outputs'
p30680
sS'required'
p30681
I00
sS'group_name'
p30682
S'Advanced'
p30683
sa(dp30684
S'description'
p30685
g3
sS'cpp_type'
p30686
S'std::string'
p30687
sS'default'
p30688
S'SideAverageValue'
p30689
sS'name'
p30690
S'type'
p30691
sS'required'
p30692
I00
sS'group_name'
p30693
Nsa(dp30694
S'description'
p30695
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30696
sS'cpp_type'
p30697
S'bool'
p30698
sS'default'
p30699
S'0'
p30700
sS'name'
p30701
S'use_displaced_mesh'
p30702
sS'required'
p30703
I00
sS'group_name'
p30704
S'Advanced'
p30705
sa(dp30706
S'description'
p30707
S'The name of the variable that this boundary condition applies to\n'
p30708
sS'cpp_type'
p30709
S'VariableName'
p30710
sS'default'
p30711
g3
sS'name'
p30712
S'variable'
p30713
sS'required'
p30714
I01
sS'group_name'
p30715
NsasS'name'
p30716
S'/Postprocessors/SideAverageValue'
p30717
sa(dp30718
S'description'
p30719
g3
sS'type'
p30720
NsS'subblocks'
p30721
NsS'parameters'
p30722
(lp30723
(dp30724
S'description'
p30725
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p30726
sS'cpp_type'
p30727
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p30728
sS'default'
p30729
g3
sS'name'
p30730
S'boundary'
p30731
sS'required'
p30732
I00
sS'group_name'
p30733
Nsa(dp30734
S'description'
p30735
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p30736
sS'cpp_type'
p30737
S'std::string'
p30738
sS'default'
p30739
g3
sS'name'
p30740
S'diffusivity'
p30741
sS'required'
p30742
I01
sS'group_name'
p30743
Nsa(dp30744
S'name'
p30745
S'execute_on'
p30746
sS'cpp_type'
p30747
S'MooseEnum'
p30748
sS'default'
p30749
S'timestep'
p30750
sS'description'
p30751
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p30752
sS'required'
p30753
I00
sS'options'
p30754
S'initial residual jacobian timestep timestep_begin custom'
p30755
sS'group_name'
p30756
Nsa(dp30757
S'description'
p30758
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p30759
sS'cpp_type'
p30760
S'std::vector<OutputName, std::allocator<OutputName> >'
p30761
sS'default'
p30762
g3
sS'name'
p30763
S'outputs'
p30764
sS'required'
p30765
I00
sS'group_name'
p30766
S'Advanced'
p30767
sa(dp30768
S'description'
p30769
g3
sS'cpp_type'
p30770
S'std::string'
p30771
sS'default'
p30772
S'SideFluxAverage'
p30773
sS'name'
p30774
S'type'
p30775
sS'required'
p30776
I00
sS'group_name'
p30777
Nsa(dp30778
S'description'
p30779
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30780
sS'cpp_type'
p30781
S'bool'
p30782
sS'default'
p30783
S'0'
p30784
sS'name'
p30785
S'use_displaced_mesh'
p30786
sS'required'
p30787
I00
sS'group_name'
p30788
S'Advanced'
p30789
sa(dp30790
S'description'
p30791
S'The name of the variable that this boundary condition applies to\n'
p30792
sS'cpp_type'
p30793
S'VariableName'
p30794
sS'default'
p30795
g3
sS'name'
p30796
S'variable'
p30797
sS'required'
p30798
I01
sS'group_name'
p30799
NsasS'name'
p30800
S'/Postprocessors/SideFluxAverage'
p30801
sa(dp30802
S'description'
p30803
g3
sS'type'
p30804
NsS'subblocks'
p30805
NsS'parameters'
p30806
(lp30807
(dp30808
S'description'
p30809
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p30810
sS'cpp_type'
p30811
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p30812
sS'default'
p30813
g3
sS'name'
p30814
S'boundary'
p30815
sS'required'
p30816
I00
sS'group_name'
p30817
Nsa(dp30818
S'description'
p30819
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p30820
sS'cpp_type'
p30821
S'std::string'
p30822
sS'default'
p30823
g3
sS'name'
p30824
S'diffusivity'
p30825
sS'required'
p30826
I01
sS'group_name'
p30827
Nsa(dp30828
S'name'
p30829
S'execute_on'
p30830
sS'cpp_type'
p30831
S'MooseEnum'
p30832
sS'default'
p30833
S'timestep'
p30834
sS'description'
p30835
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p30836
sS'required'
p30837
I00
sS'options'
p30838
S'initial residual jacobian timestep timestep_begin custom'
p30839
sS'group_name'
p30840
Nsa(dp30841
S'description'
p30842
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p30843
sS'cpp_type'
p30844
S'std::vector<OutputName, std::allocator<OutputName> >'
p30845
sS'default'
p30846
g3
sS'name'
p30847
S'outputs'
p30848
sS'required'
p30849
I00
sS'group_name'
p30850
S'Advanced'
p30851
sa(dp30852
S'description'
p30853
g3
sS'cpp_type'
p30854
S'std::string'
p30855
sS'default'
p30856
S'SideFluxIntegral'
p30857
sS'name'
p30858
S'type'
p30859
sS'required'
p30860
I00
sS'group_name'
p30861
Nsa(dp30862
S'description'
p30863
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30864
sS'cpp_type'
p30865
S'bool'
p30866
sS'default'
p30867
S'0'
p30868
sS'name'
p30869
S'use_displaced_mesh'
p30870
sS'required'
p30871
I00
sS'group_name'
p30872
S'Advanced'
p30873
sa(dp30874
S'description'
p30875
S'The name of the variable that this boundary condition applies to\n'
p30876
sS'cpp_type'
p30877
S'VariableName'
p30878
sS'default'
p30879
g3
sS'name'
p30880
S'variable'
p30881
sS'required'
p30882
I01
sS'group_name'
p30883
NsasS'name'
p30884
S'/Postprocessors/SideFluxIntegral'
p30885
sa(dp30886
S'description'
p30887
g3
sS'type'
p30888
NsS'subblocks'
p30889
NsS'parameters'
p30890
(lp30891
(dp30892
S'description'
p30893
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p30894
sS'cpp_type'
p30895
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p30896
sS'default'
p30897
g3
sS'name'
p30898
S'boundary'
p30899
sS'required'
p30900
I00
sS'group_name'
p30901
Nsa(dp30902
S'name'
p30903
S'execute_on'
p30904
sS'cpp_type'
p30905
S'MooseEnum'
p30906
sS'default'
p30907
S'timestep'
p30908
sS'description'
p30909
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p30910
sS'required'
p30911
I00
sS'options'
p30912
S'initial residual jacobian timestep timestep_begin custom'
p30913
sS'group_name'
p30914
Nsa(dp30915
S'description'
p30916
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p30917
sS'cpp_type'
p30918
S'std::vector<OutputName, std::allocator<OutputName> >'
p30919
sS'default'
p30920
g3
sS'name'
p30921
S'outputs'
p30922
sS'required'
p30923
I00
sS'group_name'
p30924
S'Advanced'
p30925
sa(dp30926
S'description'
p30927
g3
sS'cpp_type'
p30928
S'std::string'
p30929
sS'default'
p30930
S'SideIntegralVariablePostprocessor'
p30931
sS'name'
p30932
S'type'
p30933
sS'required'
p30934
I00
sS'group_name'
p30935
Nsa(dp30936
S'description'
p30937
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30938
sS'cpp_type'
p30939
S'bool'
p30940
sS'default'
p30941
S'0'
p30942
sS'name'
p30943
S'use_displaced_mesh'
p30944
sS'required'
p30945
I00
sS'group_name'
p30946
S'Advanced'
p30947
sa(dp30948
S'description'
p30949
S'The name of the variable that this boundary condition applies to\n'
p30950
sS'cpp_type'
p30951
S'VariableName'
p30952
sS'default'
p30953
g3
sS'name'
p30954
S'variable'
p30955
sS'required'
p30956
I01
sS'group_name'
p30957
NsasS'name'
p30958
S'/Postprocessors/SideIntegralVariablePostprocessor'
p30959
sa(dp30960
S'description'
p30961
g3
sS'type'
p30962
NsS'subblocks'
p30963
NsS'parameters'
p30964
(lp30965
(dp30966
S'name'
p30967
S'execute_on'
p30968
sS'cpp_type'
p30969
S'MooseEnum'
p30970
sS'default'
p30971
S'timestep'
p30972
sS'description'
p30973
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p30974
sS'required'
p30975
I00
sS'options'
p30976
S'initial residual jacobian timestep timestep_begin custom'
p30977
sS'group_name'
p30978
Nsa(dp30979
S'description'
p30980
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p30981
sS'cpp_type'
p30982
S'std::vector<OutputName, std::allocator<OutputName> >'
p30983
sS'default'
p30984
g3
sS'name'
p30985
S'outputs'
p30986
sS'required'
p30987
I00
sS'group_name'
p30988
S'Advanced'
p30989
sa(dp30990
S'description'
p30991
g3
sS'cpp_type'
p30992
S'std::string'
p30993
sS'default'
p30994
S'TimestepSize'
p30995
sS'name'
p30996
S'type'
p30997
sS'required'
p30998
I00
sS'group_name'
p30999
Nsa(dp31000
S'description'
p31001
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31002
sS'cpp_type'
p31003
S'bool'
p31004
sS'default'
p31005
S'0'
p31006
sS'name'
p31007
S'use_displaced_mesh'
p31008
sS'required'
p31009
I00
sS'group_name'
p31010
S'Advanced'
p31011
sasS'name'
p31012
S'/Postprocessors/TimestepSize'
p31013
sa(dp31014
S'description'
p31015
g3
sS'type'
p31016
NsS'subblocks'
p31017
NsS'parameters'
p31018
(lp31019
(dp31020
S'name'
p31021
S'execute_on'
p31022
sS'cpp_type'
p31023
S'MooseEnum'
p31024
sS'default'
p31025
S'timestep'
p31026
sS'description'
p31027
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p31028
sS'required'
p31029
I00
sS'options'
p31030
S'initial residual jacobian timestep timestep_begin custom'
p31031
sS'group_name'
p31032
Nsa(dp31033
S'description'
p31034
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p31035
sS'cpp_type'
p31036
S'std::vector<OutputName, std::allocator<OutputName> >'
p31037
sS'default'
p31038
g3
sS'name'
p31039
S'outputs'
p31040
sS'required'
p31041
I00
sS'group_name'
p31042
S'Advanced'
p31043
sa(dp31044
S'description'
p31045
g3
sS'cpp_type'
p31046
S'std::string'
p31047
sS'default'
p31048
S'TotalVariableValue'
p31049
sS'name'
p31050
S'type'
p31051
sS'required'
p31052
I00
sS'group_name'
p31053
Nsa(dp31054
S'description'
p31055
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31056
sS'cpp_type'
p31057
S'bool'
p31058
sS'default'
p31059
S'0'
p31060
sS'name'
p31061
S'use_displaced_mesh'
p31062
sS'required'
p31063
I00
sS'group_name'
p31064
S'Advanced'
p31065
sa(dp31066
S'description'
p31067
S'The name of the postprocessor\n'
p31068
sS'cpp_type'
p31069
S'PostprocessorName'
p31070
sS'default'
p31071
g3
sS'name'
p31072
S'value'
p31073
sS'required'
p31074
I00
sS'group_name'
p31075
NsasS'name'
p31076
S'/Postprocessors/TotalVariableValue'
p31077
sa(dp31078
S'description'
p31079
g3
sS'type'
p31080
NsS'subblocks'
p31081
NsS'parameters'
p31082
(lp31083
(dp31084
S'description'
p31085
S'The list of block ids (SubdomainID) that this object will be applied\n'
p31086
sS'cpp_type'
p31087
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p31088
sS'default'
p31089
g3
sS'name'
p31090
S'block'
p31091
sS'required'
p31092
I00
sS'group_name'
p31093
Nsa(dp31094
S'name'
p31095
S'execute_on'
p31096
sS'cpp_type'
p31097
S'MooseEnum'
p31098
sS'default'
p31099
S'timestep'
p31100
sS'description'
p31101
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p31102
sS'required'
p31103
I00
sS'options'
p31104
S'initial residual jacobian timestep timestep_begin custom'
p31105
sS'group_name'
p31106
Nsa(dp31107
S'description'
p31108
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p31109
sS'cpp_type'
p31110
S'std::vector<OutputName, std::allocator<OutputName> >'
p31111
sS'default'
p31112
g3
sS'name'
p31113
S'outputs'
p31114
sS'required'
p31115
I00
sS'group_name'
p31116
S'Advanced'
p31117
sa(dp31118
S'description'
p31119
S'The seed for the master random number generator\n'
p31120
sS'cpp_type'
p31121
S'unsigned int'
p31122
sS'default'
p31123
S'0'
p31124
sS'name'
p31125
S'seed'
p31126
sS'required'
p31127
I00
sS'group_name'
p31128
S'Advanced'
p31129
sa(dp31130
S'description'
p31131
g3
sS'cpp_type'
p31132
S'std::string'
p31133
sS'default'
p31134
S'VolumePostprocessor'
p31135
sS'name'
p31136
S'type'
p31137
sS'required'
p31138
I00
sS'group_name'
p31139
Nsa(dp31140
S'description'
p31141
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31142
sS'cpp_type'
p31143
S'bool'
p31144
sS'default'
p31145
S'0'
p31146
sS'name'
p31147
S'use_displaced_mesh'
p31148
sS'required'
p31149
I00
sS'group_name'
p31150
S'Advanced'
p31151
sasS'name'
p31152
S'/Postprocessors/VolumePostprocessor'
p31153
sasS'parameters'
p31154
NsS'name'
p31155
S'/Postprocessors'
p31156
sa(dp31157
S'description'
p31158
g3
sS'type'
p31159
NsS'subblocks'
p31160
(lp31161
(dp31162
S'description'
p31163
g3
sS'type'
p31164
NsS'subblocks'
p31165
NsS'parameters'
p31166
(lp31167
(dp31168
S'name'
p31169
S'line_search'
p31170
sS'cpp_type'
p31171
S'MooseEnum'
p31172
sS'default'
p31173
S'default'
p31174
sS'description'
p31175
S'Specifies the line search type (Note: none = basic)\n'
p31176
sS'required'
p31177
I00
sS'options'
p31178
S'default shell none basic l2 bt cp'
p31179
sS'group_name'
p31180
Nsa(dp31181
S'name'
p31182
S'petsc_options'
p31183
sS'cpp_type'
p31184
S'std::vector<MooseEnum, std::allocator<MooseEnum> >'
p31185
sS'default'
p31186
g3
sS'description'
p31187
S'Singleton PETSc options\n'
p31188
sS'required'
p31189
I00
sS'options'
p31190
NsS'group_name'
p31191
Nsa(dp31192
S'description'
p31193
S'Names of PETSc name/value pairs\n'
p31194
sS'cpp_type'
p31195
S'std::vector<std::string, std::allocator<std::string> >'
p31196
sS'default'
p31197
g3
sS'name'
p31198
S'petsc_options_iname'
p31199
sS'required'
p31200
I00
sS'group_name'
p31201
Nsa(dp31202
S'description'
p31203
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p31204
sS'cpp_type'
p31205
S'std::vector<std::string, std::allocator<std::string> >'
p31206
sS'default'
p31207
g3
sS'name'
p31208
S'petsc_options_value'
p31209
sS'required'
p31210
I00
sS'group_name'
p31211
Nsa(dp31212
S'name'
p31213
S'solve_type'
p31214
sS'cpp_type'
p31215
S'MooseEnum'
p31216
sS'default'
p31217
g3
sS'description'
p31218
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p31219
sS'required'
p31220
I00
sS'options'
p31221
S'PJFNK JFNK NEWTON FD LINEAR'
p31222
sS'group_name'
p31223
Nsa(dp31224
S'description'
p31225
S'A string representing the Moose Object that will be built by this Action\n'
p31226
sS'cpp_type'
p31227
S'std::string'
p31228
sS'default'
p31229
g3
sS'name'
p31230
S'type'
p31231
sS'required'
p31232
I01
sS'group_name'
p31233
NsasS'name'
p31234
S'/Preconditioning/*'
p31235
sa(dp31236
S'description'
p31237
g3
sS'type'
p31238
NsS'subblocks'
p31239
NsS'parameters'
p31240
(lp31241
(dp31242
S'description'
p31243
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p31244
sS'cpp_type'
p31245
S'bool'
p31246
sS'default'
p31247
S'0'
p31248
sS'name'
p31249
S'full'
p31250
sS'required'
p31251
I00
sS'group_name'
p31252
Nsa(dp31253
S'description'
p31254
S'Set to true if you want to add entries into the matrix for degrees of freedom that might be coupled by inspection of the geometric search objects.\n'
p31255
sS'cpp_type'
p31256
S'bool'
p31257
sS'default'
p31258
S'0'
p31259
sS'name'
p31260
S'implicit_geometric_coupling'
p31261
sS'required'
p31262
I00
sS'group_name'
p31263
Nsa(dp31264
S'description'
p31265
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p31266
sS'cpp_type'
p31267
S'std::vector<std::string, std::allocator<std::string> >'
p31268
sS'default'
p31269
g3
sS'name'
p31270
S'off_diag_column'
p31271
sS'required'
p31272
I00
sS'group_name'
p31273
Nsa(dp31274
S'description'
p31275
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p31276
sS'cpp_type'
p31277
S'std::vector<std::string, std::allocator<std::string> >'
p31278
sS'default'
p31279
g3
sS'name'
p31280
S'off_diag_row'
p31281
sS'required'
p31282
I00
sS'group_name'
p31283
Nsa(dp31284
S'name'
p31285
S'pc_side'
p31286
sS'cpp_type'
p31287
S'MooseEnum'
p31288
sS'default'
p31289
S'right'
p31290
sS'description'
p31291
S'Preconditioning side\n'
p31292
sS'required'
p31293
I00
sS'options'
p31294
S'left right symmetric'
p31295
sS'group_name'
p31296
Nsa(dp31297
S'description'
p31298
g3
sS'cpp_type'
p31299
S'std::string'
p31300
sS'default'
p31301
S'FDP'
p31302
sS'name'
p31303
S'type'
p31304
sS'required'
p31305
I00
sS'group_name'
p31306
NsasS'name'
p31307
S'/Preconditioning/FDP'
p31308
sa(dp31309
S'description'
p31310
g3
sS'type'
p31311
NsS'subblocks'
p31312
NsS'parameters'
p31313
(lp31314
(dp31315
S'description'
p31316
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p31317
sS'cpp_type'
p31318
S'std::vector<std::string, std::allocator<std::string> >'
p31319
sS'default'
p31320
g3
sS'name'
p31321
S'off_diag_column'
p31322
sS'required'
p31323
I00
sS'group_name'
p31324
Nsa(dp31325
S'description'
p31326
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p31327
sS'cpp_type'
p31328
S'std::vector<std::string, std::allocator<std::string> >'
p31329
sS'default'
p31330
g3
sS'name'
p31331
S'off_diag_row'
p31332
sS'required'
p31333
I00
sS'group_name'
p31334
Nsa(dp31335
S'name'
p31336
S'pc_side'
p31337
sS'cpp_type'
p31338
S'MooseEnum'
p31339
sS'default'
p31340
S'right'
p31341
sS'description'
p31342
S'Preconditioning side\n'
p31343
sS'required'
p31344
I00
sS'options'
p31345
S'left right symmetric'
p31346
sS'group_name'
p31347
Nsa(dp31348
S'description'
p31349
S'TODO: docstring\n'
p31350
sS'cpp_type'
p31351
S'std::vector<std::string, std::allocator<std::string> >'
p31352
sS'default'
p31353
g3
sS'name'
p31354
S'preconditioner'
p31355
sS'required'
p31356
I01
sS'group_name'
p31357
Nsa(dp31358
S'description'
p31359
S"The order the block rows will be solved in.  Put the name of variables here to stand for solving that variable's block row.  A variable may appear more than once (to create cylces if you like).\n"
p31360
sS'cpp_type'
p31361
S'std::vector<std::string, std::allocator<std::string> >'
p31362
sS'default'
p31363
g3
sS'name'
p31364
S'solve_order'
p31365
sS'required'
p31366
I01
sS'group_name'
p31367
Nsa(dp31368
S'description'
p31369
g3
sS'cpp_type'
p31370
S'std::string'
p31371
sS'default'
p31372
S'PBP'
p31373
sS'name'
p31374
S'type'
p31375
sS'required'
p31376
I00
sS'group_name'
p31377
NsasS'name'
p31378
S'/Preconditioning/PBP'
p31379
sa(dp31380
S'description'
p31381
g3
sS'type'
p31382
NsS'subblocks'
p31383
NsS'parameters'
p31384
(lp31385
(dp31386
S'description'
p31387
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p31388
sS'cpp_type'
p31389
S'bool'
p31390
sS'default'
p31391
S'0'
p31392
sS'name'
p31393
S'full'
p31394
sS'required'
p31395
I00
sS'group_name'
p31396
Nsa(dp31397
S'description'
p31398
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p31399
sS'cpp_type'
p31400
S'std::vector<std::string, std::allocator<std::string> >'
p31401
sS'default'
p31402
g3
sS'name'
p31403
S'off_diag_column'
p31404
sS'required'
p31405
I00
sS'group_name'
p31406
Nsa(dp31407
S'description'
p31408
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p31409
sS'cpp_type'
p31410
S'std::vector<std::string, std::allocator<std::string> >'
p31411
sS'default'
p31412
g3
sS'name'
p31413
S'off_diag_row'
p31414
sS'required'
p31415
I00
sS'group_name'
p31416
Nsa(dp31417
S'name'
p31418
S'pc_side'
p31419
sS'cpp_type'
p31420
S'MooseEnum'
p31421
sS'default'
p31422
S'right'
p31423
sS'description'
p31424
S'Preconditioning side\n'
p31425
sS'required'
p31426
I00
sS'options'
p31427
S'left right symmetric'
p31428
sS'group_name'
p31429
Nsa(dp31430
S'description'
p31431
g3
sS'cpp_type'
p31432
S'std::string'
p31433
sS'default'
p31434
S'SBP'
p31435
sS'name'
p31436
S'type'
p31437
sS'required'
p31438
I00
sS'group_name'
p31439
NsasS'name'
p31440
S'/Preconditioning/SBP'
p31441
sa(dp31442
S'description'
p31443
g3
sS'type'
p31444
NsS'subblocks'
p31445
NsS'parameters'
p31446
(lp31447
(dp31448
S'description'
p31449
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p31450
sS'cpp_type'
p31451
S'bool'
p31452
sS'default'
p31453
S'0'
p31454
sS'name'
p31455
S'full'
p31456
sS'required'
p31457
I00
sS'group_name'
p31458
Nsa(dp31459
S'description'
p31460
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p31461
sS'cpp_type'
p31462
S'std::vector<std::string, std::allocator<std::string> >'
p31463
sS'default'
p31464
g3
sS'name'
p31465
S'off_diag_column'
p31466
sS'required'
p31467
I00
sS'group_name'
p31468
Nsa(dp31469
S'description'
p31470
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p31471
sS'cpp_type'
p31472
S'std::vector<std::string, std::allocator<std::string> >'
p31473
sS'default'
p31474
g3
sS'name'
p31475
S'off_diag_row'
p31476
sS'required'
p31477
I00
sS'group_name'
p31478
Nsa(dp31479
S'name'
p31480
S'pc_side'
p31481
sS'cpp_type'
p31482
S'MooseEnum'
p31483
sS'default'
p31484
S'right'
p31485
sS'description'
p31486
S'Preconditioning side\n'
p31487
sS'required'
p31488
I00
sS'options'
p31489
S'left right symmetric'
p31490
sS'group_name'
p31491
Nsa(dp31492
S'description'
p31493
g3
sS'cpp_type'
p31494
S'std::string'
p31495
sS'default'
p31496
S'SMP'
p31497
sS'name'
p31498
S'type'
p31499
sS'required'
p31500
I00
sS'group_name'
p31501
NsasS'name'
p31502
S'/Preconditioning/SMP'
p31503
sasS'parameters'
p31504
NsS'name'
p31505
S'/Preconditioning'
p31506
sa(dp31507
S'description'
p31508
g3
sS'type'
p31509
NsS'subblocks'
p31510
(lp31511
(dp31512
S'description'
p31513
g3
sS'type'
p31514
NsS'subblocks'
p31515
(lp31516
(dp31517
S'description'
p31518
g3
sS'type'
p31519
NsS'subblocks'
p31520
NsS'parameters'
p31521
(lp31522
(dp31523
S'description'
p31524
g3
sS'cpp_type'
p31525
S'std::string'
p31526
sS'default'
p31527
S'CoupledProblem'
p31528
sS'name'
p31529
S'type'
p31530
sS'required'
p31531
I00
sS'group_name'
p31532
NsasS'name'
p31533
S'/Problem/<type>/CoupledProblem'
p31534
sa(dp31535
S'description'
p31536
g3
sS'type'
p31537
NsS'subblocks'
p31538
NsS'parameters'
p31539
(lp31540
(dp31541
S'description'
p31542
S'The dimension of the near nullspace\n'
p31543
sS'cpp_type'
p31544
S'unsigned int'
p31545
sS'default'
p31546
S'0'
p31547
sS'name'
p31548
S'dimNearNullSpace'
p31549
sS'required'
p31550
I00
sS'group_name'
p31551
Nsa(dp31552
S'description'
p31553
S'The dimension of the nullspace\n'
p31554
sS'cpp_type'
p31555
S'unsigned int'
p31556
sS'default'
p31557
S'0'
p31558
sS'name'
p31559
S'dimNullSpace'
p31560
sS'required'
p31561
I00
sS'group_name'
p31562
Nsa(dp31563
S'description'
p31564
S'Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything\n'
p31565
sS'cpp_type'
p31566
S'bool'
p31567
sS'default'
p31568
S'1'
p31569
sS'name'
p31570
S'solve'
p31571
sS'required'
p31572
I00
sS'group_name'
p31573
Nsa(dp31574
S'description'
p31575
g3
sS'cpp_type'
p31576
S'std::string'
p31577
sS'default'
p31578
S'FEProblem'
p31579
sS'name'
p31580
S'type'
p31581
sS'required'
p31582
I00
sS'group_name'
p31583
Nsa(dp31584
S'description'
p31585
S'Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)\n'
p31586
sS'cpp_type'
p31587
S'bool'
p31588
sS'default'
p31589
S'1'
p31590
sS'name'
p31591
S'use_nonlinear'
p31592
sS'required'
p31593
I00
sS'group_name'
p31594
NsasS'name'
p31595
S'/Problem/<type>/FEProblem'
p31596
sasS'parameters'
p31597
NsS'name'
p31598
S'/Problem/<type>'
p31599
sasS'parameters'
p31600
(lp31601
(dp31602
S'description'
p31603
S'Block IDs for the coordinate systems\n'
p31604
sS'cpp_type'
p31605
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p31606
sS'default'
p31607
g3
sS'name'
p31608
S'block'
p31609
sS'required'
p31610
I00
sS'group_name'
p31611
Nsa(dp31612
S'name'
p31613
S'coord_type'
p31614
sS'cpp_type'
p31615
S'std::vector<MooseEnum, std::allocator<MooseEnum> >'
p31616
sS'default'
p31617
S'XYZ'
p31618
sS'description'
p31619
S'Type of the coordinate system per block param\n'
p31620
sS'required'
p31621
I00
sS'options'
p31622
S'XYZ RZ RSPHERICAL'
p31623
sS'group_name'
p31624
Nsa(dp31625
S'description'
p31626
S'Whether or not to turn on the finite element shape function caching system.  This can increase speed with an associated memory cost.\n'
p31627
sS'cpp_type'
p31628
S'bool'
p31629
sS'default'
p31630
S'0'
p31631
sS'name'
p31632
S'fe_cache'
p31633
sS'required'
p31634
I00
sS'group_name'
p31635
Nsa(dp31636
S'description'
p31637
S'Set to false to disable kernel->subdomain kernel coverage check\n'
p31638
sS'cpp_type'
p31639
S'bool'
p31640
sS'default'
p31641
S'1'
p31642
sS'name'
p31643
S'kernel_coverage_check'
p31644
sS'required'
p31645
I00
sS'group_name'
p31646
Nsa(dp31647
S'description'
p31648
S'The name the problem\n'
p31649
sS'cpp_type'
p31650
S'std::string'
p31651
sS'default'
p31652
S'MOOSE Problem'
p31653
sS'name'
p31654
S'name'
p31655
sS'required'
p31656
I00
sS'group_name'
p31657
Nsa(dp31658
S'description'
p31659
S'A string representing the Moose Object that will be built by this Action\n'
p31660
sS'cpp_type'
p31661
S'std::string'
p31662
sS'default'
p31663
S'FEProblem'
p31664
sS'name'
p31665
S'type'
p31666
sS'required'
p31667
I01
sS'group_name'
p31668
NsasS'name'
p31669
S'/Problem'
p31670
sa(dp31671
S'description'
p31672
g3
sS'type'
p31673
NsS'subblocks'
p31674
(lp31675
(dp31676
S'description'
p31677
g3
sS'type'
p31678
NsS'subblocks'
p31679
NsS'parameters'
p31680
(lp31681
(dp31682
S'description'
p31683
S'A string representing the Moose Object that will be built by this Action\n'
p31684
sS'cpp_type'
p31685
S'std::string'
p31686
sS'default'
p31687
g3
sS'name'
p31688
S'type'
p31689
sS'required'
p31690
I01
sS'group_name'
p31691
NsasS'name'
p31692
S'/ScalarKernels/*'
p31693
sa(dp31694
S'description'
p31695
g3
sS'type'
p31696
NsS'subblocks'
p31697
NsS'parameters'
p31698
(lp31699
(dp31700
S'description'
p31701
g3
sS'cpp_type'
p31702
S'std::string'
p31703
sS'default'
p31704
S'ODETimeDerivative'
p31705
sS'name'
p31706
S'type'
p31707
sS'required'
p31708
I00
sS'group_name'
p31709
Nsa(dp31710
S'description'
p31711
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31712
sS'cpp_type'
p31713
S'bool'
p31714
sS'default'
p31715
S'0'
p31716
sS'name'
p31717
S'use_displaced_mesh'
p31718
sS'required'
p31719
I00
sS'group_name'
p31720
S'Advanced'
p31721
sa(dp31722
S'description'
p31723
S'The name of the variable that this kernel operates on\n'
p31724
sS'cpp_type'
p31725
S'NonlinearVariableName'
p31726
sS'default'
p31727
g3
sS'name'
p31728
S'variable'
p31729
sS'required'
p31730
I01
sS'group_name'
p31731
NsasS'name'
p31732
S'/ScalarKernels/ODETimeDerivative'
p31733
sasS'parameters'
p31734
NsS'name'
p31735
S'/ScalarKernels'
p31736
sa(dp31737
S'description'
p31738
g3
sS'type'
p31739
NsS'subblocks'
p31740
(lp31741
(dp31742
S'description'
p31743
g3
sS'type'
p31744
NsS'subblocks'
p31745
NsS'parameters'
p31746
(lp31747
(dp31748
S'description'
p31749
S'Classname of the split object\n'
p31750
sS'cpp_type'
p31751
S'std::string'
p31752
sS'default'
p31753
S'Split'
p31754
sS'name'
p31755
S'type'
p31756
sS'required'
p31757
I01
sS'group_name'
p31758
NsasS'name'
p31759
S'/Splits/*'
p31760
sa(dp31761
S'description'
p31762
g3
sS'type'
p31763
NsS'subblocks'
p31764
NsS'parameters'
p31765
(lp31766
(dp31767
S'description'
p31768
S'Mesh blocks Split operates on (omitting this implies "all blocks"\n'
p31769
sS'cpp_type'
p31770
S'std::vector<std::string, std::allocator<std::string> >'
p31771
sS'default'
p31772
g3
sS'name'
p31773
S'blocks'
p31774
sS'required'
p31775
I00
sS'group_name'
p31776
Nsa(dp31777
S'description'
p31778
S'List of indicators whether displaced mesh is used to define included contact\n'
p31779
sS'cpp_type'
p31780
S'std::vector<bool, std::allocator<bool> >'
p31781
sS'default'
p31782
g3
sS'name'
p31783
S'contact_displaced'
p31784
sS'required'
p31785
I00
sS'group_name'
p31786
Nsa(dp31787
S'description'
p31788
S'Master surface list for included contacts\n'
p31789
sS'cpp_type'
p31790
S'std::vector<std::string, std::allocator<std::string> >'
p31791
sS'default'
p31792
g3
sS'name'
p31793
S'contact_master'
p31794
sS'required'
p31795
I00
sS'group_name'
p31796
Nsa(dp31797
S'description'
p31798
S'Slave surface list for included contacts\n'
p31799
sS'cpp_type'
p31800
S'std::vector<std::string, std::allocator<std::string> >'
p31801
sS'default'
p31802
g3
sS'name'
p31803
S'contact_slave'
p31804
sS'required'
p31805
I00
sS'group_name'
p31806
Nsa(dp31807
S'description'
p31808
S'PETSc flags for the FieldSplit solver\n'
p31809
sS'cpp_type'
p31810
S'std::vector<std::string, std::allocator<std::string> >'
p31811
sS'default'
p31812
g3
sS'name'
p31813
S'petsc_options'
p31814
sS'required'
p31815
I00
sS'group_name'
p31816
Nsa(dp31817
S'description'
p31818
S'PETSc option names for the FieldSplit solver\n'
p31819
sS'cpp_type'
p31820
S'std::vector<std::string, std::allocator<std::string> >'
p31821
sS'default'
p31822
g3
sS'name'
p31823
S'petsc_options_iname'
p31824
sS'required'
p31825
I00
sS'group_name'
p31826
Nsa(dp31827
S'description'
p31828
S'PETSc option values for the FieldSplit solver\n'
p31829
sS'cpp_type'
p31830
S'std::vector<std::string, std::allocator<std::string> >'
p31831
sS'default'
p31832
g3
sS'name'
p31833
S'petsc_options_value'
p31834
sS'required'
p31835
I00
sS'group_name'
p31836
Nsa(dp31837
S'description'
p31838
S'Type of approximation to inv(A) used when forming S = D - C inv(A) B: diag|lump\n'
p31839
sS'cpp_type'
p31840
S'std::string'
p31841
sS'default'
p31842
S'diag'
p31843
sS'name'
p31844
S'schur_ainv'
p31845
sS'required'
p31846
I00
sS'group_name'
p31847
Nsa(dp31848
S'description'
p31849
S'Type of Schur complement preconditioner matrix: S|Sp|A11\n'
p31850
sS'cpp_type'
p31851
S'std::string'
p31852
sS'default'
p31853
S'S'
p31854
sS'name'
p31855
S'schur_pre'
p31856
sS'required'
p31857
I00
sS'group_name'
p31858
Nsa(dp31859
S'description'
p31860
S'Type of Schur complement: full|upper|lower\n'
p31861
sS'cpp_type'
p31862
S'std::string'
p31863
sS'default'
p31864
S'full'
p31865
sS'name'
p31866
S'schur_type'
p31867
sS'required'
p31868
I00
sS'group_name'
p31869
Nsa(dp31870
S'description'
p31871
S'Sidesets Split operates on (omitting this implies "no sidesets"\n'
p31872
sS'cpp_type'
p31873
S'std::vector<std::string, std::allocator<std::string> >'
p31874
sS'default'
p31875
g3
sS'name'
p31876
S'sides'
p31877
sS'required'
p31878
I00
sS'group_name'
p31879
Nsa(dp31880
S'description'
p31881
S'The names of the splits (subsystems) in the decomposition of this split\n'
p31882
sS'cpp_type'
p31883
S'std::vector<std::string, std::allocator<std::string> >'
p31884
sS'default'
p31885
g3
sS'name'
p31886
S'splitting'
p31887
sS'required'
p31888
I00
sS'group_name'
p31889
Nsa(dp31890
S'description'
p31891
S'Split decomposition type: additive|multiplicative|symmetric_multiplicative|schur\n'
p31892
sS'cpp_type'
p31893
S'std::string'
p31894
sS'default'
p31895
S'additive'
p31896
sS'name'
p31897
S'splitting_type'
p31898
sS'required'
p31899
I00
sS'group_name'
p31900
Nsa(dp31901
S'description'
p31902
g3
sS'cpp_type'
p31903
S'std::string'
p31904
sS'default'
p31905
S'ContactSplit'
p31906
sS'name'
p31907
S'type'
p31908
sS'required'
p31909
I00
sS'group_name'
p31910
Nsa(dp31911
S'description'
p31912
S'List of indicators whether displaced mesh is used to define excluded contact\n'
p31913
sS'cpp_type'
p31914
S'std::vector<bool, std::allocator<bool> >'
p31915
sS'default'
p31916
g3
sS'name'
p31917
S'uncontact_displaced'
p31918
sS'required'
p31919
I00
sS'group_name'
p31920
Nsa(dp31921
S'description'
p31922
S'Master surface list for excluded contacts\n'
p31923
sS'cpp_type'
p31924
S'std::vector<std::string, std::allocator<std::string> >'
p31925
sS'default'
p31926
g3
sS'name'
p31927
S'uncontact_master'
p31928
sS'required'
p31929
I00
sS'group_name'
p31930
Nsa(dp31931
S'description'
p31932
S'Slave surface list for excluded contacts\n'
p31933
sS'cpp_type'
p31934
S'std::vector<std::string, std::allocator<std::string> >'
p31935
sS'default'
p31936
g3
sS'name'
p31937
S'uncontact_slave'
p31938
sS'required'
p31939
I00
sS'group_name'
p31940
Nsa(dp31941
S'description'
p31942
S'Sidesets Split excludes (omitting this implies "do not exclude any sidesets"\n'
p31943
sS'cpp_type'
p31944
S'std::vector<std::string, std::allocator<std::string> >'
p31945
sS'default'
p31946
g3
sS'name'
p31947
S'unsides'
p31948
sS'required'
p31949
I00
sS'group_name'
p31950
Nsa(dp31951
S'description'
p31952
S'Variables Split operates on (omitting this implies "all variables"\n'
p31953
sS'cpp_type'
p31954
S'std::vector<std::string, std::allocator<std::string> >'
p31955
sS'default'
p31956
g3
sS'name'
p31957
S'vars'
p31958
sS'required'
p31959
I00
sS'group_name'
p31960
NsasS'name'
p31961
S'/Splits/ContactSplit'
p31962
sa(dp31963
S'description'
p31964
g3
sS'type'
p31965
NsS'subblocks'
p31966
NsS'parameters'
p31967
(lp31968
(dp31969
S'description'
p31970
S'Mesh blocks Split operates on (omitting this implies "all blocks"\n'
p31971
sS'cpp_type'
p31972
S'std::vector<std::string, std::allocator<std::string> >'
p31973
sS'default'
p31974
g3
sS'name'
p31975
S'blocks'
p31976
sS'required'
p31977
I00
sS'group_name'
p31978
Nsa(dp31979
S'description'
p31980
S'PETSc flags for the FieldSplit solver\n'
p31981
sS'cpp_type'
p31982
S'std::vector<std::string, std::allocator<std::string> >'
p31983
sS'default'
p31984
g3
sS'name'
p31985
S'petsc_options'
p31986
sS'required'
p31987
I00
sS'group_name'
p31988
Nsa(dp31989
S'description'
p31990
S'PETSc option names for the FieldSplit solver\n'
p31991
sS'cpp_type'
p31992
S'std::vector<std::string, std::allocator<std::string> >'
p31993
sS'default'
p31994
g3
sS'name'
p31995
S'petsc_options_iname'
p31996
sS'required'
p31997
I00
sS'group_name'
p31998
Nsa(dp31999
S'description'
p32000
S'PETSc option values for the FieldSplit solver\n'
p32001
sS'cpp_type'
p32002
S'std::vector<std::string, std::allocator<std::string> >'
p32003
sS'default'
p32004
g3
sS'name'
p32005
S'petsc_options_value'
p32006
sS'required'
p32007
I00
sS'group_name'
p32008
Nsa(dp32009
S'description'
p32010
S'Type of approximation to inv(A) used when forming S = D - C inv(A) B: diag|lump\n'
p32011
sS'cpp_type'
p32012
S'std::string'
p32013
sS'default'
p32014
S'diag'
p32015
sS'name'
p32016
S'schur_ainv'
p32017
sS'required'
p32018
I00
sS'group_name'
p32019
Nsa(dp32020
S'description'
p32021
S'Type of Schur complement preconditioner matrix: S|Sp|A11\n'
p32022
sS'cpp_type'
p32023
S'std::string'
p32024
sS'default'
p32025
S'S'
p32026
sS'name'
p32027
S'schur_pre'
p32028
sS'required'
p32029
I00
sS'group_name'
p32030
Nsa(dp32031
S'description'
p32032
S'Type of Schur complement: full|upper|lower\n'
p32033
sS'cpp_type'
p32034
S'std::string'
p32035
sS'default'
p32036
S'full'
p32037
sS'name'
p32038
S'schur_type'
p32039
sS'required'
p32040
I00
sS'group_name'
p32041
Nsa(dp32042
S'description'
p32043
S'Sidesets Split operates on (omitting this implies "no sidesets"\n'
p32044
sS'cpp_type'
p32045
S'std::vector<std::string, std::allocator<std::string> >'
p32046
sS'default'
p32047
g3
sS'name'
p32048
S'sides'
p32049
sS'required'
p32050
I00
sS'group_name'
p32051
Nsa(dp32052
S'description'
p32053
S'The names of the splits (subsystems) in the decomposition of this split\n'
p32054
sS'cpp_type'
p32055
S'std::vector<std::string, std::allocator<std::string> >'
p32056
sS'default'
p32057
g3
sS'name'
p32058
S'splitting'
p32059
sS'required'
p32060
I00
sS'group_name'
p32061
Nsa(dp32062
S'description'
p32063
S'Split decomposition type: additive|multiplicative|symmetric_multiplicative|schur\n'
p32064
sS'cpp_type'
p32065
S'std::string'
p32066
sS'default'
p32067
S'additive'
p32068
sS'name'
p32069
S'splitting_type'
p32070
sS'required'
p32071
I00
sS'group_name'
p32072
Nsa(dp32073
S'description'
p32074
g3
sS'cpp_type'
p32075
S'std::string'
p32076
sS'default'
p32077
S'Split'
p32078
sS'name'
p32079
S'type'
p32080
sS'required'
p32081
I00
sS'group_name'
p32082
Nsa(dp32083
S'description'
p32084
S'Sidesets Split excludes (omitting this implies "do not exclude any sidesets"\n'
p32085
sS'cpp_type'
p32086
S'std::vector<std::string, std::allocator<std::string> >'
p32087
sS'default'
p32088
g3
sS'name'
p32089
S'unsides'
p32090
sS'required'
p32091
I00
sS'group_name'
p32092
Nsa(dp32093
S'description'
p32094
S'Variables Split operates on (omitting this implies "all variables"\n'
p32095
sS'cpp_type'
p32096
S'std::vector<std::string, std::allocator<std::string> >'
p32097
sS'default'
p32098
g3
sS'name'
p32099
S'vars'
p32100
sS'required'
p32101
I00
sS'group_name'
p32102
NsasS'name'
p32103
S'/Splits/Split'
p32104
sasS'parameters'
p32105
NsS'name'
p32106
S'/Splits'
p32107
sa(dp32108
S'description'
p32109
g3
sS'type'
p32110
NsS'subblocks'
p32111
(lp32112
(dp32113
S'description'
p32114
g3
sS'type'
p32115
NsS'subblocks'
p32116
NsS'parameters'
p32117
(lp32118
(dp32119
S'description'
p32120
S'A string representing the Moose Object that will be built by this Action\n'
p32121
sS'cpp_type'
p32122
S'std::string'
p32123
sS'default'
p32124
g3
sS'name'
p32125
S'type'
p32126
sS'required'
p32127
I01
sS'group_name'
p32128
NsasS'name'
p32129
S'/Transfers/*'
p32130
sa(dp32131
S'description'
p32132
g3
sS'type'
p32133
NsS'subblocks'
p32134
NsS'parameters'
p32135
(lp32136
(dp32137
S'name'
p32138
S'direction'
p32139
sS'cpp_type'
p32140
S'MooseEnum'
p32141
sS'default'
p32142
g3
sS'description'
p32143
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p32144
sS'required'
p32145
I01
sS'options'
p32146
S'to_multiapp from_multiapp'
p32147
sS'group_name'
p32148
Nsa(dp32149
S'description'
p32150
S'Whether or not to use the displaced mesh for the source mesh.\n'
p32151
sS'cpp_type'
p32152
S'bool'
p32153
sS'default'
p32154
S'0'
p32155
sS'name'
p32156
S'displaced_source_mesh'
p32157
sS'required'
p32158
I00
sS'group_name'
p32159
Nsa(dp32160
S'description'
p32161
S'Whether or not to use the displaced mesh for the target mesh.\n'
p32162
sS'cpp_type'
p32163
S'bool'
p32164
sS'default'
p32165
S'0'
p32166
sS'name'
p32167
S'displaced_target_mesh'
p32168
sS'required'
p32169
I00
sS'group_name'
p32170
Nsa(dp32171
S'name'
p32172
S'execute_on'
p32173
sS'cpp_type'
p32174
S'MooseEnum'
p32175
sS'default'
p32176
S'timestep_begin'
p32177
sS'description'
p32178
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p32179
sS'required'
p32180
I00
sS'options'
p32181
S'initial residual jacobian timestep timestep_begin custom'
p32182
sS'group_name'
p32183
Nsa(dp32184
S'name'
p32185
S'interp_type'
p32186
sS'cpp_type'
p32187
S'MooseEnum'
p32188
sS'default'
p32189
S'inverse_distance'
p32190
sS'description'
p32191
S'The algorithm to use for interpolation.\n'
p32192
sS'required'
p32193
I00
sS'options'
p32194
S'inverse_distance radial_basis'
p32195
sS'group_name'
p32196
Nsa(dp32197
S'description'
p32198
S'The name of the MultiApp to use.\n'
p32199
sS'cpp_type'
p32200
S'MultiAppName'
p32201
sS'default'
p32202
g3
sS'name'
p32203
S'multi_app'
p32204
sS'required'
p32205
I01
sS'group_name'
p32206
Nsa(dp32207
S'description'
p32208
S'The number of nearest points to use for interpolation.\n'
p32209
sS'cpp_type'
p32210
S'unsigned int'
p32211
sS'default'
p32212
S'3'
p32213
sS'name'
p32214
S'num_points'
p32215
sS'required'
p32216
I00
sS'group_name'
p32217
Nsa(dp32218
S'description'
p32219
S'The polynomial power to use for calculation of the decay in the interpolation.\n'
p32220
sS'cpp_type'
p32221
S'double'
p32222
sS'default'
p32223
S'2'
p32224
sS'name'
p32225
S'power'
p32226
sS'required'
p32227
I00
sS'group_name'
p32228
Nsa(dp32229
S'description'
p32230
S'Radius to use for radial_basis interpolation.  If negative then the radius is taken as the max distance between points.\n'
p32231
sS'cpp_type'
p32232
S'double'
p32233
sS'default'
p32234
S'-1'
p32235
sS'name'
p32236
S'radius'
p32237
sS'required'
p32238
I00
sS'group_name'
p32239
Nsa(dp32240
S'description'
p32241
S'The variable to transfer from.\n'
p32242
sS'cpp_type'
p32243
S'VariableName'
p32244
sS'default'
p32245
g3
sS'name'
p32246
S'source_variable'
p32247
sS'required'
p32248
I01
sS'group_name'
p32249
Nsa(dp32250
S'description'
p32251
g3
sS'cpp_type'
p32252
S'std::string'
p32253
sS'default'
p32254
S'MultiAppInterpolationTransfer'
p32255
sS'name'
p32256
S'type'
p32257
sS'required'
p32258
I00
sS'group_name'
p32259
Nsa(dp32260
S'description'
p32261
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32262
sS'cpp_type'
p32263
S'bool'
p32264
sS'default'
p32265
S'0'
p32266
sS'name'
p32267
S'use_displaced_mesh'
p32268
sS'required'
p32269
I00
sS'group_name'
p32270
S'Advanced'
p32271
sa(dp32272
S'description'
p32273
S'The auxiliary variable to store the transferred values in.\n'
p32274
sS'cpp_type'
p32275
S'AuxVariableName'
p32276
sS'default'
p32277
g3
sS'name'
p32278
S'variable'
p32279
sS'required'
p32280
I01
sS'group_name'
p32281
NsasS'name'
p32282
S'/Transfers/MultiAppInterpolationTransfer'
p32283
sa(dp32284
S'description'
p32285
g3
sS'type'
p32286
NsS'subblocks'
p32287
NsS'parameters'
p32288
(lp32289
(dp32290
S'name'
p32291
S'direction'
p32292
sS'cpp_type'
p32293
S'MooseEnum'
p32294
sS'default'
p32295
g3
sS'description'
p32296
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p32297
sS'required'
p32298
I01
sS'options'
p32299
S'to_multiapp from_multiapp'
p32300
sS'group_name'
p32301
Nsa(dp32302
S'description'
p32303
S'Whether or not to error in the case that a target point is not found in the source domain.\n'
p32304
sS'cpp_type'
p32305
S'bool'
p32306
sS'default'
p32307
S'0'
p32308
sS'name'
p32309
S'error_on_miss'
p32310
sS'required'
p32311
I00
sS'group_name'
p32312
Nsa(dp32313
S'name'
p32314
S'execute_on'
p32315
sS'cpp_type'
p32316
S'MooseEnum'
p32317
sS'default'
p32318
S'timestep_begin'
p32319
sS'description'
p32320
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p32321
sS'required'
p32322
I00
sS'options'
p32323
S'initial residual jacobian timestep timestep_begin custom'
p32324
sS'group_name'
p32325
Nsa(dp32326
S'description'
p32327
S'The name of the MultiApp to use.\n'
p32328
sS'cpp_type'
p32329
S'MultiAppName'
p32330
sS'default'
p32331
g3
sS'name'
p32332
S'multi_app'
p32333
sS'required'
p32334
I01
sS'group_name'
p32335
Nsa(dp32336
S'description'
p32337
S'The variable to transfer from.\n'
p32338
sS'cpp_type'
p32339
S'VariableName'
p32340
sS'default'
p32341
g3
sS'name'
p32342
S'source_variable'
p32343
sS'required'
p32344
I01
sS'group_name'
p32345
Nsa(dp32346
S'description'
p32347
g3
sS'cpp_type'
p32348
S'std::string'
p32349
sS'default'
p32350
S'MultiAppMeshFunctionTransfer'
p32351
sS'name'
p32352
S'type'
p32353
sS'required'
p32354
I00
sS'group_name'
p32355
Nsa(dp32356
S'description'
p32357
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32358
sS'cpp_type'
p32359
S'bool'
p32360
sS'default'
p32361
S'0'
p32362
sS'name'
p32363
S'use_displaced_mesh'
p32364
sS'required'
p32365
I00
sS'group_name'
p32366
S'Advanced'
p32367
sa(dp32368
S'description'
p32369
S'The auxiliary variable to store the transferred values in.\n'
p32370
sS'cpp_type'
p32371
S'AuxVariableName'
p32372
sS'default'
p32373
g3
sS'name'
p32374
S'variable'
p32375
sS'required'
p32376
I01
sS'group_name'
p32377
NsasS'name'
p32378
S'/Transfers/MultiAppMeshFunctionTransfer'
p32379
sa(dp32380
S'description'
p32381
g3
sS'type'
p32382
NsS'subblocks'
p32383
NsS'parameters'
p32384
(lp32385
(dp32386
S'name'
p32387
S'direction'
p32388
sS'cpp_type'
p32389
S'MooseEnum'
p32390
sS'default'
p32391
g3
sS'description'
p32392
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p32393
sS'required'
p32394
I01
sS'options'
p32395
S'to_multiapp from_multiapp'
p32396
sS'group_name'
p32397
Nsa(dp32398
S'description'
p32399
S'Whether or not to use the displaced mesh for the source mesh.\n'
p32400
sS'cpp_type'
p32401
S'bool'
p32402
sS'default'
p32403
S'0'
p32404
sS'name'
p32405
S'displaced_source_mesh'
p32406
sS'required'
p32407
I00
sS'group_name'
p32408
Nsa(dp32409
S'description'
p32410
S'Whether or not to use the displaced mesh for the target mesh.\n'
p32411
sS'cpp_type'
p32412
S'bool'
p32413
sS'default'
p32414
S'0'
p32415
sS'name'
p32416
S'displaced_target_mesh'
p32417
sS'required'
p32418
I00
sS'group_name'
p32419
Nsa(dp32420
S'name'
p32421
S'execute_on'
p32422
sS'cpp_type'
p32423
S'MooseEnum'
p32424
sS'default'
p32425
S'timestep_begin'
p32426
sS'description'
p32427
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p32428
sS'required'
p32429
I00
sS'options'
p32430
S'initial residual jacobian timestep timestep_begin custom'
p32431
sS'group_name'
p32432
Nsa(dp32433
S'description'
p32434
S'Set to true when the meshes are not changing (ie, no moviement or adaptivity).  This will cache nearest node neighbors to greatly speed up the transfer.\n'
p32435
sS'cpp_type'
p32436
S'bool'
p32437
sS'default'
p32438
S'0'
p32439
sS'name'
p32440
S'fixed_meshes'
p32441
sS'required'
p32442
I00
sS'group_name'
p32443
Nsa(dp32444
S'description'
p32445
S'The name of the MultiApp to use.\n'
p32446
sS'cpp_type'
p32447
S'MultiAppName'
p32448
sS'default'
p32449
g3
sS'name'
p32450
S'multi_app'
p32451
sS'required'
p32452
I01
sS'group_name'
p32453
Nsa(dp32454
S'description'
p32455
S'The variable to transfer from.\n'
p32456
sS'cpp_type'
p32457
S'VariableName'
p32458
sS'default'
p32459
g3
sS'name'
p32460
S'source_variable'
p32461
sS'required'
p32462
I01
sS'group_name'
p32463
Nsa(dp32464
S'description'
p32465
g3
sS'cpp_type'
p32466
S'std::string'
p32467
sS'default'
p32468
S'MultiAppNearestNodeTransfer'
p32469
sS'name'
p32470
S'type'
p32471
sS'required'
p32472
I00
sS'group_name'
p32473
Nsa(dp32474
S'description'
p32475
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32476
sS'cpp_type'
p32477
S'bool'
p32478
sS'default'
p32479
S'0'
p32480
sS'name'
p32481
S'use_displaced_mesh'
p32482
sS'required'
p32483
I00
sS'group_name'
p32484
S'Advanced'
p32485
sa(dp32486
S'description'
p32487
S'The auxiliary variable to store the transferred values in.\n'
p32488
sS'cpp_type'
p32489
S'AuxVariableName'
p32490
sS'default'
p32491
g3
sS'name'
p32492
S'variable'
p32493
sS'required'
p32494
I01
sS'group_name'
p32495
NsasS'name'
p32496
S'/Transfers/MultiAppNearestNodeTransfer'
p32497
sa(dp32498
S'description'
p32499
g3
sS'type'
p32500
NsS'subblocks'
p32501
NsS'parameters'
p32502
(lp32503
(dp32504
S'name'
p32505
S'direction'
p32506
sS'cpp_type'
p32507
S'MooseEnum'
p32508
sS'default'
p32509
g3
sS'description'
p32510
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p32511
sS'required'
p32512
I01
sS'options'
p32513
S'to_multiapp from_multiapp'
p32514
sS'group_name'
p32515
Nsa(dp32516
S'name'
p32517
S'execute_on'
p32518
sS'cpp_type'
p32519
S'MooseEnum'
p32520
sS'default'
p32521
S'timestep_begin'
p32522
sS'description'
p32523
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p32524
sS'required'
p32525
I00
sS'options'
p32526
S'initial residual jacobian timestep timestep_begin custom'
p32527
sS'group_name'
p32528
Nsa(dp32529
S'name'
p32530
S'interp_type'
p32531
sS'cpp_type'
p32532
S'MooseEnum'
p32533
sS'default'
p32534
S'inverse_distance'
p32535
sS'description'
p32536
S'The algorithm to use for interpolation.\n'
p32537
sS'required'
p32538
I00
sS'options'
p32539
S'inverse_distance radial_basis'
p32540
sS'group_name'
p32541
Nsa(dp32542
S'description'
p32543
S'The name of the MultiApp to use.\n'
p32544
sS'cpp_type'
p32545
S'MultiAppName'
p32546
sS'default'
p32547
g3
sS'name'
p32548
S'multi_app'
p32549
sS'required'
p32550
I01
sS'group_name'
p32551
Nsa(dp32552
S'description'
p32553
S'The number of nearest points to use for interpolation.\n'
p32554
sS'cpp_type'
p32555
S'unsigned int'
p32556
sS'default'
p32557
S'3'
p32558
sS'name'
p32559
S'num_points'
p32560
sS'required'
p32561
I00
sS'group_name'
p32562
Nsa(dp32563
S'description'
p32564
S'The Postprocessor to interpolate.\n'
p32565
sS'cpp_type'
p32566
S'PostprocessorName'
p32567
sS'default'
p32568
g3
sS'name'
p32569
S'postprocessor'
p32570
sS'required'
p32571
I01
sS'group_name'
p32572
Nsa(dp32573
S'description'
p32574
S'The polynomial power to use for calculation of the decay in the interpolation.\n'
p32575
sS'cpp_type'
p32576
S'double'
p32577
sS'default'
p32578
S'2'
p32579
sS'name'
p32580
S'power'
p32581
sS'required'
p32582
I00
sS'group_name'
p32583
Nsa(dp32584
S'description'
p32585
S'Radius to use for radial_basis interpolation.  If negative then the radius is taken as the max distance between points.\n'
p32586
sS'cpp_type'
p32587
S'double'
p32588
sS'default'
p32589
S'-1'
p32590
sS'name'
p32591
S'radius'
p32592
sS'required'
p32593
I00
sS'group_name'
p32594
Nsa(dp32595
S'description'
p32596
g3
sS'cpp_type'
p32597
S'std::string'
p32598
sS'default'
p32599
S'MultiAppPostprocessorInterpolationTransfer'
p32600
sS'name'
p32601
S'type'
p32602
sS'required'
p32603
I00
sS'group_name'
p32604
Nsa(dp32605
S'description'
p32606
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32607
sS'cpp_type'
p32608
S'bool'
p32609
sS'default'
p32610
S'0'
p32611
sS'name'
p32612
S'use_displaced_mesh'
p32613
sS'required'
p32614
I00
sS'group_name'
p32615
S'Advanced'
p32616
sa(dp32617
S'description'
p32618
S'The auxiliary variable to store the transferred values in.\n'
p32619
sS'cpp_type'
p32620
S'AuxVariableName'
p32621
sS'default'
p32622
g3
sS'name'
p32623
S'variable'
p32624
sS'required'
p32625
I01
sS'group_name'
p32626
NsasS'name'
p32627
S'/Transfers/MultiAppPostprocessorInterpolationTransfer'
p32628
sa(dp32629
S'description'
p32630
g3
sS'type'
p32631
NsS'subblocks'
p32632
NsS'parameters'
p32633
(lp32634
(dp32635
S'name'
p32636
S'direction'
p32637
sS'cpp_type'
p32638
S'MooseEnum'
p32639
sS'default'
p32640
g3
sS'description'
p32641
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p32642
sS'required'
p32643
I01
sS'options'
p32644
S'to_multiapp from_multiapp'
p32645
sS'group_name'
p32646
Nsa(dp32647
S'name'
p32648
S'execute_on'
p32649
sS'cpp_type'
p32650
S'MooseEnum'
p32651
sS'default'
p32652
S'timestep_begin'
p32653
sS'description'
p32654
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p32655
sS'required'
p32656
I00
sS'options'
p32657
S'initial residual jacobian timestep timestep_begin custom'
p32658
sS'group_name'
p32659
Nsa(dp32660
S'description'
p32661
S'The name of the Postprocessor in the Master to transfer the value from.\n'
p32662
sS'cpp_type'
p32663
S'PostprocessorName'
p32664
sS'default'
p32665
g3
sS'name'
p32666
S'from_postprocessor'
p32667
sS'required'
p32668
I01
sS'group_name'
p32669
Nsa(dp32670
S'description'
p32671
S'The name of the MultiApp to use.\n'
p32672
sS'cpp_type'
p32673
S'MultiAppName'
p32674
sS'default'
p32675
g3
sS'name'
p32676
S'multi_app'
p32677
sS'required'
p32678
I01
sS'group_name'
p32679
Nsa(dp32680
S'description'
p32681
S'The name of the scalar Aux variable in the MultiApp to transfer the value to.\n'
p32682
sS'cpp_type'
p32683
S'VariableName'
p32684
sS'default'
p32685
g3
sS'name'
p32686
S'to_aux_scalar'
p32687
sS'required'
p32688
I01
sS'group_name'
p32689
Nsa(dp32690
S'description'
p32691
g3
sS'cpp_type'
p32692
S'std::string'
p32693
sS'default'
p32694
S'MultiAppPostprocessorToAuxScalarTransfer'
p32695
sS'name'
p32696
S'type'
p32697
sS'required'
p32698
I00
sS'group_name'
p32699
Nsa(dp32700
S'description'
p32701
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32702
sS'cpp_type'
p32703
S'bool'
p32704
sS'default'
p32705
S'0'
p32706
sS'name'
p32707
S'use_displaced_mesh'
p32708
sS'required'
p32709
I00
sS'group_name'
p32710
S'Advanced'
p32711
sasS'name'
p32712
S'/Transfers/MultiAppPostprocessorToAuxScalarTransfer'
p32713
sa(dp32714
S'description'
p32715
g3
sS'type'
p32716
NsS'subblocks'
p32717
NsS'parameters'
p32718
(lp32719
(dp32720
S'name'
p32721
S'direction'
p32722
sS'cpp_type'
p32723
S'MooseEnum'
p32724
sS'default'
p32725
g3
sS'description'
p32726
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p32727
sS'required'
p32728
I01
sS'options'
p32729
S'to_multiapp from_multiapp'
p32730
sS'group_name'
p32731
Nsa(dp32732
S'name'
p32733
S'execute_on'
p32734
sS'cpp_type'
p32735
S'MooseEnum'
p32736
sS'default'
p32737
S'timestep_begin'
p32738
sS'description'
p32739
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p32740
sS'required'
p32741
I00
sS'options'
p32742
S'initial residual jacobian timestep timestep_begin custom'
p32743
sS'group_name'
p32744
Nsa(dp32745
S'description'
p32746
S'The name of the Postprocessor in the Master to transfer the value from.\n'
p32747
sS'cpp_type'
p32748
S'PostprocessorName'
p32749
sS'default'
p32750
g3
sS'name'
p32751
S'from_postprocessor'
p32752
sS'required'
p32753
I01
sS'group_name'
p32754
Nsa(dp32755
S'description'
p32756
S'The name of the MultiApp to use.\n'
p32757
sS'cpp_type'
p32758
S'MultiAppName'
p32759
sS'default'
p32760
g3
sS'name'
p32761
S'multi_app'
p32762
sS'required'
p32763
I01
sS'group_name'
p32764
Nsa(dp32765
S'description'
p32766
S'The name of the Postprocessor in the MultiApp to transfer the value to.  This should most likely be a Reporter Postprocessor.\n'
p32767
sS'cpp_type'
p32768
S'PostprocessorName'
p32769
sS'default'
p32770
g3
sS'name'
p32771
S'to_postprocessor'
p32772
sS'required'
p32773
I01
sS'group_name'
p32774
Nsa(dp32775
S'description'
p32776
g3
sS'cpp_type'
p32777
S'std::string'
p32778
sS'default'
p32779
S'MultiAppPostprocessorTransfer'
p32780
sS'name'
p32781
S'type'
p32782
sS'required'
p32783
I00
sS'group_name'
p32784
Nsa(dp32785
S'description'
p32786
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32787
sS'cpp_type'
p32788
S'bool'
p32789
sS'default'
p32790
S'0'
p32791
sS'name'
p32792
S'use_displaced_mesh'
p32793
sS'required'
p32794
I00
sS'group_name'
p32795
S'Advanced'
p32796
sasS'name'
p32797
S'/Transfers/MultiAppPostprocessorTransfer'
p32798
sa(dp32799
S'description'
p32800
g3
sS'type'
p32801
NsS'subblocks'
p32802
NsS'parameters'
p32803
(lp32804
(dp32805
S'name'
p32806
S'direction'
p32807
sS'cpp_type'
p32808
S'MooseEnum'
p32809
sS'default'
p32810
g3
sS'description'
p32811
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p32812
sS'required'
p32813
I01
sS'options'
p32814
S'to_multiapp from_multiapp'
p32815
sS'group_name'
p32816
Nsa(dp32817
S'name'
p32818
S'execute_on'
p32819
sS'cpp_type'
p32820
S'MooseEnum'
p32821
sS'default'
p32822
S'timestep_begin'
p32823
sS'description'
p32824
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p32825
sS'required'
p32826
I00
sS'options'
p32827
S'initial residual jacobian timestep timestep_begin custom'
p32828
sS'group_name'
p32829
Nsa(dp32830
S'name'
p32831
S'family'
p32832
sS'cpp_type'
p32833
S'MooseEnum'
p32834
sS'default'
p32835
S'LAGRANGE'
p32836
sS'description'
p32837
S'Specifies the family of FE shape functions to use for this variable\n'
p32838
sS'required'
p32839
I00
sS'options'
p32840
S'LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC'
p32841
sS'group_name'
p32842
Nsa(dp32843
S'description'
p32844
S'The name of the MultiApp to use.\n'
p32845
sS'cpp_type'
p32846
S'MultiAppName'
p32847
sS'default'
p32848
g3
sS'name'
p32849
S'multi_app'
p32850
sS'required'
p32851
I01
sS'group_name'
p32852
Nsa(dp32853
S'name'
p32854
S'order'
p32855
sS'cpp_type'
p32856
S'MooseEnum'
p32857
sS'default'
p32858
S'FIRST'
p32859
sS'description'
p32860
S'Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n'
p32861
sS'required'
p32862
I00
sS'options'
p32863
S'CONSTANT FIRST SECOND THIRD FOURTH'
p32864
sS'group_name'
p32865
Nsa(dp32866
S'name'
p32867
S'proj_type'
p32868
sS'cpp_type'
p32869
S'MooseEnum'
p32870
sS'default'
p32871
S'l2'
p32872
sS'description'
p32873
S'The type of the projection.\n'
p32874
sS'required'
p32875
I00
sS'options'
p32876
S'l2'
p32877
sS'group_name'
p32878
Nsa(dp32879
S'description'
p32880
S'The variable to transfer from.\n'
p32881
sS'cpp_type'
p32882
S'VariableName'
p32883
sS'default'
p32884
g3
sS'name'
p32885
S'source_variable'
p32886
sS'required'
p32887
I01
sS'group_name'
p32888
Nsa(dp32889
S'description'
p32890
g3
sS'cpp_type'
p32891
S'std::string'
p32892
sS'default'
p32893
S'MultiAppProjectionTransfer'
p32894
sS'name'
p32895
S'type'
p32896
sS'required'
p32897
I00
sS'group_name'
p32898
Nsa(dp32899
S'description'
p32900
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32901
sS'cpp_type'
p32902
S'bool'
p32903
sS'default'
p32904
S'0'
p32905
sS'name'
p32906
S'use_displaced_mesh'
p32907
sS'required'
p32908
I00
sS'group_name'
p32909
S'Advanced'
p32910
sa(dp32911
S'description'
p32912
S'The auxiliary variable to store the transferred values in.\n'
p32913
sS'cpp_type'
p32914
S'AuxVariableName'
p32915
sS'default'
p32916
g3
sS'name'
p32917
S'variable'
p32918
sS'required'
p32919
I01
sS'group_name'
p32920
NsasS'name'
p32921
S'/Transfers/MultiAppProjectionTransfer'
p32922
sa(dp32923
S'description'
p32924
g3
sS'type'
p32925
NsS'subblocks'
p32926
NsS'parameters'
p32927
(lp32928
(dp32929
S'name'
p32930
S'direction'
p32931
sS'cpp_type'
p32932
S'MooseEnum'
p32933
sS'default'
p32934
g3
sS'description'
p32935
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p32936
sS'required'
p32937
I01
sS'options'
p32938
S'to_multiapp from_multiapp'
p32939
sS'group_name'
p32940
Nsa(dp32941
S'description'
p32942
S'Whether or not to use the displaced mesh for the target mesh.\n'
p32943
sS'cpp_type'
p32944
S'bool'
p32945
sS'default'
p32946
S'0'
p32947
sS'name'
p32948
S'displaced_target_mesh'
p32949
sS'required'
p32950
I00
sS'group_name'
p32951
Nsa(dp32952
S'name'
p32953
S'execute_on'
p32954
sS'cpp_type'
p32955
S'MooseEnum'
p32956
sS'default'
p32957
S'timestep_begin'
p32958
sS'description'
p32959
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p32960
sS'required'
p32961
I00
sS'options'
p32962
S'initial residual jacobian timestep timestep_begin custom'
p32963
sS'group_name'
p32964
Nsa(dp32965
S'description'
p32966
S'The name of the MultiApp to use.\n'
p32967
sS'cpp_type'
p32968
S'MultiAppName'
p32969
sS'default'
p32970
g3
sS'name'
p32971
S'multi_app'
p32972
sS'required'
p32973
I01
sS'group_name'
p32974
Nsa(dp32975
S'description'
p32976
g3
sS'cpp_type'
p32977
S'std::string'
p32978
sS'default'
p32979
S'MultiAppUserObjectTransfer'
p32980
sS'name'
p32981
S'type'
p32982
sS'required'
p32983
I00
sS'group_name'
p32984
Nsa(dp32985
S'description'
p32986
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32987
sS'cpp_type'
p32988
S'bool'
p32989
sS'default'
p32990
S'0'
p32991
sS'name'
p32992
S'use_displaced_mesh'
p32993
sS'required'
p32994
I00
sS'group_name'
p32995
S'Advanced'
p32996
sa(dp32997
S'description'
p32998
S"The UserObject you want to transfer values from.  Note: This might be a UserObject from your MultiApp's input file!\n"
p32999
sS'cpp_type'
p33000
S'UserObjectName'
p33001
sS'default'
p33002
g3
sS'name'
p33003
S'user_object'
p33004
sS'required'
p33005
I01
sS'group_name'
p33006
Nsa(dp33007
S'description'
p33008
S'The auxiliary variable to store the transferred values in.\n'
p33009
sS'cpp_type'
p33010
S'AuxVariableName'
p33011
sS'default'
p33012
g3
sS'name'
p33013
S'variable'
p33014
sS'required'
p33015
I01
sS'group_name'
p33016
NsasS'name'
p33017
S'/Transfers/MultiAppUserObjectTransfer'
p33018
sa(dp33019
S'description'
p33020
g3
sS'type'
p33021
NsS'subblocks'
p33022
NsS'parameters'
p33023
(lp33024
(dp33025
S'name'
p33026
S'direction'
p33027
sS'cpp_type'
p33028
S'MooseEnum'
p33029
sS'default'
p33030
g3
sS'description'
p33031
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p33032
sS'required'
p33033
I01
sS'options'
p33034
S'to_multiapp from_multiapp'
p33035
sS'group_name'
p33036
Nsa(dp33037
S'name'
p33038
S'execute_on'
p33039
sS'cpp_type'
p33040
S'MooseEnum'
p33041
sS'default'
p33042
S'timestep_begin'
p33043
sS'description'
p33044
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p33045
sS'required'
p33046
I00
sS'options'
p33047
S'initial residual jacobian timestep timestep_begin custom'
p33048
sS'group_name'
p33049
Nsa(dp33050
S'description'
p33051
S'The name of the MultiApp to use.\n'
p33052
sS'cpp_type'
p33053
S'MultiAppName'
p33054
sS'default'
p33055
g3
sS'name'
p33056
S'multi_app'
p33057
sS'required'
p33058
I01
sS'group_name'
p33059
Nsa(dp33060
S'description'
p33061
S'The name of the postprocessor in the MultiApp to transfer the value to.  This should most likely be a Reporter Postprocessor.\n'
p33062
sS'cpp_type'
p33063
S'PostprocessorName'
p33064
sS'default'
p33065
g3
sS'name'
p33066
S'postprocessor'
p33067
sS'required'
p33068
I01
sS'group_name'
p33069
Nsa(dp33070
S'description'
p33071
S'The variable to transfer from.\n'
p33072
sS'cpp_type'
p33073
S'VariableName'
p33074
sS'default'
p33075
g3
sS'name'
p33076
S'source_variable'
p33077
sS'required'
p33078
I01
sS'group_name'
p33079
Nsa(dp33080
S'description'
p33081
g3
sS'cpp_type'
p33082
S'std::string'
p33083
sS'default'
p33084
S'MultiAppVariableValueSamplePostprocessorTransfer'
p33085
sS'name'
p33086
S'type'
p33087
sS'required'
p33088
I00
sS'group_name'
p33089
Nsa(dp33090
S'description'
p33091
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33092
sS'cpp_type'
p33093
S'bool'
p33094
sS'default'
p33095
S'0'
p33096
sS'name'
p33097
S'use_displaced_mesh'
p33098
sS'required'
p33099
I00
sS'group_name'
p33100
S'Advanced'
p33101
sasS'name'
p33102
S'/Transfers/MultiAppVariableValueSamplePostprocessorTransfer'
p33103
sa(dp33104
S'description'
p33105
g3
sS'type'
p33106
NsS'subblocks'
p33107
NsS'parameters'
p33108
(lp33109
(dp33110
S'name'
p33111
S'direction'
p33112
sS'cpp_type'
p33113
S'MooseEnum'
p33114
sS'default'
p33115
g3
sS'description'
p33116
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p33117
sS'required'
p33118
I01
sS'options'
p33119
S'to_multiapp from_multiapp'
p33120
sS'group_name'
p33121
Nsa(dp33122
S'name'
p33123
S'execute_on'
p33124
sS'cpp_type'
p33125
S'MooseEnum'
p33126
sS'default'
p33127
S'timestep_begin'
p33128
sS'description'
p33129
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p33130
sS'required'
p33131
I00
sS'options'
p33132
S'initial residual jacobian timestep timestep_begin custom'
p33133
sS'group_name'
p33134
Nsa(dp33135
S'description'
p33136
S'The name of the MultiApp to use.\n'
p33137
sS'cpp_type'
p33138
S'MultiAppName'
p33139
sS'default'
p33140
g3
sS'name'
p33141
S'multi_app'
p33142
sS'required'
p33143
I01
sS'group_name'
p33144
Nsa(dp33145
S'description'
p33146
S'The variable to transfer from.\n'
p33147
sS'cpp_type'
p33148
S'VariableName'
p33149
sS'default'
p33150
g3
sS'name'
p33151
S'source_variable'
p33152
sS'required'
p33153
I01
sS'group_name'
p33154
Nsa(dp33155
S'description'
p33156
g3
sS'cpp_type'
p33157
S'std::string'
p33158
sS'default'
p33159
S'MultiAppVariableValueSampleTransfer'
p33160
sS'name'
p33161
S'type'
p33162
sS'required'
p33163
I00
sS'group_name'
p33164
Nsa(dp33165
S'description'
p33166
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33167
sS'cpp_type'
p33168
S'bool'
p33169
sS'default'
p33170
S'0'
p33171
sS'name'
p33172
S'use_displaced_mesh'
p33173
sS'required'
p33174
I00
sS'group_name'
p33175
S'Advanced'
p33176
sa(dp33177
S'description'
p33178
S'The auxiliary variable to store the transferred values in.\n'
p33179
sS'cpp_type'
p33180
S'AuxVariableName'
p33181
sS'default'
p33182
g3
sS'name'
p33183
S'variable'
p33184
sS'required'
p33185
I01
sS'group_name'
p33186
NsasS'name'
p33187
S'/Transfers/MultiAppVariableValueSampleTransfer'
p33188
sasS'parameters'
p33189
NsS'name'
p33190
S'/Transfers'
p33191
sa(dp33192
S'description'
p33193
g3
sS'type'
p33194
NsS'subblocks'
p33195
(lp33196
(dp33197
S'description'
p33198
g3
sS'type'
p33199
NsS'subblocks'
p33200
NsS'parameters'
p33201
(lp33202
(dp33203
S'description'
p33204
S'A string representing the Moose Object that will be built by this Action\n'
p33205
sS'cpp_type'
p33206
S'std::string'
p33207
sS'default'
p33208
g3
sS'name'
p33209
S'type'
p33210
sS'required'
p33211
I01
sS'group_name'
p33212
NsasS'name'
p33213
S'/UserObjects/*'
p33214
sa(dp33215
S'description'
p33216
g3
sS'type'
p33217
NsS'subblocks'
p33218
NsS'parameters'
p33219
(lp33220
(dp33221
S'description'
p33222
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p33223
sS'cpp_type'
p33224
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p33225
sS'default'
p33226
g3
sS'name'
p33227
S'boundary'
p33228
sS'required'
p33229
I00
sS'group_name'
p33230
Nsa(dp33231
S'name'
p33232
S'execute_on'
p33233
sS'cpp_type'
p33234
S'MooseEnum'
p33235
sS'default'
p33236
S'timestep'
p33237
sS'description'
p33238
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p33239
sS'required'
p33240
I00
sS'options'
p33241
S'initial residual jacobian timestep timestep_begin custom'
p33242
sS'group_name'
p33243
Nsa(dp33244
S'description'
p33245
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p33246
sS'cpp_type'
p33247
S'std::vector<OutputName, std::allocator<OutputName> >'
p33248
sS'default'
p33249
g3
sS'name'
p33250
S'outputs'
p33251
sS'required'
p33252
I00
sS'group_name'
p33253
S'Advanced'
p33254
sa(dp33255
S'description'
p33256
g3
sS'cpp_type'
p33257
S'std::string'
p33258
sS'default'
p33259
S'AreaPostprocessor'
p33260
sS'name'
p33261
S'type'
p33262
sS'required'
p33263
I00
sS'group_name'
p33264
Nsa(dp33265
S'description'
p33266
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33267
sS'cpp_type'
p33268
S'bool'
p33269
sS'default'
p33270
S'0'
p33271
sS'name'
p33272
S'use_displaced_mesh'
p33273
sS'required'
p33274
I00
sS'group_name'
p33275
S'Advanced'
p33276
sasS'name'
p33277
S'/UserObjects/AreaPostprocessor'
p33278
sa(dp33279
S'description'
p33280
g3
sS'type'
p33281
NsS'subblocks'
p33282
NsS'parameters'
p33283
(lp33284
(dp33285
S'description'
p33286
S'The list of block ids (SubdomainID) that this object will be applied\n'
p33287
sS'cpp_type'
p33288
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p33289
sS'default'
p33290
g3
sS'name'
p33291
S'block'
p33292
sS'required'
p33293
I00
sS'group_name'
p33294
Nsa(dp33295
S'name'
p33296
S'execute_on'
p33297
sS'cpp_type'
p33298
S'MooseEnum'
p33299
sS'default'
p33300
S'timestep'
p33301
sS'description'
p33302
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p33303
sS'required'
p33304
I00
sS'options'
p33305
S'initial residual jacobian timestep timestep_begin custom'
p33306
sS'group_name'
p33307
Nsa(dp33308
S'description'
p33309
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p33310
sS'cpp_type'
p33311
S'std::vector<OutputName, std::allocator<OutputName> >'
p33312
sS'default'
p33313
g3
sS'name'
p33314
S'outputs'
p33315
sS'required'
p33316
I00
sS'group_name'
p33317
S'Advanced'
p33318
sa(dp33319
S'description'
p33320
S'The seed for the master random number generator\n'
p33321
sS'cpp_type'
p33322
S'unsigned int'
p33323
sS'default'
p33324
S'0'
p33325
sS'name'
p33326
S'seed'
p33327
sS'required'
p33328
I00
sS'group_name'
p33329
S'Advanced'
p33330
sa(dp33331
S'description'
p33332
g3
sS'cpp_type'
p33333
S'std::string'
p33334
sS'default'
p33335
S'AverageElementSize'
p33336
sS'name'
p33337
S'type'
p33338
sS'required'
p33339
I00
sS'group_name'
p33340
Nsa(dp33341
S'description'
p33342
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33343
sS'cpp_type'
p33344
S'bool'
p33345
sS'default'
p33346
S'0'
p33347
sS'name'
p33348
S'use_displaced_mesh'
p33349
sS'required'
p33350
I00
sS'group_name'
p33351
S'Advanced'
p33352
sa(dp33353
S'description'
p33354
S'The name of the variable that this object operates on\n'
p33355
sS'cpp_type'
p33356
S'VariableName'
p33357
sS'default'
p33358
g3
sS'name'
p33359
S'variable'
p33360
sS'required'
p33361
I01
sS'group_name'
p33362
NsasS'name'
p33363
S'/UserObjects/AverageElementSize'
p33364
sa(dp33365
S'description'
p33366
g3
sS'type'
p33367
NsS'subblocks'
p33368
NsS'parameters'
p33369
(lp33370
(dp33371
S'description'
p33372
S'The list of block ids (SubdomainID) that this object will be applied\n'
p33373
sS'cpp_type'
p33374
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p33375
sS'default'
p33376
g3
sS'name'
p33377
S'block'
p33378
sS'required'
p33379
I00
sS'group_name'
p33380
Nsa(dp33381
S'description'
p33382
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p33383
sS'cpp_type'
p33384
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p33385
sS'default'
p33386
g3
sS'name'
p33387
S'boundary'
p33388
sS'required'
p33389
I00
sS'group_name'
p33390
Nsa(dp33391
S'name'
p33392
S'execute_on'
p33393
sS'cpp_type'
p33394
S'MooseEnum'
p33395
sS'default'
p33396
S'timestep'
p33397
sS'description'
p33398
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p33399
sS'required'
p33400
I00
sS'options'
p33401
S'initial residual jacobian timestep timestep_begin custom'
p33402
sS'group_name'
p33403
Nsa(dp33404
S'description'
p33405
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p33406
sS'cpp_type'
p33407
S'std::vector<OutputName, std::allocator<OutputName> >'
p33408
sS'default'
p33409
g3
sS'name'
p33410
S'outputs'
p33411
sS'required'
p33412
I00
sS'group_name'
p33413
S'Advanced'
p33414
sa(dp33415
S'description'
p33416
S'The seed for the master random number generator\n'
p33417
sS'cpp_type'
p33418
S'unsigned int'
p33419
sS'default'
p33420
S'0'
p33421
sS'name'
p33422
S'seed'
p33423
sS'required'
p33424
I00
sS'group_name'
p33425
S'Advanced'
p33426
sa(dp33427
S'description'
p33428
g3
sS'cpp_type'
p33429
S'std::string'
p33430
sS'default'
p33431
S'AverageNodalVariableValue'
p33432
sS'name'
p33433
S'type'
p33434
sS'required'
p33435
I00
sS'group_name'
p33436
Nsa(dp33437
S'description'
p33438
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33439
sS'cpp_type'
p33440
S'bool'
p33441
sS'default'
p33442
S'0'
p33443
sS'name'
p33444
S'use_displaced_mesh'
p33445
sS'required'
p33446
I00
sS'group_name'
p33447
S'Advanced'
p33448
sa(dp33449
S'description'
p33450
S'The name of the variable that this postprocessor operates on\n'
p33451
sS'cpp_type'
p33452
S'VariableName'
p33453
sS'default'
p33454
g3
sS'name'
p33455
S'variable'
p33456
sS'required'
p33457
I01
sS'group_name'
p33458
NsasS'name'
p33459
S'/UserObjects/AverageNodalVariableValue'
p33460
sa(dp33461
S'description'
p33462
g3
sS'type'
p33463
NsS'subblocks'
p33464
NsS'parameters'
p33465
(lp33466
(dp33467
S'description'
p33468
S'The list of block ids (SubdomainID) that this object will be applied\n'
p33469
sS'cpp_type'
p33470
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p33471
sS'default'
p33472
g3
sS'name'
p33473
S'block'
p33474
sS'required'
p33475
I00
sS'group_name'
p33476
Nsa(dp33477
S'name'
p33478
S'execute_on'
p33479
sS'cpp_type'
p33480
S'MooseEnum'
p33481
sS'default'
p33482
S'timestep'
p33483
sS'description'
p33484
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p33485
sS'required'
p33486
I00
sS'options'
p33487
S'initial residual jacobian timestep timestep_begin custom'
p33488
sS'group_name'
p33489
Nsa(dp33490
S'description'
p33491
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p33492
sS'cpp_type'
p33493
S'std::vector<OutputName, std::allocator<OutputName> >'
p33494
sS'default'
p33495
g3
sS'name'
p33496
S'outputs'
p33497
sS'required'
p33498
I00
sS'group_name'
p33499
S'Advanced'
p33500
sa(dp33501
S'description'
p33502
S'The seed for the master random number generator\n'
p33503
sS'cpp_type'
p33504
S'unsigned int'
p33505
sS'default'
p33506
S'0'
p33507
sS'name'
p33508
S'seed'
p33509
sS'required'
p33510
I00
sS'group_name'
p33511
S'Advanced'
p33512
sa(dp33513
S'description'
p33514
g3
sS'cpp_type'
p33515
S'std::string'
p33516
sS'default'
p33517
S'ElementAverageTimeDerivative'
p33518
sS'name'
p33519
S'type'
p33520
sS'required'
p33521
I00
sS'group_name'
p33522
Nsa(dp33523
S'description'
p33524
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33525
sS'cpp_type'
p33526
S'bool'
p33527
sS'default'
p33528
S'0'
p33529
sS'name'
p33530
S'use_displaced_mesh'
p33531
sS'required'
p33532
I00
sS'group_name'
p33533
S'Advanced'
p33534
sa(dp33535
S'description'
p33536
S'The name of the variable that this object operates on\n'
p33537
sS'cpp_type'
p33538
S'VariableName'
p33539
sS'default'
p33540
g3
sS'name'
p33541
S'variable'
p33542
sS'required'
p33543
I01
sS'group_name'
p33544
NsasS'name'
p33545
S'/UserObjects/ElementAverageTimeDerivative'
p33546
sa(dp33547
S'description'
p33548
g3
sS'type'
p33549
NsS'subblocks'
p33550
NsS'parameters'
p33551
(lp33552
(dp33553
S'description'
p33554
S'The list of block ids (SubdomainID) that this object will be applied\n'
p33555
sS'cpp_type'
p33556
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p33557
sS'default'
p33558
g3
sS'name'
p33559
S'block'
p33560
sS'required'
p33561
I00
sS'group_name'
p33562
Nsa(dp33563
S'name'
p33564
S'execute_on'
p33565
sS'cpp_type'
p33566
S'MooseEnum'
p33567
sS'default'
p33568
S'timestep'
p33569
sS'description'
p33570
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p33571
sS'required'
p33572
I00
sS'options'
p33573
S'initial residual jacobian timestep timestep_begin custom'
p33574
sS'group_name'
p33575
Nsa(dp33576
S'description'
p33577
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p33578
sS'cpp_type'
p33579
S'std::vector<OutputName, std::allocator<OutputName> >'
p33580
sS'default'
p33581
g3
sS'name'
p33582
S'outputs'
p33583
sS'required'
p33584
I00
sS'group_name'
p33585
S'Advanced'
p33586
sa(dp33587
S'description'
p33588
S'The seed for the master random number generator\n'
p33589
sS'cpp_type'
p33590
S'unsigned int'
p33591
sS'default'
p33592
S'0'
p33593
sS'name'
p33594
S'seed'
p33595
sS'required'
p33596
I00
sS'group_name'
p33597
S'Advanced'
p33598
sa(dp33599
S'description'
p33600
g3
sS'cpp_type'
p33601
S'std::string'
p33602
sS'default'
p33603
S'ElementAverageValue'
p33604
sS'name'
p33605
S'type'
p33606
sS'required'
p33607
I00
sS'group_name'
p33608
Nsa(dp33609
S'description'
p33610
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33611
sS'cpp_type'
p33612
S'bool'
p33613
sS'default'
p33614
S'0'
p33615
sS'name'
p33616
S'use_displaced_mesh'
p33617
sS'required'
p33618
I00
sS'group_name'
p33619
S'Advanced'
p33620
sa(dp33621
S'description'
p33622
S'The name of the variable that this object operates on\n'
p33623
sS'cpp_type'
p33624
S'VariableName'
p33625
sS'default'
p33626
g3
sS'name'
p33627
S'variable'
p33628
sS'required'
p33629
I01
sS'group_name'
p33630
NsasS'name'
p33631
S'/UserObjects/ElementAverageValue'
p33632
sa(dp33633
S'description'
p33634
g3
sS'type'
p33635
NsS'subblocks'
p33636
NsS'parameters'
p33637
(lp33638
(dp33639
S'description'
p33640
S'The list of block ids (SubdomainID) that this object will be applied\n'
p33641
sS'cpp_type'
p33642
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p33643
sS'default'
p33644
g3
sS'name'
p33645
S'block'
p33646
sS'required'
p33647
I00
sS'group_name'
p33648
Nsa(dp33649
S'name'
p33650
S'execute_on'
p33651
sS'cpp_type'
p33652
S'MooseEnum'
p33653
sS'default'
p33654
S'timestep'
p33655
sS'description'
p33656
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p33657
sS'required'
p33658
I00
sS'options'
p33659
S'initial residual jacobian timestep timestep_begin custom'
p33660
sS'group_name'
p33661
Nsa(dp33662
S'description'
p33663
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p33664
sS'cpp_type'
p33665
S'std::vector<OutputName, std::allocator<OutputName> >'
p33666
sS'default'
p33667
g3
sS'name'
p33668
S'outputs'
p33669
sS'required'
p33670
I00
sS'group_name'
p33671
S'Advanced'
p33672
sa(dp33673
S'description'
p33674
S'The seed for the master random number generator\n'
p33675
sS'cpp_type'
p33676
S'unsigned int'
p33677
sS'default'
p33678
S'0'
p33679
sS'name'
p33680
S'seed'
p33681
sS'required'
p33682
I00
sS'group_name'
p33683
S'Advanced'
p33684
sa(dp33685
S'description'
p33686
g3
sS'cpp_type'
p33687
S'std::string'
p33688
sS'default'
p33689
S'ElementExtremeValue'
p33690
sS'name'
p33691
S'type'
p33692
sS'required'
p33693
I00
sS'group_name'
p33694
Nsa(dp33695
S'description'
p33696
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33697
sS'cpp_type'
p33698
S'bool'
p33699
sS'default'
p33700
S'0'
p33701
sS'name'
p33702
S'use_displaced_mesh'
p33703
sS'required'
p33704
I00
sS'group_name'
p33705
S'Advanced'
p33706
sa(dp33707
S'name'
p33708
S'value_type'
p33709
sS'cpp_type'
p33710
S'MooseEnum'
p33711
sS'default'
p33712
S'max'
p33713
sS'description'
p33714
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p33715
sS'required'
p33716
I00
sS'options'
p33717
S'max min'
p33718
sS'group_name'
p33719
Nsa(dp33720
S'description'
p33721
S'The name of the variable that this postprocessor operates on\n'
p33722
sS'cpp_type'
p33723
S'VariableName'
p33724
sS'default'
p33725
g3
sS'name'
p33726
S'variable'
p33727
sS'required'
p33728
I01
sS'group_name'
p33729
NsasS'name'
p33730
S'/UserObjects/ElementExtremeValue'
p33731
sa(dp33732
S'description'
p33733
g3
sS'type'
p33734
NsS'subblocks'
p33735
NsS'parameters'
p33736
(lp33737
(dp33738
S'description'
p33739
S'The list of block ids (SubdomainID) that this object will be applied\n'
p33740
sS'cpp_type'
p33741
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p33742
sS'default'
p33743
g3
sS'name'
p33744
S'block'
p33745
sS'required'
p33746
I00
sS'group_name'
p33747
Nsa(dp33748
S'name'
p33749
S'execute_on'
p33750
sS'cpp_type'
p33751
S'MooseEnum'
p33752
sS'default'
p33753
S'timestep'
p33754
sS'description'
p33755
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p33756
sS'required'
p33757
I00
sS'options'
p33758
S'initial residual jacobian timestep timestep_begin custom'
p33759
sS'group_name'
p33760
Nsa(dp33761
S'description'
p33762
S'The analytic solution to compare against\n'
p33763
sS'cpp_type'
p33764
S'FunctionName'
p33765
sS'default'
p33766
g3
sS'name'
p33767
S'function'
p33768
sS'required'
p33769
I01
sS'group_name'
p33770
Nsa(dp33771
S'description'
p33772
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p33773
sS'cpp_type'
p33774
S'std::vector<OutputName, std::allocator<OutputName> >'
p33775
sS'default'
p33776
g3
sS'name'
p33777
S'outputs'
p33778
sS'required'
p33779
I00
sS'group_name'
p33780
S'Advanced'
p33781
sa(dp33782
S'description'
p33783
S'The seed for the master random number generator\n'
p33784
sS'cpp_type'
p33785
S'unsigned int'
p33786
sS'default'
p33787
S'0'
p33788
sS'name'
p33789
S'seed'
p33790
sS'required'
p33791
I00
sS'group_name'
p33792
S'Advanced'
p33793
sa(dp33794
S'description'
p33795
g3
sS'cpp_type'
p33796
S'std::string'
p33797
sS'default'
p33798
S'ElementH1Error'
p33799
sS'name'
p33800
S'type'
p33801
sS'required'
p33802
I00
sS'group_name'
p33803
Nsa(dp33804
S'description'
p33805
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33806
sS'cpp_type'
p33807
S'bool'
p33808
sS'default'
p33809
S'0'
p33810
sS'name'
p33811
S'use_displaced_mesh'
p33812
sS'required'
p33813
I00
sS'group_name'
p33814
S'Advanced'
p33815
sa(dp33816
S'description'
p33817
S'The name of the variable that this object operates on\n'
p33818
sS'cpp_type'
p33819
S'VariableName'
p33820
sS'default'
p33821
g3
sS'name'
p33822
S'variable'
p33823
sS'required'
p33824
I01
sS'group_name'
p33825
NsasS'name'
p33826
S'/UserObjects/ElementH1Error'
p33827
sa(dp33828
S'description'
p33829
g3
sS'type'
p33830
NsS'subblocks'
p33831
NsS'parameters'
p33832
(lp33833
(dp33834
S'description'
p33835
S'The list of block ids (SubdomainID) that this object will be applied\n'
p33836
sS'cpp_type'
p33837
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p33838
sS'default'
p33839
g3
sS'name'
p33840
S'block'
p33841
sS'required'
p33842
I00
sS'group_name'
p33843
Nsa(dp33844
S'name'
p33845
S'execute_on'
p33846
sS'cpp_type'
p33847
S'MooseEnum'
p33848
sS'default'
p33849
S'timestep'
p33850
sS'description'
p33851
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p33852
sS'required'
p33853
I00
sS'options'
p33854
S'initial residual jacobian timestep timestep_begin custom'
p33855
sS'group_name'
p33856
Nsa(dp33857
S'description'
p33858
S'The analytic solution to compare against\n'
p33859
sS'cpp_type'
p33860
S'FunctionName'
p33861
sS'default'
p33862
g3
sS'name'
p33863
S'function'
p33864
sS'required'
p33865
I01
sS'group_name'
p33866
Nsa(dp33867
S'description'
p33868
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p33869
sS'cpp_type'
p33870
S'std::vector<OutputName, std::allocator<OutputName> >'
p33871
sS'default'
p33872
g3
sS'name'
p33873
S'outputs'
p33874
sS'required'
p33875
I00
sS'group_name'
p33876
S'Advanced'
p33877
sa(dp33878
S'description'
p33879
S'The seed for the master random number generator\n'
p33880
sS'cpp_type'
p33881
S'unsigned int'
p33882
sS'default'
p33883
S'0'
p33884
sS'name'
p33885
S'seed'
p33886
sS'required'
p33887
I00
sS'group_name'
p33888
S'Advanced'
p33889
sa(dp33890
S'description'
p33891
g3
sS'cpp_type'
p33892
S'std::string'
p33893
sS'default'
p33894
S'ElementH1SemiError'
p33895
sS'name'
p33896
S'type'
p33897
sS'required'
p33898
I00
sS'group_name'
p33899
Nsa(dp33900
S'description'
p33901
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33902
sS'cpp_type'
p33903
S'bool'
p33904
sS'default'
p33905
S'0'
p33906
sS'name'
p33907
S'use_displaced_mesh'
p33908
sS'required'
p33909
I00
sS'group_name'
p33910
S'Advanced'
p33911
sa(dp33912
S'description'
p33913
S'The name of the variable that this object operates on\n'
p33914
sS'cpp_type'
p33915
S'VariableName'
p33916
sS'default'
p33917
g3
sS'name'
p33918
S'variable'
p33919
sS'required'
p33920
I01
sS'group_name'
p33921
NsasS'name'
p33922
S'/UserObjects/ElementH1SemiError'
p33923
sa(dp33924
S'description'
p33925
g3
sS'type'
p33926
NsS'subblocks'
p33927
NsS'parameters'
p33928
(lp33929
(dp33930
S'description'
p33931
S'The list of block ids (SubdomainID) that this object will be applied\n'
p33932
sS'cpp_type'
p33933
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p33934
sS'default'
p33935
g3
sS'name'
p33936
S'block'
p33937
sS'required'
p33938
I00
sS'group_name'
p33939
Nsa(dp33940
S'name'
p33941
S'execute_on'
p33942
sS'cpp_type'
p33943
S'MooseEnum'
p33944
sS'default'
p33945
S'timestep'
p33946
sS'description'
p33947
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p33948
sS'required'
p33949
I00
sS'options'
p33950
S'initial residual jacobian timestep timestep_begin custom'
p33951
sS'group_name'
p33952
Nsa(dp33953
S'description'
p33954
S'The name of the material property\n'
p33955
sS'cpp_type'
p33956
S'std::string'
p33957
sS'default'
p33958
g3
sS'name'
p33959
S'mat_prop'
p33960
sS'required'
p33961
I01
sS'group_name'
p33962
Nsa(dp33963
S'description'
p33964
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p33965
sS'cpp_type'
p33966
S'std::vector<OutputName, std::allocator<OutputName> >'
p33967
sS'default'
p33968
g3
sS'name'
p33969
S'outputs'
p33970
sS'required'
p33971
I00
sS'group_name'
p33972
S'Advanced'
p33973
sa(dp33974
S'description'
p33975
S'The seed for the master random number generator\n'
p33976
sS'cpp_type'
p33977
S'unsigned int'
p33978
sS'default'
p33979
S'0'
p33980
sS'name'
p33981
S'seed'
p33982
sS'required'
p33983
I00
sS'group_name'
p33984
S'Advanced'
p33985
sa(dp33986
S'description'
p33987
g3
sS'cpp_type'
p33988
S'std::string'
p33989
sS'default'
p33990
S'ElementIntegralMaterialProperty'
p33991
sS'name'
p33992
S'type'
p33993
sS'required'
p33994
I00
sS'group_name'
p33995
Nsa(dp33996
S'description'
p33997
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33998
sS'cpp_type'
p33999
S'bool'
p34000
sS'default'
p34001
S'0'
p34002
sS'name'
p34003
S'use_displaced_mesh'
p34004
sS'required'
p34005
I00
sS'group_name'
p34006
S'Advanced'
p34007
sasS'name'
p34008
S'/UserObjects/ElementIntegralMaterialProperty'
p34009
sa(dp34010
S'description'
p34011
g3
sS'type'
p34012
NsS'subblocks'
p34013
NsS'parameters'
p34014
(lp34015
(dp34016
S'description'
p34017
S'The list of block ids (SubdomainID) that this object will be applied\n'
p34018
sS'cpp_type'
p34019
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p34020
sS'default'
p34021
g3
sS'name'
p34022
S'block'
p34023
sS'required'
p34024
I00
sS'group_name'
p34025
Nsa(dp34026
S'name'
p34027
S'execute_on'
p34028
sS'cpp_type'
p34029
S'MooseEnum'
p34030
sS'default'
p34031
S'timestep'
p34032
sS'description'
p34033
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p34034
sS'required'
p34035
I00
sS'options'
p34036
S'initial residual jacobian timestep timestep_begin custom'
p34037
sS'group_name'
p34038
Nsa(dp34039
S'description'
p34040
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p34041
sS'cpp_type'
p34042
S'std::vector<OutputName, std::allocator<OutputName> >'
p34043
sS'default'
p34044
g3
sS'name'
p34045
S'outputs'
p34046
sS'required'
p34047
I00
sS'group_name'
p34048
S'Advanced'
p34049
sa(dp34050
S'description'
p34051
S'The seed for the master random number generator\n'
p34052
sS'cpp_type'
p34053
S'unsigned int'
p34054
sS'default'
p34055
S'0'
p34056
sS'name'
p34057
S'seed'
p34058
sS'required'
p34059
I00
sS'group_name'
p34060
S'Advanced'
p34061
sa(dp34062
S'description'
p34063
g3
sS'cpp_type'
p34064
S'std::string'
p34065
sS'default'
p34066
S'ElementIntegralVariablePostprocessor'
p34067
sS'name'
p34068
S'type'
p34069
sS'required'
p34070
I00
sS'group_name'
p34071
Nsa(dp34072
S'description'
p34073
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34074
sS'cpp_type'
p34075
S'bool'
p34076
sS'default'
p34077
S'0'
p34078
sS'name'
p34079
S'use_displaced_mesh'
p34080
sS'required'
p34081
I00
sS'group_name'
p34082
S'Advanced'
p34083
sa(dp34084
S'description'
p34085
S'The name of the variable that this object operates on\n'
p34086
sS'cpp_type'
p34087
S'VariableName'
p34088
sS'default'
p34089
g3
sS'name'
p34090
S'variable'
p34091
sS'required'
p34092
I01
sS'group_name'
p34093
NsasS'name'
p34094
S'/UserObjects/ElementIntegralVariablePostprocessor'
p34095
sa(dp34096
S'description'
p34097
g3
sS'type'
p34098
NsS'subblocks'
p34099
NsS'parameters'
p34100
(lp34101
(dp34102
S'description'
p34103
S'The list of block ids (SubdomainID) that this object will be applied\n'
p34104
sS'cpp_type'
p34105
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p34106
sS'default'
p34107
g3
sS'name'
p34108
S'block'
p34109
sS'required'
p34110
I00
sS'group_name'
p34111
Nsa(dp34112
S'name'
p34113
S'execute_on'
p34114
sS'cpp_type'
p34115
S'MooseEnum'
p34116
sS'default'
p34117
S'timestep'
p34118
sS'description'
p34119
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p34120
sS'required'
p34121
I00
sS'options'
p34122
S'initial residual jacobian timestep timestep_begin custom'
p34123
sS'group_name'
p34124
Nsa(dp34125
S'description'
p34126
S'The seed for the master random number generator\n'
p34127
sS'cpp_type'
p34128
S'unsigned int'
p34129
sS'default'
p34130
S'0'
p34131
sS'name'
p34132
S'seed'
p34133
sS'required'
p34134
I00
sS'group_name'
p34135
S'Advanced'
p34136
sa(dp34137
S'description'
p34138
g3
sS'cpp_type'
p34139
S'std::string'
p34140
sS'default'
p34141
S'ElementIntegralVariableUserObject'
p34142
sS'name'
p34143
S'type'
p34144
sS'required'
p34145
I00
sS'group_name'
p34146
Nsa(dp34147
S'description'
p34148
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34149
sS'cpp_type'
p34150
S'bool'
p34151
sS'default'
p34152
S'0'
p34153
sS'name'
p34154
S'use_displaced_mesh'
p34155
sS'required'
p34156
I00
sS'group_name'
p34157
S'Advanced'
p34158
sa(dp34159
S'description'
p34160
S'The name of the variable that this object operates on\n'
p34161
sS'cpp_type'
p34162
S'VariableName'
p34163
sS'default'
p34164
g3
sS'name'
p34165
S'variable'
p34166
sS'required'
p34167
I01
sS'group_name'
p34168
NsasS'name'
p34169
S'/UserObjects/ElementIntegralVariableUserObject'
p34170
sa(dp34171
S'description'
p34172
g3
sS'type'
p34173
NsS'subblocks'
p34174
NsS'parameters'
p34175
(lp34176
(dp34177
S'description'
p34178
S'The list of block ids (SubdomainID) that this object will be applied\n'
p34179
sS'cpp_type'
p34180
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p34181
sS'default'
p34182
g3
sS'name'
p34183
S'block'
p34184
sS'required'
p34185
I00
sS'group_name'
p34186
Nsa(dp34187
S'name'
p34188
S'execute_on'
p34189
sS'cpp_type'
p34190
S'MooseEnum'
p34191
sS'default'
p34192
S'timestep'
p34193
sS'description'
p34194
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p34195
sS'required'
p34196
I00
sS'options'
p34197
S'initial residual jacobian timestep timestep_begin custom'
p34198
sS'group_name'
p34199
Nsa(dp34200
S'description'
p34201
S'The analytic solution to compare against\n'
p34202
sS'cpp_type'
p34203
S'FunctionName'
p34204
sS'default'
p34205
g3
sS'name'
p34206
S'function'
p34207
sS'required'
p34208
I01
sS'group_name'
p34209
Nsa(dp34210
S'description'
p34211
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p34212
sS'cpp_type'
p34213
S'std::vector<OutputName, std::allocator<OutputName> >'
p34214
sS'default'
p34215
g3
sS'name'
p34216
S'outputs'
p34217
sS'required'
p34218
I00
sS'group_name'
p34219
S'Advanced'
p34220
sa(dp34221
S'description'
p34222
S'The seed for the master random number generator\n'
p34223
sS'cpp_type'
p34224
S'unsigned int'
p34225
sS'default'
p34226
S'0'
p34227
sS'name'
p34228
S'seed'
p34229
sS'required'
p34230
I00
sS'group_name'
p34231
S'Advanced'
p34232
sa(dp34233
S'description'
p34234
g3
sS'cpp_type'
p34235
S'std::string'
p34236
sS'default'
p34237
S'ElementL2Error'
p34238
sS'name'
p34239
S'type'
p34240
sS'required'
p34241
I00
sS'group_name'
p34242
Nsa(dp34243
S'description'
p34244
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34245
sS'cpp_type'
p34246
S'bool'
p34247
sS'default'
p34248
S'0'
p34249
sS'name'
p34250
S'use_displaced_mesh'
p34251
sS'required'
p34252
I00
sS'group_name'
p34253
S'Advanced'
p34254
sa(dp34255
S'description'
p34256
S'The name of the variable that this object operates on\n'
p34257
sS'cpp_type'
p34258
S'VariableName'
p34259
sS'default'
p34260
g3
sS'name'
p34261
S'variable'
p34262
sS'required'
p34263
I01
sS'group_name'
p34264
NsasS'name'
p34265
S'/UserObjects/ElementL2Error'
p34266
sa(dp34267
S'description'
p34268
g3
sS'type'
p34269
NsS'subblocks'
p34270
NsS'parameters'
p34271
(lp34272
(dp34273
S'description'
p34274
S'The list of block ids (SubdomainID) that this object will be applied\n'
p34275
sS'cpp_type'
p34276
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p34277
sS'default'
p34278
g3
sS'name'
p34279
S'block'
p34280
sS'required'
p34281
I00
sS'group_name'
p34282
Nsa(dp34283
S'name'
p34284
S'execute_on'
p34285
sS'cpp_type'
p34286
S'MooseEnum'
p34287
sS'default'
p34288
S'timestep'
p34289
sS'description'
p34290
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p34291
sS'required'
p34292
I00
sS'options'
p34293
S'initial residual jacobian timestep timestep_begin custom'
p34294
sS'group_name'
p34295
Nsa(dp34296
S'description'
p34297
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p34298
sS'cpp_type'
p34299
S'std::vector<OutputName, std::allocator<OutputName> >'
p34300
sS'default'
p34301
g3
sS'name'
p34302
S'outputs'
p34303
sS'required'
p34304
I00
sS'group_name'
p34305
S'Advanced'
p34306
sa(dp34307
S'description'
p34308
S'The seed for the master random number generator\n'
p34309
sS'cpp_type'
p34310
S'unsigned int'
p34311
sS'default'
p34312
S'0'
p34313
sS'name'
p34314
S'seed'
p34315
sS'required'
p34316
I00
sS'group_name'
p34317
S'Advanced'
p34318
sa(dp34319
S'description'
p34320
g3
sS'cpp_type'
p34321
S'std::string'
p34322
sS'default'
p34323
S'ElementL2Norm'
p34324
sS'name'
p34325
S'type'
p34326
sS'required'
p34327
I00
sS'group_name'
p34328
Nsa(dp34329
S'description'
p34330
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34331
sS'cpp_type'
p34332
S'bool'
p34333
sS'default'
p34334
S'0'
p34335
sS'name'
p34336
S'use_displaced_mesh'
p34337
sS'required'
p34338
I00
sS'group_name'
p34339
S'Advanced'
p34340
sa(dp34341
S'description'
p34342
S'The name of the variable that this object operates on\n'
p34343
sS'cpp_type'
p34344
S'VariableName'
p34345
sS'default'
p34346
g3
sS'name'
p34347
S'variable'
p34348
sS'required'
p34349
I01
sS'group_name'
p34350
NsasS'name'
p34351
S'/UserObjects/ElementL2Norm'
p34352
sa(dp34353
S'description'
p34354
g3
sS'type'
p34355
NsS'subblocks'
p34356
NsS'parameters'
p34357
(lp34358
(dp34359
S'description'
p34360
S'The list of block ids (SubdomainID) that this object will be applied\n'
p34361
sS'cpp_type'
p34362
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p34363
sS'default'
p34364
g3
sS'name'
p34365
S'block'
p34366
sS'required'
p34367
I00
sS'group_name'
p34368
Nsa(dp34369
S'name'
p34370
S'execute_on'
p34371
sS'cpp_type'
p34372
S'MooseEnum'
p34373
sS'default'
p34374
S'timestep'
p34375
sS'description'
p34376
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p34377
sS'required'
p34378
I00
sS'options'
p34379
S'initial residual jacobian timestep timestep_begin custom'
p34380
sS'group_name'
p34381
Nsa(dp34382
S'description'
p34383
S'The analytic solution to compare against\n'
p34384
sS'cpp_type'
p34385
S'FunctionName'
p34386
sS'default'
p34387
g3
sS'name'
p34388
S'function_x'
p34389
sS'required'
p34390
I01
sS'group_name'
p34391
Nsa(dp34392
S'description'
p34393
S'The analytic solution to compare against\n'
p34394
sS'cpp_type'
p34395
S'FunctionName'
p34396
sS'default'
p34397
S'0'
p34398
sS'name'
p34399
S'function_y'
p34400
sS'required'
p34401
I00
sS'group_name'
p34402
Nsa(dp34403
S'description'
p34404
S'The analytic solution to compare against\n'
p34405
sS'cpp_type'
p34406
S'FunctionName'
p34407
sS'default'
p34408
S'0'
p34409
sS'name'
p34410
S'function_z'
p34411
sS'required'
p34412
I00
sS'group_name'
p34413
Nsa(dp34414
S'description'
p34415
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p34416
sS'cpp_type'
p34417
S'std::vector<OutputName, std::allocator<OutputName> >'
p34418
sS'default'
p34419
g3
sS'name'
p34420
S'outputs'
p34421
sS'required'
p34422
I00
sS'group_name'
p34423
S'Advanced'
p34424
sa(dp34425
S'description'
p34426
S'The seed for the master random number generator\n'
p34427
sS'cpp_type'
p34428
S'unsigned int'
p34429
sS'default'
p34430
S'0'
p34431
sS'name'
p34432
S'seed'
p34433
sS'required'
p34434
I00
sS'group_name'
p34435
S'Advanced'
p34436
sa(dp34437
S'description'
p34438
g3
sS'cpp_type'
p34439
S'std::string'
p34440
sS'default'
p34441
S'ElementVectorL2Error'
p34442
sS'name'
p34443
S'type'
p34444
sS'required'
p34445
I00
sS'group_name'
p34446
Nsa(dp34447
S'description'
p34448
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34449
sS'cpp_type'
p34450
S'bool'
p34451
sS'default'
p34452
S'0'
p34453
sS'name'
p34454
S'use_displaced_mesh'
p34455
sS'required'
p34456
I00
sS'group_name'
p34457
S'Advanced'
p34458
sa(dp34459
S'description'
p34460
S'The FE solution in x direction\n'
p34461
sS'cpp_type'
p34462
S'std::vector<VariableName>'
p34463
sS'default'
p34464
g3
sS'name'
p34465
S'var_x'
p34466
sS'required'
p34467
I01
sS'group_name'
p34468
Nsa(dp34469
S'description'
p34470
S'The FE solution in y direction\n'
p34471
sS'cpp_type'
p34472
S'std::vector<VariableName>'
p34473
sS'default'
p34474
S'0'
p34475
sS'name'
p34476
S'var_y'
p34477
sS'required'
p34478
I00
sS'group_name'
p34479
Nsa(dp34480
S'description'
p34481
S'The FE solution in z direction\n'
p34482
sS'cpp_type'
p34483
S'std::vector<VariableName>'
p34484
sS'default'
p34485
S'0'
p34486
sS'name'
p34487
S'var_z'
p34488
sS'required'
p34489
I00
sS'group_name'
p34490
NsasS'name'
p34491
S'/UserObjects/ElementVectorL2Error'
p34492
sa(dp34493
S'description'
p34494
g3
sS'type'
p34495
NsS'subblocks'
p34496
NsS'parameters'
p34497
(lp34498
(dp34499
S'description'
p34500
S'The ID of the element where we monitor\n'
p34501
sS'cpp_type'
p34502
S'unsigned int'
p34503
sS'default'
p34504
g3
sS'name'
p34505
S'elementid'
p34506
sS'required'
p34507
I01
sS'group_name'
p34508
Nsa(dp34509
S'name'
p34510
S'execute_on'
p34511
sS'cpp_type'
p34512
S'MooseEnum'
p34513
sS'default'
p34514
S'timestep'
p34515
sS'description'
p34516
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p34517
sS'required'
p34518
I00
sS'options'
p34519
S'initial residual jacobian timestep timestep_begin custom'
p34520
sS'group_name'
p34521
Nsa(dp34522
S'description'
p34523
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p34524
sS'cpp_type'
p34525
S'std::vector<OutputName, std::allocator<OutputName> >'
p34526
sS'default'
p34527
g3
sS'name'
p34528
S'outputs'
p34529
sS'required'
p34530
I00
sS'group_name'
p34531
S'Advanced'
p34532
sa(dp34533
S'description'
p34534
g3
sS'cpp_type'
p34535
S'std::string'
p34536
sS'default'
p34537
S'ElementalVariableValue'
p34538
sS'name'
p34539
S'type'
p34540
sS'required'
p34541
I00
sS'group_name'
p34542
Nsa(dp34543
S'description'
p34544
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34545
sS'cpp_type'
p34546
S'bool'
p34547
sS'default'
p34548
S'0'
p34549
sS'name'
p34550
S'use_displaced_mesh'
p34551
sS'required'
p34552
I00
sS'group_name'
p34553
S'Advanced'
p34554
sa(dp34555
S'description'
p34556
S'The variable to be monitored\n'
p34557
sS'cpp_type'
p34558
S'VariableName'
p34559
sS'default'
p34560
g3
sS'name'
p34561
S'variable'
p34562
sS'required'
p34563
I01
sS'group_name'
p34564
NsasS'name'
p34565
S'/UserObjects/ElementalVariableValue'
p34566
sa(dp34567
S'description'
p34568
g3
sS'type'
p34569
NsS'subblocks'
p34570
NsS'parameters'
p34571
(lp34572
(dp34573
S'name'
p34574
S'execute_on'
p34575
sS'cpp_type'
p34576
S'MooseEnum'
p34577
sS'default'
p34578
S'timestep'
p34579
sS'description'
p34580
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p34581
sS'required'
p34582
I00
sS'options'
p34583
S'initial residual jacobian timestep timestep_begin custom'
p34584
sS'group_name'
p34585
Nsa(dp34586
S'description'
p34587
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p34588
sS'cpp_type'
p34589
S'std::vector<OutputName, std::allocator<OutputName> >'
p34590
sS'default'
p34591
g3
sS'name'
p34592
S'outputs'
p34593
sS'required'
p34594
I00
sS'group_name'
p34595
S'Advanced'
p34596
sa(dp34597
S'description'
p34598
g3
sS'cpp_type'
p34599
S'std::string'
p34600
sS'default'
p34601
S'EmptyPostprocessor'
p34602
sS'name'
p34603
S'type'
p34604
sS'required'
p34605
I00
sS'group_name'
p34606
Nsa(dp34607
S'description'
p34608
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34609
sS'cpp_type'
p34610
S'bool'
p34611
sS'default'
p34612
S'0'
p34613
sS'name'
p34614
S'use_displaced_mesh'
p34615
sS'required'
p34616
I00
sS'group_name'
p34617
S'Advanced'
p34618
sasS'name'
p34619
S'/UserObjects/EmptyPostprocessor'
p34620
sa(dp34621
S'description'
p34622
g3
sS'type'
p34623
NsS'subblocks'
p34624
NsS'parameters'
p34625
(lp34626
(dp34627
S'description'
p34628
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p34629
sS'cpp_type'
p34630
S'unsigned int'
p34631
sS'default'
p34632
S'1'
p34633
sS'name'
p34634
S'average_radius'
p34635
sS'required'
p34636
I00
sS'group_name'
p34637
Nsa(dp34638
S'description'
p34639
S'The list of block ids (SubdomainID) that this object will be applied\n'
p34640
sS'cpp_type'
p34641
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p34642
sS'default'
p34643
g3
sS'name'
p34644
S'block'
p34645
sS'required'
p34646
I00
sS'group_name'
p34647
Nsa(dp34648
S'description'
p34649
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p34650
sS'cpp_type'
p34651
S'std::vector<double, std::allocator<double> >'
p34652
sS'default'
p34653
g3
sS'name'
p34654
S'bounds'
p34655
sS'required'
p34656
I00
sS'group_name'
p34657
Nsa(dp34658
S'name'
p34659
S'direction'
p34660
sS'cpp_type'
p34661
S'MooseEnum'
p34662
sS'default'
p34663
g3
sS'description'
p34664
S'The direction of the layers.\n'
p34665
sS'required'
p34666
I01
sS'options'
p34667
S'x y z'
p34668
sS'group_name'
p34669
Nsa(dp34670
S'name'
p34671
S'execute_on'
p34672
sS'cpp_type'
p34673
S'MooseEnum'
p34674
sS'default'
p34675
S'timestep'
p34676
sS'description'
p34677
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p34678
sS'required'
p34679
I00
sS'options'
p34680
S'initial residual jacobian timestep timestep_begin custom'
p34681
sS'group_name'
p34682
Nsa(dp34683
S'description'
p34684
S'The number of layers.\n'
p34685
sS'cpp_type'
p34686
S'unsigned int'
p34687
sS'default'
p34688
g3
sS'name'
p34689
S'num_layers'
p34690
sS'required'
p34691
I00
sS'group_name'
p34692
Nsa(dp34693
S'name'
p34694
S'sample_type'
p34695
sS'cpp_type'
p34696
S'MooseEnum'
p34697
sS'default'
p34698
S'direct'
p34699
sS'description'
p34700
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p34701
sS'required'
p34702
I00
sS'options'
p34703
S'direct interpolate average'
p34704
sS'group_name'
p34705
Nsa(dp34706
S'description'
p34707
S'The seed for the master random number generator\n'
p34708
sS'cpp_type'
p34709
S'unsigned int'
p34710
sS'default'
p34711
S'0'
p34712
sS'name'
p34713
S'seed'
p34714
sS'required'
p34715
I00
sS'group_name'
p34716
S'Advanced'
p34717
sa(dp34718
S'description'
p34719
g3
sS'cpp_type'
p34720
S'std::string'
p34721
sS'default'
p34722
S'LayeredAverage'
p34723
sS'name'
p34724
S'type'
p34725
sS'required'
p34726
I00
sS'group_name'
p34727
Nsa(dp34728
S'description'
p34729
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34730
sS'cpp_type'
p34731
S'bool'
p34732
sS'default'
p34733
S'0'
p34734
sS'name'
p34735
S'use_displaced_mesh'
p34736
sS'required'
p34737
I00
sS'group_name'
p34738
S'Advanced'
p34739
sa(dp34740
S'description'
p34741
S'The name of the variable that this object operates on\n'
p34742
sS'cpp_type'
p34743
S'VariableName'
p34744
sS'default'
p34745
g3
sS'name'
p34746
S'variable'
p34747
sS'required'
p34748
I01
sS'group_name'
p34749
NsasS'name'
p34750
S'/UserObjects/LayeredAverage'
p34751
sa(dp34752
S'description'
p34753
g3
sS'type'
p34754
NsS'subblocks'
p34755
NsS'parameters'
p34756
(lp34757
(dp34758
S'description'
p34759
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p34760
sS'cpp_type'
p34761
S'unsigned int'
p34762
sS'default'
p34763
S'1'
p34764
sS'name'
p34765
S'average_radius'
p34766
sS'required'
p34767
I00
sS'group_name'
p34768
Nsa(dp34769
S'description'
p34770
S'The list of block ids (SubdomainID) that this object will be applied\n'
p34771
sS'cpp_type'
p34772
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p34773
sS'default'
p34774
g3
sS'name'
p34775
S'block'
p34776
sS'required'
p34777
I00
sS'group_name'
p34778
Nsa(dp34779
S'description'
p34780
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p34781
sS'cpp_type'
p34782
S'std::vector<double, std::allocator<double> >'
p34783
sS'default'
p34784
g3
sS'name'
p34785
S'bounds'
p34786
sS'required'
p34787
I00
sS'group_name'
p34788
Nsa(dp34789
S'name'
p34790
S'direction'
p34791
sS'cpp_type'
p34792
S'MooseEnum'
p34793
sS'default'
p34794
g3
sS'description'
p34795
S'The direction of the layers.\n'
p34796
sS'required'
p34797
I01
sS'options'
p34798
S'x y z'
p34799
sS'group_name'
p34800
Nsa(dp34801
S'name'
p34802
S'execute_on'
p34803
sS'cpp_type'
p34804
S'MooseEnum'
p34805
sS'default'
p34806
S'timestep'
p34807
sS'description'
p34808
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p34809
sS'required'
p34810
I00
sS'options'
p34811
S'initial residual jacobian timestep timestep_begin custom'
p34812
sS'group_name'
p34813
Nsa(dp34814
S'description'
p34815
S'The number of layers.\n'
p34816
sS'cpp_type'
p34817
S'unsigned int'
p34818
sS'default'
p34819
g3
sS'name'
p34820
S'num_layers'
p34821
sS'required'
p34822
I00
sS'group_name'
p34823
Nsa(dp34824
S'name'
p34825
S'sample_type'
p34826
sS'cpp_type'
p34827
S'MooseEnum'
p34828
sS'default'
p34829
S'direct'
p34830
sS'description'
p34831
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p34832
sS'required'
p34833
I00
sS'options'
p34834
S'direct interpolate average'
p34835
sS'group_name'
p34836
Nsa(dp34837
S'description'
p34838
S'The seed for the master random number generator\n'
p34839
sS'cpp_type'
p34840
S'unsigned int'
p34841
sS'default'
p34842
S'0'
p34843
sS'name'
p34844
S'seed'
p34845
sS'required'
p34846
I00
sS'group_name'
p34847
S'Advanced'
p34848
sa(dp34849
S'description'
p34850
g3
sS'cpp_type'
p34851
S'std::string'
p34852
sS'default'
p34853
S'LayeredIntegral'
p34854
sS'name'
p34855
S'type'
p34856
sS'required'
p34857
I00
sS'group_name'
p34858
Nsa(dp34859
S'description'
p34860
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34861
sS'cpp_type'
p34862
S'bool'
p34863
sS'default'
p34864
S'0'
p34865
sS'name'
p34866
S'use_displaced_mesh'
p34867
sS'required'
p34868
I00
sS'group_name'
p34869
S'Advanced'
p34870
sa(dp34871
S'description'
p34872
S'The name of the variable that this object operates on\n'
p34873
sS'cpp_type'
p34874
S'VariableName'
p34875
sS'default'
p34876
g3
sS'name'
p34877
S'variable'
p34878
sS'required'
p34879
I01
sS'group_name'
p34880
NsasS'name'
p34881
S'/UserObjects/LayeredIntegral'
p34882
sa(dp34883
S'description'
p34884
g3
sS'type'
p34885
NsS'subblocks'
p34886
NsS'parameters'
p34887
(lp34888
(dp34889
S'description'
p34890
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p34891
sS'cpp_type'
p34892
S'unsigned int'
p34893
sS'default'
p34894
S'1'
p34895
sS'name'
p34896
S'average_radius'
p34897
sS'required'
p34898
I00
sS'group_name'
p34899
Nsa(dp34900
S'description'
p34901
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p34902
sS'cpp_type'
p34903
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p34904
sS'default'
p34905
g3
sS'name'
p34906
S'boundary'
p34907
sS'required'
p34908
I00
sS'group_name'
p34909
Nsa(dp34910
S'description'
p34911
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p34912
sS'cpp_type'
p34913
S'std::vector<double, std::allocator<double> >'
p34914
sS'default'
p34915
g3
sS'name'
p34916
S'bounds'
p34917
sS'required'
p34918
I00
sS'group_name'
p34919
Nsa(dp34920
S'name'
p34921
S'direction'
p34922
sS'cpp_type'
p34923
S'MooseEnum'
p34924
sS'default'
p34925
g3
sS'description'
p34926
S'The direction of the layers.\n'
p34927
sS'required'
p34928
I01
sS'options'
p34929
S'x y z'
p34930
sS'group_name'
p34931
Nsa(dp34932
S'name'
p34933
S'execute_on'
p34934
sS'cpp_type'
p34935
S'MooseEnum'
p34936
sS'default'
p34937
S'timestep'
p34938
sS'description'
p34939
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p34940
sS'required'
p34941
I00
sS'options'
p34942
S'initial residual jacobian timestep timestep_begin custom'
p34943
sS'group_name'
p34944
Nsa(dp34945
S'description'
p34946
S'The number of layers.\n'
p34947
sS'cpp_type'
p34948
S'unsigned int'
p34949
sS'default'
p34950
g3
sS'name'
p34951
S'num_layers'
p34952
sS'required'
p34953
I00
sS'group_name'
p34954
Nsa(dp34955
S'name'
p34956
S'sample_type'
p34957
sS'cpp_type'
p34958
S'MooseEnum'
p34959
sS'default'
p34960
S'direct'
p34961
sS'description'
p34962
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p34963
sS'required'
p34964
I00
sS'options'
p34965
S'direct interpolate average'
p34966
sS'group_name'
p34967
Nsa(dp34968
S'description'
p34969
g3
sS'cpp_type'
p34970
S'std::string'
p34971
sS'default'
p34972
S'LayeredSideAverage'
p34973
sS'name'
p34974
S'type'
p34975
sS'required'
p34976
I00
sS'group_name'
p34977
Nsa(dp34978
S'description'
p34979
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34980
sS'cpp_type'
p34981
S'bool'
p34982
sS'default'
p34983
S'0'
p34984
sS'name'
p34985
S'use_displaced_mesh'
p34986
sS'required'
p34987
I00
sS'group_name'
p34988
S'Advanced'
p34989
sa(dp34990
S'description'
p34991
S'The name of the variable that this boundary condition applies to\n'
p34992
sS'cpp_type'
p34993
S'VariableName'
p34994
sS'default'
p34995
g3
sS'name'
p34996
S'variable'
p34997
sS'required'
p34998
I01
sS'group_name'
p34999
NsasS'name'
p35000
S'/UserObjects/LayeredSideAverage'
p35001
sa(dp35002
S'description'
p35003
g3
sS'type'
p35004
NsS'subblocks'
p35005
NsS'parameters'
p35006
(lp35007
(dp35008
S'description'
p35009
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p35010
sS'cpp_type'
p35011
S'unsigned int'
p35012
sS'default'
p35013
S'1'
p35014
sS'name'
p35015
S'average_radius'
p35016
sS'required'
p35017
I00
sS'group_name'
p35018
Nsa(dp35019
S'description'
p35020
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35021
sS'cpp_type'
p35022
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35023
sS'default'
p35024
g3
sS'name'
p35025
S'boundary'
p35026
sS'required'
p35027
I00
sS'group_name'
p35028
Nsa(dp35029
S'description'
p35030
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p35031
sS'cpp_type'
p35032
S'std::vector<double, std::allocator<double> >'
p35033
sS'default'
p35034
g3
sS'name'
p35035
S'bounds'
p35036
sS'required'
p35037
I00
sS'group_name'
p35038
Nsa(dp35039
S'description'
p35040
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p35041
sS'cpp_type'
p35042
S'std::string'
p35043
sS'default'
p35044
g3
sS'name'
p35045
S'diffusivity'
p35046
sS'required'
p35047
I01
sS'group_name'
p35048
Nsa(dp35049
S'name'
p35050
S'direction'
p35051
sS'cpp_type'
p35052
S'MooseEnum'
p35053
sS'default'
p35054
g3
sS'description'
p35055
S'The direction of the layers.\n'
p35056
sS'required'
p35057
I01
sS'options'
p35058
S'x y z'
p35059
sS'group_name'
p35060
Nsa(dp35061
S'name'
p35062
S'execute_on'
p35063
sS'cpp_type'
p35064
S'MooseEnum'
p35065
sS'default'
p35066
S'timestep'
p35067
sS'description'
p35068
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p35069
sS'required'
p35070
I00
sS'options'
p35071
S'initial residual jacobian timestep timestep_begin custom'
p35072
sS'group_name'
p35073
Nsa(dp35074
S'description'
p35075
S'The number of layers.\n'
p35076
sS'cpp_type'
p35077
S'unsigned int'
p35078
sS'default'
p35079
g3
sS'name'
p35080
S'num_layers'
p35081
sS'required'
p35082
I00
sS'group_name'
p35083
Nsa(dp35084
S'name'
p35085
S'sample_type'
p35086
sS'cpp_type'
p35087
S'MooseEnum'
p35088
sS'default'
p35089
S'direct'
p35090
sS'description'
p35091
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p35092
sS'required'
p35093
I00
sS'options'
p35094
S'direct interpolate average'
p35095
sS'group_name'
p35096
Nsa(dp35097
S'description'
p35098
g3
sS'cpp_type'
p35099
S'std::string'
p35100
sS'default'
p35101
S'LayeredSideFluxAverage'
p35102
sS'name'
p35103
S'type'
p35104
sS'required'
p35105
I00
sS'group_name'
p35106
Nsa(dp35107
S'description'
p35108
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35109
sS'cpp_type'
p35110
S'bool'
p35111
sS'default'
p35112
S'0'
p35113
sS'name'
p35114
S'use_displaced_mesh'
p35115
sS'required'
p35116
I00
sS'group_name'
p35117
S'Advanced'
p35118
sa(dp35119
S'description'
p35120
S'The name of the variable that this boundary condition applies to\n'
p35121
sS'cpp_type'
p35122
S'VariableName'
p35123
sS'default'
p35124
g3
sS'name'
p35125
S'variable'
p35126
sS'required'
p35127
I01
sS'group_name'
p35128
NsasS'name'
p35129
S'/UserObjects/LayeredSideFluxAverage'
p35130
sa(dp35131
S'description'
p35132
g3
sS'type'
p35133
NsS'subblocks'
p35134
NsS'parameters'
p35135
(lp35136
(dp35137
S'description'
p35138
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p35139
sS'cpp_type'
p35140
S'unsigned int'
p35141
sS'default'
p35142
S'1'
p35143
sS'name'
p35144
S'average_radius'
p35145
sS'required'
p35146
I00
sS'group_name'
p35147
Nsa(dp35148
S'description'
p35149
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35150
sS'cpp_type'
p35151
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35152
sS'default'
p35153
g3
sS'name'
p35154
S'boundary'
p35155
sS'required'
p35156
I00
sS'group_name'
p35157
Nsa(dp35158
S'description'
p35159
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p35160
sS'cpp_type'
p35161
S'std::vector<double, std::allocator<double> >'
p35162
sS'default'
p35163
g3
sS'name'
p35164
S'bounds'
p35165
sS'required'
p35166
I00
sS'group_name'
p35167
Nsa(dp35168
S'name'
p35169
S'direction'
p35170
sS'cpp_type'
p35171
S'MooseEnum'
p35172
sS'default'
p35173
g3
sS'description'
p35174
S'The direction of the layers.\n'
p35175
sS'required'
p35176
I01
sS'options'
p35177
S'x y z'
p35178
sS'group_name'
p35179
Nsa(dp35180
S'name'
p35181
S'execute_on'
p35182
sS'cpp_type'
p35183
S'MooseEnum'
p35184
sS'default'
p35185
S'timestep'
p35186
sS'description'
p35187
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p35188
sS'required'
p35189
I00
sS'options'
p35190
S'initial residual jacobian timestep timestep_begin custom'
p35191
sS'group_name'
p35192
Nsa(dp35193
S'description'
p35194
S'The number of layers.\n'
p35195
sS'cpp_type'
p35196
S'unsigned int'
p35197
sS'default'
p35198
g3
sS'name'
p35199
S'num_layers'
p35200
sS'required'
p35201
I00
sS'group_name'
p35202
Nsa(dp35203
S'name'
p35204
S'sample_type'
p35205
sS'cpp_type'
p35206
S'MooseEnum'
p35207
sS'default'
p35208
S'direct'
p35209
sS'description'
p35210
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p35211
sS'required'
p35212
I00
sS'options'
p35213
S'direct interpolate average'
p35214
sS'group_name'
p35215
Nsa(dp35216
S'description'
p35217
g3
sS'cpp_type'
p35218
S'std::string'
p35219
sS'default'
p35220
S'LayeredSideIntegral'
p35221
sS'name'
p35222
S'type'
p35223
sS'required'
p35224
I00
sS'group_name'
p35225
Nsa(dp35226
S'description'
p35227
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35228
sS'cpp_type'
p35229
S'bool'
p35230
sS'default'
p35231
S'0'
p35232
sS'name'
p35233
S'use_displaced_mesh'
p35234
sS'required'
p35235
I00
sS'group_name'
p35236
S'Advanced'
p35237
sa(dp35238
S'description'
p35239
S'The name of the variable that this boundary condition applies to\n'
p35240
sS'cpp_type'
p35241
S'VariableName'
p35242
sS'default'
p35243
g3
sS'name'
p35244
S'variable'
p35245
sS'required'
p35246
I01
sS'group_name'
p35247
NsasS'name'
p35248
S'/UserObjects/LayeredSideIntegral'
p35249
sa(dp35250
S'description'
p35251
g3
sS'type'
p35252
NsS'subblocks'
p35253
NsS'parameters'
p35254
(lp35255
(dp35256
S'description'
p35257
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p35258
sS'cpp_type'
p35259
S'unsigned int'
p35260
sS'default'
p35261
S'1'
p35262
sS'name'
p35263
S'average_radius'
p35264
sS'required'
p35265
I00
sS'group_name'
p35266
Nsa(dp35267
S'description'
p35268
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35269
sS'cpp_type'
p35270
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p35271
sS'default'
p35272
g3
sS'name'
p35273
S'block'
p35274
sS'required'
p35275
I00
sS'group_name'
p35276
Nsa(dp35277
S'description'
p35278
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p35279
sS'cpp_type'
p35280
S'std::vector<double, std::allocator<double> >'
p35281
sS'default'
p35282
g3
sS'name'
p35283
S'bounds'
p35284
sS'required'
p35285
I00
sS'group_name'
p35286
Nsa(dp35287
S'name'
p35288
S'direction'
p35289
sS'cpp_type'
p35290
S'MooseEnum'
p35291
sS'default'
p35292
g3
sS'description'
p35293
S'The direction of the layers.\n'
p35294
sS'required'
p35295
I01
sS'options'
p35296
S'x y z'
p35297
sS'group_name'
p35298
Nsa(dp35299
S'name'
p35300
S'execute_on'
p35301
sS'cpp_type'
p35302
S'MooseEnum'
p35303
sS'default'
p35304
S'timestep'
p35305
sS'description'
p35306
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p35307
sS'required'
p35308
I00
sS'options'
p35309
S'initial residual jacobian timestep timestep_begin custom'
p35310
sS'group_name'
p35311
Nsa(dp35312
S'description'
p35313
S'The number of layers.\n'
p35314
sS'cpp_type'
p35315
S'unsigned int'
p35316
sS'default'
p35317
g3
sS'name'
p35318
S'num_layers'
p35319
sS'required'
p35320
I00
sS'group_name'
p35321
Nsa(dp35322
S'description'
p35323
S'Layered averages will be computed in space closest to these points.\n'
p35324
sS'cpp_type'
p35325
S'std::vector<double, std::allocator<double> >'
p35326
sS'default'
p35327
g3
sS'name'
p35328
S'points'
p35329
sS'required'
p35330
I01
sS'group_name'
p35331
Nsa(dp35332
S'name'
p35333
S'sample_type'
p35334
sS'cpp_type'
p35335
S'MooseEnum'
p35336
sS'default'
p35337
S'direct'
p35338
sS'description'
p35339
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p35340
sS'required'
p35341
I00
sS'options'
p35342
S'direct interpolate average'
p35343
sS'group_name'
p35344
Nsa(dp35345
S'description'
p35346
S'The seed for the master random number generator\n'
p35347
sS'cpp_type'
p35348
S'unsigned int'
p35349
sS'default'
p35350
S'0'
p35351
sS'name'
p35352
S'seed'
p35353
sS'required'
p35354
I00
sS'group_name'
p35355
S'Advanced'
p35356
sa(dp35357
S'description'
p35358
g3
sS'cpp_type'
p35359
S'std::string'
p35360
sS'default'
p35361
S'NearestPointLayeredAverage'
p35362
sS'name'
p35363
S'type'
p35364
sS'required'
p35365
I00
sS'group_name'
p35366
Nsa(dp35367
S'description'
p35368
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35369
sS'cpp_type'
p35370
S'bool'
p35371
sS'default'
p35372
S'0'
p35373
sS'name'
p35374
S'use_displaced_mesh'
p35375
sS'required'
p35376
I00
sS'group_name'
p35377
S'Advanced'
p35378
sa(dp35379
S'description'
p35380
S'The name of the variable that this object operates on\n'
p35381
sS'cpp_type'
p35382
S'VariableName'
p35383
sS'default'
p35384
g3
sS'name'
p35385
S'variable'
p35386
sS'required'
p35387
I01
sS'group_name'
p35388
NsasS'name'
p35389
S'/UserObjects/NearestPointLayeredAverage'
p35390
sa(dp35391
S'description'
p35392
g3
sS'type'
p35393
NsS'subblocks'
p35394
NsS'parameters'
p35395
(lp35396
(dp35397
S'description'
p35398
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35399
sS'cpp_type'
p35400
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p35401
sS'default'
p35402
g3
sS'name'
p35403
S'block'
p35404
sS'required'
p35405
I00
sS'group_name'
p35406
Nsa(dp35407
S'description'
p35408
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35409
sS'cpp_type'
p35410
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35411
sS'default'
p35412
g3
sS'name'
p35413
S'boundary'
p35414
sS'required'
p35415
I00
sS'group_name'
p35416
Nsa(dp35417
S'name'
p35418
S'execute_on'
p35419
sS'cpp_type'
p35420
S'MooseEnum'
p35421
sS'default'
p35422
S'timestep'
p35423
sS'description'
p35424
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p35425
sS'required'
p35426
I00
sS'options'
p35427
S'initial residual jacobian timestep timestep_begin custom'
p35428
sS'group_name'
p35429
Nsa(dp35430
S'description'
p35431
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p35432
sS'cpp_type'
p35433
S'std::vector<OutputName, std::allocator<OutputName> >'
p35434
sS'default'
p35435
g3
sS'name'
p35436
S'outputs'
p35437
sS'required'
p35438
I00
sS'group_name'
p35439
S'Advanced'
p35440
sa(dp35441
S'description'
p35442
S'The seed for the master random number generator\n'
p35443
sS'cpp_type'
p35444
S'unsigned int'
p35445
sS'default'
p35446
S'0'
p35447
sS'name'
p35448
S'seed'
p35449
sS'required'
p35450
I00
sS'group_name'
p35451
S'Advanced'
p35452
sa(dp35453
S'description'
p35454
g3
sS'cpp_type'
p35455
S'std::string'
p35456
sS'default'
p35457
S'NodalExtremeValue'
p35458
sS'name'
p35459
S'type'
p35460
sS'required'
p35461
I00
sS'group_name'
p35462
Nsa(dp35463
S'description'
p35464
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35465
sS'cpp_type'
p35466
S'bool'
p35467
sS'default'
p35468
S'0'
p35469
sS'name'
p35470
S'use_displaced_mesh'
p35471
sS'required'
p35472
I00
sS'group_name'
p35473
S'Advanced'
p35474
sa(dp35475
S'name'
p35476
S'value_type'
p35477
sS'cpp_type'
p35478
S'MooseEnum'
p35479
sS'default'
p35480
S'max'
p35481
sS'description'
p35482
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p35483
sS'required'
p35484
I00
sS'options'
p35485
S'max min'
p35486
sS'group_name'
p35487
Nsa(dp35488
S'description'
p35489
S'The name of the variable that this postprocessor operates on\n'
p35490
sS'cpp_type'
p35491
S'VariableName'
p35492
sS'default'
p35493
g3
sS'name'
p35494
S'variable'
p35495
sS'required'
p35496
I01
sS'group_name'
p35497
NsasS'name'
p35498
S'/UserObjects/NodalExtremeValue'
p35499
sa(dp35500
S'description'
p35501
g3
sS'type'
p35502
NsS'subblocks'
p35503
NsS'parameters'
p35504
(lp35505
(dp35506
S'description'
p35507
S'An optional file name where bubble volumes can be output.\n'
p35508
sS'cpp_type'
p35509
S'FileName'
p35510
sS'default'
p35511
g3
sS'name'
p35512
S'bubble_volume_file'
p35513
sS'required'
p35514
I00
sS'group_name'
p35515
Nsa(dp35516
S'description'
p35517
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p35518
sS'cpp_type'
p35519
S'bool'
p35520
sS'default'
p35521
S'0'
p35522
sS'name'
p35523
S'condense_map_info'
p35524
sS'required'
p35525
I00
sS'group_name'
p35526
Nsa(dp35527
S'description'
p35528
S'The threshold for which an existing bubble may be extended (defaults to "threshold")\n'
p35529
sS'cpp_type'
p35530
S'double'
p35531
sS'default'
p35532
g3
sS'name'
p35533
S'connecting_threshold'
p35534
sS'required'
p35535
I00
sS'group_name'
p35536
Nsa(dp35537
S'description'
p35538
S'If supplied, will be used to find the scaled threshold of the bubble edges\n'
p35539
sS'cpp_type'
p35540
S'PostprocessorName'
p35541
sS'default'
p35542
g3
sS'name'
p35543
S'elem_avg_value'
p35544
sS'required'
p35545
I00
sS'group_name'
p35546
Nsa(dp35547
S'description'
p35548
S'Instruct the UO to populate the variable index map.\n'
p35549
sS'cpp_type'
p35550
S'bool'
p35551
sS'default'
p35552
S'0'
p35553
sS'name'
p35554
S'enable_var_coloring'
p35555
sS'required'
p35556
I00
sS'group_name'
p35557
Nsa(dp35558
S'name'
p35559
S'execute_on'
p35560
sS'cpp_type'
p35561
S'MooseEnum'
p35562
sS'default'
p35563
S'timestep'
p35564
sS'description'
p35565
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p35566
sS'required'
p35567
I00
sS'options'
p35568
S'initial residual jacobian timestep timestep_begin custom'
p35569
sS'group_name'
p35570
Nsa(dp35571
S'description'
p35572
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p35573
sS'cpp_type'
p35574
S'std::vector<OutputName, std::allocator<OutputName> >'
p35575
sS'default'
p35576
g3
sS'name'
p35577
S'outputs'
p35578
sS'required'
p35579
I00
sS'group_name'
p35580
S'Advanced'
p35581
sa(dp35582
S'description'
p35583
S'The threshold value for which a new bubble may be started\n'
p35584
sS'cpp_type'
p35585
S'double'
p35586
sS'default'
p35587
S'0.5'
p35588
sS'name'
p35589
S'threshold'
p35590
sS'required'
p35591
I00
sS'group_name'
p35592
Nsa(dp35593
S'description'
p35594
S'Calculate memory usage\n'
p35595
sS'cpp_type'
p35596
S'bool'
p35597
sS'default'
p35598
S'0'
p35599
sS'name'
p35600
S'track_memory_usage'
p35601
sS'required'
p35602
I00
sS'group_name'
p35603
Nsa(dp35604
S'description'
p35605
g3
sS'cpp_type'
p35606
S'std::string'
p35607
sS'default'
p35608
S'NodalFloodCount'
p35609
sS'name'
p35610
S'type'
p35611
sS'required'
p35612
I00
sS'group_name'
p35613
Nsa(dp35614
S'description'
p35615
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35616
sS'cpp_type'
p35617
S'bool'
p35618
sS'default'
p35619
S'0'
p35620
sS'name'
p35621
S'use_displaced_mesh'
p35622
sS'required'
p35623
I00
sS'group_name'
p35624
S'Advanced'
p35625
sa(dp35626
S'description'
p35627
S'Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n'
p35628
sS'cpp_type'
p35629
S'bool'
p35630
sS'default'
p35631
S'0'
p35632
sS'name'
p35633
S'use_global_numbering'
p35634
sS'required'
p35635
I00
sS'group_name'
p35636
Nsa(dp35637
S'description'
p35638
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p35639
sS'cpp_type'
p35640
S'bool'
p35641
sS'default'
p35642
S'1'
p35643
sS'name'
p35644
S'use_single_map'
p35645
sS'required'
p35646
I00
sS'group_name'
p35647
Nsa(dp35648
S'description'
p35649
S'Ths variable(s) for which to find connected regions of interests, i.e. "bubbles".\n'
p35650
sS'cpp_type'
p35651
S'std::vector<VariableName>'
p35652
sS'default'
p35653
g3
sS'name'
p35654
S'variable'
p35655
sS'required'
p35656
I01
sS'group_name'
p35657
NsasS'name'
p35658
S'/UserObjects/NodalFloodCount'
p35659
sa(dp35660
S'description'
p35661
g3
sS'type'
p35662
NsS'subblocks'
p35663
NsS'parameters'
p35664
(lp35665
(dp35666
S'description'
p35667
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35668
sS'cpp_type'
p35669
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p35670
sS'default'
p35671
g3
sS'name'
p35672
S'block'
p35673
sS'required'
p35674
I00
sS'group_name'
p35675
Nsa(dp35676
S'description'
p35677
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35678
sS'cpp_type'
p35679
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35680
sS'default'
p35681
g3
sS'name'
p35682
S'boundary'
p35683
sS'required'
p35684
I00
sS'group_name'
p35685
Nsa(dp35686
S'name'
p35687
S'execute_on'
p35688
sS'cpp_type'
p35689
S'MooseEnum'
p35690
sS'default'
p35691
S'timestep'
p35692
sS'description'
p35693
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p35694
sS'required'
p35695
I00
sS'options'
p35696
S'initial residual jacobian timestep timestep_begin custom'
p35697
sS'group_name'
p35698
Nsa(dp35699
S'description'
p35700
S'The analytic solution to compare against\n'
p35701
sS'cpp_type'
p35702
S'FunctionName'
p35703
sS'default'
p35704
g3
sS'name'
p35705
S'function'
p35706
sS'required'
p35707
I01
sS'group_name'
p35708
Nsa(dp35709
S'description'
p35710
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p35711
sS'cpp_type'
p35712
S'std::vector<OutputName, std::allocator<OutputName> >'
p35713
sS'default'
p35714
g3
sS'name'
p35715
S'outputs'
p35716
sS'required'
p35717
I00
sS'group_name'
p35718
S'Advanced'
p35719
sa(dp35720
S'description'
p35721
S'The seed for the master random number generator\n'
p35722
sS'cpp_type'
p35723
S'unsigned int'
p35724
sS'default'
p35725
S'0'
p35726
sS'name'
p35727
S'seed'
p35728
sS'required'
p35729
I00
sS'group_name'
p35730
S'Advanced'
p35731
sa(dp35732
S'description'
p35733
g3
sS'cpp_type'
p35734
S'std::string'
p35735
sS'default'
p35736
S'NodalL2Error'
p35737
sS'name'
p35738
S'type'
p35739
sS'required'
p35740
I00
sS'group_name'
p35741
Nsa(dp35742
S'description'
p35743
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35744
sS'cpp_type'
p35745
S'bool'
p35746
sS'default'
p35747
S'0'
p35748
sS'name'
p35749
S'use_displaced_mesh'
p35750
sS'required'
p35751
I00
sS'group_name'
p35752
S'Advanced'
p35753
sa(dp35754
S'description'
p35755
S'The name of the variable that this postprocessor operates on\n'
p35756
sS'cpp_type'
p35757
S'VariableName'
p35758
sS'default'
p35759
g3
sS'name'
p35760
S'variable'
p35761
sS'required'
p35762
I01
sS'group_name'
p35763
NsasS'name'
p35764
S'/UserObjects/NodalL2Error'
p35765
sa(dp35766
S'description'
p35767
g3
sS'type'
p35768
NsS'subblocks'
p35769
NsS'parameters'
p35770
(lp35771
(dp35772
S'description'
p35773
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35774
sS'cpp_type'
p35775
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p35776
sS'default'
p35777
g3
sS'name'
p35778
S'block'
p35779
sS'required'
p35780
I00
sS'group_name'
p35781
Nsa(dp35782
S'description'
p35783
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35784
sS'cpp_type'
p35785
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35786
sS'default'
p35787
g3
sS'name'
p35788
S'boundary'
p35789
sS'required'
p35790
I00
sS'group_name'
p35791
Nsa(dp35792
S'name'
p35793
S'execute_on'
p35794
sS'cpp_type'
p35795
S'MooseEnum'
p35796
sS'default'
p35797
S'timestep'
p35798
sS'description'
p35799
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p35800
sS'required'
p35801
I00
sS'options'
p35802
S'initial residual jacobian timestep timestep_begin custom'
p35803
sS'group_name'
p35804
Nsa(dp35805
S'description'
p35806
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p35807
sS'cpp_type'
p35808
S'std::vector<OutputName, std::allocator<OutputName> >'
p35809
sS'default'
p35810
g3
sS'name'
p35811
S'outputs'
p35812
sS'required'
p35813
I00
sS'group_name'
p35814
S'Advanced'
p35815
sa(dp35816
S'description'
p35817
S'The seed for the master random number generator\n'
p35818
sS'cpp_type'
p35819
S'unsigned int'
p35820
sS'default'
p35821
S'0'
p35822
sS'name'
p35823
S'seed'
p35824
sS'required'
p35825
I00
sS'group_name'
p35826
S'Advanced'
p35827
sa(dp35828
S'description'
p35829
g3
sS'cpp_type'
p35830
S'std::string'
p35831
sS'default'
p35832
S'NodalL2Norm'
p35833
sS'name'
p35834
S'type'
p35835
sS'required'
p35836
I00
sS'group_name'
p35837
Nsa(dp35838
S'description'
p35839
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35840
sS'cpp_type'
p35841
S'bool'
p35842
sS'default'
p35843
S'0'
p35844
sS'name'
p35845
S'use_displaced_mesh'
p35846
sS'required'
p35847
I00
sS'group_name'
p35848
S'Advanced'
p35849
sa(dp35850
S'description'
p35851
S'The name of the variable that this postprocessor operates on\n'
p35852
sS'cpp_type'
p35853
S'VariableName'
p35854
sS'default'
p35855
g3
sS'name'
p35856
S'variable'
p35857
sS'required'
p35858
I01
sS'group_name'
p35859
NsasS'name'
p35860
S'/UserObjects/NodalL2Norm'
p35861
sa(dp35862
S'description'
p35863
g3
sS'type'
p35864
NsS'subblocks'
p35865
NsS'parameters'
p35866
(lp35867
(dp35868
S'description'
p35869
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35870
sS'cpp_type'
p35871
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p35872
sS'default'
p35873
g3
sS'name'
p35874
S'block'
p35875
sS'required'
p35876
I00
sS'group_name'
p35877
Nsa(dp35878
S'description'
p35879
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35880
sS'cpp_type'
p35881
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35882
sS'default'
p35883
g3
sS'name'
p35884
S'boundary'
p35885
sS'required'
p35886
I00
sS'group_name'
p35887
Nsa(dp35888
S'name'
p35889
S'execute_on'
p35890
sS'cpp_type'
p35891
S'MooseEnum'
p35892
sS'default'
p35893
S'timestep'
p35894
sS'description'
p35895
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p35896
sS'required'
p35897
I00
sS'options'
p35898
S'initial residual jacobian timestep timestep_begin custom'
p35899
sS'group_name'
p35900
Nsa(dp35901
S'description'
p35902
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p35903
sS'cpp_type'
p35904
S'std::vector<OutputName, std::allocator<OutputName> >'
p35905
sS'default'
p35906
g3
sS'name'
p35907
S'outputs'
p35908
sS'required'
p35909
I00
sS'group_name'
p35910
S'Advanced'
p35911
sa(dp35912
S'description'
p35913
S'The seed for the master random number generator\n'
p35914
sS'cpp_type'
p35915
S'unsigned int'
p35916
sS'default'
p35917
S'0'
p35918
sS'name'
p35919
S'seed'
p35920
sS'required'
p35921
I00
sS'group_name'
p35922
S'Advanced'
p35923
sa(dp35924
S'description'
p35925
g3
sS'cpp_type'
p35926
S'std::string'
p35927
sS'default'
p35928
S'NodalMaxValue'
p35929
sS'name'
p35930
S'type'
p35931
sS'required'
p35932
I00
sS'group_name'
p35933
Nsa(dp35934
S'description'
p35935
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35936
sS'cpp_type'
p35937
S'bool'
p35938
sS'default'
p35939
S'0'
p35940
sS'name'
p35941
S'use_displaced_mesh'
p35942
sS'required'
p35943
I00
sS'group_name'
p35944
S'Advanced'
p35945
sa(dp35946
S'description'
p35947
S'The name of the variable that this postprocessor operates on\n'
p35948
sS'cpp_type'
p35949
S'VariableName'
p35950
sS'default'
p35951
g3
sS'name'
p35952
S'variable'
p35953
sS'required'
p35954
I01
sS'group_name'
p35955
NsasS'name'
p35956
S'/UserObjects/NodalMaxValue'
p35957
sa(dp35958
S'description'
p35959
g3
sS'type'
p35960
NsS'subblocks'
p35961
NsS'parameters'
p35962
(lp35963
(dp35964
S'description'
p35965
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35966
sS'cpp_type'
p35967
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35968
sS'default'
p35969
g3
sS'name'
p35970
S'boundary'
p35971
sS'required'
p35972
I00
sS'group_name'
p35973
Nsa(dp35974
S'description'
p35975
S"Node set ID which contains the nodes that are in 'corners'.\n"
p35976
sS'cpp_type'
p35977
S'BoundaryName'
p35978
sS'default'
p35979
g3
sS'name'
p35980
S'corner_boundary'
p35981
sS'required'
p35982
I01
sS'group_name'
p35983
Nsa(dp35984
S'name'
p35985
S'execute_on'
p35986
sS'cpp_type'
p35987
S'MooseEnum'
p35988
sS'default'
p35989
S'timestep'
p35990
sS'description'
p35991
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p35992
sS'required'
p35993
I00
sS'options'
p35994
S'initial residual jacobian timestep timestep_begin custom'
p35995
sS'group_name'
p35996
Nsa(dp35997
S'description'
p35998
g3
sS'cpp_type'
p35999
S'std::string'
p36000
sS'default'
p36001
S'NodalNormalsCorner'
p36002
sS'name'
p36003
S'type'
p36004
sS'required'
p36005
I00
sS'group_name'
p36006
Nsa(dp36007
S'description'
p36008
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36009
sS'cpp_type'
p36010
S'bool'
p36011
sS'default'
p36012
S'0'
p36013
sS'name'
p36014
S'use_displaced_mesh'
p36015
sS'required'
p36016
I00
sS'group_name'
p36017
S'Advanced'
p36018
sasS'name'
p36019
S'/UserObjects/NodalNormalsCorner'
p36020
sa(dp36021
S'description'
p36022
g3
sS'type'
p36023
NsS'subblocks'
p36024
NsS'parameters'
p36025
(lp36026
(dp36027
S'description'
p36028
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36029
sS'cpp_type'
p36030
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p36031
sS'default'
p36032
g3
sS'name'
p36033
S'block'
p36034
sS'required'
p36035
I00
sS'group_name'
p36036
Nsa(dp36037
S'description'
p36038
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p36039
sS'cpp_type'
p36040
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p36041
sS'default'
p36042
g3
sS'name'
p36043
S'boundary'
p36044
sS'required'
p36045
I00
sS'group_name'
p36046
Nsa(dp36047
S'name'
p36048
S'execute_on'
p36049
sS'cpp_type'
p36050
S'MooseEnum'
p36051
sS'default'
p36052
S'timestep'
p36053
sS'description'
p36054
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36055
sS'required'
p36056
I00
sS'options'
p36057
S'initial residual jacobian timestep timestep_begin custom'
p36058
sS'group_name'
p36059
Nsa(dp36060
S'description'
p36061
S'The seed for the master random number generator\n'
p36062
sS'cpp_type'
p36063
S'unsigned int'
p36064
sS'default'
p36065
S'0'
p36066
sS'name'
p36067
S'seed'
p36068
sS'required'
p36069
I00
sS'group_name'
p36070
S'Advanced'
p36071
sa(dp36072
S'description'
p36073
g3
sS'cpp_type'
p36074
S'std::string'
p36075
sS'default'
p36076
S'NodalNormalsEvaluator'
p36077
sS'name'
p36078
S'type'
p36079
sS'required'
p36080
I00
sS'group_name'
p36081
Nsa(dp36082
S'description'
p36083
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36084
sS'cpp_type'
p36085
S'bool'
p36086
sS'default'
p36087
S'0'
p36088
sS'name'
p36089
S'use_displaced_mesh'
p36090
sS'required'
p36091
I00
sS'group_name'
p36092
S'Advanced'
p36093
sasS'name'
p36094
S'/UserObjects/NodalNormalsEvaluator'
p36095
sa(dp36096
S'description'
p36097
g3
sS'type'
p36098
NsS'subblocks'
p36099
NsS'parameters'
p36100
(lp36101
(dp36102
S'description'
p36103
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36104
sS'cpp_type'
p36105
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p36106
sS'default'
p36107
g3
sS'name'
p36108
S'block'
p36109
sS'required'
p36110
I00
sS'group_name'
p36111
Nsa(dp36112
S'description'
p36113
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p36114
sS'cpp_type'
p36115
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p36116
sS'default'
p36117
g3
sS'name'
p36118
S'boundary'
p36119
sS'required'
p36120
I00
sS'group_name'
p36121
Nsa(dp36122
S'description'
p36123
S"Node set ID which contains the nodes that are in 'corners'.\n"
p36124
sS'cpp_type'
p36125
S'BoundaryName'
p36126
sS'default'
p36127
g3
sS'name'
p36128
S'corner_boundary'
p36129
sS'required'
p36130
I00
sS'group_name'
p36131
Nsa(dp36132
S'name'
p36133
S'execute_on'
p36134
sS'cpp_type'
p36135
S'MooseEnum'
p36136
sS'default'
p36137
S'timestep'
p36138
sS'description'
p36139
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36140
sS'required'
p36141
I00
sS'options'
p36142
S'initial residual jacobian timestep timestep_begin custom'
p36143
sS'group_name'
p36144
Nsa(dp36145
S'description'
p36146
S'The seed for the master random number generator\n'
p36147
sS'cpp_type'
p36148
S'unsigned int'
p36149
sS'default'
p36150
S'0'
p36151
sS'name'
p36152
S'seed'
p36153
sS'required'
p36154
I00
sS'group_name'
p36155
S'Advanced'
p36156
sa(dp36157
S'description'
p36158
g3
sS'cpp_type'
p36159
S'std::string'
p36160
sS'default'
p36161
S'NodalNormalsPreprocessor'
p36162
sS'name'
p36163
S'type'
p36164
sS'required'
p36165
I00
sS'group_name'
p36166
Nsa(dp36167
S'description'
p36168
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36169
sS'cpp_type'
p36170
S'bool'
p36171
sS'default'
p36172
S'0'
p36173
sS'name'
p36174
S'use_displaced_mesh'
p36175
sS'required'
p36176
I00
sS'group_name'
p36177
S'Advanced'
p36178
sasS'name'
p36179
S'/UserObjects/NodalNormalsPreprocessor'
p36180
sa(dp36181
S'description'
p36182
g3
sS'type'
p36183
NsS'subblocks'
p36184
NsS'parameters'
p36185
(lp36186
(dp36187
S'description'
p36188
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36189
sS'cpp_type'
p36190
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p36191
sS'default'
p36192
g3
sS'name'
p36193
S'block'
p36194
sS'required'
p36195
I00
sS'group_name'
p36196
Nsa(dp36197
S'description'
p36198
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p36199
sS'cpp_type'
p36200
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p36201
sS'default'
p36202
g3
sS'name'
p36203
S'boundary'
p36204
sS'required'
p36205
I00
sS'group_name'
p36206
Nsa(dp36207
S'name'
p36208
S'execute_on'
p36209
sS'cpp_type'
p36210
S'MooseEnum'
p36211
sS'default'
p36212
S'timestep'
p36213
sS'description'
p36214
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36215
sS'required'
p36216
I00
sS'options'
p36217
S'initial residual jacobian timestep timestep_begin custom'
p36218
sS'group_name'
p36219
Nsa(dp36220
S'description'
p36221
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p36222
sS'cpp_type'
p36223
S'std::vector<OutputName, std::allocator<OutputName> >'
p36224
sS'default'
p36225
g3
sS'name'
p36226
S'outputs'
p36227
sS'required'
p36228
I00
sS'group_name'
p36229
S'Advanced'
p36230
sa(dp36231
S'description'
p36232
S'The seed for the master random number generator\n'
p36233
sS'cpp_type'
p36234
S'unsigned int'
p36235
sS'default'
p36236
S'0'
p36237
sS'name'
p36238
S'seed'
p36239
sS'required'
p36240
I00
sS'group_name'
p36241
S'Advanced'
p36242
sa(dp36243
S'description'
p36244
g3
sS'cpp_type'
p36245
S'std::string'
p36246
sS'default'
p36247
S'NodalProxyMaxValue'
p36248
sS'name'
p36249
S'type'
p36250
sS'required'
p36251
I00
sS'group_name'
p36252
Nsa(dp36253
S'description'
p36254
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36255
sS'cpp_type'
p36256
S'bool'
p36257
sS'default'
p36258
S'0'
p36259
sS'name'
p36260
S'use_displaced_mesh'
p36261
sS'required'
p36262
I00
sS'group_name'
p36263
S'Advanced'
p36264
sa(dp36265
S'description'
p36266
S'The name of the variable that this postprocessor operates on\n'
p36267
sS'cpp_type'
p36268
S'VariableName'
p36269
sS'default'
p36270
g3
sS'name'
p36271
S'variable'
p36272
sS'required'
p36273
I01
sS'group_name'
p36274
NsasS'name'
p36275
S'/UserObjects/NodalProxyMaxValue'
p36276
sa(dp36277
S'description'
p36278
g3
sS'type'
p36279
NsS'subblocks'
p36280
NsS'parameters'
p36281
(lp36282
(dp36283
S'description'
p36284
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36285
sS'cpp_type'
p36286
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p36287
sS'default'
p36288
g3
sS'name'
p36289
S'block'
p36290
sS'required'
p36291
I00
sS'group_name'
p36292
Nsa(dp36293
S'description'
p36294
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p36295
sS'cpp_type'
p36296
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p36297
sS'default'
p36298
g3
sS'name'
p36299
S'boundary'
p36300
sS'required'
p36301
I00
sS'group_name'
p36302
Nsa(dp36303
S'name'
p36304
S'execute_on'
p36305
sS'cpp_type'
p36306
S'MooseEnum'
p36307
sS'default'
p36308
S'timestep'
p36309
sS'description'
p36310
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36311
sS'required'
p36312
I00
sS'options'
p36313
S'initial residual jacobian timestep timestep_begin custom'
p36314
sS'group_name'
p36315
Nsa(dp36316
S'description'
p36317
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p36318
sS'cpp_type'
p36319
S'std::vector<OutputName, std::allocator<OutputName> >'
p36320
sS'default'
p36321
g3
sS'name'
p36322
S'outputs'
p36323
sS'required'
p36324
I00
sS'group_name'
p36325
S'Advanced'
p36326
sa(dp36327
S'description'
p36328
S'The seed for the master random number generator\n'
p36329
sS'cpp_type'
p36330
S'unsigned int'
p36331
sS'default'
p36332
S'0'
p36333
sS'name'
p36334
S'seed'
p36335
sS'required'
p36336
I00
sS'group_name'
p36337
S'Advanced'
p36338
sa(dp36339
S'description'
p36340
g3
sS'cpp_type'
p36341
S'std::string'
p36342
sS'default'
p36343
S'NodalSum'
p36344
sS'name'
p36345
S'type'
p36346
sS'required'
p36347
I00
sS'group_name'
p36348
Nsa(dp36349
S'description'
p36350
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36351
sS'cpp_type'
p36352
S'bool'
p36353
sS'default'
p36354
S'0'
p36355
sS'name'
p36356
S'use_displaced_mesh'
p36357
sS'required'
p36358
I00
sS'group_name'
p36359
S'Advanced'
p36360
sa(dp36361
S'description'
p36362
S'The name of the variable that this postprocessor operates on\n'
p36363
sS'cpp_type'
p36364
S'VariableName'
p36365
sS'default'
p36366
g3
sS'name'
p36367
S'variable'
p36368
sS'required'
p36369
I01
sS'group_name'
p36370
NsasS'name'
p36371
S'/UserObjects/NodalSum'
p36372
sa(dp36373
S'description'
p36374
g3
sS'type'
p36375
NsS'subblocks'
p36376
NsS'parameters'
p36377
(lp36378
(dp36379
S'name'
p36380
S'execute_on'
p36381
sS'cpp_type'
p36382
S'MooseEnum'
p36383
sS'default'
p36384
S'timestep'
p36385
sS'description'
p36386
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36387
sS'required'
p36388
I00
sS'options'
p36389
S'initial residual jacobian timestep timestep_begin custom'
p36390
sS'group_name'
p36391
Nsa(dp36392
S'description'
p36393
S'The ID of the node where we monitor\n'
p36394
sS'cpp_type'
p36395
S'unsigned int'
p36396
sS'default'
p36397
g3
sS'name'
p36398
S'nodeid'
p36399
sS'required'
p36400
I01
sS'group_name'
p36401
Nsa(dp36402
S'description'
p36403
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p36404
sS'cpp_type'
p36405
S'std::vector<OutputName, std::allocator<OutputName> >'
p36406
sS'default'
p36407
g3
sS'name'
p36408
S'outputs'
p36409
sS'required'
p36410
I00
sS'group_name'
p36411
S'Advanced'
p36412
sa(dp36413
S'description'
p36414
g3
sS'cpp_type'
p36415
S'std::string'
p36416
sS'default'
p36417
S'NodalVariableValue'
p36418
sS'name'
p36419
S'type'
p36420
sS'required'
p36421
I00
sS'group_name'
p36422
Nsa(dp36423
S'description'
p36424
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36425
sS'cpp_type'
p36426
S'bool'
p36427
sS'default'
p36428
S'0'
p36429
sS'name'
p36430
S'use_displaced_mesh'
p36431
sS'required'
p36432
I00
sS'group_name'
p36433
S'Advanced'
p36434
sa(dp36435
S'description'
p36436
S'The variable to be monitored\n'
p36437
sS'cpp_type'
p36438
S'VariableName'
p36439
sS'default'
p36440
g3
sS'name'
p36441
S'variable'
p36442
sS'required'
p36443
I01
sS'group_name'
p36444
NsasS'name'
p36445
S'/UserObjects/NodalVariableValue'
p36446
sa(dp36447
S'description'
p36448
g3
sS'type'
p36449
NsS'subblocks'
p36450
NsS'parameters'
p36451
(lp36452
(dp36453
S'description'
p36454
S'filename for Avrami analysis info (ln time and Avrami)\n'
p36455
sS'cpp_type'
p36456
S'FileName'
p36457
sS'default'
p36458
g3
sS'name'
p36459
S'Avrami_file'
p36460
sS'required'
p36461
I00
sS'group_name'
p36462
Nsa(dp36463
S'description'
p36464
S'An optional file name where bubble volumes can be output.\n'
p36465
sS'cpp_type'
p36466
S'FileName'
p36467
sS'default'
p36468
g3
sS'name'
p36469
S'bubble_volume_file'
p36470
sS'required'
p36471
I00
sS'group_name'
p36472
Nsa(dp36473
S'description'
p36474
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p36475
sS'cpp_type'
p36476
S'bool'
p36477
sS'default'
p36478
S'0'
p36479
sS'name'
p36480
S'condense_map_info'
p36481
sS'required'
p36482
I00
sS'group_name'
p36483
Nsa(dp36484
S'description'
p36485
S'The threshold for which an existing bubble may be extended (defaults to "threshold")\n'
p36486
sS'cpp_type'
p36487
S'double'
p36488
sS'default'
p36489
g3
sS'name'
p36490
S'connecting_threshold'
p36491
sS'required'
p36492
I00
sS'group_name'
p36493
Nsa(dp36494
S'description'
p36495
S'If supplied, will be used to find the scaled threshold of the bubble edges\n'
p36496
sS'cpp_type'
p36497
S'PostprocessorName'
p36498
sS'default'
p36499
g3
sS'name'
p36500
S'elem_avg_value'
p36501
sS'required'
p36502
I00
sS'group_name'
p36503
Nsa(dp36504
S'description'
p36505
S'Instruct the UO to populate the variable index map.\n'
p36506
sS'cpp_type'
p36507
S'bool'
p36508
sS'default'
p36509
S'0'
p36510
sS'name'
p36511
S'enable_var_coloring'
p36512
sS'required'
p36513
I00
sS'group_name'
p36514
Nsa(dp36515
S'description'
p36516
S'Equilibrium volume fraction of 2nd phase for Avrami analysis\n'
p36517
sS'cpp_type'
p36518
S'double'
p36519
sS'default'
p36520
S'-1'
p36521
sS'name'
p36522
S'equil_fraction'
p36523
sS'required'
p36524
I00
sS'group_name'
p36525
Nsa(dp36526
S'name'
p36527
S'execute_on'
p36528
sS'cpp_type'
p36529
S'MooseEnum'
p36530
sS'default'
p36531
S'timestep'
p36532
sS'description'
p36533
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36534
sS'required'
p36535
I00
sS'options'
p36536
S'initial residual jacobian timestep timestep_begin custom'
p36537
sS'group_name'
p36538
Nsa(dp36539
S'description'
p36540
S'Postprocessor from which to get mesh volume\n'
p36541
sS'cpp_type'
p36542
S'PostprocessorName'
p36543
sS'default'
p36544
g3
sS'name'
p36545
S'mesh_volume'
p36546
sS'required'
p36547
I01
sS'group_name'
p36548
Nsa(dp36549
S'description'
p36550
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p36551
sS'cpp_type'
p36552
S'std::vector<OutputName, std::allocator<OutputName> >'
p36553
sS'default'
p36554
g3
sS'name'
p36555
S'outputs'
p36556
sS'required'
p36557
I00
sS'group_name'
p36558
S'Advanced'
p36559
sa(dp36560
S'description'
p36561
S'The threshold value for which a new bubble may be started\n'
p36562
sS'cpp_type'
p36563
S'double'
p36564
sS'default'
p36565
S'0.5'
p36566
sS'name'
p36567
S'threshold'
p36568
sS'required'
p36569
I00
sS'group_name'
p36570
Nsa(dp36571
S'description'
p36572
S'Calculate memory usage\n'
p36573
sS'cpp_type'
p36574
S'bool'
p36575
sS'default'
p36576
S'0'
p36577
sS'name'
p36578
S'track_memory_usage'
p36579
sS'required'
p36580
I00
sS'group_name'
p36581
Nsa(dp36582
S'description'
p36583
g3
sS'cpp_type'
p36584
S'std::string'
p36585
sS'default'
p36586
S'NodalVolumeFraction'
p36587
sS'name'
p36588
S'type'
p36589
sS'required'
p36590
I00
sS'group_name'
p36591
Nsa(dp36592
S'description'
p36593
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36594
sS'cpp_type'
p36595
S'bool'
p36596
sS'default'
p36597
S'0'
p36598
sS'name'
p36599
S'use_displaced_mesh'
p36600
sS'required'
p36601
I00
sS'group_name'
p36602
S'Advanced'
p36603
sa(dp36604
S'description'
p36605
S'Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n'
p36606
sS'cpp_type'
p36607
S'bool'
p36608
sS'default'
p36609
S'0'
p36610
sS'name'
p36611
S'use_global_numbering'
p36612
sS'required'
p36613
I00
sS'group_name'
p36614
Nsa(dp36615
S'description'
p36616
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p36617
sS'cpp_type'
p36618
S'bool'
p36619
sS'default'
p36620
S'1'
p36621
sS'name'
p36622
S'use_single_map'
p36623
sS'required'
p36624
I00
sS'group_name'
p36625
Nsa(dp36626
S'description'
p36627
S'Ths variable(s) for which to find connected regions of interests, i.e. "bubbles".\n'
p36628
sS'cpp_type'
p36629
S'std::vector<VariableName>'
p36630
sS'default'
p36631
g3
sS'name'
p36632
S'variable'
p36633
sS'required'
p36634
I01
sS'group_name'
p36635
NsasS'name'
p36636
S'/UserObjects/NodalVolumeFraction'
p36637
sa(dp36638
S'description'
p36639
g3
sS'type'
p36640
NsS'subblocks'
p36641
NsS'parameters'
p36642
(lp36643
(dp36644
S'name'
p36645
S'execute_on'
p36646
sS'cpp_type'
p36647
S'MooseEnum'
p36648
sS'default'
p36649
S'timestep'
p36650
sS'description'
p36651
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36652
sS'required'
p36653
I00
sS'options'
p36654
S'initial residual jacobian timestep timestep_begin custom'
p36655
sS'group_name'
p36656
Nsa(dp36657
S'description'
p36658
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p36659
sS'cpp_type'
p36660
S'std::vector<OutputName, std::allocator<OutputName> >'
p36661
sS'default'
p36662
g3
sS'name'
p36663
S'outputs'
p36664
sS'required'
p36665
I00
sS'group_name'
p36666
S'Advanced'
p36667
sa(dp36668
S'description'
p36669
g3
sS'cpp_type'
p36670
S'std::string'
p36671
sS'default'
p36672
S'NumDOFs'
p36673
sS'name'
p36674
S'type'
p36675
sS'required'
p36676
I00
sS'group_name'
p36677
Nsa(dp36678
S'description'
p36679
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36680
sS'cpp_type'
p36681
S'bool'
p36682
sS'default'
p36683
S'0'
p36684
sS'name'
p36685
S'use_displaced_mesh'
p36686
sS'required'
p36687
I00
sS'group_name'
p36688
S'Advanced'
p36689
sasS'name'
p36690
S'/UserObjects/NumDOFs'
p36691
sa(dp36692
S'description'
p36693
g3
sS'type'
p36694
NsS'subblocks'
p36695
NsS'parameters'
p36696
(lp36697
(dp36698
S'name'
p36699
S'execute_on'
p36700
sS'cpp_type'
p36701
S'MooseEnum'
p36702
sS'default'
p36703
S'timestep'
p36704
sS'description'
p36705
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36706
sS'required'
p36707
I00
sS'options'
p36708
S'initial residual jacobian timestep timestep_begin custom'
p36709
sS'group_name'
p36710
Nsa(dp36711
S'description'
p36712
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p36713
sS'cpp_type'
p36714
S'std::vector<OutputName, std::allocator<OutputName> >'
p36715
sS'default'
p36716
g3
sS'name'
p36717
S'outputs'
p36718
sS'required'
p36719
I00
sS'group_name'
p36720
S'Advanced'
p36721
sa(dp36722
S'description'
p36723
g3
sS'cpp_type'
p36724
S'std::string'
p36725
sS'default'
p36726
S'NumElems'
p36727
sS'name'
p36728
S'type'
p36729
sS'required'
p36730
I00
sS'group_name'
p36731
Nsa(dp36732
S'description'
p36733
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36734
sS'cpp_type'
p36735
S'bool'
p36736
sS'default'
p36737
S'0'
p36738
sS'name'
p36739
S'use_displaced_mesh'
p36740
sS'required'
p36741
I00
sS'group_name'
p36742
S'Advanced'
p36743
sasS'name'
p36744
S'/UserObjects/NumElems'
p36745
sa(dp36746
S'description'
p36747
g3
sS'type'
p36748
NsS'subblocks'
p36749
NsS'parameters'
p36750
(lp36751
(dp36752
S'name'
p36753
S'execute_on'
p36754
sS'cpp_type'
p36755
S'MooseEnum'
p36756
sS'default'
p36757
S'timestep'
p36758
sS'description'
p36759
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36760
sS'required'
p36761
I00
sS'options'
p36762
S'initial residual jacobian timestep timestep_begin custom'
p36763
sS'group_name'
p36764
Nsa(dp36765
S'description'
p36766
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p36767
sS'cpp_type'
p36768
S'std::vector<OutputName, std::allocator<OutputName> >'
p36769
sS'default'
p36770
g3
sS'name'
p36771
S'outputs'
p36772
sS'required'
p36773
I00
sS'group_name'
p36774
S'Advanced'
p36775
sa(dp36776
S'description'
p36777
g3
sS'cpp_type'
p36778
S'std::string'
p36779
sS'default'
p36780
S'NumLinearIterations'
p36781
sS'name'
p36782
S'type'
p36783
sS'required'
p36784
I00
sS'group_name'
p36785
Nsa(dp36786
S'description'
p36787
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36788
sS'cpp_type'
p36789
S'bool'
p36790
sS'default'
p36791
S'0'
p36792
sS'name'
p36793
S'use_displaced_mesh'
p36794
sS'required'
p36795
I00
sS'group_name'
p36796
S'Advanced'
p36797
sasS'name'
p36798
S'/UserObjects/NumLinearIterations'
p36799
sa(dp36800
S'description'
p36801
g3
sS'type'
p36802
NsS'subblocks'
p36803
NsS'parameters'
p36804
(lp36805
(dp36806
S'name'
p36807
S'execute_on'
p36808
sS'cpp_type'
p36809
S'MooseEnum'
p36810
sS'default'
p36811
S'timestep'
p36812
sS'description'
p36813
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36814
sS'required'
p36815
I00
sS'options'
p36816
S'initial residual jacobian timestep timestep_begin custom'
p36817
sS'group_name'
p36818
Nsa(dp36819
S'description'
p36820
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p36821
sS'cpp_type'
p36822
S'std::vector<OutputName, std::allocator<OutputName> >'
p36823
sS'default'
p36824
g3
sS'name'
p36825
S'outputs'
p36826
sS'required'
p36827
I00
sS'group_name'
p36828
S'Advanced'
p36829
sa(dp36830
S'description'
p36831
g3
sS'cpp_type'
p36832
S'std::string'
p36833
sS'default'
p36834
S'NumNodes'
p36835
sS'name'
p36836
S'type'
p36837
sS'required'
p36838
I00
sS'group_name'
p36839
Nsa(dp36840
S'description'
p36841
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36842
sS'cpp_type'
p36843
S'bool'
p36844
sS'default'
p36845
S'0'
p36846
sS'name'
p36847
S'use_displaced_mesh'
p36848
sS'required'
p36849
I00
sS'group_name'
p36850
S'Advanced'
p36851
sasS'name'
p36852
S'/UserObjects/NumNodes'
p36853
sa(dp36854
S'description'
p36855
g3
sS'type'
p36856
NsS'subblocks'
p36857
NsS'parameters'
p36858
(lp36859
(dp36860
S'name'
p36861
S'execute_on'
p36862
sS'cpp_type'
p36863
S'MooseEnum'
p36864
sS'default'
p36865
S'timestep'
p36866
sS'description'
p36867
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36868
sS'required'
p36869
I00
sS'options'
p36870
S'initial residual jacobian timestep timestep_begin custom'
p36871
sS'group_name'
p36872
Nsa(dp36873
S'description'
p36874
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p36875
sS'cpp_type'
p36876
S'std::vector<OutputName, std::allocator<OutputName> >'
p36877
sS'default'
p36878
g3
sS'name'
p36879
S'outputs'
p36880
sS'required'
p36881
I00
sS'group_name'
p36882
S'Advanced'
p36883
sa(dp36884
S'description'
p36885
g3
sS'cpp_type'
p36886
S'std::string'
p36887
sS'default'
p36888
S'NumNonlinearIterations'
p36889
sS'name'
p36890
S'type'
p36891
sS'required'
p36892
I00
sS'group_name'
p36893
Nsa(dp36894
S'description'
p36895
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36896
sS'cpp_type'
p36897
S'bool'
p36898
sS'default'
p36899
S'0'
p36900
sS'name'
p36901
S'use_displaced_mesh'
p36902
sS'required'
p36903
I00
sS'group_name'
p36904
S'Advanced'
p36905
sasS'name'
p36906
S'/UserObjects/NumNonlinearIterations'
p36907
sa(dp36908
S'description'
p36909
g3
sS'type'
p36910
NsS'subblocks'
p36911
NsS'parameters'
p36912
(lp36913
(dp36914
S'name'
p36915
S'execute_on'
p36916
sS'cpp_type'
p36917
S'MooseEnum'
p36918
sS'default'
p36919
S'timestep'
p36920
sS'description'
p36921
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36922
sS'required'
p36923
I00
sS'options'
p36924
S'initial residual jacobian timestep timestep_begin custom'
p36925
sS'group_name'
p36926
Nsa(dp36927
S'description'
p36928
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p36929
sS'cpp_type'
p36930
S'std::vector<OutputName, std::allocator<OutputName> >'
p36931
sS'default'
p36932
g3
sS'name'
p36933
S'outputs'
p36934
sS'required'
p36935
I00
sS'group_name'
p36936
S'Advanced'
p36937
sa(dp36938
S'description'
p36939
g3
sS'cpp_type'
p36940
S'std::string'
p36941
sS'default'
p36942
S'NumResidualEvaluations'
p36943
sS'name'
p36944
S'type'
p36945
sS'required'
p36946
I00
sS'group_name'
p36947
Nsa(dp36948
S'description'
p36949
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36950
sS'cpp_type'
p36951
S'bool'
p36952
sS'default'
p36953
S'0'
p36954
sS'name'
p36955
S'use_displaced_mesh'
p36956
sS'required'
p36957
I00
sS'group_name'
p36958
S'Advanced'
p36959
sasS'name'
p36960
S'/UserObjects/NumResidualEvaluations'
p36961
sa(dp36962
S'description'
p36963
g3
sS'type'
p36964
NsS'subblocks'
p36965
NsS'parameters'
p36966
(lp36967
(dp36968
S'name'
p36969
S'execute_on'
p36970
sS'cpp_type'
p36971
S'MooseEnum'
p36972
sS'default'
p36973
S'timestep'
p36974
sS'description'
p36975
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36976
sS'required'
p36977
I00
sS'options'
p36978
S'initial residual jacobian timestep timestep_begin custom'
p36979
sS'group_name'
p36980
Nsa(dp36981
S'description'
p36982
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p36983
sS'cpp_type'
p36984
S'std::vector<OutputName, std::allocator<OutputName> >'
p36985
sS'default'
p36986
g3
sS'name'
p36987
S'outputs'
p36988
sS'required'
p36989
I00
sS'group_name'
p36990
S'Advanced'
p36991
sa(dp36992
S'name'
p36993
S'system'
p36994
sS'cpp_type'
p36995
S'MooseEnum'
p36996
sS'default'
p36997
S'nonlinear'
p36998
sS'description'
p36999
S'The system for which you want to print the number of variables.\n'
p37000
sS'required'
p37001
I00
sS'options'
p37002
S'nonlinear auxiliary'
p37003
sS'group_name'
p37004
Nsa(dp37005
S'description'
p37006
g3
sS'cpp_type'
p37007
S'std::string'
p37008
sS'default'
p37009
S'NumVars'
p37010
sS'name'
p37011
S'type'
p37012
sS'required'
p37013
I00
sS'group_name'
p37014
Nsa(dp37015
S'description'
p37016
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37017
sS'cpp_type'
p37018
S'bool'
p37019
sS'default'
p37020
S'0'
p37021
sS'name'
p37022
S'use_displaced_mesh'
p37023
sS'required'
p37024
I00
sS'group_name'
p37025
S'Advanced'
p37026
sasS'name'
p37027
S'/UserObjects/NumVars'
p37028
sa(dp37029
S'description'
p37030
g3
sS'type'
p37031
NsS'subblocks'
p37032
NsS'parameters'
p37033
(lp37034
(dp37035
S'name'
p37036
S'column'
p37037
sS'cpp_type'
p37038
S'MooseEnum'
p37039
sS'default'
p37040
g3
sS'description'
p37041
S'The column you want the value of.\n'
p37042
sS'required'
p37043
I01
sS'options'
p37044
S'n_calls total_time average_time total_time_with_sub average_time_with_sub percent_of_active_time percent_of_active_time_with_sub'
p37045
sS'group_name'
p37046
Nsa(dp37047
S'description'
p37048
S'The name of the event.\n'
p37049
sS'cpp_type'
p37050
S'std::string'
p37051
sS'default'
p37052
g3
sS'name'
p37053
S'event'
p37054
sS'required'
p37055
I01
sS'group_name'
p37056
Nsa(dp37057
S'name'
p37058
S'execute_on'
p37059
sS'cpp_type'
p37060
S'MooseEnum'
p37061
sS'default'
p37062
S'timestep'
p37063
sS'description'
p37064
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p37065
sS'required'
p37066
I00
sS'options'
p37067
S'initial residual jacobian timestep timestep_begin custom'
p37068
sS'group_name'
p37069
Nsa(dp37070
S'description'
p37071
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p37072
sS'cpp_type'
p37073
S'std::vector<OutputName, std::allocator<OutputName> >'
p37074
sS'default'
p37075
g3
sS'name'
p37076
S'outputs'
p37077
sS'required'
p37078
I00
sS'group_name'
p37079
S'Advanced'
p37080
sa(dp37081
S'description'
p37082
g3
sS'cpp_type'
p37083
S'std::string'
p37084
sS'default'
p37085
S'PerformanceData'
p37086
sS'name'
p37087
S'type'
p37088
sS'required'
p37089
I00
sS'group_name'
p37090
Nsa(dp37091
S'description'
p37092
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37093
sS'cpp_type'
p37094
S'bool'
p37095
sS'default'
p37096
S'0'
p37097
sS'name'
p37098
S'use_displaced_mesh'
p37099
sS'required'
p37100
I00
sS'group_name'
p37101
S'Advanced'
p37102
sasS'name'
p37103
S'/UserObjects/PerformanceData'
p37104
sa(dp37105
S'description'
p37106
g3
sS'type'
p37107
NsS'subblocks'
p37108
NsS'parameters'
p37109
(lp37110
(dp37111
S'name'
p37112
S'execute_on'
p37113
sS'cpp_type'
p37114
S'MooseEnum'
p37115
sS'default'
p37116
S'timestep'
p37117
sS'description'
p37118
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p37119
sS'required'
p37120
I00
sS'options'
p37121
S'initial residual jacobian timestep timestep_begin custom'
p37122
sS'group_name'
p37123
Nsa(dp37124
S'description'
p37125
S'Name of the function to plot (i.e. sample)\n'
p37126
sS'cpp_type'
p37127
S'FunctionName'
p37128
sS'default'
p37129
g3
sS'name'
p37130
S'function'
p37131
sS'required'
p37132
I01
sS'group_name'
p37133
Nsa(dp37134
S'description'
p37135
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p37136
sS'cpp_type'
p37137
S'std::vector<OutputName, std::allocator<OutputName> >'
p37138
sS'default'
p37139
g3
sS'name'
p37140
S'outputs'
p37141
sS'required'
p37142
I00
sS'group_name'
p37143
S'Advanced'
p37144
sa(dp37145
S'description'
p37146
S'A point in space to be given to the function\n'
p37147
sS'cpp_type'
p37148
S'libMesh::Point'
p37149
sS'default'
p37150
g3
sS'name'
p37151
S'point'
p37152
sS'required'
p37153
I00
sS'group_name'
p37154
Nsa(dp37155
S'description'
p37156
S'A scale factor to be applied to the function\n'
p37157
sS'cpp_type'
p37158
S'double'
p37159
sS'default'
p37160
S'1'
p37161
sS'name'
p37162
S'scale_factor'
p37163
sS'required'
p37164
I00
sS'group_name'
p37165
Nsa(dp37166
S'description'
p37167
g3
sS'cpp_type'
p37168
S'std::string'
p37169
sS'default'
p37170
S'PlotFunction'
p37171
sS'name'
p37172
S'type'
p37173
sS'required'
p37174
I00
sS'group_name'
p37175
Nsa(dp37176
S'description'
p37177
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37178
sS'cpp_type'
p37179
S'bool'
p37180
sS'default'
p37181
S'0'
p37182
sS'name'
p37183
S'use_displaced_mesh'
p37184
sS'required'
p37185
I00
sS'group_name'
p37186
S'Advanced'
p37187
sasS'name'
p37188
S'/UserObjects/PlotFunction'
p37189
sa(dp37190
S'description'
p37191
g3
sS'type'
p37192
NsS'subblocks'
p37193
NsS'parameters'
p37194
(lp37195
(dp37196
S'name'
p37197
S'execute_on'
p37198
sS'cpp_type'
p37199
S'MooseEnum'
p37200
sS'default'
p37201
S'timestep'
p37202
sS'description'
p37203
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p37204
sS'required'
p37205
I00
sS'options'
p37206
S'initial residual jacobian timestep timestep_begin custom'
p37207
sS'group_name'
p37208
Nsa(dp37209
S'description'
p37210
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p37211
sS'cpp_type'
p37212
S'std::vector<OutputName, std::allocator<OutputName> >'
p37213
sS'default'
p37214
g3
sS'name'
p37215
S'outputs'
p37216
sS'required'
p37217
I00
sS'group_name'
p37218
S'Advanced'
p37219
sa(dp37220
S'description'
p37221
S'The physical point where the solution will be evaluated.\n'
p37222
sS'cpp_type'
p37223
S'libMesh::Point'
p37224
sS'default'
p37225
g3
sS'name'
p37226
S'point'
p37227
sS'required'
p37228
I01
sS'group_name'
p37229
Nsa(dp37230
S'description'
p37231
g3
sS'cpp_type'
p37232
S'std::string'
p37233
sS'default'
p37234
S'PointValue'
p37235
sS'name'
p37236
S'type'
p37237
sS'required'
p37238
I00
sS'group_name'
p37239
Nsa(dp37240
S'description'
p37241
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37242
sS'cpp_type'
p37243
S'bool'
p37244
sS'default'
p37245
S'0'
p37246
sS'name'
p37247
S'use_displaced_mesh'
p37248
sS'required'
p37249
I00
sS'group_name'
p37250
S'Advanced'
p37251
sa(dp37252
S'description'
p37253
S'The name of the variable that this postprocessor operates on.\n'
p37254
sS'cpp_type'
p37255
S'VariableName'
p37256
sS'default'
p37257
g3
sS'name'
p37258
S'variable'
p37259
sS'required'
p37260
I01
sS'group_name'
p37261
NsasS'name'
p37262
S'/UserObjects/PointValue'
p37263
sa(dp37264
S'description'
p37265
g3
sS'type'
p37266
NsS'subblocks'
p37267
NsS'parameters'
p37268
(lp37269
(dp37270
S'name'
p37271
S'execute_on'
p37272
sS'cpp_type'
p37273
S'MooseEnum'
p37274
sS'default'
p37275
S'timestep'
p37276
sS'description'
p37277
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p37278
sS'required'
p37279
I00
sS'options'
p37280
S'initial residual jacobian timestep timestep_begin custom'
p37281
sS'group_name'
p37282
Nsa(dp37283
S'description'
p37284
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p37285
sS'cpp_type'
p37286
S'std::vector<OutputName, std::allocator<OutputName> >'
p37287
sS'default'
p37288
g3
sS'name'
p37289
S'outputs'
p37290
sS'required'
p37291
I00
sS'group_name'
p37292
S'Advanced'
p37293
sa(dp37294
S'description'
p37295
S'Name of the parameter to be exposed\n'
p37296
sS'cpp_type'
p37297
S'std::string'
p37298
sS'default'
p37299
g3
sS'name'
p37300
S'param_name'
p37301
sS'required'
p37302
I01
sS'group_name'
p37303
Nsa(dp37304
S'description'
p37305
g3
sS'cpp_type'
p37306
S'std::string'
p37307
sS'default'
p37308
S'ProblemRealParameter'
p37309
sS'name'
p37310
S'type'
p37311
sS'required'
p37312
I00
sS'group_name'
p37313
Nsa(dp37314
S'description'
p37315
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37316
sS'cpp_type'
p37317
S'bool'
p37318
sS'default'
p37319
S'0'
p37320
sS'name'
p37321
S'use_displaced_mesh'
p37322
sS'required'
p37323
I00
sS'group_name'
p37324
S'Advanced'
p37325
sasS'name'
p37326
S'/UserObjects/ProblemRealParameter'
p37327
sa(dp37328
S'description'
p37329
g3
sS'type'
p37330
NsS'subblocks'
p37331
NsS'parameters'
p37332
(lp37333
(dp37334
S'description'
p37335
S'The default value\n'
p37336
sS'cpp_type'
p37337
S'double'
p37338
sS'default'
p37339
g3
sS'name'
p37340
S'default'
p37341
sS'required'
p37342
I00
sS'group_name'
p37343
Nsa(dp37344
S'name'
p37345
S'execute_on'
p37346
sS'cpp_type'
p37347
S'MooseEnum'
p37348
sS'default'
p37349
S'timestep'
p37350
sS'description'
p37351
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p37352
sS'required'
p37353
I00
sS'options'
p37354
S'initial residual jacobian timestep timestep_begin custom'
p37355
sS'group_name'
p37356
Nsa(dp37357
S'description'
p37358
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p37359
sS'cpp_type'
p37360
S'std::vector<OutputName, std::allocator<OutputName> >'
p37361
sS'default'
p37362
g3
sS'name'
p37363
S'outputs'
p37364
sS'required'
p37365
I00
sS'group_name'
p37366
S'Advanced'
p37367
sa(dp37368
S'description'
p37369
g3
sS'cpp_type'
p37370
S'std::string'
p37371
sS'default'
p37372
S'Receiver'
p37373
sS'name'
p37374
S'type'
p37375
sS'required'
p37376
I00
sS'group_name'
p37377
Nsa(dp37378
S'description'
p37379
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37380
sS'cpp_type'
p37381
S'bool'
p37382
sS'default'
p37383
S'0'
p37384
sS'name'
p37385
S'use_displaced_mesh'
p37386
sS'required'
p37387
I00
sS'group_name'
p37388
S'Advanced'
p37389
sasS'name'
p37390
S'/UserObjects/Receiver'
p37391
sa(dp37392
S'description'
p37393
g3
sS'type'
p37394
NsS'subblocks'
p37395
NsS'parameters'
p37396
(lp37397
(dp37398
S'name'
p37399
S'execute_on'
p37400
sS'cpp_type'
p37401
S'MooseEnum'
p37402
sS'default'
p37403
S'timestep'
p37404
sS'description'
p37405
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p37406
sS'required'
p37407
I00
sS'options'
p37408
S'initial residual jacobian timestep timestep_begin custom'
p37409
sS'group_name'
p37410
Nsa(dp37411
S'description'
p37412
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p37413
sS'cpp_type'
p37414
S'std::vector<OutputName, std::allocator<OutputName> >'
p37415
sS'default'
p37416
g3
sS'name'
p37417
S'outputs'
p37418
sS'required'
p37419
I00
sS'group_name'
p37420
S'Advanced'
p37421
sa(dp37422
S'description'
p37423
g3
sS'cpp_type'
p37424
S'std::string'
p37425
sS'default'
p37426
S'Residual'
p37427
sS'name'
p37428
S'type'
p37429
sS'required'
p37430
I00
sS'group_name'
p37431
Nsa(dp37432
S'description'
p37433
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37434
sS'cpp_type'
p37435
S'bool'
p37436
sS'default'
p37437
S'0'
p37438
sS'name'
p37439
S'use_displaced_mesh'
p37440
sS'required'
p37441
I00
sS'group_name'
p37442
S'Advanced'
p37443
sasS'name'
p37444
S'/UserObjects/Residual'
p37445
sa(dp37446
S'description'
p37447
g3
sS'type'
p37448
NsS'subblocks'
p37449
NsS'parameters'
p37450
(lp37451
(dp37452
S'name'
p37453
S'execute_on'
p37454
sS'cpp_type'
p37455
S'MooseEnum'
p37456
sS'default'
p37457
S'timestep'
p37458
sS'description'
p37459
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p37460
sS'required'
p37461
I00
sS'options'
p37462
S'initial residual jacobian timestep timestep_begin custom'
p37463
sS'group_name'
p37464
Nsa(dp37465
S'description'
p37466
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p37467
sS'cpp_type'
p37468
S'std::vector<OutputName, std::allocator<OutputName> >'
p37469
sS'default'
p37470
g3
sS'name'
p37471
S'outputs'
p37472
sS'required'
p37473
I00
sS'group_name'
p37474
S'Advanced'
p37475
sa(dp37476
S'name'
p37477
S'time_type'
p37478
sS'cpp_type'
p37479
S'MooseEnum'
p37480
sS'default'
p37481
g3
sS'description'
p37482
S'Whether to output the total elapsed or just the active time\n'
p37483
sS'required'
p37484
I01
sS'options'
p37485
S'alive active'
p37486
sS'group_name'
p37487
Nsa(dp37488
S'description'
p37489
g3
sS'cpp_type'
p37490
S'std::string'
p37491
sS'default'
p37492
S'RunTime'
p37493
sS'name'
p37494
S'type'
p37495
sS'required'
p37496
I00
sS'group_name'
p37497
Nsa(dp37498
S'description'
p37499
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37500
sS'cpp_type'
p37501
S'bool'
p37502
sS'default'
p37503
S'0'
p37504
sS'name'
p37505
S'use_displaced_mesh'
p37506
sS'required'
p37507
I00
sS'group_name'
p37508
S'Advanced'
p37509
sasS'name'
p37510
S'/UserObjects/RunTime'
p37511
sa(dp37512
S'description'
p37513
g3
sS'type'
p37514
NsS'subblocks'
p37515
NsS'parameters'
p37516
(lp37517
(dp37518
S'name'
p37519
S'execute_on'
p37520
sS'cpp_type'
p37521
S'MooseEnum'
p37522
sS'default'
p37523
S'timestep'
p37524
sS'description'
p37525
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p37526
sS'required'
p37527
I00
sS'options'
p37528
S'initial residual jacobian timestep timestep_begin custom'
p37529
sS'group_name'
p37530
Nsa(dp37531
S'description'
p37532
S'The analytic solution to compare against\n'
p37533
sS'cpp_type'
p37534
S'FunctionName'
p37535
sS'default'
p37536
g3
sS'name'
p37537
S'function'
p37538
sS'required'
p37539
I01
sS'group_name'
p37540
Nsa(dp37541
S'description'
p37542
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p37543
sS'cpp_type'
p37544
S'std::vector<OutputName, std::allocator<OutputName> >'
p37545
sS'default'
p37546
g3
sS'name'
p37547
S'outputs'
p37548
sS'required'
p37549
I00
sS'group_name'
p37550
S'Advanced'
p37551
sa(dp37552
S'description'
p37553
g3
sS'cpp_type'
p37554
S'std::string'
p37555
sS'default'
p37556
S'ScalarL2Error'
p37557
sS'name'
p37558
S'type'
p37559
sS'required'
p37560
I00
sS'group_name'
p37561
Nsa(dp37562
S'description'
p37563
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37564
sS'cpp_type'
p37565
S'bool'
p37566
sS'default'
p37567
S'0'
p37568
sS'name'
p37569
S'use_displaced_mesh'
p37570
sS'required'
p37571
I00
sS'group_name'
p37572
S'Advanced'
p37573
sa(dp37574
S'description'
p37575
S'The name of the scalar variable\n'
p37576
sS'cpp_type'
p37577
S'VariableName'
p37578
sS'default'
p37579
g3
sS'name'
p37580
S'variable'
p37581
sS'required'
p37582
I01
sS'group_name'
p37583
NsasS'name'
p37584
S'/UserObjects/ScalarL2Error'
p37585
sa(dp37586
S'description'
p37587
g3
sS'type'
p37588
NsS'subblocks'
p37589
NsS'parameters'
p37590
(lp37591
(dp37592
S'description'
p37593
S'Component to output for this variable\n'
p37594
sS'cpp_type'
p37595
S'unsigned int'
p37596
sS'default'
p37597
S'0'
p37598
sS'name'
p37599
S'component'
p37600
sS'required'
p37601
I00
sS'group_name'
p37602
Nsa(dp37603
S'name'
p37604
S'execute_on'
p37605
sS'cpp_type'
p37606
S'MooseEnum'
p37607
sS'default'
p37608
S'timestep'
p37609
sS'description'
p37610
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p37611
sS'required'
p37612
I00
sS'options'
p37613
S'initial residual jacobian timestep timestep_begin custom'
p37614
sS'group_name'
p37615
Nsa(dp37616
S'description'
p37617
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p37618
sS'cpp_type'
p37619
S'std::vector<OutputName, std::allocator<OutputName> >'
p37620
sS'default'
p37621
g3
sS'name'
p37622
S'outputs'
p37623
sS'required'
p37624
I00
sS'group_name'
p37625
S'Advanced'
p37626
sa(dp37627
S'description'
p37628
g3
sS'cpp_type'
p37629
S'std::string'
p37630
sS'default'
p37631
S'ScalarVariable'
p37632
sS'name'
p37633
S'type'
p37634
sS'required'
p37635
I00
sS'group_name'
p37636
Nsa(dp37637
S'description'
p37638
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37639
sS'cpp_type'
p37640
S'bool'
p37641
sS'default'
p37642
S'0'
p37643
sS'name'
p37644
S'use_displaced_mesh'
p37645
sS'required'
p37646
I00
sS'group_name'
p37647
S'Advanced'
p37648
sa(dp37649
S'description'
p37650
S'Name of the variable\n'
p37651
sS'cpp_type'
p37652
S'VariableName'
p37653
sS'default'
p37654
g3
sS'name'
p37655
S'variable'
p37656
sS'required'
p37657
I01
sS'group_name'
p37658
NsasS'name'
p37659
S'/UserObjects/ScalarVariable'
p37660
sa(dp37661
S'description'
p37662
g3
sS'type'
p37663
NsS'subblocks'
p37664
NsS'parameters'
p37665
(lp37666
(dp37667
S'description'
p37668
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p37669
sS'cpp_type'
p37670
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p37671
sS'default'
p37672
g3
sS'name'
p37673
S'boundary'
p37674
sS'required'
p37675
I00
sS'group_name'
p37676
Nsa(dp37677
S'name'
p37678
S'execute_on'
p37679
sS'cpp_type'
p37680
S'MooseEnum'
p37681
sS'default'
p37682
S'timestep'
p37683
sS'description'
p37684
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p37685
sS'required'
p37686
I00
sS'options'
p37687
S'initial residual jacobian timestep timestep_begin custom'
p37688
sS'group_name'
p37689
Nsa(dp37690
S'description'
p37691
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p37692
sS'cpp_type'
p37693
S'std::vector<OutputName, std::allocator<OutputName> >'
p37694
sS'default'
p37695
g3
sS'name'
p37696
S'outputs'
p37697
sS'required'
p37698
I00
sS'group_name'
p37699
S'Advanced'
p37700
sa(dp37701
S'description'
p37702
g3
sS'cpp_type'
p37703
S'std::string'
p37704
sS'default'
p37705
S'SideAverageValue'
p37706
sS'name'
p37707
S'type'
p37708
sS'required'
p37709
I00
sS'group_name'
p37710
Nsa(dp37711
S'description'
p37712
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37713
sS'cpp_type'
p37714
S'bool'
p37715
sS'default'
p37716
S'0'
p37717
sS'name'
p37718
S'use_displaced_mesh'
p37719
sS'required'
p37720
I00
sS'group_name'
p37721
S'Advanced'
p37722
sa(dp37723
S'description'
p37724
S'The name of the variable that this boundary condition applies to\n'
p37725
sS'cpp_type'
p37726
S'VariableName'
p37727
sS'default'
p37728
g3
sS'name'
p37729
S'variable'
p37730
sS'required'
p37731
I01
sS'group_name'
p37732
NsasS'name'
p37733
S'/UserObjects/SideAverageValue'
p37734
sa(dp37735
S'description'
p37736
g3
sS'type'
p37737
NsS'subblocks'
p37738
NsS'parameters'
p37739
(lp37740
(dp37741
S'description'
p37742
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p37743
sS'cpp_type'
p37744
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p37745
sS'default'
p37746
g3
sS'name'
p37747
S'boundary'
p37748
sS'required'
p37749
I00
sS'group_name'
p37750
Nsa(dp37751
S'description'
p37752
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p37753
sS'cpp_type'
p37754
S'std::string'
p37755
sS'default'
p37756
g3
sS'name'
p37757
S'diffusivity'
p37758
sS'required'
p37759
I01
sS'group_name'
p37760
Nsa(dp37761
S'name'
p37762
S'execute_on'
p37763
sS'cpp_type'
p37764
S'MooseEnum'
p37765
sS'default'
p37766
S'timestep'
p37767
sS'description'
p37768
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p37769
sS'required'
p37770
I00
sS'options'
p37771
S'initial residual jacobian timestep timestep_begin custom'
p37772
sS'group_name'
p37773
Nsa(dp37774
S'description'
p37775
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p37776
sS'cpp_type'
p37777
S'std::vector<OutputName, std::allocator<OutputName> >'
p37778
sS'default'
p37779
g3
sS'name'
p37780
S'outputs'
p37781
sS'required'
p37782
I00
sS'group_name'
p37783
S'Advanced'
p37784
sa(dp37785
S'description'
p37786
g3
sS'cpp_type'
p37787
S'std::string'
p37788
sS'default'
p37789
S'SideFluxAverage'
p37790
sS'name'
p37791
S'type'
p37792
sS'required'
p37793
I00
sS'group_name'
p37794
Nsa(dp37795
S'description'
p37796
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37797
sS'cpp_type'
p37798
S'bool'
p37799
sS'default'
p37800
S'0'
p37801
sS'name'
p37802
S'use_displaced_mesh'
p37803
sS'required'
p37804
I00
sS'group_name'
p37805
S'Advanced'
p37806
sa(dp37807
S'description'
p37808
S'The name of the variable that this boundary condition applies to\n'
p37809
sS'cpp_type'
p37810
S'VariableName'
p37811
sS'default'
p37812
g3
sS'name'
p37813
S'variable'
p37814
sS'required'
p37815
I01
sS'group_name'
p37816
NsasS'name'
p37817
S'/UserObjects/SideFluxAverage'
p37818
sa(dp37819
S'description'
p37820
g3
sS'type'
p37821
NsS'subblocks'
p37822
NsS'parameters'
p37823
(lp37824
(dp37825
S'description'
p37826
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p37827
sS'cpp_type'
p37828
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p37829
sS'default'
p37830
g3
sS'name'
p37831
S'boundary'
p37832
sS'required'
p37833
I00
sS'group_name'
p37834
Nsa(dp37835
S'description'
p37836
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p37837
sS'cpp_type'
p37838
S'std::string'
p37839
sS'default'
p37840
g3
sS'name'
p37841
S'diffusivity'
p37842
sS'required'
p37843
I01
sS'group_name'
p37844
Nsa(dp37845
S'name'
p37846
S'execute_on'
p37847
sS'cpp_type'
p37848
S'MooseEnum'
p37849
sS'default'
p37850
S'timestep'
p37851
sS'description'
p37852
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p37853
sS'required'
p37854
I00
sS'options'
p37855
S'initial residual jacobian timestep timestep_begin custom'
p37856
sS'group_name'
p37857
Nsa(dp37858
S'description'
p37859
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p37860
sS'cpp_type'
p37861
S'std::vector<OutputName, std::allocator<OutputName> >'
p37862
sS'default'
p37863
g3
sS'name'
p37864
S'outputs'
p37865
sS'required'
p37866
I00
sS'group_name'
p37867
S'Advanced'
p37868
sa(dp37869
S'description'
p37870
g3
sS'cpp_type'
p37871
S'std::string'
p37872
sS'default'
p37873
S'SideFluxIntegral'
p37874
sS'name'
p37875
S'type'
p37876
sS'required'
p37877
I00
sS'group_name'
p37878
Nsa(dp37879
S'description'
p37880
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37881
sS'cpp_type'
p37882
S'bool'
p37883
sS'default'
p37884
S'0'
p37885
sS'name'
p37886
S'use_displaced_mesh'
p37887
sS'required'
p37888
I00
sS'group_name'
p37889
S'Advanced'
p37890
sa(dp37891
S'description'
p37892
S'The name of the variable that this boundary condition applies to\n'
p37893
sS'cpp_type'
p37894
S'VariableName'
p37895
sS'default'
p37896
g3
sS'name'
p37897
S'variable'
p37898
sS'required'
p37899
I01
sS'group_name'
p37900
NsasS'name'
p37901
S'/UserObjects/SideFluxIntegral'
p37902
sa(dp37903
S'description'
p37904
g3
sS'type'
p37905
NsS'subblocks'
p37906
NsS'parameters'
p37907
(lp37908
(dp37909
S'description'
p37910
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p37911
sS'cpp_type'
p37912
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p37913
sS'default'
p37914
g3
sS'name'
p37915
S'boundary'
p37916
sS'required'
p37917
I00
sS'group_name'
p37918
Nsa(dp37919
S'name'
p37920
S'execute_on'
p37921
sS'cpp_type'
p37922
S'MooseEnum'
p37923
sS'default'
p37924
S'timestep'
p37925
sS'description'
p37926
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p37927
sS'required'
p37928
I00
sS'options'
p37929
S'initial residual jacobian timestep timestep_begin custom'
p37930
sS'group_name'
p37931
Nsa(dp37932
S'description'
p37933
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p37934
sS'cpp_type'
p37935
S'std::vector<OutputName, std::allocator<OutputName> >'
p37936
sS'default'
p37937
g3
sS'name'
p37938
S'outputs'
p37939
sS'required'
p37940
I00
sS'group_name'
p37941
S'Advanced'
p37942
sa(dp37943
S'description'
p37944
g3
sS'cpp_type'
p37945
S'std::string'
p37946
sS'default'
p37947
S'SideIntegralVariablePostprocessor'
p37948
sS'name'
p37949
S'type'
p37950
sS'required'
p37951
I00
sS'group_name'
p37952
Nsa(dp37953
S'description'
p37954
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37955
sS'cpp_type'
p37956
S'bool'
p37957
sS'default'
p37958
S'0'
p37959
sS'name'
p37960
S'use_displaced_mesh'
p37961
sS'required'
p37962
I00
sS'group_name'
p37963
S'Advanced'
p37964
sa(dp37965
S'description'
p37966
S'The name of the variable that this boundary condition applies to\n'
p37967
sS'cpp_type'
p37968
S'VariableName'
p37969
sS'default'
p37970
g3
sS'name'
p37971
S'variable'
p37972
sS'required'
p37973
I01
sS'group_name'
p37974
NsasS'name'
p37975
S'/UserObjects/SideIntegralVariablePostprocessor'
p37976
sa(dp37977
S'description'
p37978
g3
sS'type'
p37979
NsS'subblocks'
p37980
NsS'parameters'
p37981
(lp37982
(dp37983
S'description'
p37984
S'Transformation factors for x,y,z coordiantes (e.g., x + factor)\n'
p37985
sS'cpp_type'
p37986
S'std::vector<double, std::allocator<double> >'
p37987
sS'default'
p37988
S'0 0 0'
p37989
sS'name'
p37990
S'coord_factor'
p37991
sS'required'
p37992
I00
sS'group_name'
p37993
Nsa(dp37994
S'description'
p37995
S'Scaling parameter for x,y,z coordiantes (e.g. x*scale)\n'
p37996
sS'cpp_type'
p37997
S'std::vector<double, std::allocator<double> >'
p37998
sS'default'
p37999
S'1 1 1'
p38000
sS'name'
p38001
S'coord_scale'
p38002
sS'required'
p38003
I00
sS'group_name'
p38004
Nsa(dp38005
S'description'
p38006
S'The name of the element variables from the file you want to use for values.\n'
p38007
sS'cpp_type'
p38008
S'std::vector<std::string, std::allocator<std::string> >'
p38009
sS'default'
p38010
g3
sS'name'
p38011
S'elemental_variables'
p38012
sS'required'
p38013
I00
sS'group_name'
p38014
Nsa(dp38015
S'description'
p38016
S'The name of the file holding the equation system info in xda format (xda only).\n'
p38017
sS'cpp_type'
p38018
S'std::string'
p38019
sS'default'
p38020
g3
sS'name'
p38021
S'es'
p38022
sS'required'
p38023
I00
sS'group_name'
p38024
Nsa(dp38025
S'name'
p38026
S'execute_on'
p38027
sS'cpp_type'
p38028
S'MooseEnum'
p38029
sS'default'
p38030
S'timestep_begin'
p38031
sS'description'
p38032
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p38033
sS'required'
p38034
I00
sS'options'
p38035
S'initial residual jacobian timestep timestep_begin custom'
p38036
sS'group_name'
p38037
Nsa(dp38038
S'description'
p38039
S'The name of the mesh file (must be xda or exodusII file.\n'
p38040
sS'cpp_type'
p38041
S'std::string'
p38042
sS'default'
p38043
g3
sS'name'
p38044
S'mesh'
p38045
sS'required'
p38046
I01
sS'group_name'
p38047
Nsa(dp38048
S'description'
p38049
S'The name of the nodal variables from the file you want to use for values.\n'
p38050
sS'cpp_type'
p38051
S'std::vector<std::string, std::allocator<std::string> >'
p38052
sS'default'
p38053
g3
sS'name'
p38054
S'nodal_variables'
p38055
sS'required'
p38056
I00
sS'group_name'
p38057
Nsa(dp38058
S'description'
p38059
S'The name of the system to pull values out of (xda only).\n'
p38060
sS'cpp_type'
p38061
S'std::string'
p38062
sS'default'
p38063
S'NonlinearSystem'
p38064
sS'name'
p38065
S'system'
p38066
sS'required'
p38067
I00
sS'group_name'
p38068
Nsa(dp38069
S'description'
p38070
S'Index of the single timestep used (exodusII only).  If not supplied, time interpolation will occur.\n'
p38071
sS'cpp_type'
p38072
S'int'
p38073
sS'default'
p38074
S'-1'
p38075
sS'name'
p38076
S'timestep'
p38077
sS'required'
p38078
I00
sS'group_name'
p38079
Nsa(dp38080
S'description'
p38081
g3
sS'cpp_type'
p38082
S'std::string'
p38083
sS'default'
p38084
S'SolutionUserObject'
p38085
sS'name'
p38086
S'type'
p38087
sS'required'
p38088
I00
sS'group_name'
p38089
Nsa(dp38090
S'description'
p38091
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38092
sS'cpp_type'
p38093
S'bool'
p38094
sS'default'
p38095
S'0'
p38096
sS'name'
p38097
S'use_displaced_mesh'
p38098
sS'required'
p38099
I00
sS'group_name'
p38100
S'Advanced'
p38101
sasS'name'
p38102
S'/UserObjects/SolutionUserObject'
p38103
sa(dp38104
S'description'
p38105
g3
sS'type'
p38106
NsS'subblocks'
p38107
NsS'parameters'
p38108
(lp38109
(dp38110
S'name'
p38111
S'execute_on'
p38112
sS'cpp_type'
p38113
S'MooseEnum'
p38114
sS'default'
p38115
S'timestep'
p38116
sS'description'
p38117
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p38118
sS'required'
p38119
I00
sS'options'
p38120
S'initial residual jacobian timestep timestep_begin custom'
p38121
sS'group_name'
p38122
Nsa(dp38123
S'description'
p38124
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p38125
sS'cpp_type'
p38126
S'std::vector<OutputName, std::allocator<OutputName> >'
p38127
sS'default'
p38128
g3
sS'name'
p38129
S'outputs'
p38130
sS'required'
p38131
I00
sS'group_name'
p38132
S'Advanced'
p38133
sa(dp38134
S'description'
p38135
g3
sS'cpp_type'
p38136
S'std::string'
p38137
sS'default'
p38138
S'TimestepSize'
p38139
sS'name'
p38140
S'type'
p38141
sS'required'
p38142
I00
sS'group_name'
p38143
Nsa(dp38144
S'description'
p38145
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38146
sS'cpp_type'
p38147
S'bool'
p38148
sS'default'
p38149
S'0'
p38150
sS'name'
p38151
S'use_displaced_mesh'
p38152
sS'required'
p38153
I00
sS'group_name'
p38154
S'Advanced'
p38155
sasS'name'
p38156
S'/UserObjects/TimestepSize'
p38157
sa(dp38158
S'description'
p38159
g3
sS'type'
p38160
NsS'subblocks'
p38161
NsS'parameters'
p38162
(lp38163
(dp38164
S'name'
p38165
S'execute_on'
p38166
sS'cpp_type'
p38167
S'MooseEnum'
p38168
sS'default'
p38169
S'timestep'
p38170
sS'description'
p38171
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p38172
sS'required'
p38173
I00
sS'options'
p38174
S'initial residual jacobian timestep timestep_begin custom'
p38175
sS'group_name'
p38176
Nsa(dp38177
S'description'
p38178
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p38179
sS'cpp_type'
p38180
S'std::vector<OutputName, std::allocator<OutputName> >'
p38181
sS'default'
p38182
g3
sS'name'
p38183
S'outputs'
p38184
sS'required'
p38185
I00
sS'group_name'
p38186
S'Advanced'
p38187
sa(dp38188
S'description'
p38189
g3
sS'cpp_type'
p38190
S'std::string'
p38191
sS'default'
p38192
S'TotalVariableValue'
p38193
sS'name'
p38194
S'type'
p38195
sS'required'
p38196
I00
sS'group_name'
p38197
Nsa(dp38198
S'description'
p38199
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38200
sS'cpp_type'
p38201
S'bool'
p38202
sS'default'
p38203
S'0'
p38204
sS'name'
p38205
S'use_displaced_mesh'
p38206
sS'required'
p38207
I00
sS'group_name'
p38208
S'Advanced'
p38209
sa(dp38210
S'description'
p38211
S'The name of the postprocessor\n'
p38212
sS'cpp_type'
p38213
S'PostprocessorName'
p38214
sS'default'
p38215
g3
sS'name'
p38216
S'value'
p38217
sS'required'
p38218
I00
sS'group_name'
p38219
NsasS'name'
p38220
S'/UserObjects/TotalVariableValue'
p38221
sa(dp38222
S'description'
p38223
g3
sS'type'
p38224
NsS'subblocks'
p38225
NsS'parameters'
p38226
(lp38227
(dp38228
S'description'
p38229
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38230
sS'cpp_type'
p38231
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38232
sS'default'
p38233
g3
sS'name'
p38234
S'block'
p38235
sS'required'
p38236
I00
sS'group_name'
p38237
Nsa(dp38238
S'name'
p38239
S'execute_on'
p38240
sS'cpp_type'
p38241
S'MooseEnum'
p38242
sS'default'
p38243
S'timestep'
p38244
sS'description'
p38245
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p38246
sS'required'
p38247
I00
sS'options'
p38248
S'initial residual jacobian timestep timestep_begin custom'
p38249
sS'group_name'
p38250
Nsa(dp38251
S'description'
p38252
S'Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n'
p38253
sS'cpp_type'
p38254
S'std::vector<OutputName, std::allocator<OutputName> >'
p38255
sS'default'
p38256
g3
sS'name'
p38257
S'outputs'
p38258
sS'required'
p38259
I00
sS'group_name'
p38260
S'Advanced'
p38261
sa(dp38262
S'description'
p38263
S'The seed for the master random number generator\n'
p38264
sS'cpp_type'
p38265
S'unsigned int'
p38266
sS'default'
p38267
S'0'
p38268
sS'name'
p38269
S'seed'
p38270
sS'required'
p38271
I00
sS'group_name'
p38272
S'Advanced'
p38273
sa(dp38274
S'description'
p38275
g3
sS'cpp_type'
p38276
S'std::string'
p38277
sS'default'
p38278
S'VolumePostprocessor'
p38279
sS'name'
p38280
S'type'
p38281
sS'required'
p38282
I00
sS'group_name'
p38283
Nsa(dp38284
S'description'
p38285
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38286
sS'cpp_type'
p38287
S'bool'
p38288
sS'default'
p38289
S'0'
p38290
sS'name'
p38291
S'use_displaced_mesh'
p38292
sS'required'
p38293
I00
sS'group_name'
p38294
S'Advanced'
p38295
sasS'name'
p38296
S'/UserObjects/VolumePostprocessor'
p38297
sasS'parameters'
p38298
NsS'name'
p38299
S'/UserObjects'
p38300
sa(dp38301
S'description'
p38302
g3
sS'type'
p38303
NsS'subblocks'
p38304
(lp38305
(dp38306
S'description'
p38307
g3
sS'type'
p38308
NsS'subblocks'
p38309
(lp38310
(dp38311
S'description'
p38312
g3
sS'type'
p38313
NsS'subblocks'
p38314
(lp38315
(dp38316
S'description'
p38317
g3
sS'type'
p38318
NsS'subblocks'
p38319
(lp38320
(dp38321
S'description'
p38322
g3
sS'type'
p38323
NsS'subblocks'
p38324
NsS'parameters'
p38325
(lp38326
(dp38327
S'description'
p38328
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38329
sS'cpp_type'
p38330
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38331
sS'default'
p38332
g3
sS'name'
p38333
S'block'
p38334
sS'required'
p38335
I00
sS'group_name'
p38336
Nsa(dp38337
S'description'
p38338
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38339
sS'cpp_type'
p38340
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38341
sS'default'
p38342
g3
sS'name'
p38343
S'boundary'
p38344
sS'required'
p38345
I00
sS'group_name'
p38346
Nsa(dp38347
S'description'
p38348
S'The value of the variable inside the box\n'
p38349
sS'cpp_type'
p38350
S'double'
p38351
sS'default'
p38352
S'0'
p38353
sS'name'
p38354
S'inside'
p38355
sS'required'
p38356
I00
sS'group_name'
p38357
Nsa(dp38358
S'description'
p38359
S'The value of the variable outside the box\n'
p38360
sS'cpp_type'
p38361
S'double'
p38362
sS'default'
p38363
S'0'
p38364
sS'name'
p38365
S'outside'
p38366
sS'required'
p38367
I00
sS'group_name'
p38368
Nsa(dp38369
S'description'
p38370
g3
sS'cpp_type'
p38371
S'std::string'
p38372
sS'default'
p38373
S'BoundingBoxIC'
p38374
sS'name'
p38375
S'type'
p38376
sS'required'
p38377
I00
sS'group_name'
p38378
Nsa(dp38379
S'description'
p38380
S'The variable this initial condition is supposed to provide values for.\n'
p38381
sS'cpp_type'
p38382
S'VariableName'
p38383
sS'default'
p38384
g3
sS'name'
p38385
S'variable'
p38386
sS'required'
p38387
I01
sS'group_name'
p38388
Nsa(dp38389
S'description'
p38390
S'The x coordinate of the lower left-hand corner of the box\n'
p38391
sS'cpp_type'
p38392
S'double'
p38393
sS'default'
p38394
g3
sS'name'
p38395
S'x1'
p38396
sS'required'
p38397
I01
sS'group_name'
p38398
Nsa(dp38399
S'description'
p38400
S'The x coordinate of the upper right-hand corner of the box\n'
p38401
sS'cpp_type'
p38402
S'double'
p38403
sS'default'
p38404
g3
sS'name'
p38405
S'x2'
p38406
sS'required'
p38407
I01
sS'group_name'
p38408
Nsa(dp38409
S'description'
p38410
S'The y coordinate of the lower left-hand corner of the box\n'
p38411
sS'cpp_type'
p38412
S'double'
p38413
sS'default'
p38414
g3
sS'name'
p38415
S'y1'
p38416
sS'required'
p38417
I01
sS'group_name'
p38418
Nsa(dp38419
S'description'
p38420
S'The y coordinate of the upper right-hand corner of the box\n'
p38421
sS'cpp_type'
p38422
S'double'
p38423
sS'default'
p38424
g3
sS'name'
p38425
S'y2'
p38426
sS'required'
p38427
I01
sS'group_name'
p38428
Nsa(dp38429
S'description'
p38430
S'The z coordinate of the lower left-hand corner of the box\n'
p38431
sS'cpp_type'
p38432
S'double'
p38433
sS'default'
p38434
S'0'
p38435
sS'name'
p38436
S'z1'
p38437
sS'required'
p38438
I00
sS'group_name'
p38439
Nsa(dp38440
S'description'
p38441
S'The z coordinate of the upper right-hand corner of the box\n'
p38442
sS'cpp_type'
p38443
S'double'
p38444
sS'default'
p38445
S'0'
p38446
sS'name'
p38447
S'z2'
p38448
sS'required'
p38449
I00
sS'group_name'
p38450
NsasS'name'
p38451
S'/Variables/*/InitialCondition/<type>/BoundingBoxIC'
p38452
sa(dp38453
S'description'
p38454
g3
sS'type'
p38455
NsS'subblocks'
p38456
NsS'parameters'
p38457
(lp38458
(dp38459
S'description'
p38460
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38461
sS'cpp_type'
p38462
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38463
sS'default'
p38464
g3
sS'name'
p38465
S'block'
p38466
sS'required'
p38467
I00
sS'group_name'
p38468
Nsa(dp38469
S'description'
p38470
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38471
sS'cpp_type'
p38472
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38473
sS'default'
p38474
g3
sS'name'
p38475
S'boundary'
p38476
sS'required'
p38477
I00
sS'group_name'
p38478
Nsa(dp38479
S'description'
p38480
g3
sS'cpp_type'
p38481
S'std::string'
p38482
sS'default'
p38483
S'ConstantIC'
p38484
sS'name'
p38485
S'type'
p38486
sS'required'
p38487
I00
sS'group_name'
p38488
Nsa(dp38489
S'description'
p38490
S'The value to be set in IC\n'
p38491
sS'cpp_type'
p38492
S'double'
p38493
sS'default'
p38494
g3
sS'name'
p38495
S'value'
p38496
sS'required'
p38497
I01
sS'group_name'
p38498
Nsa(dp38499
S'description'
p38500
S'The variable this initial condition is supposed to provide values for.\n'
p38501
sS'cpp_type'
p38502
S'VariableName'
p38503
sS'default'
p38504
g3
sS'name'
p38505
S'variable'
p38506
sS'required'
p38507
I01
sS'group_name'
p38508
NsasS'name'
p38509
S'/Variables/*/InitialCondition/<type>/ConstantIC'
p38510
sa(dp38511
S'description'
p38512
g3
sS'type'
p38513
NsS'subblocks'
p38514
NsS'parameters'
p38515
(lp38516
(dp38517
S'description'
p38518
S'The amplitude\n'
p38519
sS'cpp_type'
p38520
S'double'
p38521
sS'default'
p38522
S'1'
p38523
sS'name'
p38524
S'amplitude'
p38525
sS'required'
p38526
I00
sS'group_name'
p38527
Nsa(dp38528
S'description'
p38529
S'The average value\n'
p38530
sS'cpp_type'
p38531
S'double'
p38532
sS'default'
p38533
S'0'
p38534
sS'name'
p38535
S'average'
p38536
sS'required'
p38537
I00
sS'group_name'
p38538
Nsa(dp38539
S'description'
p38540
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38541
sS'cpp_type'
p38542
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38543
sS'default'
p38544
g3
sS'name'
p38545
S'block'
p38546
sS'required'
p38547
I00
sS'group_name'
p38548
Nsa(dp38549
S'description'
p38550
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38551
sS'cpp_type'
p38552
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38553
sS'default'
p38554
g3
sS'name'
p38555
S'boundary'
p38556
sS'required'
p38557
I00
sS'group_name'
p38558
Nsa(dp38559
S'description'
p38560
S'A small area between the max value and the interface\n'
p38561
sS'cpp_type'
p38562
S'double'
p38563
sS'default'
p38564
S'0.03125'
p38565
sS'name'
p38566
S'buffer'
p38567
sS'required'
p38568
I00
sS'group_name'
p38569
Nsa(dp38570
S'description'
p38571
S'The interface width\n'
p38572
sS'cpp_type'
p38573
S'double'
p38574
sS'default'
p38575
S'0.03125'
p38576
sS'name'
p38577
S'interface'
p38578
sS'required'
p38579
I00
sS'group_name'
p38580
Nsa(dp38581
S'description'
p38582
S'The length\n'
p38583
sS'cpp_type'
p38584
S'double'
p38585
sS'default'
p38586
S'0.75'
p38587
sS'name'
p38588
S'length'
p38589
sS'required'
p38590
I00
sS'group_name'
p38591
Nsa(dp38592
S'description'
p38593
g3
sS'cpp_type'
p38594
S'std::string'
p38595
sS'default'
p38596
S'CrossIC'
p38597
sS'name'
p38598
S'type'
p38599
sS'required'
p38600
I00
sS'group_name'
p38601
Nsa(dp38602
S'description'
p38603
S'The variable this initial condition is supposed to provide values for.\n'
p38604
sS'cpp_type'
p38605
S'VariableName'
p38606
sS'default'
p38607
g3
sS'name'
p38608
S'variable'
p38609
sS'required'
p38610
I01
sS'group_name'
p38611
Nsa(dp38612
S'description'
p38613
S'The width\n'
p38614
sS'cpp_type'
p38615
S'double'
p38616
sS'default'
p38617
S'0.125'
p38618
sS'name'
p38619
S'width'
p38620
sS'required'
p38621
I00
sS'group_name'
p38622
Nsa(dp38623
S'description'
p38624
S'The x coordinate of the lower left-hand corner of the box\n'
p38625
sS'cpp_type'
p38626
S'double'
p38627
sS'default'
p38628
S'0'
p38629
sS'name'
p38630
S'x1'
p38631
sS'required'
p38632
I00
sS'group_name'
p38633
Nsa(dp38634
S'description'
p38635
S'The x coordinate of the upper right-hand corner of the box\n'
p38636
sS'cpp_type'
p38637
S'double'
p38638
sS'default'
p38639
S'1'
p38640
sS'name'
p38641
S'x2'
p38642
sS'required'
p38643
I00
sS'group_name'
p38644
Nsa(dp38645
S'description'
p38646
S'The y coordinate of the lower left-hand corner of the box\n'
p38647
sS'cpp_type'
p38648
S'double'
p38649
sS'default'
p38650
S'0'
p38651
sS'name'
p38652
S'y1'
p38653
sS'required'
p38654
I00
sS'group_name'
p38655
Nsa(dp38656
S'description'
p38657
S'The y coordinate of the upper right-hand corner of the box\n'
p38658
sS'cpp_type'
p38659
S'double'
p38660
sS'default'
p38661
S'1'
p38662
sS'name'
p38663
S'y2'
p38664
sS'required'
p38665
I00
sS'group_name'
p38666
NsasS'name'
p38667
S'/Variables/*/InitialCondition/<type>/CrossIC'
p38668
sa(dp38669
S'description'
p38670
g3
sS'type'
p38671
NsS'subblocks'
p38672
NsS'parameters'
p38673
(lp38674
(dp38675
S'description'
p38676
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38677
sS'cpp_type'
p38678
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38679
sS'default'
p38680
g3
sS'name'
p38681
S'block'
p38682
sS'required'
p38683
I00
sS'group_name'
p38684
Nsa(dp38685
S'description'
p38686
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38687
sS'cpp_type'
p38688
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38689
sS'default'
p38690
g3
sS'name'
p38691
S'boundary'
p38692
sS'required'
p38693
I00
sS'group_name'
p38694
Nsa(dp38695
S'description'
p38696
S'The initial condition function.\n'
p38697
sS'cpp_type'
p38698
S'FunctionName'
p38699
sS'default'
p38700
g3
sS'name'
p38701
S'function'
p38702
sS'required'
p38703
I01
sS'group_name'
p38704
Nsa(dp38705
S'description'
p38706
g3
sS'cpp_type'
p38707
S'std::string'
p38708
sS'default'
p38709
S'FunctionIC'
p38710
sS'name'
p38711
S'type'
p38712
sS'required'
p38713
I00
sS'group_name'
p38714
Nsa(dp38715
S'description'
p38716
S'The variable this initial condition is supposed to provide values for.\n'
p38717
sS'cpp_type'
p38718
S'VariableName'
p38719
sS'default'
p38720
g3
sS'name'
p38721
S'variable'
p38722
sS'required'
p38723
I01
sS'group_name'
p38724
NsasS'name'
p38725
S'/Variables/*/InitialCondition/<type>/FunctionIC'
p38726
sa(dp38727
S'description'
p38728
g3
sS'type'
p38729
NsS'subblocks'
p38730
NsS'parameters'
p38731
(lp38732
(dp38733
S'description'
p38734
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38735
sS'cpp_type'
p38736
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38737
sS'default'
p38738
g3
sS'name'
p38739
S'block'
p38740
sS'required'
p38741
I00
sS'group_name'
p38742
Nsa(dp38743
S'description'
p38744
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38745
sS'cpp_type'
p38746
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38747
sS'default'
p38748
g3
sS'name'
p38749
S'boundary'
p38750
sS'required'
p38751
I00
sS'group_name'
p38752
Nsa(dp38753
S'description'
p38754
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p38755
sS'cpp_type'
p38756
S'bool'
p38757
sS'default'
p38758
S'0'
p38759
sS'name'
p38760
S'cody_test'
p38761
sS'required'
p38762
I00
sS'group_name'
p38763
Nsa(dp38764
S'description'
p38765
S'3D microstructure will be columnar in the z-direction?\n'
p38766
sS'cpp_type'
p38767
S'bool'
p38768
sS'default'
p38769
S'0'
p38770
sS'name'
p38771
S'columnar_3D'
p38772
sS'required'
p38773
I00
sS'group_name'
p38774
Nsa(dp38775
S'description'
p38776
S'The index for the current order parameter\n'
p38777
sS'cpp_type'
p38778
S'unsigned int'
p38779
sS'default'
p38780
g3
sS'name'
p38781
S'crys_index'
p38782
sS'required'
p38783
I01
sS'group_name'
p38784
Nsa(dp38785
S'description'
p38786
S'Number of order parameters\n'
p38787
sS'cpp_type'
p38788
S'unsigned int'
p38789
sS'default'
p38790
g3
sS'name'
p38791
S'crys_num'
p38792
sS'required'
p38793
I01
sS'group_name'
p38794
Nsa(dp38795
S'description'
p38796
S'Number of grains being represented by the order parameters\n'
p38797
sS'cpp_type'
p38798
S'unsigned int'
p38799
sS'default'
p38800
g3
sS'name'
p38801
S'grain_num'
p38802
sS'required'
p38803
I01
sS'group_name'
p38804
Nsa(dp38805
S'description'
p38806
S'The percent to randomly perturbate centers of grains relative to the size of the grain\n'
p38807
sS'cpp_type'
p38808
S'double'
p38809
sS'default'
p38810
S'0'
p38811
sS'name'
p38812
S'perturbation_percent'
p38813
sS'required'
p38814
I00
sS'group_name'
p38815
Nsa(dp38816
S'description'
p38817
S'The random seed\n'
p38818
sS'cpp_type'
p38819
S'unsigned int'
p38820
sS'default'
p38821
S'12444'
p38822
sS'name'
p38823
S'rand_seed'
p38824
sS'required'
p38825
I00
sS'group_name'
p38826
Nsa(dp38827
S'description'
p38828
g3
sS'cpp_type'
p38829
S'int'
p38830
sS'default'
p38831
S'1'
p38832
sS'name'
p38833
S'typ'
p38834
sS'required'
p38835
I00
sS'group_name'
p38836
Nsa(dp38837
S'description'
p38838
g3
sS'cpp_type'
p38839
S'std::string'
p38840
sS'default'
p38841
S'HexPolycrystalIC'
p38842
sS'name'
p38843
S'type'
p38844
sS'required'
p38845
I00
sS'group_name'
p38846
Nsa(dp38847
S'description'
p38848
S'The variable this initial condition is supposed to provide values for.\n'
p38849
sS'cpp_type'
p38850
S'VariableName'
p38851
sS'default'
p38852
g3
sS'name'
p38853
S'variable'
p38854
sS'required'
p38855
I01
sS'group_name'
p38856
Nsa(dp38857
S'description'
p38858
S'Specifies offset of hexagon grid in x-direction\n'
p38859
sS'cpp_type'
p38860
S'double'
p38861
sS'default'
p38862
S'0.5'
p38863
sS'name'
p38864
S'x_offset'
p38865
sS'required'
p38866
I00
sS'group_name'
p38867
NsasS'name'
p38868
S'/Variables/*/InitialCondition/<type>/HexPolycrystalIC'
p38869
sa(dp38870
S'description'
p38871
g3
sS'type'
p38872
NsS'subblocks'
p38873
NsS'parameters'
p38874
(lp38875
(dp38876
S'description'
p38877
S'in 3D, whether the objects are spheres or columns\n'
p38878
sS'cpp_type'
p38879
S'bool'
p38880
sS'default'
p38881
S'1'
p38882
sS'name'
p38883
S'3D_spheres'
p38884
sS'required'
p38885
I00
sS'group_name'
p38886
Nsa(dp38887
S'description'
p38888
S'length of simulation domain in x-direction\n'
p38889
sS'cpp_type'
p38890
S'double'
p38891
sS'default'
p38892
g3
sS'name'
p38893
S'Lx'
p38894
sS'required'
p38895
I01
sS'group_name'
p38896
Nsa(dp38897
S'description'
p38898
S'length of simulation domain in y-direction\n'
p38899
sS'cpp_type'
p38900
S'double'
p38901
sS'default'
p38902
g3
sS'name'
p38903
S'Ly'
p38904
sS'required'
p38905
I01
sS'group_name'
p38906
Nsa(dp38907
S'description'
p38908
S'length of simulation domain in z-direction\n'
p38909
sS'cpp_type'
p38910
S'double'
p38911
sS'default'
p38912
S'0'
p38913
sS'name'
p38914
S'Lz'
p38915
sS'required'
p38916
I00
sS'group_name'
p38917
Nsa(dp38918
S'description'
p38919
S'Variation from central lattice position\n'
p38920
sS'cpp_type'
p38921
S'double'
p38922
sS'default'
p38923
S'0'
p38924
sS'name'
p38925
S'Rnd_variation'
p38926
sS'required'
p38927
I00
sS'group_name'
p38928
Nsa(dp38929
S'description'
p38930
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38931
sS'cpp_type'
p38932
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38933
sS'default'
p38934
g3
sS'name'
p38935
S'block'
p38936
sS'required'
p38937
I00
sS'group_name'
p38938
Nsa(dp38939
S'description'
p38940
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38941
sS'cpp_type'
p38942
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38943
sS'default'
p38944
g3
sS'name'
p38945
S'boundary'
p38946
sS'required'
p38947
I00
sS'group_name'
p38948
Nsa(dp38949
S'description'
p38950
S'minimum spacing of bubbles, measured from center to center\n'
p38951
sS'cpp_type'
p38952
S'double'
p38953
sS'default'
p38954
S'0'
p38955
sS'name'
p38956
S'bubspac'
p38957
sS'required'
p38958
I01
sS'group_name'
p38959
Nsa(dp38960
S'description'
p38961
S'Vector containing the number of bubbles along each side\n'
p38962
sS'cpp_type'
p38963
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p38964
sS'default'
p38965
g3
sS'name'
p38966
S'circles_per_side'
p38967
sS'required'
p38968
I01
sS'group_name'
p38969
Nsa(dp38970
S'description'
p38971
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p38972
sS'cpp_type'
p38973
S'double'
p38974
sS'default'
p38975
S'0'
p38976
sS'name'
p38977
S'int_width'
p38978
sS'required'
p38979
I00
sS'group_name'
p38980
Nsa(dp38981
S'description'
p38982
S'The variable value inside the circle\n'
p38983
sS'cpp_type'
p38984
S'double'
p38985
sS'default'
p38986
g3
sS'name'
p38987
S'invalue'
p38988
sS'required'
p38989
I01
sS'group_name'
p38990
Nsa(dp38991
S'description'
p38992
S'The number of bubbles to be placed on GB\n'
p38993
sS'cpp_type'
p38994
S'unsigned int'
p38995
sS'default'
p38996
S'0'
p38997
sS'name'
p38998
S'numbub'
p38999
sS'required'
p39000
I01
sS'group_name'
p39001
Nsa(dp39002
S'description'
p39003
S'The number of tries\n'
p39004
sS'cpp_type'
p39005
S'unsigned int'
p39006
sS'default'
p39007
S'1000'
p39008
sS'name'
p39009
S'numtries'
p39010
sS'required'
p39011
I00
sS'group_name'
p39012
Nsa(dp39013
S'description'
p39014
S'The variable value outside the circle\n'
p39015
sS'cpp_type'
p39016
S'double'
p39017
sS'default'
p39018
g3
sS'name'
p39019
S'outvalue'
p39020
sS'required'
p39021
I01
sS'group_name'
p39022
Nsa(dp39023
S'description'
p39024
S'The radius of a circle\n'
p39025
sS'cpp_type'
p39026
S'double'
p39027
sS'default'
p39028
g3
sS'name'
p39029
S'radius'
p39030
sS'required'
p39031
I01
sS'group_name'
p39032
Nsa(dp39033
S'description'
p39034
S'Plus or minus Percent of random variation in the bubble radius\n'
p39035
sS'cpp_type'
p39036
S'double'
p39037
sS'default'
p39038
S'0'
p39039
sS'name'
p39040
S'radius_variation'
p39041
sS'required'
p39042
I00
sS'group_name'
p39043
Nsa(dp39044
S'description'
p39045
S'random seed\n'
p39046
sS'cpp_type'
p39047
S'unsigned int'
p39048
sS'default'
p39049
S'2000'
p39050
sS'name'
p39051
S'rand_seed'
p39052
sS'required'
p39053
I00
sS'group_name'
p39054
Nsa(dp39055
S'description'
p39056
g3
sS'cpp_type'
p39057
S'std::string'
p39058
sS'default'
p39059
S'LatticeSmoothCircleIC'
p39060
sS'name'
p39061
S'type'
p39062
sS'required'
p39063
I00
sS'group_name'
p39064
Nsa(dp39065
S'description'
p39066
S'The variable this initial condition is supposed to provide values for.\n'
p39067
sS'cpp_type'
p39068
S'VariableName'
p39069
sS'default'
p39070
g3
sS'name'
p39071
S'variable'
p39072
sS'required'
p39073
I01
sS'group_name'
p39074
Nsa(dp39075
S'description'
p39076
S'The x coordinate of the circle center\n'
p39077
sS'cpp_type'
p39078
S'double'
p39079
sS'default'
p39080
S'0'
p39081
sS'name'
p39082
S'x1'
p39083
sS'required'
p39084
I01
sS'group_name'
p39085
Nsa(dp39086
S'description'
p39087
S'The y coordinate of the circle center\n'
p39088
sS'cpp_type'
p39089
S'double'
p39090
sS'default'
p39091
S'0'
p39092
sS'name'
p39093
S'y1'
p39094
sS'required'
p39095
I01
sS'group_name'
p39096
Nsa(dp39097
S'description'
p39098
S'The z coordinate of the circle center\n'
p39099
sS'cpp_type'
p39100
S'double'
p39101
sS'default'
p39102
S'0'
p39103
sS'name'
p39104
S'z1'
p39105
sS'required'
p39106
I00
sS'group_name'
p39107
NsasS'name'
p39108
S'/Variables/*/InitialCondition/<type>/LatticeSmoothCircleIC'
p39109
sa(dp39110
S'description'
p39111
g3
sS'type'
p39112
NsS'subblocks'
p39113
NsS'parameters'
p39114
(lp39115
(dp39116
S'description'
p39117
S'in 3D, whether the objects are spheres or columns\n'
p39118
sS'cpp_type'
p39119
S'bool'
p39120
sS'default'
p39121
S'1'
p39122
sS'name'
p39123
S'3D_spheres'
p39124
sS'required'
p39125
I00
sS'group_name'
p39126
Nsa(dp39127
S'description'
p39128
S'length of simulation domain in x-direction\n'
p39129
sS'cpp_type'
p39130
S'double'
p39131
sS'default'
p39132
g3
sS'name'
p39133
S'Lx'
p39134
sS'required'
p39135
I01
sS'group_name'
p39136
Nsa(dp39137
S'description'
p39138
S'length of simulation domain in y-direction\n'
p39139
sS'cpp_type'
p39140
S'double'
p39141
sS'default'
p39142
g3
sS'name'
p39143
S'Ly'
p39144
sS'required'
p39145
I01
sS'group_name'
p39146
Nsa(dp39147
S'description'
p39148
S'length of simulation domain in z-direction\n'
p39149
sS'cpp_type'
p39150
S'double'
p39151
sS'default'
p39152
S'0'
p39153
sS'name'
p39154
S'Lz'
p39155
sS'required'
p39156
I00
sS'group_name'
p39157
Nsa(dp39158
S'description'
p39159
S'The list of block ids (SubdomainID) that this object will be applied\n'
p39160
sS'cpp_type'
p39161
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p39162
sS'default'
p39163
g3
sS'name'
p39164
S'block'
p39165
sS'required'
p39166
I00
sS'group_name'
p39167
Nsa(dp39168
S'description'
p39169
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39170
sS'cpp_type'
p39171
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p39172
sS'default'
p39173
g3
sS'name'
p39174
S'boundary'
p39175
sS'required'
p39176
I00
sS'group_name'
p39177
Nsa(dp39178
S'description'
p39179
S'minimum spacing of bubbles, measured from center to center\n'
p39180
sS'cpp_type'
p39181
S'double'
p39182
sS'default'
p39183
g3
sS'name'
p39184
S'bubspac'
p39185
sS'required'
p39186
I01
sS'group_name'
p39187
Nsa(dp39188
S'description'
p39189
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p39190
sS'cpp_type'
p39191
S'double'
p39192
sS'default'
p39193
S'0'
p39194
sS'name'
p39195
S'int_width'
p39196
sS'required'
p39197
I00
sS'group_name'
p39198
Nsa(dp39199
S'description'
p39200
S'The variable value inside the circle\n'
p39201
sS'cpp_type'
p39202
S'double'
p39203
sS'default'
p39204
g3
sS'name'
p39205
S'invalue'
p39206
sS'required'
p39207
I01
sS'group_name'
p39208
Nsa(dp39209
S'description'
p39210
S'The number of bubbles to be placed on GB\n'
p39211
sS'cpp_type'
p39212
S'unsigned int'
p39213
sS'default'
p39214
g3
sS'name'
p39215
S'numbub'
p39216
sS'required'
p39217
I01
sS'group_name'
p39218
Nsa(dp39219
S'description'
p39220
S'The number of tries\n'
p39221
sS'cpp_type'
p39222
S'unsigned int'
p39223
sS'default'
p39224
S'1000'
p39225
sS'name'
p39226
S'numtries'
p39227
sS'required'
p39228
I00
sS'group_name'
p39229
Nsa(dp39230
S'description'
p39231
S'The variable value outside the circle\n'
p39232
sS'cpp_type'
p39233
S'double'
p39234
sS'default'
p39235
g3
sS'name'
p39236
S'outvalue'
p39237
sS'required'
p39238
I01
sS'group_name'
p39239
Nsa(dp39240
S'description'
p39241
S'The radius of a circle\n'
p39242
sS'cpp_type'
p39243
S'double'
p39244
sS'default'
p39245
g3
sS'name'
p39246
S'radius'
p39247
sS'required'
p39248
I01
sS'group_name'
p39249
Nsa(dp39250
S'description'
p39251
S'Plus or minus Percent of random variation in the bubble radius\n'
p39252
sS'cpp_type'
p39253
S'double'
p39254
sS'default'
p39255
S'0'
p39256
sS'name'
p39257
S'radius_variation'
p39258
sS'required'
p39259
I00
sS'group_name'
p39260
Nsa(dp39261
S'description'
p39262
S'random seed\n'
p39263
sS'cpp_type'
p39264
S'unsigned int'
p39265
sS'default'
p39266
S'2000'
p39267
sS'name'
p39268
S'rand_seed'
p39269
sS'required'
p39270
I00
sS'group_name'
p39271
Nsa(dp39272
S'description'
p39273
g3
sS'cpp_type'
p39274
S'std::string'
p39275
sS'default'
p39276
S'MultiSmoothCircleIC'
p39277
sS'name'
p39278
S'type'
p39279
sS'required'
p39280
I00
sS'group_name'
p39281
Nsa(dp39282
S'description'
p39283
S'The variable this initial condition is supposed to provide values for.\n'
p39284
sS'cpp_type'
p39285
S'VariableName'
p39286
sS'default'
p39287
g3
sS'name'
p39288
S'variable'
p39289
sS'required'
p39290
I01
sS'group_name'
p39291
Nsa(dp39292
S'description'
p39293
S'The x coordinate of the circle center\n'
p39294
sS'cpp_type'
p39295
S'double'
p39296
sS'default'
p39297
S'0'
p39298
sS'name'
p39299
S'x1'
p39300
sS'required'
p39301
I01
sS'group_name'
p39302
Nsa(dp39303
S'description'
p39304
S'The y coordinate of the circle center\n'
p39305
sS'cpp_type'
p39306
S'double'
p39307
sS'default'
p39308
S'0'
p39309
sS'name'
p39310
S'y1'
p39311
sS'required'
p39312
I01
sS'group_name'
p39313
Nsa(dp39314
S'description'
p39315
S'The z coordinate of the circle center\n'
p39316
sS'cpp_type'
p39317
S'double'
p39318
sS'default'
p39319
S'0'
p39320
sS'name'
p39321
S'z1'
p39322
sS'required'
p39323
I00
sS'group_name'
p39324
NsasS'name'
p39325
S'/Variables/*/InitialCondition/<type>/MultiSmoothCircleIC'
p39326
sa(dp39327
S'description'
p39328
g3
sS'type'
p39329
NsS'subblocks'
p39330
NsS'parameters'
p39331
(lp39332
(dp39333
S'description'
p39334
S'The list of block ids (SubdomainID) that this object will be applied\n'
p39335
sS'cpp_type'
p39336
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p39337
sS'default'
p39338
g3
sS'name'
p39339
S'block'
p39340
sS'required'
p39341
I00
sS'group_name'
p39342
Nsa(dp39343
S'description'
p39344
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39345
sS'cpp_type'
p39346
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p39347
sS'default'
p39348
g3
sS'name'
p39349
S'boundary'
p39350
sS'required'
p39351
I00
sS'group_name'
p39352
Nsa(dp39353
S'description'
p39354
S'The index for the current order parameter\n'
p39355
sS'cpp_type'
p39356
S'unsigned int'
p39357
sS'default'
p39358
g3
sS'name'
p39359
S'crys_index'
p39360
sS'required'
p39361
I01
sS'group_name'
p39362
Nsa(dp39363
S'description'
p39364
S'Number of order parameters\n'
p39365
sS'cpp_type'
p39366
S'unsigned int'
p39367
sS'default'
p39368
g3
sS'name'
p39369
S'crys_num'
p39370
sS'required'
p39371
I01
sS'group_name'
p39372
Nsa(dp39373
S'description'
p39374
S'Type of random grain structure\n'
p39375
sS'cpp_type'
p39376
S'unsigned int'
p39377
sS'default'
p39378
g3
sS'name'
p39379
S'typ'
p39380
sS'required'
p39381
I01
sS'group_name'
p39382
Nsa(dp39383
S'description'
p39384
g3
sS'cpp_type'
p39385
S'std::string'
p39386
sS'default'
p39387
S'PolycrystalRandomIC'
p39388
sS'name'
p39389
S'type'
p39390
sS'required'
p39391
I00
sS'group_name'
p39392
Nsa(dp39393
S'description'
p39394
S'The variable this initial condition is supposed to provide values for.\n'
p39395
sS'cpp_type'
p39396
S'VariableName'
p39397
sS'default'
p39398
g3
sS'name'
p39399
S'variable'
p39400
sS'required'
p39401
I01
sS'group_name'
p39402
NsasS'name'
p39403
S'/Variables/*/InitialCondition/<type>/PolycrystalRandomIC'
p39404
sa(dp39405
S'description'
p39406
g3
sS'type'
p39407
NsS'subblocks'
p39408
NsS'parameters'
p39409
(lp39410
(dp39411
S'description'
p39412
S'The list of block ids (SubdomainID) that this object will be applied\n'
p39413
sS'cpp_type'
p39414
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p39415
sS'default'
p39416
g3
sS'name'
p39417
S'block'
p39418
sS'required'
p39419
I00
sS'group_name'
p39420
Nsa(dp39421
S'description'
p39422
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39423
sS'cpp_type'
p39424
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p39425
sS'default'
p39426
g3
sS'name'
p39427
S'boundary'
p39428
sS'required'
p39429
I00
sS'group_name'
p39430
Nsa(dp39431
S'description'
p39432
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p39433
sS'cpp_type'
p39434
S'bool'
p39435
sS'default'
p39436
S'0'
p39437
sS'name'
p39438
S'cody_test'
p39439
sS'required'
p39440
I00
sS'group_name'
p39441
Nsa(dp39442
S'description'
p39443
S'3D microstructure will be columnar in the z-direction?\n'
p39444
sS'cpp_type'
p39445
S'bool'
p39446
sS'default'
p39447
S'0'
p39448
sS'name'
p39449
S'columnar_3D'
p39450
sS'required'
p39451
I00
sS'group_name'
p39452
Nsa(dp39453
S'description'
p39454
S'The index for the current order parameter\n'
p39455
sS'cpp_type'
p39456
S'unsigned int'
p39457
sS'default'
p39458
g3
sS'name'
p39459
S'crys_index'
p39460
sS'required'
p39461
I01
sS'group_name'
p39462
Nsa(dp39463
S'description'
p39464
S'Number of order parameters\n'
p39465
sS'cpp_type'
p39466
S'unsigned int'
p39467
sS'default'
p39468
g3
sS'name'
p39469
S'crys_num'
p39470
sS'required'
p39471
I01
sS'group_name'
p39472
Nsa(dp39473
S'description'
p39474
S'Number of grains being represented by the order parameters\n'
p39475
sS'cpp_type'
p39476
S'unsigned int'
p39477
sS'default'
p39478
g3
sS'name'
p39479
S'grain_num'
p39480
sS'required'
p39481
I01
sS'group_name'
p39482
Nsa(dp39483
S'description'
p39484
S'The random seed\n'
p39485
sS'cpp_type'
p39486
S'unsigned int'
p39487
sS'default'
p39488
S'12444'
p39489
sS'name'
p39490
S'rand_seed'
p39491
sS'required'
p39492
I00
sS'group_name'
p39493
Nsa(dp39494
S'description'
p39495
g3
sS'cpp_type'
p39496
S'std::string'
p39497
sS'default'
p39498
S'PolycrystalReducedIC'
p39499
sS'name'
p39500
S'type'
p39501
sS'required'
p39502
I00
sS'group_name'
p39503
Nsa(dp39504
S'description'
p39505
S'The variable this initial condition is supposed to provide values for.\n'
p39506
sS'cpp_type'
p39507
S'VariableName'
p39508
sS'default'
p39509
g3
sS'name'
p39510
S'variable'
p39511
sS'required'
p39512
I01
sS'group_name'
p39513
NsasS'name'
p39514
S'/Variables/*/InitialCondition/<type>/PolycrystalReducedIC'
p39515
sa(dp39516
S'description'
p39517
g3
sS'type'
p39518
NsS'subblocks'
p39519
NsS'parameters'
p39520
(lp39521
(dp39522
S'description'
p39523
S'The list of block ids (SubdomainID) that this object will be applied\n'
p39524
sS'cpp_type'
p39525
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p39526
sS'default'
p39527
g3
sS'name'
p39528
S'block'
p39529
sS'required'
p39530
I00
sS'group_name'
p39531
Nsa(dp39532
S'description'
p39533
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39534
sS'cpp_type'
p39535
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p39536
sS'default'
p39537
g3
sS'name'
p39538
S'boundary'
p39539
sS'required'
p39540
I00
sS'group_name'
p39541
Nsa(dp39542
S'description'
p39543
S'Upper bound of the randomly generated values\n'
p39544
sS'cpp_type'
p39545
S'double'
p39546
sS'default'
p39547
S'1'
p39548
sS'name'
p39549
S'max'
p39550
sS'required'
p39551
I00
sS'group_name'
p39552
Nsa(dp39553
S'description'
p39554
S'Lower bound of the randomly generated values\n'
p39555
sS'cpp_type'
p39556
S'double'
p39557
sS'default'
p39558
S'0'
p39559
sS'name'
p39560
S'min'
p39561
sS'required'
p39562
I00
sS'group_name'
p39563
Nsa(dp39564
S'description'
p39565
S'Seed value for the random number generator\n'
p39566
sS'cpp_type'
p39567
S'unsigned int'
p39568
sS'default'
p39569
S'0'
p39570
sS'name'
p39571
S'seed'
p39572
sS'required'
p39573
I00
sS'group_name'
p39574
Nsa(dp39575
S'description'
p39576
g3
sS'cpp_type'
p39577
S'std::string'
p39578
sS'default'
p39579
S'RandomIC'
p39580
sS'name'
p39581
S'type'
p39582
sS'required'
p39583
I00
sS'group_name'
p39584
Nsa(dp39585
S'description'
p39586
S'The variable this initial condition is supposed to provide values for.\n'
p39587
sS'cpp_type'
p39588
S'VariableName'
p39589
sS'default'
p39590
g3
sS'name'
p39591
S'variable'
p39592
sS'required'
p39593
I01
sS'group_name'
p39594
NsasS'name'
p39595
S'/Variables/*/InitialCondition/<type>/RandomIC'
p39596
sa(dp39597
S'description'
p39598
g3
sS'type'
p39599
NsS'subblocks'
p39600
NsS'parameters'
p39601
(lp39602
(dp39603
S'description'
p39604
S'The list of block ids (SubdomainID) that this object will be applied\n'
p39605
sS'cpp_type'
p39606
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p39607
sS'default'
p39608
g3
sS'name'
p39609
S'block'
p39610
sS'required'
p39611
I00
sS'group_name'
p39612
Nsa(dp39613
S'description'
p39614
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39615
sS'cpp_type'
p39616
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p39617
sS'default'
p39618
g3
sS'name'
p39619
S'boundary'
p39620
sS'required'
p39621
I00
sS'group_name'
p39622
Nsa(dp39623
S'description'
p39624
S'The min value of the variable invalue the box\n'
p39625
sS'cpp_type'
p39626
S'double'
p39627
sS'default'
p39628
S'0'
p39629
sS'name'
p39630
S'mn_invalue'
p39631
sS'required'
p39632
I00
sS'group_name'
p39633
Nsa(dp39634
S'description'
p39635
S'The min value of the variable outvalue the box\n'
p39636
sS'cpp_type'
p39637
S'double'
p39638
sS'default'
p39639
S'0'
p39640
sS'name'
p39641
S'mn_outvalue'
p39642
sS'required'
p39643
I00
sS'group_name'
p39644
Nsa(dp39645
S'description'
p39646
S'The max value of the variable invalue the box\n'
p39647
sS'cpp_type'
p39648
S'double'
p39649
sS'default'
p39650
g3
sS'name'
p39651
S'mx_invalue'
p39652
sS'required'
p39653
I01
sS'group_name'
p39654
Nsa(dp39655
S'description'
p39656
S'The max value of the variable outvalue the box\n'
p39657
sS'cpp_type'
p39658
S'double'
p39659
sS'default'
p39660
g3
sS'name'
p39661
S'mx_outvalue'
p39662
sS'required'
p39663
I01
sS'group_name'
p39664
Nsa(dp39665
S'description'
p39666
g3
sS'cpp_type'
p39667
S'std::string'
p39668
sS'default'
p39669
S'RndBoundingBoxIC'
p39670
sS'name'
p39671
S'type'
p39672
sS'required'
p39673
I00
sS'group_name'
p39674
Nsa(dp39675
S'description'
p39676
S'The variable this initial condition is supposed to provide values for.\n'
p39677
sS'cpp_type'
p39678
S'VariableName'
p39679
sS'default'
p39680
g3
sS'name'
p39681
S'variable'
p39682
sS'required'
p39683
I01
sS'group_name'
p39684
Nsa(dp39685
S'description'
p39686
S'The x coordinate of the lower left-hand corner of the box\n'
p39687
sS'cpp_type'
p39688
S'double'
p39689
sS'default'
p39690
g3
sS'name'
p39691
S'x1'
p39692
sS'required'
p39693
I01
sS'group_name'
p39694
Nsa(dp39695
S'description'
p39696
S'The x coordinate of the upper right-hand corner of the box\n'
p39697
sS'cpp_type'
p39698
S'double'
p39699
sS'default'
p39700
g3
sS'name'
p39701
S'x2'
p39702
sS'required'
p39703
I01
sS'group_name'
p39704
Nsa(dp39705
S'description'
p39706
S'The y coordinate of the lower left-hand corner of the box\n'
p39707
sS'cpp_type'
p39708
S'double'
p39709
sS'default'
p39710
g3
sS'name'
p39711
S'y1'
p39712
sS'required'
p39713
I01
sS'group_name'
p39714
Nsa(dp39715
S'description'
p39716
S'The y coordinate of the upper right-hand corner of the box\n'
p39717
sS'cpp_type'
p39718
S'double'
p39719
sS'default'
p39720
g3
sS'name'
p39721
S'y2'
p39722
sS'required'
p39723
I01
sS'group_name'
p39724
Nsa(dp39725
S'description'
p39726
S'The z coordinate of the lower left-hand corner of the box\n'
p39727
sS'cpp_type'
p39728
S'double'
p39729
sS'default'
p39730
S'0'
p39731
sS'name'
p39732
S'z1'
p39733
sS'required'
p39734
I00
sS'group_name'
p39735
Nsa(dp39736
S'description'
p39737
S'The z coordinate of the upper right-hand corner of the box\n'
p39738
sS'cpp_type'
p39739
S'double'
p39740
sS'default'
p39741
S'0'
p39742
sS'name'
p39743
S'z2'
p39744
sS'required'
p39745
I00
sS'group_name'
p39746
NsasS'name'
p39747
S'/Variables/*/InitialCondition/<type>/RndBoundingBoxIC'
p39748
sa(dp39749
S'description'
p39750
g3
sS'type'
p39751
NsS'subblocks'
p39752
NsS'parameters'
p39753
(lp39754
(dp39755
S'description'
p39756
S'The list of block ids (SubdomainID) that this object will be applied\n'
p39757
sS'cpp_type'
p39758
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p39759
sS'default'
p39760
g3
sS'name'
p39761
S'block'
p39762
sS'required'
p39763
I00
sS'group_name'
p39764
Nsa(dp39765
S'description'
p39766
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39767
sS'cpp_type'
p39768
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p39769
sS'default'
p39770
g3
sS'name'
p39771
S'boundary'
p39772
sS'required'
p39773
I00
sS'group_name'
p39774
Nsa(dp39775
S'description'
p39776
S'The min variable value inside the circle\n'
p39777
sS'cpp_type'
p39778
S'double'
p39779
sS'default'
p39780
g3
sS'name'
p39781
S'mn_invalue'
p39782
sS'required'
p39783
I01
sS'group_name'
p39784
Nsa(dp39785
S'description'
p39786
S'The min variable value outside the circle\n'
p39787
sS'cpp_type'
p39788
S'double'
p39789
sS'default'
p39790
g3
sS'name'
p39791
S'mn_outvalue'
p39792
sS'required'
p39793
I01
sS'group_name'
p39794
Nsa(dp39795
S'description'
p39796
S'The max variable value inside the circle\n'
p39797
sS'cpp_type'
p39798
S'double'
p39799
sS'default'
p39800
g3
sS'name'
p39801
S'mx_invalue'
p39802
sS'required'
p39803
I01
sS'group_name'
p39804
Nsa(dp39805
S'description'
p39806
S'The max variable value outside the circle\n'
p39807
sS'cpp_type'
p39808
S'double'
p39809
sS'default'
p39810
g3
sS'name'
p39811
S'mx_outvalue'
p39812
sS'required'
p39813
I01
sS'group_name'
p39814
Nsa(dp39815
S'description'
p39816
S'The radius of a circle\n'
p39817
sS'cpp_type'
p39818
S'double'
p39819
sS'default'
p39820
g3
sS'name'
p39821
S'radius'
p39822
sS'required'
p39823
I01
sS'group_name'
p39824
Nsa(dp39825
S'description'
p39826
S'Seed value for the random number generator\n'
p39827
sS'cpp_type'
p39828
S'unsigned int'
p39829
sS'default'
p39830
S'12345'
p39831
sS'name'
p39832
S'seed'
p39833
sS'required'
p39834
I00
sS'group_name'
p39835
Nsa(dp39836
S'description'
p39837
g3
sS'cpp_type'
p39838
S'std::string'
p39839
sS'default'
p39840
S'RndSmoothCircleIC'
p39841
sS'name'
p39842
S'type'
p39843
sS'required'
p39844
I00
sS'group_name'
p39845
Nsa(dp39846
S'description'
p39847
S'The variable this initial condition is supposed to provide values for.\n'
p39848
sS'cpp_type'
p39849
S'VariableName'
p39850
sS'default'
p39851
g3
sS'name'
p39852
S'variable'
p39853
sS'required'
p39854
I01
sS'group_name'
p39855
Nsa(dp39856
S'description'
p39857
S'The x coordinate of the circle center\n'
p39858
sS'cpp_type'
p39859
S'double'
p39860
sS'default'
p39861
g3
sS'name'
p39862
S'x1'
p39863
sS'required'
p39864
I01
sS'group_name'
p39865
Nsa(dp39866
S'description'
p39867
S'The y coordinate of the circle center\n'
p39868
sS'cpp_type'
p39869
S'double'
p39870
sS'default'
p39871
g3
sS'name'
p39872
S'y1'
p39873
sS'required'
p39874
I01
sS'group_name'
p39875
Nsa(dp39876
S'description'
p39877
S'The z coordinate of the circle center\n'
p39878
sS'cpp_type'
p39879
S'double'
p39880
sS'default'
p39881
S'0'
p39882
sS'name'
p39883
S'z1'
p39884
sS'required'
p39885
I00
sS'group_name'
p39886
NsasS'name'
p39887
S'/Variables/*/InitialCondition/<type>/RndSmoothCircleIC'
p39888
sa(dp39889
S'description'
p39890
g3
sS'type'
p39891
NsS'subblocks'
p39892
NsS'parameters'
p39893
(lp39894
(dp39895
S'description'
p39896
g3
sS'cpp_type'
p39897
S'std::string'
p39898
sS'default'
p39899
S'ScalarComponentIC'
p39900
sS'name'
p39901
S'type'
p39902
sS'required'
p39903
I00
sS'group_name'
p39904
Nsa(dp39905
S'description'
p39906
S'Initial values to initialize the scalar variable.\n'
p39907
sS'cpp_type'
p39908
S'std::vector<double, std::allocator<double> >'
p39909
sS'default'
p39910
g3
sS'name'
p39911
S'values'
p39912
sS'required'
p39913
I01
sS'group_name'
p39914
Nsa(dp39915
S'description'
p39916
S'The variable this initial condition is supposed to provide values for.\n'
p39917
sS'cpp_type'
p39918
S'VariableName'
p39919
sS'default'
p39920
g3
sS'name'
p39921
S'variable'
p39922
sS'required'
p39923
I00
sS'group_name'
p39924
NsasS'name'
p39925
S'/Variables/*/InitialCondition/<type>/ScalarComponentIC'
p39926
sa(dp39927
S'description'
p39928
g3
sS'type'
p39929
NsS'subblocks'
p39930
NsS'parameters'
p39931
(lp39932
(dp39933
S'description'
p39934
g3
sS'cpp_type'
p39935
S'std::string'
p39936
sS'default'
p39937
S'ScalarConstantIC'
p39938
sS'name'
p39939
S'type'
p39940
sS'required'
p39941
I00
sS'group_name'
p39942
Nsa(dp39943
S'description'
p39944
g3
sS'cpp_type'
p39945
S'double'
p39946
sS'default'
p39947
S'0'
p39948
sS'name'
p39949
S'value'
p39950
sS'required'
p39951
I00
sS'group_name'
p39952
Nsa(dp39953
S'description'
p39954
S'The variable this initial condition is supposed to provide values for.\n'
p39955
sS'cpp_type'
p39956
S'VariableName'
p39957
sS'default'
p39958
g3
sS'name'
p39959
S'variable'
p39960
sS'required'
p39961
I00
sS'group_name'
p39962
NsasS'name'
p39963
S'/Variables/*/InitialCondition/<type>/ScalarConstantIC'
p39964
sa(dp39965
S'description'
p39966
g3
sS'type'
p39967
NsS'subblocks'
p39968
NsS'parameters'
p39969
(lp39970
(dp39971
S'description'
p39972
S'in 3D, whether the objects are spheres or columns\n'
p39973
sS'cpp_type'
p39974
S'bool'
p39975
sS'default'
p39976
S'1'
p39977
sS'name'
p39978
S'3D_spheres'
p39979
sS'required'
p39980
I00
sS'group_name'
p39981
Nsa(dp39982
S'description'
p39983
S'The list of block ids (SubdomainID) that this object will be applied\n'
p39984
sS'cpp_type'
p39985
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p39986
sS'default'
p39987
g3
sS'name'
p39988
S'block'
p39989
sS'required'
p39990
I00
sS'group_name'
p39991
Nsa(dp39992
S'description'
p39993
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39994
sS'cpp_type'
p39995
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p39996
sS'default'
p39997
g3
sS'name'
p39998
S'boundary'
p39999
sS'required'
p40000
I00
sS'group_name'
p40001
Nsa(dp40002
S'description'
p40003
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p40004
sS'cpp_type'
p40005
S'double'
p40006
sS'default'
p40007
S'0'
p40008
sS'name'
p40009
S'int_width'
p40010
sS'required'
p40011
I00
sS'group_name'
p40012
Nsa(dp40013
S'description'
p40014
S'The variable value inside the circle\n'
p40015
sS'cpp_type'
p40016
S'double'
p40017
sS'default'
p40018
g3
sS'name'
p40019
S'invalue'
p40020
sS'required'
p40021
I01
sS'group_name'
p40022
Nsa(dp40023
S'description'
p40024
S'The variable value outside the circle\n'
p40025
sS'cpp_type'
p40026
S'double'
p40027
sS'default'
p40028
g3
sS'name'
p40029
S'outvalue'
p40030
sS'required'
p40031
I01
sS'group_name'
p40032
Nsa(dp40033
S'description'
p40034
S'The radius of a circle\n'
p40035
sS'cpp_type'
p40036
S'double'
p40037
sS'default'
p40038
g3
sS'name'
p40039
S'radius'
p40040
sS'required'
p40041
I01
sS'group_name'
p40042
Nsa(dp40043
S'description'
p40044
g3
sS'cpp_type'
p40045
S'std::string'
p40046
sS'default'
p40047
S'SmoothCircleIC'
p40048
sS'name'
p40049
S'type'
p40050
sS'required'
p40051
I00
sS'group_name'
p40052
Nsa(dp40053
S'description'
p40054
S'The variable this initial condition is supposed to provide values for.\n'
p40055
sS'cpp_type'
p40056
S'VariableName'
p40057
sS'default'
p40058
g3
sS'name'
p40059
S'variable'
p40060
sS'required'
p40061
I01
sS'group_name'
p40062
Nsa(dp40063
S'description'
p40064
S'The x coordinate of the circle center\n'
p40065
sS'cpp_type'
p40066
S'double'
p40067
sS'default'
p40068
g3
sS'name'
p40069
S'x1'
p40070
sS'required'
p40071
I01
sS'group_name'
p40072
Nsa(dp40073
S'description'
p40074
S'The y coordinate of the circle center\n'
p40075
sS'cpp_type'
p40076
S'double'
p40077
sS'default'
p40078
g3
sS'name'
p40079
S'y1'
p40080
sS'required'
p40081
I01
sS'group_name'
p40082
Nsa(dp40083
S'description'
p40084
S'The z coordinate of the circle center\n'
p40085
sS'cpp_type'
p40086
S'double'
p40087
sS'default'
p40088
S'0'
p40089
sS'name'
p40090
S'z1'
p40091
sS'required'
p40092
I00
sS'group_name'
p40093
NsasS'name'
p40094
S'/Variables/*/InitialCondition/<type>/SmoothCircleIC'
p40095
sa(dp40096
S'description'
p40097
g3
sS'type'
p40098
NsS'subblocks'
p40099
NsS'parameters'
p40100
(lp40101
(dp40102
S'description'
p40103
S'in 3D, whether the objects are spheres or columns\n'
p40104
sS'cpp_type'
p40105
S'bool'
p40106
sS'default'
p40107
S'1'
p40108
sS'name'
p40109
S'3D_spheres'
p40110
sS'required'
p40111
I00
sS'group_name'
p40112
Nsa(dp40113
S'description'
p40114
S'length of simulation domain in x-direction\n'
p40115
sS'cpp_type'
p40116
S'double'
p40117
sS'default'
p40118
S'0'
p40119
sS'name'
p40120
S'Lx'
p40121
sS'required'
p40122
I01
sS'group_name'
p40123
Nsa(dp40124
S'description'
p40125
S'length of simulation domain in y-direction\n'
p40126
sS'cpp_type'
p40127
S'double'
p40128
sS'default'
p40129
S'0'
p40130
sS'name'
p40131
S'Ly'
p40132
sS'required'
p40133
I01
sS'group_name'
p40134
Nsa(dp40135
S'description'
p40136
S'length of simulation domain in z-direction\n'
p40137
sS'cpp_type'
p40138
S'double'
p40139
sS'default'
p40140
S'0'
p40141
sS'name'
p40142
S'Lz'
p40143
sS'required'
p40144
I00
sS'group_name'
p40145
Nsa(dp40146
S'description'
p40147
S'The list of block ids (SubdomainID) that this object will be applied\n'
p40148
sS'cpp_type'
p40149
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p40150
sS'default'
p40151
g3
sS'name'
p40152
S'block'
p40153
sS'required'
p40154
I00
sS'group_name'
p40155
Nsa(dp40156
S'description'
p40157
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40158
sS'cpp_type'
p40159
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p40160
sS'default'
p40161
g3
sS'name'
p40162
S'boundary'
p40163
sS'required'
p40164
I00
sS'group_name'
p40165
Nsa(dp40166
S'description'
p40167
S'minimum spacing of bubbles, measured from center to center\n'
p40168
sS'cpp_type'
p40169
S'double'
p40170
sS'default'
p40171
S'0'
p40172
sS'name'
p40173
S'bubspac'
p40174
sS'required'
p40175
I01
sS'group_name'
p40176
Nsa(dp40177
S'description'
p40178
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p40179
sS'cpp_type'
p40180
S'double'
p40181
sS'default'
p40182
S'0'
p40183
sS'name'
p40184
S'int_width'
p40185
sS'required'
p40186
I00
sS'group_name'
p40187
Nsa(dp40188
S'description'
p40189
S'The variable value inside the circle\n'
p40190
sS'cpp_type'
p40191
S'double'
p40192
sS'default'
p40193
g3
sS'name'
p40194
S'invalue'
p40195
sS'required'
p40196
I01
sS'group_name'
p40197
Nsa(dp40198
S'description'
p40199
S'The number of bubbles to be placed on GB\n'
p40200
sS'cpp_type'
p40201
S'unsigned int'
p40202
sS'default'
p40203
S'0'
p40204
sS'name'
p40205
S'numbub'
p40206
sS'required'
p40207
I01
sS'group_name'
p40208
Nsa(dp40209
S'description'
p40210
S'The number of tries\n'
p40211
sS'cpp_type'
p40212
S'unsigned int'
p40213
sS'default'
p40214
S'1000'
p40215
sS'name'
p40216
S'numtries'
p40217
sS'required'
p40218
I00
sS'group_name'
p40219
Nsa(dp40220
S'description'
p40221
S'The variable value outside the circle\n'
p40222
sS'cpp_type'
p40223
S'double'
p40224
sS'default'
p40225
g3
sS'name'
p40226
S'outvalue'
p40227
sS'required'
p40228
I01
sS'group_name'
p40229
Nsa(dp40230
S'description'
p40231
S'The radius for each circle\n'
p40232
sS'cpp_type'
p40233
S'std::vector<double, std::allocator<double> >'
p40234
sS'default'
p40235
g3
sS'name'
p40236
S'radii'
p40237
sS'required'
p40238
I01
sS'group_name'
p40239
Nsa(dp40240
S'description'
p40241
S'The radius of a circle\n'
p40242
sS'cpp_type'
p40243
S'double'
p40244
sS'default'
p40245
S'0'
p40246
sS'name'
p40247
S'radius'
p40248
sS'required'
p40249
I01
sS'group_name'
p40250
Nsa(dp40251
S'description'
p40252
S'Plus or minus Percent of random variation in the bubble radius\n'
p40253
sS'cpp_type'
p40254
S'double'
p40255
sS'default'
p40256
S'0'
p40257
sS'name'
p40258
S'radius_variation'
p40259
sS'required'
p40260
I00
sS'group_name'
p40261
Nsa(dp40262
S'description'
p40263
S'random seed\n'
p40264
sS'cpp_type'
p40265
S'unsigned int'
p40266
sS'default'
p40267
S'2000'
p40268
sS'name'
p40269
S'rand_seed'
p40270
sS'required'
p40271
I00
sS'group_name'
p40272
Nsa(dp40273
S'description'
p40274
g3
sS'cpp_type'
p40275
S'std::string'
p40276
sS'default'
p40277
S'SpecifiedSmoothCircleIC'
p40278
sS'name'
p40279
S'type'
p40280
sS'required'
p40281
I00
sS'group_name'
p40282
Nsa(dp40283
S'description'
p40284
S'The variable this initial condition is supposed to provide values for.\n'
p40285
sS'cpp_type'
p40286
S'VariableName'
p40287
sS'default'
p40288
g3
sS'name'
p40289
S'variable'
p40290
sS'required'
p40291
I01
sS'group_name'
p40292
Nsa(dp40293
S'description'
p40294
S'The x coordinate of the circle center\n'
p40295
sS'cpp_type'
p40296
S'double'
p40297
sS'default'
p40298
S'0'
p40299
sS'name'
p40300
S'x1'
p40301
sS'required'
p40302
I01
sS'group_name'
p40303
Nsa(dp40304
S'description'
p40305
S'The x-coordinate for each circle center\n'
p40306
sS'cpp_type'
p40307
S'std::vector<double, std::allocator<double> >'
p40308
sS'default'
p40309
g3
sS'name'
p40310
S'x_positions'
p40311
sS'required'
p40312
I01
sS'group_name'
p40313
Nsa(dp40314
S'description'
p40315
S'The y coordinate of the circle center\n'
p40316
sS'cpp_type'
p40317
S'double'
p40318
sS'default'
p40319
S'0'
p40320
sS'name'
p40321
S'y1'
p40322
sS'required'
p40323
I01
sS'group_name'
p40324
Nsa(dp40325
S'description'
p40326
S'The y-coordinate for each circle center\n'
p40327
sS'cpp_type'
p40328
S'std::vector<double, std::allocator<double> >'
p40329
sS'default'
p40330
g3
sS'name'
p40331
S'y_positions'
p40332
sS'required'
p40333
I01
sS'group_name'
p40334
Nsa(dp40335
S'description'
p40336
S'The z coordinate of the circle center\n'
p40337
sS'cpp_type'
p40338
S'double'
p40339
sS'default'
p40340
S'0'
p40341
sS'name'
p40342
S'z1'
p40343
sS'required'
p40344
I00
sS'group_name'
p40345
Nsa(dp40346
S'description'
p40347
S'The z-coordinate for each circle center\n'
p40348
sS'cpp_type'
p40349
S'std::vector<double, std::allocator<double> >'
p40350
sS'default'
p40351
g3
sS'name'
p40352
S'z_positions'
p40353
sS'required'
p40354
I01
sS'group_name'
p40355
NsasS'name'
p40356
S'/Variables/*/InitialCondition/<type>/SpecifiedSmoothCircleIC'
p40357
sa(dp40358
S'description'
p40359
g3
sS'type'
p40360
NsS'subblocks'
p40361
NsS'parameters'
p40362
(lp40363
(dp40364
S'description'
p40365
S'The list of block ids (SubdomainID) that this object will be applied\n'
p40366
sS'cpp_type'
p40367
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p40368
sS'default'
p40369
g3
sS'name'
p40370
S'block'
p40371
sS'required'
p40372
I00
sS'group_name'
p40373
Nsa(dp40374
S'description'
p40375
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40376
sS'cpp_type'
p40377
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p40378
sS'default'
p40379
g3
sS'name'
p40380
S'boundary'
p40381
sS'required'
p40382
I00
sS'group_name'
p40383
Nsa(dp40384
S'description'
p40385
S'The z coordinate of the circle center\n'
p40386
sS'cpp_type'
p40387
S'double'
p40388
sS'default'
p40389
g3
sS'name'
p40390
S'height'
p40391
sS'required'
p40392
I01
sS'group_name'
p40393
Nsa(dp40394
S'description'
p40395
S'The variable value inside the circle\n'
p40396
sS'cpp_type'
p40397
S'double'
p40398
sS'default'
p40399
g3
sS'name'
p40400
S'invalue'
p40401
sS'required'
p40402
I01
sS'group_name'
p40403
Nsa(dp40404
S'description'
p40405
S'The variable value outside the circle\n'
p40406
sS'cpp_type'
p40407
S'double'
p40408
sS'default'
p40409
g3
sS'name'
p40410
S'outvalue'
p40411
sS'required'
p40412
I01
sS'group_name'
p40413
Nsa(dp40414
S'description'
p40415
g3
sS'cpp_type'
p40416
S'std::string'
p40417
sS'default'
p40418
S'ThumbIC'
p40419
sS'name'
p40420
S'type'
p40421
sS'required'
p40422
I00
sS'group_name'
p40423
Nsa(dp40424
S'description'
p40425
S'The variable this initial condition is supposed to provide values for.\n'
p40426
sS'cpp_type'
p40427
S'VariableName'
p40428
sS'default'
p40429
g3
sS'name'
p40430
S'variable'
p40431
sS'required'
p40432
I01
sS'group_name'
p40433
Nsa(dp40434
S'description'
p40435
S'The y coordinate of the circle center\n'
p40436
sS'cpp_type'
p40437
S'double'
p40438
sS'default'
p40439
g3
sS'name'
p40440
S'width'
p40441
sS'required'
p40442
I01
sS'group_name'
p40443
Nsa(dp40444
S'description'
p40445
S'The x coordinate of the circle center\n'
p40446
sS'cpp_type'
p40447
S'double'
p40448
sS'default'
p40449
g3
sS'name'
p40450
S'xcoord'
p40451
sS'required'
p40452
I01
sS'group_name'
p40453
NsasS'name'
p40454
S'/Variables/*/InitialCondition/<type>/ThumbIC'
p40455
sa(dp40456
S'description'
p40457
g3
sS'type'
p40458
NsS'subblocks'
p40459
NsS'parameters'
p40460
(lp40461
(dp40462
S'description'
p40463
S'The list of block ids (SubdomainID) that this object will be applied\n'
p40464
sS'cpp_type'
p40465
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p40466
sS'default'
p40467
g3
sS'name'
p40468
S'block'
p40469
sS'required'
p40470
I00
sS'group_name'
p40471
Nsa(dp40472
S'description'
p40473
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40474
sS'cpp_type'
p40475
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p40476
sS'default'
p40477
g3
sS'name'
p40478
S'boundary'
p40479
sS'required'
p40480
I00
sS'group_name'
p40481
Nsa(dp40482
S'description'
p40483
S'The index for the current crystal\n'
p40484
sS'cpp_type'
p40485
S'unsigned int'
p40486
sS'default'
p40487
g3
sS'name'
p40488
S'crys_index'
p40489
sS'required'
p40490
I01
sS'group_name'
p40491
Nsa(dp40492
S'description'
p40493
S'Number of crystals\n'
p40494
sS'cpp_type'
p40495
S'unsigned int'
p40496
sS'default'
p40497
g3
sS'name'
p40498
S'crys_num'
p40499
sS'required'
p40500
I01
sS'group_name'
p40501
Nsa(dp40502
S'description'
p40503
g3
sS'cpp_type'
p40504
S'std::string'
p40505
sS'default'
p40506
S'Tricrystal2CircleGrainsIC'
p40507
sS'name'
p40508
S'type'
p40509
sS'required'
p40510
I00
sS'group_name'
p40511
Nsa(dp40512
S'description'
p40513
S'The variable this initial condition is supposed to provide values for.\n'
p40514
sS'cpp_type'
p40515
S'VariableName'
p40516
sS'default'
p40517
g3
sS'name'
p40518
S'variable'
p40519
sS'required'
p40520
I01
sS'group_name'
p40521
NsasS'name'
p40522
S'/Variables/*/InitialCondition/<type>/Tricrystal2CircleGrainsIC'
p40523
sasS'parameters'
p40524
NsS'name'
p40525
S'/Variables/*/InitialCondition/<type>'
p40526
sasS'parameters'
p40527
(lp40528
(dp40529
S'description'
p40530
S'A string representing the Moose Object that will be built by this Action\n'
p40531
sS'cpp_type'
p40532
S'std::string'
p40533
sS'default'
p40534
g3
sS'name'
p40535
S'type'
p40536
sS'required'
p40537
I01
sS'group_name'
p40538
NsasS'name'
p40539
S'/Variables/*/InitialCondition'
p40540
sasS'parameters'
p40541
(lp40542
(dp40543
S'description'
p40544
S'The block id where this variable lives\n'
p40545
sS'cpp_type'
p40546
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p40547
sS'default'
p40548
g3
sS'name'
p40549
S'block'
p40550
sS'required'
p40551
I00
sS'group_name'
p40552
Nsa(dp40553
S'description'
p40554
S'True to make this variable an eigen variable\n'
p40555
sS'cpp_type'
p40556
S'bool'
p40557
sS'default'
p40558
S'0'
p40559
sS'name'
p40560
S'eigen'
p40561
sS'required'
p40562
I00
sS'group_name'
p40563
Nsa(dp40564
S'name'
p40565
S'family'
p40566
sS'cpp_type'
p40567
S'MooseEnum'
p40568
sS'default'
p40569
S'LAGRANGE'
p40570
sS'description'
p40571
S'Specifies the family of FE shape functions to use for this variable\n'
p40572
sS'required'
p40573
I00
sS'options'
p40574
S'LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC'
p40575
sS'group_name'
p40576
Nsa(dp40577
S'description'
p40578
S'Specifies the initial condition for this variable\n'
p40579
sS'cpp_type'
p40580
S'double'
p40581
sS'default'
p40582
S'0'
p40583
sS'name'
p40584
S'initial_condition'
p40585
sS'required'
p40586
I00
sS'group_name'
p40587
Nsa(dp40588
S'name'
p40589
S'order'
p40590
sS'cpp_type'
p40591
S'MooseEnum'
p40592
sS'default'
p40593
S'FIRST'
p40594
sS'description'
p40595
S'Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n'
p40596
sS'required'
p40597
I00
sS'options'
p40598
S'CONSTANT FIRST SECOND THIRD FOURTH'
p40599
sS'group_name'
p40600
Nsa(dp40601
S'description'
p40602
S'Specifies a scaling factor to apply to this variable\n'
p40603
sS'cpp_type'
p40604
S'double'
p40605
sS'default'
p40606
S'1'
p40607
sS'name'
p40608
S'scaling'
p40609
sS'required'
p40610
I00
sS'group_name'
p40611
S'Advanced'
p40612
sa(dp40613
S'description'
p40614
S'Gives the timestep for which to read a solution from a file for a given variable\n'
p40615
sS'cpp_type'
p40616
S'int'
p40617
sS'default'
p40618
S'2'
p40619
sS'name'
p40620
S'initial_from_file_timestep'
p40621
sS'required'
p40622
I00
sS'group_name'
p40623
S'Initial From File'
p40624
sa(dp40625
S'description'
p40626
S'Gives the name of a variable for which to read an initial condition from a mesh file\n'
p40627
sS'cpp_type'
p40628
S'std::string'
p40629
sS'default'
p40630
g3
sS'name'
p40631
S'initial_from_file_var'
p40632
sS'required'
p40633
I00
sS'group_name'
p40634
S'Initial From File'
p40635
sasS'name'
p40636
S'/Variables/*'
p40637
sa(dp40638
S'description'
p40639
g3
sS'type'
p40640
NsS'subblocks'
p40641
NsS'parameters'
p40642
(lp40643
(dp40644
S'description'
p40645
S'specifies the number of order parameters to create\n'
p40646
sS'cpp_type'
p40647
S'unsigned int'
p40648
sS'default'
p40649
g3
sS'name'
p40650
S'crys_num'
p40651
sS'required'
p40652
I01
sS'group_name'
p40653
Nsa(dp40654
S'description'
p40655
S'Specifies the family of FE shape functions to use for this variable\n'
p40656
sS'cpp_type'
p40657
S'std::string'
p40658
sS'default'
p40659
S'LAGRANGE'
p40660
sS'name'
p40661
S'family'
p40662
sS'required'
p40663
I00
sS'group_name'
p40664
Nsa(dp40665
S'description'
p40666
S'Specifies the order of the FE shape function to use for this variable\n'
p40667
sS'cpp_type'
p40668
S'std::string'
p40669
sS'default'
p40670
S'FIRST'
p40671
sS'name'
p40672
S'order'
p40673
sS'required'
p40674
I00
sS'group_name'
p40675
Nsa(dp40676
S'description'
p40677
S'Specifies a scaling factor to apply to this variable\n'
p40678
sS'cpp_type'
p40679
S'double'
p40680
sS'default'
p40681
S'1'
p40682
sS'name'
p40683
S'scaling'
p40684
sS'required'
p40685
I00
sS'group_name'
p40686
Nsa(dp40687
S'description'
p40688
S'specifies the base name of the variables\n'
p40689
sS'cpp_type'
p40690
S'std::string'
p40691
sS'default'
p40692
g3
sS'name'
p40693
S'var_name_base'
p40694
sS'required'
p40695
I01
sS'group_name'
p40696
NsasS'name'
p40697
S'/Variables/PolycrystalVariables'
p40698
sasS'parameters'
p40699
NsS'name'
p40700
S'/Variables'
p40701
sa(dp40702
S'description'
p40703
g3
sS'type'
p40704
NsS'subblocks'
p40705
(lp40706
(dp40707
S'description'
p40708
g3
sS'type'
p40709
NsS'subblocks'
p40710
NsS'parameters'
p40711
(lp40712
(dp40713
S'description'
p40714
S'A string representing the Moose Object that will be built by this Action\n'
p40715
sS'cpp_type'
p40716
S'std::string'
p40717
sS'default'
p40718
g3
sS'name'
p40719
S'type'
p40720
sS'required'
p40721
I01
sS'group_name'
p40722
NsasS'name'
p40723
S'/VectorPostprocessors/*'
p40724
sa(dp40725
S'description'
p40726
g3
sS'type'
p40727
NsS'subblocks'
p40728
NsS'parameters'
p40729
(lp40730
(dp40731
S'name'
p40732
S'execute_on'
p40733
sS'cpp_type'
p40734
S'MooseEnum'
p40735
sS'default'
p40736
S'timestep'
p40737
sS'description'
p40738
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p40739
sS'required'
p40740
I00
sS'options'
p40741
S'initial residual jacobian timestep timestep_begin custom'
p40742
sS'group_name'
p40743
Nsa(dp40744
S'description'
p40745
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p40746
sS'cpp_type'
p40747
S'std::vector<OutputName, std::allocator<OutputName> >'
p40748
sS'default'
p40749
g3
sS'name'
p40750
S'outputs'
p40751
sS'required'
p40752
I00
sS'group_name'
p40753
S'Advanced'
p40754
sa(dp40755
S'description'
p40756
g3
sS'cpp_type'
p40757
S'std::string'
p40758
sS'default'
p40759
S'ConstantVectorPostprocessor'
p40760
sS'name'
p40761
S'type'
p40762
sS'required'
p40763
I00
sS'group_name'
p40764
Nsa(dp40765
S'description'
p40766
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40767
sS'cpp_type'
p40768
S'bool'
p40769
sS'default'
p40770
S'0'
p40771
sS'name'
p40772
S'use_displaced_mesh'
p40773
sS'required'
p40774
I00
sS'group_name'
p40775
S'Advanced'
p40776
sa(dp40777
S'description'
p40778
S'The vector value this object will have.\n'
p40779
sS'cpp_type'
p40780
S'std::vector<double, std::allocator<double> >'
p40781
sS'default'
p40782
g3
sS'name'
p40783
S'value'
p40784
sS'required'
p40785
I01
sS'group_name'
p40786
NsasS'name'
p40787
S'/VectorPostprocessors/ConstantVectorPostprocessor'
p40788
sa(dp40789
S'description'
p40790
g3
sS'type'
p40791
NsS'subblocks'
p40792
NsS'parameters'
p40793
(lp40794
(dp40795
S'description'
p40796
S'The ending of the line\n'
p40797
sS'cpp_type'
p40798
S'libMesh::Point'
p40799
sS'default'
p40800
g3
sS'name'
p40801
S'end_point'
p40802
sS'required'
p40803
I01
sS'group_name'
p40804
Nsa(dp40805
S'name'
p40806
S'execute_on'
p40807
sS'cpp_type'
p40808
S'MooseEnum'
p40809
sS'default'
p40810
S'timestep'
p40811
sS'description'
p40812
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p40813
sS'required'
p40814
I00
sS'options'
p40815
S'initial residual jacobian timestep timestep_begin custom'
p40816
sS'group_name'
p40817
Nsa(dp40818
S'description'
p40819
S'The number of points to sample along the line\n'
p40820
sS'cpp_type'
p40821
S'unsigned int'
p40822
sS'default'
p40823
g3
sS'name'
p40824
S'num_points'
p40825
sS'required'
p40826
I01
sS'group_name'
p40827
Nsa(dp40828
S'description'
p40829
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p40830
sS'cpp_type'
p40831
S'std::vector<OutputName, std::allocator<OutputName> >'
p40832
sS'default'
p40833
g3
sS'name'
p40834
S'outputs'
p40835
sS'required'
p40836
I00
sS'group_name'
p40837
S'Advanced'
p40838
sa(dp40839
S'name'
p40840
S'sort_by'
p40841
sS'cpp_type'
p40842
S'MooseEnum'
p40843
sS'default'
p40844
g3
sS'description'
p40845
S'What to sort the samples by\n'
p40846
sS'required'
p40847
I01
sS'options'
p40848
S'x y z id'
p40849
sS'group_name'
p40850
Nsa(dp40851
S'description'
p40852
S'The beginning of the line\n'
p40853
sS'cpp_type'
p40854
S'libMesh::Point'
p40855
sS'default'
p40856
g3
sS'name'
p40857
S'start_point'
p40858
sS'required'
p40859
I01
sS'group_name'
p40860
Nsa(dp40861
S'description'
p40862
g3
sS'cpp_type'
p40863
S'std::string'
p40864
sS'default'
p40865
S'LineValueSampler'
p40866
sS'name'
p40867
S'type'
p40868
sS'required'
p40869
I00
sS'group_name'
p40870
Nsa(dp40871
S'description'
p40872
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40873
sS'cpp_type'
p40874
S'bool'
p40875
sS'default'
p40876
S'0'
p40877
sS'name'
p40878
S'use_displaced_mesh'
p40879
sS'required'
p40880
I00
sS'group_name'
p40881
S'Advanced'
p40882
sa(dp40883
S'description'
p40884
S'The names of the variables that this VectorPostprocessor operates on\n'
p40885
sS'cpp_type'
p40886
S'std::vector<VariableName>'
p40887
sS'default'
p40888
g3
sS'name'
p40889
S'variable'
p40890
sS'required'
p40891
I01
sS'group_name'
p40892
NsasS'name'
p40893
S'/VectorPostprocessors/LineValueSampler'
p40894
sa(dp40895
S'description'
p40896
g3
sS'type'
p40897
NsS'subblocks'
p40898
NsS'parameters'
p40899
(lp40900
(dp40901
S'description'
p40902
S'The list of block ids (SubdomainID) that this object will be applied\n'
p40903
sS'cpp_type'
p40904
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p40905
sS'default'
p40906
g3
sS'name'
p40907
S'block'
p40908
sS'required'
p40909
I00
sS'group_name'
p40910
Nsa(dp40911
S'description'
p40912
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40913
sS'cpp_type'
p40914
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p40915
sS'default'
p40916
g3
sS'name'
p40917
S'boundary'
p40918
sS'required'
p40919
I00
sS'group_name'
p40920
Nsa(dp40921
S'name'
p40922
S'execute_on'
p40923
sS'cpp_type'
p40924
S'MooseEnum'
p40925
sS'default'
p40926
S'timestep'
p40927
sS'description'
p40928
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p40929
sS'required'
p40930
I00
sS'options'
p40931
S'initial residual jacobian timestep timestep_begin custom'
p40932
sS'group_name'
p40933
Nsa(dp40934
S'description'
p40935
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p40936
sS'cpp_type'
p40937
S'std::vector<OutputName, std::allocator<OutputName> >'
p40938
sS'default'
p40939
g3
sS'name'
p40940
S'outputs'
p40941
sS'required'
p40942
I00
sS'group_name'
p40943
S'Advanced'
p40944
sa(dp40945
S'description'
p40946
S'The seed for the master random number generator\n'
p40947
sS'cpp_type'
p40948
S'unsigned int'
p40949
sS'default'
p40950
S'0'
p40951
sS'name'
p40952
S'seed'
p40953
sS'required'
p40954
I00
sS'group_name'
p40955
S'Advanced'
p40956
sa(dp40957
S'name'
p40958
S'sort_by'
p40959
sS'cpp_type'
p40960
S'MooseEnum'
p40961
sS'default'
p40962
g3
sS'description'
p40963
S'What to sort the samples by\n'
p40964
sS'required'
p40965
I01
sS'options'
p40966
S'x y z id'
p40967
sS'group_name'
p40968
Nsa(dp40969
S'description'
p40970
g3
sS'cpp_type'
p40971
S'std::string'
p40972
sS'default'
p40973
S'NodalValueSampler'
p40974
sS'name'
p40975
S'type'
p40976
sS'required'
p40977
I00
sS'group_name'
p40978
Nsa(dp40979
S'description'
p40980
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40981
sS'cpp_type'
p40982
S'bool'
p40983
sS'default'
p40984
S'0'
p40985
sS'name'
p40986
S'use_displaced_mesh'
p40987
sS'required'
p40988
I00
sS'group_name'
p40989
S'Advanced'
p40990
sa(dp40991
S'description'
p40992
S'The names of the variables that this VectorPostprocessor operates on\n'
p40993
sS'cpp_type'
p40994
S'std::vector<VariableName>'
p40995
sS'default'
p40996
g3
sS'name'
p40997
S'variable'
p40998
sS'required'
p40999
I01
sS'group_name'
p41000
NsasS'name'
p41001
S'/VectorPostprocessors/NodalValueSampler'
p41002
sa(dp41003
S'description'
p41004
g3
sS'type'
p41005
NsS'subblocks'
p41006
NsS'parameters'
p41007
(lp41008
(dp41009
S'name'
p41010
S'execute_on'
p41011
sS'cpp_type'
p41012
S'MooseEnum'
p41013
sS'default'
p41014
S'timestep'
p41015
sS'description'
p41016
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p41017
sS'required'
p41018
I00
sS'options'
p41019
S'initial residual jacobian timestep timestep_begin custom'
p41020
sS'group_name'
p41021
Nsa(dp41022
S'description'
p41023
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p41024
sS'cpp_type'
p41025
S'std::vector<OutputName, std::allocator<OutputName> >'
p41026
sS'default'
p41027
g3
sS'name'
p41028
S'outputs'
p41029
sS'required'
p41030
I00
sS'group_name'
p41031
S'Advanced'
p41032
sa(dp41033
S'description'
p41034
S'The points where you want to evaluate the variables\n'
p41035
sS'cpp_type'
p41036
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p41037
sS'default'
p41038
g3
sS'name'
p41039
S'points'
p41040
sS'required'
p41041
I01
sS'group_name'
p41042
Nsa(dp41043
S'name'
p41044
S'sort_by'
p41045
sS'cpp_type'
p41046
S'MooseEnum'
p41047
sS'default'
p41048
g3
sS'description'
p41049
S'What to sort the samples by\n'
p41050
sS'required'
p41051
I01
sS'options'
p41052
S'x y z id'
p41053
sS'group_name'
p41054
Nsa(dp41055
S'description'
p41056
g3
sS'cpp_type'
p41057
S'std::string'
p41058
sS'default'
p41059
S'PointValueSampler'
p41060
sS'name'
p41061
S'type'
p41062
sS'required'
p41063
I00
sS'group_name'
p41064
Nsa(dp41065
S'description'
p41066
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41067
sS'cpp_type'
p41068
S'bool'
p41069
sS'default'
p41070
S'0'
p41071
sS'name'
p41072
S'use_displaced_mesh'
p41073
sS'required'
p41074
I00
sS'group_name'
p41075
S'Advanced'
p41076
sa(dp41077
S'description'
p41078
S'The names of the variables that this VectorPostprocessor operates on\n'
p41079
sS'cpp_type'
p41080
S'std::vector<VariableName>'
p41081
sS'default'
p41082
g3
sS'name'
p41083
S'variable'
p41084
sS'required'
p41085
I01
sS'group_name'
p41086
NsasS'name'
p41087
S'/VectorPostprocessors/PointValueSampler'
p41088
sa(dp41089
S'description'
p41090
g3
sS'type'
p41091
NsS'subblocks'
p41092
NsS'parameters'
p41093
(lp41094
(dp41095
S'description'
p41096
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p41097
sS'cpp_type'
p41098
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p41099
sS'default'
p41100
g3
sS'name'
p41101
S'boundary'
p41102
sS'required'
p41103
I00
sS'group_name'
p41104
Nsa(dp41105
S'name'
p41106
S'execute_on'
p41107
sS'cpp_type'
p41108
S'MooseEnum'
p41109
sS'default'
p41110
S'timestep'
p41111
sS'description'
p41112
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p41113
sS'required'
p41114
I00
sS'options'
p41115
S'initial residual jacobian timestep timestep_begin custom'
p41116
sS'group_name'
p41117
Nsa(dp41118
S'description'
p41119
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p41120
sS'cpp_type'
p41121
S'std::vector<OutputName, std::allocator<OutputName> >'
p41122
sS'default'
p41123
g3
sS'name'
p41124
S'outputs'
p41125
sS'required'
p41126
I00
sS'group_name'
p41127
S'Advanced'
p41128
sa(dp41129
S'name'
p41130
S'sort_by'
p41131
sS'cpp_type'
p41132
S'MooseEnum'
p41133
sS'default'
p41134
g3
sS'description'
p41135
S'What to sort the samples by\n'
p41136
sS'required'
p41137
I01
sS'options'
p41138
S'x y z id'
p41139
sS'group_name'
p41140
Nsa(dp41141
S'description'
p41142
g3
sS'cpp_type'
p41143
S'std::string'
p41144
sS'default'
p41145
S'SideValueSampler'
p41146
sS'name'
p41147
S'type'
p41148
sS'required'
p41149
I00
sS'group_name'
p41150
Nsa(dp41151
S'description'
p41152
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41153
sS'cpp_type'
p41154
S'bool'
p41155
sS'default'
p41156
S'0'
p41157
sS'name'
p41158
S'use_displaced_mesh'
p41159
sS'required'
p41160
I00
sS'group_name'
p41161
S'Advanced'
p41162
sa(dp41163
S'description'
p41164
S'The names of the variables that this VectorPostprocessor operates on\n'
p41165
sS'cpp_type'
p41166
S'std::vector<VariableName>'
p41167
sS'default'
p41168
g3
sS'name'
p41169
S'variable'
p41170
sS'required'
p41171
I01
sS'group_name'
p41172
NsasS'name'
p41173
S'/VectorPostprocessors/SideValueSampler'
p41174
sasS'parameters'
p41175
NsS'name'
p41176
S'/VectorPostprocessors'
p41177
sa.