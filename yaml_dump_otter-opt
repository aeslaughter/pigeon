(lp0
(dp1
S'description'
p2
S''
p3
sS'type'
p4
NsS'subblocks'
p5
(lp6
(dp7
S'description'
p8
g3
sS'type'
p9
NsS'subblocks'
p10
(lp11
(dp12
S'description'
p13
g3
sS'type'
p14
NsS'subblocks'
p15
NsS'parameters'
p16
(lp17
(dp18
S'description'
p19
S'The block id where this object lives.\n'
p20
sS'cpp_type'
p21
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p22
sS'default'
p23
g3
sS'name'
p24
S'block'
p25
sS'required'
p26
I00
sS'group_name'
p27
Nsa(dp28
S'description'
p29
S'A string representing the Moose Object that will be built by this Action\n'
p30
sS'cpp_type'
p31
S'std::string'
p32
sS'default'
p33
g3
sS'name'
p34
S'type'
p35
sS'required'
p36
I01
sS'group_name'
p37
NsasS'name'
p38
S'/Adaptivity/Indicators/*'
p39
sa(dp40
S'description'
p41
g3
sS'type'
p42
NsS'subblocks'
p43
NsS'parameters'
p44
(lp45
(dp46
S'description'
p47
S'block ID or name where the object works\n'
p48
sS'cpp_type'
p49
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p50
sS'default'
p51
S'ANY_BLOCK_ID'
p52
sS'name'
p53
S'block'
p54
sS'required'
p55
I00
sS'group_name'
p56
Nsa(dp57
S'description'
p58
S'The analytic solution to compare against\n'
p59
sS'cpp_type'
p60
S'FunctionName'
p61
sS'default'
p62
g3
sS'name'
p63
S'function'
p64
sS'required'
p65
I01
sS'group_name'
p66
Nsa(dp67
S'description'
p68
g3
sS'cpp_type'
p69
S'std::string'
p70
sS'default'
p71
S'AnalyticalIndicator'
p72
sS'name'
p73
S'type'
p74
sS'required'
p75
I00
sS'group_name'
p76
Nsa(dp77
S'description'
p78
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p79
sS'cpp_type'
p80
S'bool'
p81
sS'default'
p82
S'0'
p83
sS'name'
p84
S'use_displaced_mesh'
p85
sS'required'
p86
I00
sS'group_name'
p87
S'Advanced'
p88
sa(dp89
S'description'
p90
S'The name of the variable that this Indicator operates on\n'
p91
sS'cpp_type'
p92
S'VariableName'
p93
sS'default'
p94
g3
sS'name'
p95
S'variable'
p96
sS'required'
p97
I01
sS'group_name'
p98
NsasS'name'
p99
S'/Adaptivity/Indicators/AnalyticalIndicator'
p100
sa(dp101
S'description'
p102
g3
sS'type'
p103
NsS'subblocks'
p104
NsS'parameters'
p105
(lp106
(dp107
S'description'
p108
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p109
sS'cpp_type'
p110
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p111
sS'default'
p112
g3
sS'name'
p113
S'block'
p114
sS'required'
p115
I00
sS'group_name'
p116
Nsa(dp117
S'description'
p118
S"The name of the material property to used as the 'diffusivity'\n"
p119
sS'cpp_type'
p120
S'std::string'
p121
sS'default'
p122
g3
sS'name'
p123
S'property'
p124
sS'required'
p125
I01
sS'group_name'
p126
Nsa(dp127
S'description'
p128
S'Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n'
p129
sS'cpp_type'
p130
S'bool'
p131
sS'default'
p132
S'0'
p133
sS'name'
p134
S'scale_by_flux_faces'
p135
sS'required'
p136
I00
sS'group_name'
p137
Nsa(dp138
S'description'
p139
g3
sS'cpp_type'
p140
S'std::string'
p141
sS'default'
p142
S'FluxJumpIndicator'
p143
sS'name'
p144
S'type'
p145
sS'required'
p146
I00
sS'group_name'
p147
Nsa(dp148
S'description'
p149
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p150
sS'cpp_type'
p151
S'bool'
p152
sS'default'
p153
S'0'
p154
sS'name'
p155
S'use_displaced_mesh'
p156
sS'required'
p157
I00
sS'group_name'
p158
S'Advanced'
p159
sa(dp160
S'description'
p161
S'The name of the variable that this side indicator applies to\n'
p162
sS'cpp_type'
p163
S'VariableName'
p164
sS'default'
p165
g3
sS'name'
p166
S'variable'
p167
sS'required'
p168
I01
sS'group_name'
p169
NsasS'name'
p170
S'/Adaptivity/Indicators/FluxJumpIndicator'
p171
sa(dp172
S'description'
p173
g3
sS'type'
p174
NsS'subblocks'
p175
NsS'parameters'
p176
(lp177
(dp178
S'description'
p179
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p180
sS'cpp_type'
p181
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p182
sS'default'
p183
g3
sS'name'
p184
S'block'
p185
sS'required'
p186
I00
sS'group_name'
p187
Nsa(dp188
S'description'
p189
S'Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n'
p190
sS'cpp_type'
p191
S'bool'
p192
sS'default'
p193
S'0'
p194
sS'name'
p195
S'scale_by_flux_faces'
p196
sS'required'
p197
I00
sS'group_name'
p198
Nsa(dp199
S'description'
p200
g3
sS'cpp_type'
p201
S'std::string'
p202
sS'default'
p203
S'GradientJumpIndicator'
p204
sS'name'
p205
S'type'
p206
sS'required'
p207
I00
sS'group_name'
p208
Nsa(dp209
S'description'
p210
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p211
sS'cpp_type'
p212
S'bool'
p213
sS'default'
p214
S'0'
p215
sS'name'
p216
S'use_displaced_mesh'
p217
sS'required'
p218
I00
sS'group_name'
p219
S'Advanced'
p220
sa(dp221
S'description'
p222
S'The name of the variable that this side indicator applies to\n'
p223
sS'cpp_type'
p224
S'VariableName'
p225
sS'default'
p226
g3
sS'name'
p227
S'variable'
p228
sS'required'
p229
I01
sS'group_name'
p230
NsasS'name'
p231
S'/Adaptivity/Indicators/GradientJumpIndicator'
p232
sa(dp233
S'description'
p234
g3
sS'type'
p235
NsS'subblocks'
p236
NsS'parameters'
p237
(lp238
(dp239
S'description'
p240
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p241
sS'cpp_type'
p242
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p243
sS'default'
p244
g3
sS'name'
p245
S'block'
p246
sS'required'
p247
I00
sS'group_name'
p248
Nsa(dp249
S'description'
p250
S'Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n'
p251
sS'cpp_type'
p252
S'bool'
p253
sS'default'
p254
S'0'
p255
sS'name'
p256
S'scale_by_flux_faces'
p257
sS'required'
p258
I00
sS'group_name'
p259
Nsa(dp260
S'description'
p261
g3
sS'cpp_type'
p262
S'std::string'
p263
sS'default'
p264
S'LaplacianJumpIndicator'
p265
sS'name'
p266
S'type'
p267
sS'required'
p268
I00
sS'group_name'
p269
Nsa(dp270
S'description'
p271
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p272
sS'cpp_type'
p273
S'bool'
p274
sS'default'
p275
S'0'
p276
sS'name'
p277
S'use_displaced_mesh'
p278
sS'required'
p279
I00
sS'group_name'
p280
S'Advanced'
p281
sa(dp282
S'description'
p283
S'The name of the variable that this side indicator applies to\n'
p284
sS'cpp_type'
p285
S'VariableName'
p286
sS'default'
p287
g3
sS'name'
p288
S'variable'
p289
sS'required'
p290
I01
sS'group_name'
p291
NsasS'name'
p292
S'/Adaptivity/Indicators/LaplacianJumpIndicator'
p293
sasS'parameters'
p294
NsS'name'
p295
S'/Adaptivity/Indicators'
p296
sa(dp297
S'description'
p298
g3
sS'type'
p299
NsS'subblocks'
p300
(lp301
(dp302
S'description'
p303
g3
sS'type'
p304
NsS'subblocks'
p305
NsS'parameters'
p306
(lp307
(dp308
S'description'
p309
S'The block id where this object lives.\n'
p310
sS'cpp_type'
p311
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p312
sS'default'
p313
g3
sS'name'
p314
S'block'
p315
sS'required'
p316
I00
sS'group_name'
p317
Nsa(dp318
S'description'
p319
S'A string representing the Moose Object that will be built by this Action\n'
p320
sS'cpp_type'
p321
S'std::string'
p322
sS'default'
p323
g3
sS'name'
p324
S'type'
p325
sS'required'
p326
I01
sS'group_name'
p327
NsasS'name'
p328
S'/Adaptivity/Markers/*'
p329
sa(dp330
S'description'
p331
g3
sS'type'
p332
NsS'subblocks'
p333
NsS'parameters'
p334
(lp335
(dp336
S'description'
p337
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p338
sS'cpp_type'
p339
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p340
sS'default'
p341
g3
sS'name'
p342
S'block'
p343
sS'required'
p344
I00
sS'group_name'
p345
Nsa(dp346
S'description'
p347
S'The bottom left point (in x,y,z with spaces in-between).\n'
p348
sS'cpp_type'
p349
S'libMesh::VectorValue<double>'
p350
sS'default'
p351
g3
sS'name'
p352
S'bottom_left'
p353
sS'required'
p354
I01
sS'group_name'
p355
Nsa(dp356
S'name'
p357
S'inside'
p358
sS'cpp_type'
p359
S'MooseEnum'
p360
sS'default'
p361
g3
sS'description'
p362
S'How to mark elements inside the box.\n'
p363
sS'required'
p364
I01
sS'options'
p365
S'dont_mark coarsen do_nothing refine'
p366
sS'group_name'
p367
Nsa(dp368
S'name'
p369
S'outside'
p370
sS'cpp_type'
p371
S'MooseEnum'
p372
sS'default'
p373
g3
sS'description'
p374
S'How to mark elements outside the box.\n'
p375
sS'required'
p376
I01
sS'options'
p377
S'dont_mark coarsen do_nothing refine'
p378
sS'group_name'
p379
Nsa(dp380
S'description'
p381
S'The bottom left point (in x,y,z with spaces in-between).\n'
p382
sS'cpp_type'
p383
S'libMesh::VectorValue<double>'
p384
sS'default'
p385
g3
sS'name'
p386
S'top_right'
p387
sS'required'
p388
I01
sS'group_name'
p389
Nsa(dp390
S'description'
p391
g3
sS'cpp_type'
p392
S'std::string'
p393
sS'default'
p394
S'BoxMarker'
p395
sS'name'
p396
S'type'
p397
sS'required'
p398
I00
sS'group_name'
p399
Nsa(dp400
S'description'
p401
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p402
sS'cpp_type'
p403
S'bool'
p404
sS'default'
p405
S'0'
p406
sS'name'
p407
S'use_displaced_mesh'
p408
sS'required'
p409
I00
sS'group_name'
p410
S'Advanced'
p411
sasS'name'
p412
S'/Adaptivity/Markers/BoxMarker'
p413
sa(dp414
S'description'
p415
g3
sS'type'
p416
NsS'subblocks'
p417
NsS'parameters'
p418
(lp419
(dp420
S'description'
p421
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p422
sS'cpp_type'
p423
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p424
sS'default'
p425
g3
sS'name'
p426
S'block'
p427
sS'required'
p428
I00
sS'group_name'
p429
Nsa(dp430
S'description'
p431
S'The Markers to combine.\n'
p432
sS'cpp_type'
p433
S'std::vector<MarkerName, std::allocator<MarkerName> >'
p434
sS'default'
p435
g3
sS'name'
p436
S'markers'
p437
sS'required'
p438
I01
sS'group_name'
p439
Nsa(dp440
S'description'
p441
g3
sS'cpp_type'
p442
S'std::string'
p443
sS'default'
p444
S'ComboMarker'
p445
sS'name'
p446
S'type'
p447
sS'required'
p448
I00
sS'group_name'
p449
Nsa(dp450
S'description'
p451
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p452
sS'cpp_type'
p453
S'bool'
p454
sS'default'
p455
S'0'
p456
sS'name'
p457
S'use_displaced_mesh'
p458
sS'required'
p459
I00
sS'group_name'
p460
S'Advanced'
p461
sasS'name'
p462
S'/Adaptivity/Markers/ComboMarker'
p463
sa(dp464
S'description'
p465
g3
sS'type'
p466
NsS'subblocks'
p467
NsS'parameters'
p468
(lp469
(dp470
S'description'
p471
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p472
sS'cpp_type'
p473
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p474
sS'default'
p475
g3
sS'name'
p476
S'block'
p477
sS'required'
p478
I00
sS'group_name'
p479
Nsa(dp480
S'description'
p481
S'Elements within this percentage of the min error will be coarsened.  Must be between 0 and 1!\n'
p482
sS'cpp_type'
p483
S'double'
p484
sS'default'
p485
S'0'
p486
sS'name'
p487
S'coarsen'
p488
sS'required'
p489
I00
sS'group_name'
p490
Nsa(dp491
S'description'
p492
S'The name of the Indicator that this Marker uses.\n'
p493
sS'cpp_type'
p494
S'IndicatorName'
p495
sS'default'
p496
g3
sS'name'
p497
S'indicator'
p498
sS'required'
p499
I01
sS'group_name'
p500
Nsa(dp501
S'description'
p502
S'Elements within this percentage of the max error will be refined.  Must be between 0 and 1!\n'
p503
sS'cpp_type'
p504
S'double'
p505
sS'default'
p506
S'0'
p507
sS'name'
p508
S'refine'
p509
sS'required'
p510
I00
sS'group_name'
p511
Nsa(dp512
S'description'
p513
g3
sS'cpp_type'
p514
S'std::string'
p515
sS'default'
p516
S'ErrorFractionMarker'
p517
sS'name'
p518
S'type'
p519
sS'required'
p520
I00
sS'group_name'
p521
Nsa(dp522
S'description'
p523
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p524
sS'cpp_type'
p525
S'bool'
p526
sS'default'
p527
S'0'
p528
sS'name'
p529
S'use_displaced_mesh'
p530
sS'required'
p531
I00
sS'group_name'
p532
S'Advanced'
p533
sasS'name'
p534
S'/Adaptivity/Markers/ErrorFractionMarker'
p535
sa(dp536
S'description'
p537
g3
sS'type'
p538
NsS'subblocks'
p539
NsS'parameters'
p540
(lp541
(dp542
S'description'
p543
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p544
sS'cpp_type'
p545
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p546
sS'default'
p547
g3
sS'name'
p548
S'block'
p549
sS'required'
p550
I00
sS'group_name'
p551
Nsa(dp552
S'description'
p553
S'Elements with error less than this will be coarsened.\n'
p554
sS'cpp_type'
p555
S'double'
p556
sS'default'
p557
S'0'
p558
sS'name'
p559
S'coarsen'
p560
sS'required'
p561
I00
sS'group_name'
p562
Nsa(dp563
S'description'
p564
S'The name of the Indicator that this Marker uses.\n'
p565
sS'cpp_type'
p566
S'IndicatorName'
p567
sS'default'
p568
g3
sS'name'
p569
S'indicator'
p570
sS'required'
p571
I01
sS'group_name'
p572
Nsa(dp573
S'description'
p574
S'Elements with error more than this will be refined.\n'
p575
sS'cpp_type'
p576
S'double'
p577
sS'default'
p578
S'1.79769e+308'
p579
sS'name'
p580
S'refine'
p581
sS'required'
p582
I00
sS'group_name'
p583
Nsa(dp584
S'description'
p585
g3
sS'cpp_type'
p586
S'std::string'
p587
sS'default'
p588
S'ErrorToleranceMarker'
p589
sS'name'
p590
S'type'
p591
sS'required'
p592
I00
sS'group_name'
p593
Nsa(dp594
S'description'
p595
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p596
sS'cpp_type'
p597
S'bool'
p598
sS'default'
p599
S'0'
p600
sS'name'
p601
S'use_displaced_mesh'
p602
sS'required'
p603
I00
sS'group_name'
p604
S'Advanced'
p605
sasS'name'
p606
S'/Adaptivity/Markers/ErrorToleranceMarker'
p607
sa(dp608
S'description'
p609
g3
sS'type'
p610
NsS'subblocks'
p611
NsS'parameters'
p612
(lp613
(dp614
S'description'
p615
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p616
sS'cpp_type'
p617
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p618
sS'default'
p619
g3
sS'name'
p620
S'block'
p621
sS'required'
p622
I00
sS'group_name'
p623
Nsa(dp624
S'description'
p625
S"The center (many people spell this 'center') of the box.\n"
p626
sS'cpp_type'
p627
S'libMesh::Point'
p628
sS'default'
p629
g3
sS'name'
p630
S'center'
p631
sS'required'
p632
I01
sS'group_name'
p633
Nsa(dp634
S'description'
p635
S'The height of the box\n'
p636
sS'cpp_type'
p637
S'double'
p638
sS'default'
p639
g3
sS'name'
p640
S'height'
p641
sS'required'
p642
I01
sS'group_name'
p643
Nsa(dp644
S'name'
p645
S'inside'
p646
sS'cpp_type'
p647
S'MooseEnum'
p648
sS'default'
p649
g3
sS'description'
p650
S'How to mark elements inside the box.\n'
p651
sS'required'
p652
I01
sS'options'
p653
S'dont_mark coarsen do_nothing refine'
p654
sS'group_name'
p655
Nsa(dp656
S'description'
p657
S'The length of the box\n'
p658
sS'cpp_type'
p659
S'double'
p660
sS'default'
p661
g3
sS'name'
p662
S'length'
p663
sS'required'
p664
I01
sS'group_name'
p665
Nsa(dp666
S'description'
p667
S'The direction along which the length is oriented (must be perpendicular to width_direction).\n'
p668
sS'cpp_type'
p669
S'libMesh::VectorValue<double>'
p670
sS'default'
p671
g3
sS'name'
p672
S'length_direction'
p673
sS'required'
p674
I01
sS'group_name'
p675
Nsa(dp676
S'name'
p677
S'outside'
p678
sS'cpp_type'
p679
S'MooseEnum'
p680
sS'default'
p681
g3
sS'description'
p682
S'How to mark elements outside the box.\n'
p683
sS'required'
p684
I01
sS'options'
p685
S'dont_mark coarsen do_nothing refine'
p686
sS'group_name'
p687
Nsa(dp688
S'description'
p689
g3
sS'cpp_type'
p690
S'std::string'
p691
sS'default'
p692
S'OrientedBoxMarker'
p693
sS'name'
p694
S'type'
p695
sS'required'
p696
I00
sS'group_name'
p697
Nsa(dp698
S'description'
p699
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p700
sS'cpp_type'
p701
S'bool'
p702
sS'default'
p703
S'0'
p704
sS'name'
p705
S'use_displaced_mesh'
p706
sS'required'
p707
I00
sS'group_name'
p708
S'Advanced'
p709
sa(dp710
S'description'
p711
S'The width of the box\n'
p712
sS'cpp_type'
p713
S'double'
p714
sS'default'
p715
g3
sS'name'
p716
S'width'
p717
sS'required'
p718
I01
sS'group_name'
p719
Nsa(dp720
S'description'
p721
S'The direction along which the width is oriented.\n'
p722
sS'cpp_type'
p723
S'libMesh::VectorValue<double>'
p724
sS'default'
p725
g3
sS'name'
p726
S'width_direction'
p727
sS'required'
p728
I01
sS'group_name'
p729
NsasS'name'
p730
S'/Adaptivity/Markers/OrientedBoxMarker'
p731
sa(dp732
S'description'
p733
g3
sS'type'
p734
NsS'subblocks'
p735
NsS'parameters'
p736
(lp737
(dp738
S'description'
p739
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p740
sS'cpp_type'
p741
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p742
sS'default'
p743
g3
sS'name'
p744
S'block'
p745
sS'required'
p746
I00
sS'group_name'
p747
Nsa(dp748
S'name'
p749
S'mark'
p750
sS'cpp_type'
p751
S'MooseEnum'
p752
sS'default'
p753
g3
sS'description'
p754
S'How to mark elements.\n'
p755
sS'required'
p756
I01
sS'options'
p757
S'dont_mark coarsen do_nothing refine'
p758
sS'group_name'
p759
Nsa(dp760
S'description'
p761
g3
sS'cpp_type'
p762
S'std::string'
p763
sS'default'
p764
S'UniformMarker'
p765
sS'name'
p766
S'type'
p767
sS'required'
p768
I00
sS'group_name'
p769
Nsa(dp770
S'description'
p771
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p772
sS'cpp_type'
p773
S'bool'
p774
sS'default'
p775
S'0'
p776
sS'name'
p777
S'use_displaced_mesh'
p778
sS'required'
p779
I00
sS'group_name'
p780
S'Advanced'
p781
sasS'name'
p782
S'/Adaptivity/Markers/UniformMarker'
p783
sa(dp784
S'description'
p785
g3
sS'type'
p786
NsS'subblocks'
p787
NsS'parameters'
p788
(lp789
(dp790
S'description'
p791
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p792
sS'cpp_type'
p793
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p794
sS'default'
p795
g3
sS'name'
p796
S'block'
p797
sS'required'
p798
I00
sS'group_name'
p799
Nsa(dp800
S'description'
p801
S'A buffer zone value added to both ends of the range where a third_state marker can be returned.\n'
p802
sS'cpp_type'
p803
S'double'
p804
sS'default'
p805
S'0'
p806
sS'name'
p807
S'buffer_size'
p808
sS'required'
p809
I00
sS'group_name'
p810
Nsa(dp811
S'description'
p812
S'If this is true then values inside the range will be coarsened, and values outside the range will be refined.\n'
p813
sS'cpp_type'
p814
S'bool'
p815
sS'default'
p816
S'0'
p817
sS'name'
p818
S'invert'
p819
sS'required'
p820
I00
sS'group_name'
p821
Nsa(dp822
S'description'
p823
S'The lower bound value for the range.\n'
p824
sS'cpp_type'
p825
S'double'
p826
sS'default'
p827
g3
sS'name'
p828
S'lower_bound'
p829
sS'required'
p830
I01
sS'group_name'
p831
Nsa(dp832
S'name'
p833
S'third_state'
p834
sS'cpp_type'
p835
S'MooseEnum'
p836
sS'default'
p837
S'DONT_MARK'
p838
sS'description'
p839
S'The Marker state to apply to values in the buffer zone (both ends of the range).\n'
p840
sS'required'
p841
I00
sS'options'
p842
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p843
sS'group_name'
p844
Nsa(dp845
S'description'
p846
g3
sS'cpp_type'
p847
S'std::string'
p848
sS'default'
p849
S'ValueRangeMarker'
p850
sS'name'
p851
S'type'
p852
sS'required'
p853
I00
sS'group_name'
p854
Nsa(dp855
S'description'
p856
S'The upper bound value for the range.\n'
p857
sS'cpp_type'
p858
S'double'
p859
sS'default'
p860
g3
sS'name'
p861
S'upper_bound'
p862
sS'required'
p863
I01
sS'group_name'
p864
Nsa(dp865
S'description'
p866
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p867
sS'cpp_type'
p868
S'bool'
p869
sS'default'
p870
S'0'
p871
sS'name'
p872
S'use_displaced_mesh'
p873
sS'required'
p874
I00
sS'group_name'
p875
S'Advanced'
p876
sa(dp877
S'description'
p878
S'The variable whose values are used in this marker.\n'
p879
sS'cpp_type'
p880
S'VariableName'
p881
sS'default'
p882
g3
sS'name'
p883
S'variable'
p884
sS'required'
p885
I01
sS'group_name'
p886
NsasS'name'
p887
S'/Adaptivity/Markers/ValueRangeMarker'
p888
sa(dp889
S'description'
p890
g3
sS'type'
p891
NsS'subblocks'
p892
NsS'parameters'
p893
(lp894
(dp895
S'description'
p896
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p897
sS'cpp_type'
p898
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p899
sS'default'
p900
g3
sS'name'
p901
S'block'
p902
sS'required'
p903
I00
sS'group_name'
p904
Nsa(dp905
S'description'
p906
S'The threshold value for coarsening.  Elements with variable values beyond this will be marked for coarsening.\n'
p907
sS'cpp_type'
p908
S'double'
p909
sS'default'
p910
g3
sS'name'
p911
S'coarsen'
p912
sS'required'
p913
I00
sS'group_name'
p914
Nsa(dp915
S'description'
p916
S"If this is true then values _below_ 'refine' will be refined and _above_ 'coarsen' will be coarsened.\n"
p917
sS'cpp_type'
p918
S'bool'
p919
sS'default'
p920
S'0'
p921
sS'name'
p922
S'invert'
p923
sS'required'
p924
I00
sS'group_name'
p925
Nsa(dp926
S'description'
p927
S'The threshold value for refinement.  Elements with variable values beyond this will be marked for refinement.\n'
p928
sS'cpp_type'
p929
S'double'
p930
sS'default'
p931
g3
sS'name'
p932
S'refine'
p933
sS'required'
p934
I00
sS'group_name'
p935
Nsa(dp936
S'name'
p937
S'third_state'
p938
sS'cpp_type'
p939
S'MooseEnum'
p940
sS'default'
p941
S'DONT_MARK'
p942
sS'description'
p943
S'The Marker state to apply to values falling in-between the coarsen and refine thresholds.\n'
p944
sS'required'
p945
I00
sS'options'
p946
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p947
sS'group_name'
p948
Nsa(dp949
S'description'
p950
g3
sS'cpp_type'
p951
S'std::string'
p952
sS'default'
p953
S'ValueThresholdMarker'
p954
sS'name'
p955
S'type'
p956
sS'required'
p957
I00
sS'group_name'
p958
Nsa(dp959
S'description'
p960
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p961
sS'cpp_type'
p962
S'bool'
p963
sS'default'
p964
S'0'
p965
sS'name'
p966
S'use_displaced_mesh'
p967
sS'required'
p968
I00
sS'group_name'
p969
S'Advanced'
p970
sa(dp971
S'description'
p972
S"The values of this variable will be compared to 'refine' and 'coarsen' to see what should be done with the element\n"
p973
sS'cpp_type'
p974
S'VariableName'
p975
sS'default'
p976
g3
sS'name'
p977
S'variable'
p978
sS'required'
p979
I01
sS'group_name'
p980
NsasS'name'
p981
S'/Adaptivity/Markers/ValueThresholdMarker'
p982
sasS'parameters'
p983
NsS'name'
p984
S'/Adaptivity/Markers'
p985
sasS'parameters'
p986
(lp987
(dp988
S'description'
p989
S'The name of the Marker to use to adapt the mesh during initial refinement.\n'
p990
sS'cpp_type'
p991
S'MarkerName'
p992
sS'default'
p993
g3
sS'name'
p994
S'initial_marker'
p995
sS'required'
p996
I00
sS'group_name'
p997
Nsa(dp998
S'description'
p999
S'The number of adaptive steps to do based on the initial condition.\n'
p1000
sS'cpp_type'
p1001
S'unsigned int'
p1002
sS'default'
p1003
S'0'
p1004
sS'name'
p1005
S'initial_steps'
p1006
sS'required'
p1007
I00
sS'group_name'
p1008
Nsa(dp1009
S'description'
p1010
S'The name of the Marker to use to actually adapt the mesh.\n'
p1011
sS'cpp_type'
p1012
S'MarkerName'
p1013
sS'default'
p1014
g3
sS'name'
p1015
S'marker'
p1016
sS'required'
p1017
I00
sS'group_name'
p1018
Nsa(dp1019
S'description'
p1020
S'Maximum number of times a single element can be refined. If 0 then infinite.\n'
p1021
sS'cpp_type'
p1022
S'unsigned int'
p1023
sS'default'
p1024
S'0'
p1025
sS'name'
p1026
S'max_h_level'
p1027
sS'required'
p1028
I00
sS'group_name'
p1029
Nsa(dp1030
S'description'
p1031
S'The time that adaptivity will be active after.\n'
p1032
sS'cpp_type'
p1033
S'double'
p1034
sS'default'
p1035
S'-1.79769e+308'
p1036
sS'name'
p1037
S'start_time'
p1038
sS'required'
p1039
I00
sS'group_name'
p1040
Nsa(dp1041
S'description'
p1042
S'The number of adaptive steps to use when doing a Steady simulation.\n'
p1043
sS'cpp_type'
p1044
S'unsigned int'
p1045
sS'default'
p1046
S'0'
p1047
sS'name'
p1048
S'steps'
p1049
sS'required'
p1050
I00
sS'group_name'
p1051
Nsa(dp1052
S'description'
p1053
S'The time after which adaptivity will no longer be active.\n'
p1054
sS'cpp_type'
p1055
S'double'
p1056
sS'default'
p1057
S'1.79769e+308'
p1058
sS'name'
p1059
S'stop_time'
p1060
sS'required'
p1061
I00
sS'group_name'
p1062
NsasS'name'
p1063
S'/Adaptivity'
p1064
sa(dp1065
S'description'
p1066
g3
sS'type'
p1067
NsS'subblocks'
p1068
(lp1069
(dp1070
S'description'
p1071
g3
sS'type'
p1072
NsS'subblocks'
p1073
NsS'parameters'
p1074
(lp1075
(dp1076
S'description'
p1077
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1078
sS'cpp_type'
p1079
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1080
sS'default'
p1081
g3
sS'name'
p1082
S'boundary'
p1083
sS'required'
p1084
I01
sS'group_name'
p1085
Nsa(dp1086
S'description'
p1087
S'A string representing the Moose Object that will be built by this Action\n'
p1088
sS'cpp_type'
p1089
S'std::string'
p1090
sS'default'
p1091
g3
sS'name'
p1092
S'type'
p1093
sS'required'
p1094
I01
sS'group_name'
p1095
Nsa(dp1096
S'description'
p1097
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1098
sS'cpp_type'
p1099
S'bool'
p1100
sS'default'
p1101
S'0'
p1102
sS'name'
p1103
S'use_displaced_mesh'
p1104
sS'required'
p1105
I00
sS'group_name'
p1106
S'Advanced'
p1107
sa(dp1108
S'description'
p1109
S'The name of the variable that this boundary condition applies to\n'
p1110
sS'cpp_type'
p1111
S'NonlinearVariableName'
p1112
sS'default'
p1113
g3
sS'name'
p1114
S'variable'
p1115
sS'required'
p1116
I01
sS'group_name'
p1117
NsasS'name'
p1118
S'/AuxBCs/*'
p1119
sa(dp1120
S'description'
p1121
g3
sS'type'
p1122
NsS'subblocks'
p1123
NsS'parameters'
p1124
(lp1125
(dp1126
S'description'
p1127
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p1128
sS'cpp_type'
p1129
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1130
sS'default'
p1131
g3
sS'name'
p1132
S'block'
p1133
sS'required'
p1134
I00
sS'group_name'
p1135
Nsa(dp1136
S'description'
p1137
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1138
sS'cpp_type'
p1139
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1140
sS'default'
p1141
g3
sS'name'
p1142
S'boundary'
p1143
sS'required'
p1144
I00
sS'group_name'
p1145
Nsa(dp1146
S'description'
p1147
S'number of grains\n'
p1148
sS'cpp_type'
p1149
S'unsigned int'
p1150
sS'default'
p1151
g3
sS'name'
p1152
S'crys_num'
p1153
sS'required'
p1154
I01
sS'group_name'
p1155
Nsa(dp1156
S'name'
p1157
S'execute_on'
p1158
sS'cpp_type'
p1159
S'MooseEnum'
p1160
sS'default'
p1161
S'residual'
p1162
sS'description'
p1163
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p1164
sS'required'
p1165
I00
sS'options'
p1166
S'initial residual jacobian timestep timestep_begin custom'
p1167
sS'group_name'
p1168
Nsa(dp1169
S'description'
p1170
S'The seed for the master random number generator\n'
p1171
sS'cpp_type'
p1172
S'unsigned int'
p1173
sS'default'
p1174
S'0'
p1175
sS'name'
p1176
S'seed'
p1177
sS'required'
p1178
I00
sS'group_name'
p1179
S'Advanced'
p1180
sa(dp1181
S'description'
p1182
g3
sS'cpp_type'
p1183
S'std::string'
p1184
sS'default'
p1185
S'BndsCalcAux'
p1186
sS'name'
p1187
S'type'
p1188
sS'required'
p1189
I00
sS'group_name'
p1190
Nsa(dp1191
S'description'
p1192
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1193
sS'cpp_type'
p1194
S'bool'
p1195
sS'default'
p1196
S'0'
p1197
sS'name'
p1198
S'use_displaced_mesh'
p1199
sS'required'
p1200
I00
sS'group_name'
p1201
S'Advanced'
p1202
sa(dp1203
S'description'
p1204
S'Array of coupled variables\n'
p1205
sS'cpp_type'
p1206
S'std::vector<VariableName>'
p1207
sS'default'
p1208
g3
sS'name'
p1209
S'v'
p1210
sS'required'
p1211
I00
sS'group_name'
p1212
Nsa(dp1213
S'description'
p1214
S'base for variable names\n'
p1215
sS'cpp_type'
p1216
S'std::string'
p1217
sS'default'
p1218
g3
sS'name'
p1219
S'var_name_base'
p1220
sS'required'
p1221
I01
sS'group_name'
p1222
Nsa(dp1223
S'description'
p1224
S'The name of the variable that this object applies to\n'
p1225
sS'cpp_type'
p1226
S'AuxVariableName'
p1227
sS'default'
p1228
g3
sS'name'
p1229
S'variable'
p1230
sS'required'
p1231
I01
sS'group_name'
p1232
NsasS'name'
p1233
S'/AuxBCs/BndsCalcAux'
p1234
sa(dp1235
S'description'
p1236
g3
sS'type'
p1237
NsS'subblocks'
p1238
NsS'parameters'
p1239
(lp1240
(dp1241
S'description'
p1242
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p1243
sS'cpp_type'
p1244
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1245
sS'default'
p1246
g3
sS'name'
p1247
S'block'
p1248
sS'required'
p1249
I00
sS'group_name'
p1250
Nsa(dp1251
S'description'
p1252
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1253
sS'cpp_type'
p1254
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1255
sS'default'
p1256
g3
sS'name'
p1257
S'boundary'
p1258
sS'required'
p1259
I00
sS'group_name'
p1260
Nsa(dp1261
S'description'
p1262
S'The variable to be bounded\n'
p1263
sS'cpp_type'
p1264
S'std::vector<VariableName>'
p1265
sS'default'
p1266
g3
sS'name'
p1267
S'bounded_variable'
p1268
sS'required'
p1269
I01
sS'group_name'
p1270
Nsa(dp1271
S'name'
p1272
S'execute_on'
p1273
sS'cpp_type'
p1274
S'MooseEnum'
p1275
sS'default'
p1276
S'residual'
p1277
sS'description'
p1278
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p1279
sS'required'
p1280
I00
sS'options'
p1281
S'initial residual jacobian timestep timestep_begin custom'
p1282
sS'group_name'
p1283
Nsa(dp1284
S'description'
p1285
S'The lower bound for the variable\n'
p1286
sS'cpp_type'
p1287
S'double'
p1288
sS'default'
p1289
g3
sS'name'
p1290
S'lower'
p1291
sS'required'
p1292
I00
sS'group_name'
p1293
Nsa(dp1294
S'description'
p1295
S'The seed for the master random number generator\n'
p1296
sS'cpp_type'
p1297
S'unsigned int'
p1298
sS'default'
p1299
S'0'
p1300
sS'name'
p1301
S'seed'
p1302
sS'required'
p1303
I00
sS'group_name'
p1304
S'Advanced'
p1305
sa(dp1306
S'description'
p1307
g3
sS'cpp_type'
p1308
S'std::string'
p1309
sS'default'
p1310
S'BoundsAux'
p1311
sS'name'
p1312
S'type'
p1313
sS'required'
p1314
I00
sS'group_name'
p1315
Nsa(dp1316
S'description'
p1317
S'The upper bound for the variable\n'
p1318
sS'cpp_type'
p1319
S'double'
p1320
sS'default'
p1321
g3
sS'name'
p1322
S'upper'
p1323
sS'required'
p1324
I00
sS'group_name'
p1325
Nsa(dp1326
S'description'
p1327
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1328
sS'cpp_type'
p1329
S'bool'
p1330
sS'default'
p1331
S'0'
p1332
sS'name'
p1333
S'use_displaced_mesh'
p1334
sS'required'
p1335
I00
sS'group_name'
p1336
S'Advanced'
p1337
sa(dp1338
S'description'
p1339
S'The name of the variable that this object applies to\n'
p1340
sS'cpp_type'
p1341
S'AuxVariableName'
p1342
sS'default'
p1343
g3
sS'name'
p1344
S'variable'
p1345
sS'required'
p1346
I01
sS'group_name'
p1347
NsasS'name'
p1348
S'/AuxBCs/BoundsAux'
p1349
sa(dp1350
S'description'
p1351
g3
sS'type'
p1352
NsS'subblocks'
p1353
NsS'parameters'
p1354
(lp1355
(dp1356
S'description'
p1357
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p1358
sS'cpp_type'
p1359
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1360
sS'default'
p1361
g3
sS'name'
p1362
S'block'
p1363
sS'required'
p1364
I00
sS'group_name'
p1365
Nsa(dp1366
S'description'
p1367
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1368
sS'cpp_type'
p1369
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1370
sS'default'
p1371
g3
sS'name'
p1372
S'boundary'
p1373
sS'required'
p1374
I00
sS'group_name'
p1375
Nsa(dp1376
S'name'
p1377
S'execute_on'
p1378
sS'cpp_type'
p1379
S'MooseEnum'
p1380
sS'default'
p1381
S'residual'
p1382
sS'description'
p1383
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p1384
sS'required'
p1385
I00
sS'options'
p1386
S'initial residual jacobian timestep timestep_begin custom'
p1387
sS'group_name'
p1388
Nsa(dp1389
S'description'
p1390
S'The seed for the master random number generator\n'
p1391
sS'cpp_type'
p1392
S'unsigned int'
p1393
sS'default'
p1394
S'0'
p1395
sS'name'
p1396
S'seed'
p1397
sS'required'
p1398
I00
sS'group_name'
p1399
S'Advanced'
p1400
sa(dp1401
S'description'
p1402
g3
sS'cpp_type'
p1403
S'std::string'
p1404
sS'default'
p1405
S'ConstantAux'
p1406
sS'name'
p1407
S'type'
p1408
sS'required'
p1409
I00
sS'group_name'
p1410
Nsa(dp1411
S'description'
p1412
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1413
sS'cpp_type'
p1414
S'bool'
p1415
sS'default'
p1416
S'0'
p1417
sS'name'
p1418
S'use_displaced_mesh'
p1419
sS'required'
p1420
I00
sS'group_name'
p1421
S'Advanced'
p1422
sa(dp1423
S'description'
p1424
S'Some constant value that can be read from the input file\n'
p1425
sS'cpp_type'
p1426
S'double'
p1427
sS'default'
p1428
S'0'
p1429
sS'name'
p1430
S'value'
p1431
sS'required'
p1432
I00
sS'group_name'
p1433
Nsa(dp1434
S'description'
p1435
S'The name of the variable that this object applies to\n'
p1436
sS'cpp_type'
p1437
S'AuxVariableName'
p1438
sS'default'
p1439
g3
sS'name'
p1440
S'variable'
p1441
sS'required'
p1442
I01
sS'group_name'
p1443
NsasS'name'
p1444
S'/AuxBCs/ConstantAux'
p1445
sa(dp1446
S'description'
p1447
g3
sS'type'
p1448
NsS'subblocks'
p1449
NsS'parameters'
p1450
(lp1451
(dp1452
S'description'
p1453
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p1454
sS'cpp_type'
p1455
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1456
sS'default'
p1457
g3
sS'name'
p1458
S'block'
p1459
sS'required'
p1460
I00
sS'group_name'
p1461
Nsa(dp1462
S'description'
p1463
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1464
sS'cpp_type'
p1465
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1466
sS'default'
p1467
g3
sS'name'
p1468
S'boundary'
p1469
sS'required'
p1470
I00
sS'group_name'
p1471
Nsa(dp1472
S'description'
p1473
S'The variable that is being debugged.\n'
p1474
sS'cpp_type'
p1475
S'NonlinearVariableName'
p1476
sS'default'
p1477
g3
sS'name'
p1478
S'debug_variable'
p1479
sS'required'
p1480
I01
sS'group_name'
p1481
Nsa(dp1482
S'name'
p1483
S'execute_on'
p1484
sS'cpp_type'
p1485
S'MooseEnum'
p1486
sS'default'
p1487
S'residual'
p1488
sS'description'
p1489
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p1490
sS'required'
p1491
I00
sS'options'
p1492
S'initial residual jacobian timestep timestep_begin custom'
p1493
sS'group_name'
p1494
Nsa(dp1495
S'description'
p1496
S'The seed for the master random number generator\n'
p1497
sS'cpp_type'
p1498
S'unsigned int'
p1499
sS'default'
p1500
S'0'
p1501
sS'name'
p1502
S'seed'
p1503
sS'required'
p1504
I00
sS'group_name'
p1505
S'Advanced'
p1506
sa(dp1507
S'description'
p1508
g3
sS'cpp_type'
p1509
S'std::string'
p1510
sS'default'
p1511
S'DebugResidualAux'
p1512
sS'name'
p1513
S'type'
p1514
sS'required'
p1515
I00
sS'group_name'
p1516
Nsa(dp1517
S'description'
p1518
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1519
sS'cpp_type'
p1520
S'bool'
p1521
sS'default'
p1522
S'0'
p1523
sS'name'
p1524
S'use_displaced_mesh'
p1525
sS'required'
p1526
I00
sS'group_name'
p1527
S'Advanced'
p1528
sa(dp1529
S'description'
p1530
S'The name of the variable that this object applies to\n'
p1531
sS'cpp_type'
p1532
S'AuxVariableName'
p1533
sS'default'
p1534
g3
sS'name'
p1535
S'variable'
p1536
sS'required'
p1537
I01
sS'group_name'
p1538
NsasS'name'
p1539
S'/AuxBCs/DebugResidualAux'
p1540
sa(dp1541
S'description'
p1542
g3
sS'type'
p1543
NsS'subblocks'
p1544
NsS'parameters'
p1545
(lp1546
(dp1547
S'description'
p1548
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p1549
sS'cpp_type'
p1550
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1551
sS'default'
p1552
g3
sS'name'
p1553
S'block'
p1554
sS'required'
p1555
I00
sS'group_name'
p1556
Nsa(dp1557
S'description'
p1558
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1559
sS'cpp_type'
p1560
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1561
sS'default'
p1562
g3
sS'name'
p1563
S'boundary'
p1564
sS'required'
p1565
I00
sS'group_name'
p1566
Nsa(dp1567
S'name'
p1568
S'execute_on'
p1569
sS'cpp_type'
p1570
S'MooseEnum'
p1571
sS'default'
p1572
S'residual'
p1573
sS'description'
p1574
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p1575
sS'required'
p1576
I00
sS'options'
p1577
S'initial residual jacobian timestep timestep_begin custom'
p1578
sS'group_name'
p1579
Nsa(dp1580
S'description'
p1581
S'The function to use as the value\n'
p1582
sS'cpp_type'
p1583
S'FunctionName'
p1584
sS'default'
p1585
g3
sS'name'
p1586
S'function'
p1587
sS'required'
p1588
I01
sS'group_name'
p1589
Nsa(dp1590
S'description'
p1591
S'The seed for the master random number generator\n'
p1592
sS'cpp_type'
p1593
S'unsigned int'
p1594
sS'default'
p1595
S'0'
p1596
sS'name'
p1597
S'seed'
p1598
sS'required'
p1599
I00
sS'group_name'
p1600
S'Advanced'
p1601
sa(dp1602
S'description'
p1603
g3
sS'cpp_type'
p1604
S'std::string'
p1605
sS'default'
p1606
S'FunctionAux'
p1607
sS'name'
p1608
S'type'
p1609
sS'required'
p1610
I00
sS'group_name'
p1611
Nsa(dp1612
S'description'
p1613
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1614
sS'cpp_type'
p1615
S'bool'
p1616
sS'default'
p1617
S'0'
p1618
sS'name'
p1619
S'use_displaced_mesh'
p1620
sS'required'
p1621
I00
sS'group_name'
p1622
S'Advanced'
p1623
sa(dp1624
S'description'
p1625
S'The name of the variable that this object applies to\n'
p1626
sS'cpp_type'
p1627
S'AuxVariableName'
p1628
sS'default'
p1629
g3
sS'name'
p1630
S'variable'
p1631
sS'required'
p1632
I01
sS'group_name'
p1633
NsasS'name'
p1634
S'/AuxBCs/FunctionAux'
p1635
sa(dp1636
S'description'
p1637
g3
sS'type'
p1638
NsS'subblocks'
p1639
NsS'parameters'
p1640
(lp1641
(dp1642
S'description'
p1643
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p1644
sS'cpp_type'
p1645
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1646
sS'default'
p1647
g3
sS'name'
p1648
S'block'
p1649
sS'required'
p1650
I00
sS'group_name'
p1651
Nsa(dp1652
S'description'
p1653
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1654
sS'cpp_type'
p1655
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1656
sS'default'
p1657
g3
sS'name'
p1658
S'boundary'
p1659
sS'required'
p1660
I00
sS'group_name'
p1661
Nsa(dp1662
S'name'
p1663
S'execute_on'
p1664
sS'cpp_type'
p1665
S'MooseEnum'
p1666
sS'default'
p1667
S'residual'
p1668
sS'description'
p1669
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p1670
sS'required'
p1671
I00
sS'options'
p1672
S'initial residual jacobian timestep timestep_begin custom'
p1673
sS'group_name'
p1674
Nsa(dp1675
S'description'
p1676
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p1677
sS'cpp_type'
p1678
S'double'
p1679
sS'default'
p1680
g3
sS'name'
p1681
S'normal_smoothing_distance'
p1682
sS'required'
p1683
I00
sS'group_name'
p1684
Nsa(dp1685
S'description'
p1686
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p1687
sS'cpp_type'
p1688
S'std::string'
p1689
sS'default'
p1690
g3
sS'name'
p1691
S'normal_smoothing_method'
p1692
sS'required'
p1693
I00
sS'group_name'
p1694
Nsa(dp1695
S'name'
p1696
S'order'
p1697
sS'cpp_type'
p1698
S'MooseEnum'
p1699
sS'default'
p1700
S'FIRST'
p1701
sS'description'
p1702
S'The finite element order\n'
p1703
sS'required'
p1704
I00
sS'options'
p1705
S'FIRST SECOND THIRD FOURTH'
p1706
sS'group_name'
p1707
Nsa(dp1708
S'description'
p1709
S'The boundary on the other side of a gap.\n'
p1710
sS'cpp_type'
p1711
S'BoundaryName'
p1712
sS'default'
p1713
g3
sS'name'
p1714
S'paired_boundary'
p1715
sS'required'
p1716
I01
sS'group_name'
p1717
Nsa(dp1718
S'description'
p1719
S'The variable to get the value of.\n'
p1720
sS'cpp_type'
p1721
S'VariableName'
p1722
sS'default'
p1723
g3
sS'name'
p1724
S'paired_variable'
p1725
sS'required'
p1726
I01
sS'group_name'
p1727
Nsa(dp1728
S'description'
p1729
S'The seed for the master random number generator\n'
p1730
sS'cpp_type'
p1731
S'unsigned int'
p1732
sS'default'
p1733
S'0'
p1734
sS'name'
p1735
S'seed'
p1736
sS'required'
p1737
I00
sS'group_name'
p1738
S'Advanced'
p1739
sa(dp1740
S'description'
p1741
S'Tangential distance to extend edges of contact surfaces\n'
p1742
sS'cpp_type'
p1743
S'double'
p1744
sS'default'
p1745
g3
sS'name'
p1746
S'tangential_tolerance'
p1747
sS'required'
p1748
I00
sS'group_name'
p1749
Nsa(dp1750
S'description'
p1751
g3
sS'cpp_type'
p1752
S'std::string'
p1753
sS'default'
p1754
S'GapValueAux'
p1755
sS'name'
p1756
S'type'
p1757
sS'required'
p1758
I00
sS'group_name'
p1759
Nsa(dp1760
S'description'
p1761
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1762
sS'cpp_type'
p1763
S'bool'
p1764
sS'default'
p1765
S'1'
p1766
sS'name'
p1767
S'use_displaced_mesh'
p1768
sS'required'
p1769
I00
sS'group_name'
p1770
S'Advanced'
p1771
sa(dp1772
S'description'
p1773
S'The name of the variable that this object applies to\n'
p1774
sS'cpp_type'
p1775
S'AuxVariableName'
p1776
sS'default'
p1777
g3
sS'name'
p1778
S'variable'
p1779
sS'required'
p1780
I01
sS'group_name'
p1781
Nsa(dp1782
S'description'
p1783
S'Whether to output warning messages concerning nodes not being found\n'
p1784
sS'cpp_type'
p1785
S'bool'
p1786
sS'default'
p1787
S'0'
p1788
sS'name'
p1789
S'warnings'
p1790
sS'required'
p1791
I00
sS'group_name'
p1792
NsasS'name'
p1793
S'/AuxBCs/GapValueAux'
p1794
sa(dp1795
S'description'
p1796
g3
sS'type'
p1797
NsS'subblocks'
p1798
NsS'parameters'
p1799
(lp1800
(dp1801
S'description'
p1802
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p1803
sS'cpp_type'
p1804
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1805
sS'default'
p1806
g3
sS'name'
p1807
S'block'
p1808
sS'required'
p1809
I00
sS'group_name'
p1810
Nsa(dp1811
S'description'
p1812
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1813
sS'cpp_type'
p1814
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1815
sS'default'
p1816
g3
sS'name'
p1817
S'boundary'
p1818
sS'required'
p1819
I00
sS'group_name'
p1820
Nsa(dp1821
S'name'
p1822
S'execute_on'
p1823
sS'cpp_type'
p1824
S'MooseEnum'
p1825
sS'default'
p1826
S'residual'
p1827
sS'description'
p1828
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p1829
sS'required'
p1830
I00
sS'options'
p1831
S'initial residual jacobian timestep timestep_begin custom'
p1832
sS'group_name'
p1833
Nsa(dp1834
S'description'
p1835
S'The factor by which to multiply your material property for visualization\n'
p1836
sS'cpp_type'
p1837
S'double'
p1838
sS'default'
p1839
S'1'
p1840
sS'name'
p1841
S'factor'
p1842
sS'required'
p1843
I00
sS'group_name'
p1844
Nsa(dp1845
S'description'
p1846
S'The offset to add to your material property for visualization\n'
p1847
sS'cpp_type'
p1848
S'double'
p1849
sS'default'
p1850
S'0'
p1851
sS'name'
p1852
S'offset'
p1853
sS'required'
p1854
I00
sS'group_name'
p1855
Nsa(dp1856
S'description'
p1857
S'The scalar material property name\n'
p1858
sS'cpp_type'
p1859
S'std::string'
p1860
sS'default'
p1861
g3
sS'name'
p1862
S'property'
p1863
sS'required'
p1864
I01
sS'group_name'
p1865
Nsa(dp1866
S'description'
p1867
S'The seed for the master random number generator\n'
p1868
sS'cpp_type'
p1869
S'unsigned int'
p1870
sS'default'
p1871
S'0'
p1872
sS'name'
p1873
S'seed'
p1874
sS'required'
p1875
I00
sS'group_name'
p1876
S'Advanced'
p1877
sa(dp1878
S'description'
p1879
g3
sS'cpp_type'
p1880
S'std::string'
p1881
sS'default'
p1882
S'MaterialRealAux'
p1883
sS'name'
p1884
S'type'
p1885
sS'required'
p1886
I00
sS'group_name'
p1887
Nsa(dp1888
S'description'
p1889
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1890
sS'cpp_type'
p1891
S'bool'
p1892
sS'default'
p1893
S'0'
p1894
sS'name'
p1895
S'use_displaced_mesh'
p1896
sS'required'
p1897
I00
sS'group_name'
p1898
S'Advanced'
p1899
sa(dp1900
S'description'
p1901
S'The name of the variable that this object applies to\n'
p1902
sS'cpp_type'
p1903
S'AuxVariableName'
p1904
sS'default'
p1905
g3
sS'name'
p1906
S'variable'
p1907
sS'required'
p1908
I01
sS'group_name'
p1909
NsasS'name'
p1910
S'/AuxBCs/MaterialRealAux'
p1911
sa(dp1912
S'description'
p1913
g3
sS'type'
p1914
NsS'subblocks'
p1915
NsS'parameters'
p1916
(lp1917
(dp1918
S'description'
p1919
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p1920
sS'cpp_type'
p1921
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p1922
sS'default'
p1923
g3
sS'name'
p1924
S'block'
p1925
sS'required'
p1926
I00
sS'group_name'
p1927
Nsa(dp1928
S'description'
p1929
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1930
sS'cpp_type'
p1931
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p1932
sS'default'
p1933
g3
sS'name'
p1934
S'boundary'
p1935
sS'required'
p1936
I00
sS'group_name'
p1937
Nsa(dp1938
S'name'
p1939
S'execute_on'
p1940
sS'cpp_type'
p1941
S'MooseEnum'
p1942
sS'default'
p1943
S'residual'
p1944
sS'description'
p1945
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p1946
sS'required'
p1947
I00
sS'options'
p1948
S'initial residual jacobian timestep timestep_begin custom'
p1949
sS'group_name'
p1950
Nsa(dp1951
S'description'
p1952
S'The boundary to find the distance to.\n'
p1953
sS'cpp_type'
p1954
S'BoundaryName'
p1955
sS'default'
p1956
g3
sS'name'
p1957
S'paired_boundary'
p1958
sS'required'
p1959
I01
sS'group_name'
p1960
Nsa(dp1961
S'description'
p1962
S'The seed for the master random number generator\n'
p1963
sS'cpp_type'
p1964
S'unsigned int'
p1965
sS'default'
p1966
S'0'
p1967
sS'name'
p1968
S'seed'
p1969
sS'required'
p1970
I00
sS'group_name'
p1971
S'Advanced'
p1972
sa(dp1973
S'description'
p1974
g3
sS'cpp_type'
p1975
S'std::string'
p1976
sS'default'
p1977
S'NearestNodeDistanceAux'
p1978
sS'name'
p1979
S'type'
p1980
sS'required'
p1981
I00
sS'group_name'
p1982
Nsa(dp1983
S'description'
p1984
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1985
sS'cpp_type'
p1986
S'bool'
p1987
sS'default'
p1988
S'1'
p1989
sS'name'
p1990
S'use_displaced_mesh'
p1991
sS'required'
p1992
I00
sS'group_name'
p1993
S'Advanced'
p1994
sa(dp1995
S'description'
p1996
S'The name of the variable that this object applies to\n'
p1997
sS'cpp_type'
p1998
S'AuxVariableName'
p1999
sS'default'
p2000
g3
sS'name'
p2001
S'variable'
p2002
sS'required'
p2003
I01
sS'group_name'
p2004
NsasS'name'
p2005
S'/AuxBCs/NearestNodeDistanceAux'
p2006
sa(dp2007
S'description'
p2008
g3
sS'type'
p2009
NsS'subblocks'
p2010
NsS'parameters'
p2011
(lp2012
(dp2013
S'description'
p2014
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p2015
sS'cpp_type'
p2016
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2017
sS'default'
p2018
g3
sS'name'
p2019
S'block'
p2020
sS'required'
p2021
I00
sS'group_name'
p2022
Nsa(dp2023
S'description'
p2024
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2025
sS'cpp_type'
p2026
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2027
sS'default'
p2028
g3
sS'name'
p2029
S'boundary'
p2030
sS'required'
p2031
I00
sS'group_name'
p2032
Nsa(dp2033
S'name'
p2034
S'execute_on'
p2035
sS'cpp_type'
p2036
S'MooseEnum'
p2037
sS'default'
p2038
S'residual'
p2039
sS'description'
p2040
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p2041
sS'required'
p2042
I00
sS'options'
p2043
S'initial residual jacobian timestep timestep_begin custom'
p2044
sS'group_name'
p2045
Nsa(dp2046
S'description'
p2047
S'The boundary to get the value from.\n'
p2048
sS'cpp_type'
p2049
S'BoundaryName'
p2050
sS'default'
p2051
g3
sS'name'
p2052
S'paired_boundary'
p2053
sS'required'
p2054
I01
sS'group_name'
p2055
Nsa(dp2056
S'description'
p2057
S'The variable to get the value of.\n'
p2058
sS'cpp_type'
p2059
S'std::vector<VariableName>'
p2060
sS'default'
p2061
g3
sS'name'
p2062
S'paired_variable'
p2063
sS'required'
p2064
I01
sS'group_name'
p2065
Nsa(dp2066
S'description'
p2067
S'The seed for the master random number generator\n'
p2068
sS'cpp_type'
p2069
S'unsigned int'
p2070
sS'default'
p2071
S'0'
p2072
sS'name'
p2073
S'seed'
p2074
sS'required'
p2075
I00
sS'group_name'
p2076
S'Advanced'
p2077
sa(dp2078
S'description'
p2079
g3
sS'cpp_type'
p2080
S'std::string'
p2081
sS'default'
p2082
S'NearestNodeValueAux'
p2083
sS'name'
p2084
S'type'
p2085
sS'required'
p2086
I00
sS'group_name'
p2087
Nsa(dp2088
S'description'
p2089
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2090
sS'cpp_type'
p2091
S'bool'
p2092
sS'default'
p2093
S'1'
p2094
sS'name'
p2095
S'use_displaced_mesh'
p2096
sS'required'
p2097
I00
sS'group_name'
p2098
S'Advanced'
p2099
sa(dp2100
S'description'
p2101
S'The name of the variable that this object applies to\n'
p2102
sS'cpp_type'
p2103
S'AuxVariableName'
p2104
sS'default'
p2105
g3
sS'name'
p2106
S'variable'
p2107
sS'required'
p2108
I01
sS'group_name'
p2109
NsasS'name'
p2110
S'/AuxBCs/NearestNodeValueAux'
p2111
sa(dp2112
S'description'
p2113
g3
sS'type'
p2114
NsS'subblocks'
p2115
NsS'parameters'
p2116
(lp2117
(dp2118
S'description'
p2119
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p2120
sS'cpp_type'
p2121
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2122
sS'default'
p2123
g3
sS'name'
p2124
S'block'
p2125
sS'required'
p2126
I00
sS'group_name'
p2127
Nsa(dp2128
S'description'
p2129
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2130
sS'cpp_type'
p2131
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2132
sS'default'
p2133
g3
sS'name'
p2134
S'boundary'
p2135
sS'required'
p2136
I00
sS'group_name'
p2137
Nsa(dp2138
S'description'
p2139
S'The NodalFloodCount UserObject to get values from.\n'
p2140
sS'cpp_type'
p2141
S'UserObjectName'
p2142
sS'default'
p2143
g3
sS'name'
p2144
S'bubble_object'
p2145
sS'required'
p2146
I01
sS'group_name'
p2147
Nsa(dp2148
S'name'
p2149
S'execute_on'
p2150
sS'cpp_type'
p2151
S'MooseEnum'
p2152
sS'default'
p2153
S'residual'
p2154
sS'description'
p2155
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p2156
sS'required'
p2157
I00
sS'options'
p2158
S'initial residual jacobian timestep timestep_begin custom'
p2159
sS'group_name'
p2160
Nsa(dp2161
S'name'
p2162
S'field_display'
p2163
sS'cpp_type'
p2164
S'MooseEnum'
p2165
sS'default'
p2166
S'UNIQUE_REGION'
p2167
sS'description'
p2168
S'Determines how the auxilary field should be colored. (UNIQUE_REGION and VARIABLE_COLORING are nodal, CENTROID is elemental, default: UNIQUE_REGION)\n'
p2169
sS'required'
p2170
I00
sS'options'
p2171
S'UNIQUE_REGION VARIABLE_COLORING ACTIVE_BOUNDS CENTROID'
p2172
sS'group_name'
p2173
Nsa(dp2174
S'description'
p2175
S'The index of which map to retrieve values from when using NodalFloodCount with multiple maps.\n'
p2176
sS'cpp_type'
p2177
S'unsigned int'
p2178
sS'default'
p2179
S'0'
p2180
sS'name'
p2181
S'map_index'
p2182
sS'required'
p2183
I00
sS'group_name'
p2184
Nsa(dp2185
S'description'
p2186
S'The seed for the master random number generator\n'
p2187
sS'cpp_type'
p2188
S'unsigned int'
p2189
sS'default'
p2190
S'0'
p2191
sS'name'
p2192
S'seed'
p2193
sS'required'
p2194
I00
sS'group_name'
p2195
S'Advanced'
p2196
sa(dp2197
S'description'
p2198
g3
sS'cpp_type'
p2199
S'std::string'
p2200
sS'default'
p2201
S'NodalFloodCountAux'
p2202
sS'name'
p2203
S'type'
p2204
sS'required'
p2205
I00
sS'group_name'
p2206
Nsa(dp2207
S'description'
p2208
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2209
sS'cpp_type'
p2210
S'bool'
p2211
sS'default'
p2212
S'0'
p2213
sS'name'
p2214
S'use_displaced_mesh'
p2215
sS'required'
p2216
I00
sS'group_name'
p2217
S'Advanced'
p2218
sa(dp2219
S'description'
p2220
S'The name of the variable that this object applies to\n'
p2221
sS'cpp_type'
p2222
S'AuxVariableName'
p2223
sS'default'
p2224
g3
sS'name'
p2225
S'variable'
p2226
sS'required'
p2227
I01
sS'group_name'
p2228
NsasS'name'
p2229
S'/AuxBCs/NodalFloodCountAux'
p2230
sa(dp2231
S'description'
p2232
g3
sS'type'
p2233
NsS'subblocks'
p2234
NsS'parameters'
p2235
(lp2236
(dp2237
S'description'
p2238
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p2239
sS'cpp_type'
p2240
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2241
sS'default'
p2242
g3
sS'name'
p2243
S'block'
p2244
sS'required'
p2245
I00
sS'group_name'
p2246
Nsa(dp2247
S'description'
p2248
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2249
sS'cpp_type'
p2250
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2251
sS'default'
p2252
g3
sS'name'
p2253
S'boundary'
p2254
sS'required'
p2255
I00
sS'group_name'
p2256
Nsa(dp2257
S'name'
p2258
S'execute_on'
p2259
sS'cpp_type'
p2260
S'MooseEnum'
p2261
sS'default'
p2262
S'residual'
p2263
sS'description'
p2264
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p2265
sS'required'
p2266
I00
sS'options'
p2267
S'initial residual jacobian timestep timestep_begin custom'
p2268
sS'group_name'
p2269
Nsa(dp2270
S'description'
p2271
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p2272
sS'cpp_type'
p2273
S'double'
p2274
sS'default'
p2275
g3
sS'name'
p2276
S'normal_smoothing_distance'
p2277
sS'required'
p2278
I00
sS'group_name'
p2279
Nsa(dp2280
S'description'
p2281
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p2282
sS'cpp_type'
p2283
S'std::string'
p2284
sS'default'
p2285
g3
sS'name'
p2286
S'normal_smoothing_method'
p2287
sS'required'
p2288
I00
sS'group_name'
p2289
Nsa(dp2290
S'name'
p2291
S'order'
p2292
sS'cpp_type'
p2293
S'MooseEnum'
p2294
sS'default'
p2295
S'FIRST'
p2296
sS'description'
p2297
S'The finite element order\n'
p2298
sS'required'
p2299
I00
sS'options'
p2300
S'FIRST SECOND THIRD FOURTH'
p2301
sS'group_name'
p2302
Nsa(dp2303
S'description'
p2304
S'The boundary to be penetrated\n'
p2305
sS'cpp_type'
p2306
S'BoundaryName'
p2307
sS'default'
p2308
g3
sS'name'
p2309
S'paired_boundary'
p2310
sS'required'
p2311
I01
sS'group_name'
p2312
Nsa(dp2313
S'description'
p2314
S'The quantity to recover from the available penetration information: distance(default), tangential_distance, normal_x, normal_y, normal_z, closest_point_x, closest_point_y, closest_point_z, element_id, side, incremental_slip_x, incremental_slip_y, incremental_slip_z, incremental_slip_magnitude, accumulated_slip, force_x, force_y, force_z, normal_force_magnitude, normal_force_x, normal_force_y, normal_force_z, tangential_force_magnitude, tangential_force_x, tangential_force_y, tangential_force_z, frictional_energy, mechanical_status\n'
p2315
sS'cpp_type'
p2316
S'std::string'
p2317
sS'default'
p2318
S'distance'
p2319
sS'name'
p2320
S'quantity'
p2321
sS'required'
p2322
I00
sS'group_name'
p2323
Nsa(dp2324
S'description'
p2325
S'The seed for the master random number generator\n'
p2326
sS'cpp_type'
p2327
S'unsigned int'
p2328
sS'default'
p2329
S'0'
p2330
sS'name'
p2331
S'seed'
p2332
sS'required'
p2333
I00
sS'group_name'
p2334
S'Advanced'
p2335
sa(dp2336
S'description'
p2337
S'Tangential distance to extend edges of contact surfaces\n'
p2338
sS'cpp_type'
p2339
S'double'
p2340
sS'default'
p2341
g3
sS'name'
p2342
S'tangential_tolerance'
p2343
sS'required'
p2344
I00
sS'group_name'
p2345
Nsa(dp2346
S'description'
p2347
g3
sS'cpp_type'
p2348
S'std::string'
p2349
sS'default'
p2350
S'PenetrationAux'
p2351
sS'name'
p2352
S'type'
p2353
sS'required'
p2354
I00
sS'group_name'
p2355
Nsa(dp2356
S'description'
p2357
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2358
sS'cpp_type'
p2359
S'bool'
p2360
sS'default'
p2361
S'1'
p2362
sS'name'
p2363
S'use_displaced_mesh'
p2364
sS'required'
p2365
I00
sS'group_name'
p2366
S'Advanced'
p2367
sa(dp2368
S'description'
p2369
S'The name of the variable that this object applies to\n'
p2370
sS'cpp_type'
p2371
S'AuxVariableName'
p2372
sS'default'
p2373
g3
sS'name'
p2374
S'variable'
p2375
sS'required'
p2376
I01
sS'group_name'
p2377
NsasS'name'
p2378
S'/AuxBCs/PenetrationAux'
p2379
sa(dp2380
S'description'
p2381
g3
sS'type'
p2382
NsS'subblocks'
p2383
NsS'parameters'
p2384
(lp2385
(dp2386
S'description'
p2387
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p2388
sS'cpp_type'
p2389
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2390
sS'default'
p2391
g3
sS'name'
p2392
S'block'
p2393
sS'required'
p2394
I00
sS'group_name'
p2395
Nsa(dp2396
S'description'
p2397
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2398
sS'cpp_type'
p2399
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2400
sS'default'
p2401
g3
sS'name'
p2402
S'boundary'
p2403
sS'required'
p2404
I00
sS'group_name'
p2405
Nsa(dp2406
S'name'
p2407
S'execute_on'
p2408
sS'cpp_type'
p2409
S'MooseEnum'
p2410
sS'default'
p2411
S'residual'
p2412
sS'description'
p2413
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p2414
sS'required'
p2415
I00
sS'options'
p2416
S'initial residual jacobian timestep timestep_begin custom'
p2417
sS'group_name'
p2418
Nsa(dp2419
S'description'
p2420
S'The seed for the master random number generator\n'
p2421
sS'cpp_type'
p2422
S'unsigned int'
p2423
sS'default'
p2424
S'0'
p2425
sS'name'
p2426
S'seed'
p2427
sS'required'
p2428
I00
sS'group_name'
p2429
S'Advanced'
p2430
sa(dp2431
S'description'
p2432
g3
sS'cpp_type'
p2433
S'std::string'
p2434
sS'default'
p2435
S'ProcessorIDAux'
p2436
sS'name'
p2437
S'type'
p2438
sS'required'
p2439
I00
sS'group_name'
p2440
Nsa(dp2441
S'description'
p2442
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2443
sS'cpp_type'
p2444
S'bool'
p2445
sS'default'
p2446
S'0'
p2447
sS'name'
p2448
S'use_displaced_mesh'
p2449
sS'required'
p2450
I00
sS'group_name'
p2451
S'Advanced'
p2452
sa(dp2453
S'description'
p2454
S'The name of the variable that this object applies to\n'
p2455
sS'cpp_type'
p2456
S'AuxVariableName'
p2457
sS'default'
p2458
g3
sS'name'
p2459
S'variable'
p2460
sS'required'
p2461
I01
sS'group_name'
p2462
NsasS'name'
p2463
S'/AuxBCs/ProcessorIDAux'
p2464
sa(dp2465
S'description'
p2466
g3
sS'type'
p2467
NsS'subblocks'
p2468
NsS'parameters'
p2469
(lp2470
(dp2471
S'description'
p2472
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p2473
sS'cpp_type'
p2474
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2475
sS'default'
p2476
g3
sS'name'
p2477
S'block'
p2478
sS'required'
p2479
I00
sS'group_name'
p2480
Nsa(dp2481
S'description'
p2482
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2483
sS'cpp_type'
p2484
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2485
sS'default'
p2486
g3
sS'name'
p2487
S'boundary'
p2488
sS'required'
p2489
I00
sS'group_name'
p2490
Nsa(dp2491
S'description'
p2492
S'The downstairs of the quotient variable\n'
p2493
sS'cpp_type'
p2494
S'std::vector<VariableName>'
p2495
sS'default'
p2496
g3
sS'name'
p2497
S'denominator'
p2498
sS'required'
p2499
I00
sS'group_name'
p2500
Nsa(dp2501
S'name'
p2502
S'execute_on'
p2503
sS'cpp_type'
p2504
S'MooseEnum'
p2505
sS'default'
p2506
S'residual'
p2507
sS'description'
p2508
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p2509
sS'required'
p2510
I00
sS'options'
p2511
S'initial residual jacobian timestep timestep_begin custom'
p2512
sS'group_name'
p2513
Nsa(dp2514
S'description'
p2515
S'The upstairs of the quotient variable\n'
p2516
sS'cpp_type'
p2517
S'std::vector<VariableName>'
p2518
sS'default'
p2519
g3
sS'name'
p2520
S'numerator'
p2521
sS'required'
p2522
I00
sS'group_name'
p2523
Nsa(dp2524
S'description'
p2525
S'The seed for the master random number generator\n'
p2526
sS'cpp_type'
p2527
S'unsigned int'
p2528
sS'default'
p2529
S'0'
p2530
sS'name'
p2531
S'seed'
p2532
sS'required'
p2533
I00
sS'group_name'
p2534
S'Advanced'
p2535
sa(dp2536
S'description'
p2537
g3
sS'cpp_type'
p2538
S'std::string'
p2539
sS'default'
p2540
S'QuotientAux'
p2541
sS'name'
p2542
S'type'
p2543
sS'required'
p2544
I00
sS'group_name'
p2545
Nsa(dp2546
S'description'
p2547
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2548
sS'cpp_type'
p2549
S'bool'
p2550
sS'default'
p2551
S'0'
p2552
sS'name'
p2553
S'use_displaced_mesh'
p2554
sS'required'
p2555
I00
sS'group_name'
p2556
S'Advanced'
p2557
sa(dp2558
S'description'
p2559
S'The name of the variable that this object applies to\n'
p2560
sS'cpp_type'
p2561
S'AuxVariableName'
p2562
sS'default'
p2563
g3
sS'name'
p2564
S'variable'
p2565
sS'required'
p2566
I01
sS'group_name'
p2567
NsasS'name'
p2568
S'/AuxBCs/QuotientAux'
p2569
sa(dp2570
S'description'
p2571
g3
sS'type'
p2572
NsS'subblocks'
p2573
NsS'parameters'
p2574
(lp2575
(dp2576
S'description'
p2577
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p2578
sS'cpp_type'
p2579
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2580
sS'default'
p2581
g3
sS'name'
p2582
S'block'
p2583
sS'required'
p2584
I00
sS'group_name'
p2585
Nsa(dp2586
S'description'
p2587
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2588
sS'cpp_type'
p2589
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2590
sS'default'
p2591
g3
sS'name'
p2592
S'boundary'
p2593
sS'required'
p2594
I00
sS'group_name'
p2595
Nsa(dp2596
S'name'
p2597
S'execute_on'
p2598
sS'cpp_type'
p2599
S'MooseEnum'
p2600
sS'default'
p2601
S'residual'
p2602
sS'description'
p2603
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p2604
sS'required'
p2605
I00
sS'options'
p2606
S'initial residual jacobian timestep timestep_begin custom'
p2607
sS'group_name'
p2608
Nsa(dp2609
S'description'
p2610
S'The seed for the master random number generator\n'
p2611
sS'cpp_type'
p2612
S'unsigned int'
p2613
sS'default'
p2614
S'0'
p2615
sS'name'
p2616
S'seed'
p2617
sS'required'
p2618
I00
sS'group_name'
p2619
S'Advanced'
p2620
sa(dp2621
S'description'
p2622
g3
sS'cpp_type'
p2623
S'std::string'
p2624
sS'default'
p2625
S'SelfAux'
p2626
sS'name'
p2627
S'type'
p2628
sS'required'
p2629
I00
sS'group_name'
p2630
Nsa(dp2631
S'description'
p2632
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2633
sS'cpp_type'
p2634
S'bool'
p2635
sS'default'
p2636
S'0'
p2637
sS'name'
p2638
S'use_displaced_mesh'
p2639
sS'required'
p2640
I00
sS'group_name'
p2641
S'Advanced'
p2642
sa(dp2643
S'description'
p2644
S'The name of the variable that this object applies to\n'
p2645
sS'cpp_type'
p2646
S'AuxVariableName'
p2647
sS'default'
p2648
g3
sS'name'
p2649
S'variable'
p2650
sS'required'
p2651
I01
sS'group_name'
p2652
NsasS'name'
p2653
S'/AuxBCs/SelfAux'
p2654
sa(dp2655
S'description'
p2656
g3
sS'type'
p2657
NsS'subblocks'
p2658
NsS'parameters'
p2659
(lp2660
(dp2661
S'description'
p2662
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p2663
sS'cpp_type'
p2664
S'double'
p2665
sS'default'
p2666
S'0'
p2667
sS'name'
p2668
S'add_factor'
p2669
sS'required'
p2670
I00
sS'group_name'
p2671
Nsa(dp2672
S'description'
p2673
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p2674
sS'cpp_type'
p2675
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2676
sS'default'
p2677
g3
sS'name'
p2678
S'block'
p2679
sS'required'
p2680
I00
sS'group_name'
p2681
Nsa(dp2682
S'description'
p2683
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2684
sS'cpp_type'
p2685
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2686
sS'default'
p2687
g3
sS'name'
p2688
S'boundary'
p2689
sS'required'
p2690
I00
sS'group_name'
p2691
Nsa(dp2692
S'description'
p2693
S'If true the meshes must be the same and then the values are simply copied over.\n'
p2694
sS'cpp_type'
p2695
S'bool'
p2696
sS'default'
p2697
S'0'
p2698
sS'name'
p2699
S'direct'
p2700
sS'required'
p2701
I00
sS'group_name'
p2702
Nsa(dp2703
S'name'
p2704
S'execute_on'
p2705
sS'cpp_type'
p2706
S'MooseEnum'
p2707
sS'default'
p2708
S'residual'
p2709
sS'description'
p2710
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p2711
sS'required'
p2712
I00
sS'options'
p2713
S'initial residual jacobian timestep timestep_begin custom'
p2714
sS'group_name'
p2715
Nsa(dp2716
S'description'
p2717
S'The name of the variable to extract from the file\n'
p2718
sS'cpp_type'
p2719
S'std::string'
p2720
sS'default'
p2721
g3
sS'name'
p2722
S'from_variable'
p2723
sS'required'
p2724
I00
sS'group_name'
p2725
Nsa(dp2726
S'description'
p2727
S"Scale factor (a)  to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p2728
sS'cpp_type'
p2729
S'double'
p2730
sS'default'
p2731
S'1'
p2732
sS'name'
p2733
S'scale_factor'
p2734
sS'required'
p2735
I00
sS'group_name'
p2736
Nsa(dp2737
S'description'
p2738
S'The seed for the master random number generator\n'
p2739
sS'cpp_type'
p2740
S'unsigned int'
p2741
sS'default'
p2742
S'0'
p2743
sS'name'
p2744
S'seed'
p2745
sS'required'
p2746
I00
sS'group_name'
p2747
S'Advanced'
p2748
sa(dp2749
S'description'
p2750
S'The name of the SolutionUserObject\n'
p2751
sS'cpp_type'
p2752
S'UserObjectName'
p2753
sS'default'
p2754
g3
sS'name'
p2755
S'solution'
p2756
sS'required'
p2757
I01
sS'group_name'
p2758
Nsa(dp2759
S'description'
p2760
g3
sS'cpp_type'
p2761
S'std::string'
p2762
sS'default'
p2763
S'SolutionAux'
p2764
sS'name'
p2765
S'type'
p2766
sS'required'
p2767
I00
sS'group_name'
p2768
Nsa(dp2769
S'description'
p2770
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2771
sS'cpp_type'
p2772
S'bool'
p2773
sS'default'
p2774
S'0'
p2775
sS'name'
p2776
S'use_displaced_mesh'
p2777
sS'required'
p2778
I00
sS'group_name'
p2779
S'Advanced'
p2780
sa(dp2781
S'description'
p2782
S'The name of the variable that this object applies to\n'
p2783
sS'cpp_type'
p2784
S'AuxVariableName'
p2785
sS'default'
p2786
g3
sS'name'
p2787
S'variable'
p2788
sS'required'
p2789
I01
sS'group_name'
p2790
NsasS'name'
p2791
S'/AuxBCs/SolutionAux'
p2792
sa(dp2793
S'description'
p2794
g3
sS'type'
p2795
NsS'subblocks'
p2796
NsS'parameters'
p2797
(lp2798
(dp2799
S'description'
p2800
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p2801
sS'cpp_type'
p2802
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2803
sS'default'
p2804
g3
sS'name'
p2805
S'block'
p2806
sS'required'
p2807
I00
sS'group_name'
p2808
Nsa(dp2809
S'description'
p2810
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2811
sS'cpp_type'
p2812
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2813
sS'default'
p2814
g3
sS'name'
p2815
S'boundary'
p2816
sS'required'
p2817
I00
sS'group_name'
p2818
Nsa(dp2819
S'name'
p2820
S'execute_on'
p2821
sS'cpp_type'
p2822
S'MooseEnum'
p2823
sS'default'
p2824
S'residual'
p2825
sS'description'
p2826
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p2827
sS'required'
p2828
I00
sS'options'
p2829
S'initial residual jacobian timestep timestep_begin custom'
p2830
sS'group_name'
p2831
Nsa(dp2832
S'description'
p2833
S'The seed for the master random number generator\n'
p2834
sS'cpp_type'
p2835
S'unsigned int'
p2836
sS'default'
p2837
S'0'
p2838
sS'name'
p2839
S'seed'
p2840
sS'required'
p2841
I00
sS'group_name'
p2842
S'Advanced'
p2843
sa(dp2844
S'description'
p2845
g3
sS'cpp_type'
p2846
S'std::string'
p2847
sS'default'
p2848
S'SpatialUserObjectAux'
p2849
sS'name'
p2850
S'type'
p2851
sS'required'
p2852
I00
sS'group_name'
p2853
Nsa(dp2854
S'description'
p2855
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2856
sS'cpp_type'
p2857
S'bool'
p2858
sS'default'
p2859
S'0'
p2860
sS'name'
p2861
S'use_displaced_mesh'
p2862
sS'required'
p2863
I00
sS'group_name'
p2864
S'Advanced'
p2865
sa(dp2866
S'description'
p2867
S'The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n'
p2868
sS'cpp_type'
p2869
S'UserObjectName'
p2870
sS'default'
p2871
g3
sS'name'
p2872
S'user_object'
p2873
sS'required'
p2874
I01
sS'group_name'
p2875
Nsa(dp2876
S'description'
p2877
S'The name of the variable that this object applies to\n'
p2878
sS'cpp_type'
p2879
S'AuxVariableName'
p2880
sS'default'
p2881
g3
sS'name'
p2882
S'variable'
p2883
sS'required'
p2884
I01
sS'group_name'
p2885
NsasS'name'
p2886
S'/AuxBCs/SpatialUserObjectAux'
p2887
sa(dp2888
S'description'
p2889
g3
sS'type'
p2890
NsS'subblocks'
p2891
NsS'parameters'
p2892
(lp2893
(dp2894
S'description'
p2895
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p2896
sS'cpp_type'
p2897
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p2898
sS'default'
p2899
g3
sS'name'
p2900
S'block'
p2901
sS'required'
p2902
I00
sS'group_name'
p2903
Nsa(dp2904
S'description'
p2905
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2906
sS'cpp_type'
p2907
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p2908
sS'default'
p2909
g3
sS'name'
p2910
S'boundary'
p2911
sS'required'
p2912
I00
sS'group_name'
p2913
Nsa(dp2914
S'name'
p2915
S'execute_on'
p2916
sS'cpp_type'
p2917
S'MooseEnum'
p2918
sS'default'
p2919
S'residual'
p2920
sS'description'
p2921
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p2922
sS'required'
p2923
I00
sS'options'
p2924
S'initial residual jacobian timestep timestep_begin custom'
p2925
sS'group_name'
p2926
Nsa(dp2927
S'description'
p2928
S'The seed for the master random number generator\n'
p2929
sS'cpp_type'
p2930
S'unsigned int'
p2931
sS'default'
p2932
S'0'
p2933
sS'name'
p2934
S'seed'
p2935
sS'required'
p2936
I00
sS'group_name'
p2937
S'Advanced'
p2938
sa(dp2939
S'description'
p2940
g3
sS'cpp_type'
p2941
S'std::string'
p2942
sS'default'
p2943
S'VectorMagnitudeAux'
p2944
sS'name'
p2945
S'type'
p2946
sS'required'
p2947
I00
sS'group_name'
p2948
Nsa(dp2949
S'description'
p2950
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2951
sS'cpp_type'
p2952
S'bool'
p2953
sS'default'
p2954
S'0'
p2955
sS'name'
p2956
S'use_displaced_mesh'
p2957
sS'required'
p2958
I00
sS'group_name'
p2959
S'Advanced'
p2960
sa(dp2961
S'description'
p2962
S'The name of the variable that this object applies to\n'
p2963
sS'cpp_type'
p2964
S'AuxVariableName'
p2965
sS'default'
p2966
g3
sS'name'
p2967
S'variable'
p2968
sS'required'
p2969
I01
sS'group_name'
p2970
Nsa(dp2971
S'description'
p2972
S'x-component of the vector\n'
p2973
sS'cpp_type'
p2974
S'std::vector<VariableName>'
p2975
sS'default'
p2976
g3
sS'name'
p2977
S'x'
p2978
sS'required'
p2979
I01
sS'group_name'
p2980
Nsa(dp2981
S'description'
p2982
S'y-component of the vector\n'
p2983
sS'cpp_type'
p2984
S'std::vector<VariableName>'
p2985
sS'default'
p2986
g3
sS'name'
p2987
S'y'
p2988
sS'required'
p2989
I00
sS'group_name'
p2990
Nsa(dp2991
S'description'
p2992
S'z-component of the vector\n'
p2993
sS'cpp_type'
p2994
S'std::vector<VariableName>'
p2995
sS'default'
p2996
g3
sS'name'
p2997
S'z'
p2998
sS'required'
p2999
I00
sS'group_name'
p3000
NsasS'name'
p3001
S'/AuxBCs/VectorMagnitudeAux'
p3002
sasS'parameters'
p3003
NsS'name'
p3004
S'/AuxBCs'
p3005
sa(dp3006
S'description'
p3007
g3
sS'type'
p3008
NsS'subblocks'
p3009
(lp3010
(dp3011
S'description'
p3012
g3
sS'type'
p3013
NsS'subblocks'
p3014
NsS'parameters'
p3015
(lp3016
(dp3017
S'description'
p3018
S'A string representing the Moose Object that will be built by this Action\n'
p3019
sS'cpp_type'
p3020
S'std::string'
p3021
sS'default'
p3022
g3
sS'name'
p3023
S'type'
p3024
sS'required'
p3025
I01
sS'group_name'
p3026
NsasS'name'
p3027
S'/AuxKernels/*'
p3028
sa(dp3029
S'description'
p3030
g3
sS'type'
p3031
NsS'subblocks'
p3032
NsS'parameters'
p3033
(lp3034
(dp3035
S'description'
p3036
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p3037
sS'cpp_type'
p3038
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3039
sS'default'
p3040
g3
sS'name'
p3041
S'block'
p3042
sS'required'
p3043
I00
sS'group_name'
p3044
Nsa(dp3045
S'description'
p3046
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3047
sS'cpp_type'
p3048
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3049
sS'default'
p3050
g3
sS'name'
p3051
S'boundary'
p3052
sS'required'
p3053
I00
sS'group_name'
p3054
Nsa(dp3055
S'description'
p3056
S'number of grains\n'
p3057
sS'cpp_type'
p3058
S'unsigned int'
p3059
sS'default'
p3060
g3
sS'name'
p3061
S'crys_num'
p3062
sS'required'
p3063
I01
sS'group_name'
p3064
Nsa(dp3065
S'name'
p3066
S'execute_on'
p3067
sS'cpp_type'
p3068
S'MooseEnum'
p3069
sS'default'
p3070
S'residual'
p3071
sS'description'
p3072
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p3073
sS'required'
p3074
I00
sS'options'
p3075
S'initial residual jacobian timestep timestep_begin custom'
p3076
sS'group_name'
p3077
Nsa(dp3078
S'description'
p3079
S'The seed for the master random number generator\n'
p3080
sS'cpp_type'
p3081
S'unsigned int'
p3082
sS'default'
p3083
S'0'
p3084
sS'name'
p3085
S'seed'
p3086
sS'required'
p3087
I00
sS'group_name'
p3088
S'Advanced'
p3089
sa(dp3090
S'description'
p3091
g3
sS'cpp_type'
p3092
S'std::string'
p3093
sS'default'
p3094
S'BndsCalcAux'
p3095
sS'name'
p3096
S'type'
p3097
sS'required'
p3098
I00
sS'group_name'
p3099
Nsa(dp3100
S'description'
p3101
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3102
sS'cpp_type'
p3103
S'bool'
p3104
sS'default'
p3105
S'0'
p3106
sS'name'
p3107
S'use_displaced_mesh'
p3108
sS'required'
p3109
I00
sS'group_name'
p3110
S'Advanced'
p3111
sa(dp3112
S'description'
p3113
S'Array of coupled variables\n'
p3114
sS'cpp_type'
p3115
S'std::vector<VariableName>'
p3116
sS'default'
p3117
g3
sS'name'
p3118
S'v'
p3119
sS'required'
p3120
I00
sS'group_name'
p3121
Nsa(dp3122
S'description'
p3123
S'base for variable names\n'
p3124
sS'cpp_type'
p3125
S'std::string'
p3126
sS'default'
p3127
g3
sS'name'
p3128
S'var_name_base'
p3129
sS'required'
p3130
I01
sS'group_name'
p3131
Nsa(dp3132
S'description'
p3133
S'The name of the variable that this object applies to\n'
p3134
sS'cpp_type'
p3135
S'AuxVariableName'
p3136
sS'default'
p3137
g3
sS'name'
p3138
S'variable'
p3139
sS'required'
p3140
I01
sS'group_name'
p3141
NsasS'name'
p3142
S'/AuxKernels/BndsCalcAux'
p3143
sa(dp3144
S'description'
p3145
g3
sS'type'
p3146
NsS'subblocks'
p3147
NsS'parameters'
p3148
(lp3149
(dp3150
S'description'
p3151
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p3152
sS'cpp_type'
p3153
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3154
sS'default'
p3155
g3
sS'name'
p3156
S'block'
p3157
sS'required'
p3158
I00
sS'group_name'
p3159
Nsa(dp3160
S'description'
p3161
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3162
sS'cpp_type'
p3163
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3164
sS'default'
p3165
g3
sS'name'
p3166
S'boundary'
p3167
sS'required'
p3168
I00
sS'group_name'
p3169
Nsa(dp3170
S'description'
p3171
S'The variable to be bounded\n'
p3172
sS'cpp_type'
p3173
S'std::vector<VariableName>'
p3174
sS'default'
p3175
g3
sS'name'
p3176
S'bounded_variable'
p3177
sS'required'
p3178
I01
sS'group_name'
p3179
Nsa(dp3180
S'name'
p3181
S'execute_on'
p3182
sS'cpp_type'
p3183
S'MooseEnum'
p3184
sS'default'
p3185
S'residual'
p3186
sS'description'
p3187
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p3188
sS'required'
p3189
I00
sS'options'
p3190
S'initial residual jacobian timestep timestep_begin custom'
p3191
sS'group_name'
p3192
Nsa(dp3193
S'description'
p3194
S'The lower bound for the variable\n'
p3195
sS'cpp_type'
p3196
S'double'
p3197
sS'default'
p3198
g3
sS'name'
p3199
S'lower'
p3200
sS'required'
p3201
I00
sS'group_name'
p3202
Nsa(dp3203
S'description'
p3204
S'The seed for the master random number generator\n'
p3205
sS'cpp_type'
p3206
S'unsigned int'
p3207
sS'default'
p3208
S'0'
p3209
sS'name'
p3210
S'seed'
p3211
sS'required'
p3212
I00
sS'group_name'
p3213
S'Advanced'
p3214
sa(dp3215
S'description'
p3216
g3
sS'cpp_type'
p3217
S'std::string'
p3218
sS'default'
p3219
S'BoundsAux'
p3220
sS'name'
p3221
S'type'
p3222
sS'required'
p3223
I00
sS'group_name'
p3224
Nsa(dp3225
S'description'
p3226
S'The upper bound for the variable\n'
p3227
sS'cpp_type'
p3228
S'double'
p3229
sS'default'
p3230
g3
sS'name'
p3231
S'upper'
p3232
sS'required'
p3233
I00
sS'group_name'
p3234
Nsa(dp3235
S'description'
p3236
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3237
sS'cpp_type'
p3238
S'bool'
p3239
sS'default'
p3240
S'0'
p3241
sS'name'
p3242
S'use_displaced_mesh'
p3243
sS'required'
p3244
I00
sS'group_name'
p3245
S'Advanced'
p3246
sa(dp3247
S'description'
p3248
S'The name of the variable that this object applies to\n'
p3249
sS'cpp_type'
p3250
S'AuxVariableName'
p3251
sS'default'
p3252
g3
sS'name'
p3253
S'variable'
p3254
sS'required'
p3255
I01
sS'group_name'
p3256
NsasS'name'
p3257
S'/AuxKernels/BoundsAux'
p3258
sa(dp3259
S'description'
p3260
g3
sS'type'
p3261
NsS'subblocks'
p3262
NsS'parameters'
p3263
(lp3264
(dp3265
S'description'
p3266
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p3267
sS'cpp_type'
p3268
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3269
sS'default'
p3270
g3
sS'name'
p3271
S'block'
p3272
sS'required'
p3273
I00
sS'group_name'
p3274
Nsa(dp3275
S'description'
p3276
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3277
sS'cpp_type'
p3278
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3279
sS'default'
p3280
g3
sS'name'
p3281
S'boundary'
p3282
sS'required'
p3283
I00
sS'group_name'
p3284
Nsa(dp3285
S'name'
p3286
S'execute_on'
p3287
sS'cpp_type'
p3288
S'MooseEnum'
p3289
sS'default'
p3290
S'residual'
p3291
sS'description'
p3292
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p3293
sS'required'
p3294
I00
sS'options'
p3295
S'initial residual jacobian timestep timestep_begin custom'
p3296
sS'group_name'
p3297
Nsa(dp3298
S'description'
p3299
S'The seed for the master random number generator\n'
p3300
sS'cpp_type'
p3301
S'unsigned int'
p3302
sS'default'
p3303
S'0'
p3304
sS'name'
p3305
S'seed'
p3306
sS'required'
p3307
I00
sS'group_name'
p3308
S'Advanced'
p3309
sa(dp3310
S'description'
p3311
g3
sS'cpp_type'
p3312
S'std::string'
p3313
sS'default'
p3314
S'ConstantAux'
p3315
sS'name'
p3316
S'type'
p3317
sS'required'
p3318
I00
sS'group_name'
p3319
Nsa(dp3320
S'description'
p3321
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3322
sS'cpp_type'
p3323
S'bool'
p3324
sS'default'
p3325
S'0'
p3326
sS'name'
p3327
S'use_displaced_mesh'
p3328
sS'required'
p3329
I00
sS'group_name'
p3330
S'Advanced'
p3331
sa(dp3332
S'description'
p3333
S'Some constant value that can be read from the input file\n'
p3334
sS'cpp_type'
p3335
S'double'
p3336
sS'default'
p3337
S'0'
p3338
sS'name'
p3339
S'value'
p3340
sS'required'
p3341
I00
sS'group_name'
p3342
Nsa(dp3343
S'description'
p3344
S'The name of the variable that this object applies to\n'
p3345
sS'cpp_type'
p3346
S'AuxVariableName'
p3347
sS'default'
p3348
g3
sS'name'
p3349
S'variable'
p3350
sS'required'
p3351
I01
sS'group_name'
p3352
NsasS'name'
p3353
S'/AuxKernels/ConstantAux'
p3354
sa(dp3355
S'description'
p3356
g3
sS'type'
p3357
NsS'subblocks'
p3358
NsS'parameters'
p3359
(lp3360
(dp3361
S'description'
p3362
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p3363
sS'cpp_type'
p3364
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3365
sS'default'
p3366
g3
sS'name'
p3367
S'block'
p3368
sS'required'
p3369
I00
sS'group_name'
p3370
Nsa(dp3371
S'description'
p3372
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3373
sS'cpp_type'
p3374
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3375
sS'default'
p3376
g3
sS'name'
p3377
S'boundary'
p3378
sS'required'
p3379
I00
sS'group_name'
p3380
Nsa(dp3381
S'description'
p3382
S'The variable that is being debugged.\n'
p3383
sS'cpp_type'
p3384
S'NonlinearVariableName'
p3385
sS'default'
p3386
g3
sS'name'
p3387
S'debug_variable'
p3388
sS'required'
p3389
I01
sS'group_name'
p3390
Nsa(dp3391
S'name'
p3392
S'execute_on'
p3393
sS'cpp_type'
p3394
S'MooseEnum'
p3395
sS'default'
p3396
S'residual'
p3397
sS'description'
p3398
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p3399
sS'required'
p3400
I00
sS'options'
p3401
S'initial residual jacobian timestep timestep_begin custom'
p3402
sS'group_name'
p3403
Nsa(dp3404
S'description'
p3405
S'The seed for the master random number generator\n'
p3406
sS'cpp_type'
p3407
S'unsigned int'
p3408
sS'default'
p3409
S'0'
p3410
sS'name'
p3411
S'seed'
p3412
sS'required'
p3413
I00
sS'group_name'
p3414
S'Advanced'
p3415
sa(dp3416
S'description'
p3417
g3
sS'cpp_type'
p3418
S'std::string'
p3419
sS'default'
p3420
S'DebugResidualAux'
p3421
sS'name'
p3422
S'type'
p3423
sS'required'
p3424
I00
sS'group_name'
p3425
Nsa(dp3426
S'description'
p3427
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3428
sS'cpp_type'
p3429
S'bool'
p3430
sS'default'
p3431
S'0'
p3432
sS'name'
p3433
S'use_displaced_mesh'
p3434
sS'required'
p3435
I00
sS'group_name'
p3436
S'Advanced'
p3437
sa(dp3438
S'description'
p3439
S'The name of the variable that this object applies to\n'
p3440
sS'cpp_type'
p3441
S'AuxVariableName'
p3442
sS'default'
p3443
g3
sS'name'
p3444
S'variable'
p3445
sS'required'
p3446
I01
sS'group_name'
p3447
NsasS'name'
p3448
S'/AuxKernels/DebugResidualAux'
p3449
sa(dp3450
S'description'
p3451
g3
sS'type'
p3452
NsS'subblocks'
p3453
NsS'parameters'
p3454
(lp3455
(dp3456
S'description'
p3457
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p3458
sS'cpp_type'
p3459
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3460
sS'default'
p3461
g3
sS'name'
p3462
S'block'
p3463
sS'required'
p3464
I00
sS'group_name'
p3465
Nsa(dp3466
S'description'
p3467
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3468
sS'cpp_type'
p3469
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3470
sS'default'
p3471
g3
sS'name'
p3472
S'boundary'
p3473
sS'required'
p3474
I00
sS'group_name'
p3475
Nsa(dp3476
S'name'
p3477
S'execute_on'
p3478
sS'cpp_type'
p3479
S'MooseEnum'
p3480
sS'default'
p3481
S'residual'
p3482
sS'description'
p3483
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p3484
sS'required'
p3485
I00
sS'options'
p3486
S'initial residual jacobian timestep timestep_begin custom'
p3487
sS'group_name'
p3488
Nsa(dp3489
S'description'
p3490
S'The function to use as the value\n'
p3491
sS'cpp_type'
p3492
S'FunctionName'
p3493
sS'default'
p3494
g3
sS'name'
p3495
S'function'
p3496
sS'required'
p3497
I01
sS'group_name'
p3498
Nsa(dp3499
S'description'
p3500
S'The seed for the master random number generator\n'
p3501
sS'cpp_type'
p3502
S'unsigned int'
p3503
sS'default'
p3504
S'0'
p3505
sS'name'
p3506
S'seed'
p3507
sS'required'
p3508
I00
sS'group_name'
p3509
S'Advanced'
p3510
sa(dp3511
S'description'
p3512
g3
sS'cpp_type'
p3513
S'std::string'
p3514
sS'default'
p3515
S'FunctionAux'
p3516
sS'name'
p3517
S'type'
p3518
sS'required'
p3519
I00
sS'group_name'
p3520
Nsa(dp3521
S'description'
p3522
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3523
sS'cpp_type'
p3524
S'bool'
p3525
sS'default'
p3526
S'0'
p3527
sS'name'
p3528
S'use_displaced_mesh'
p3529
sS'required'
p3530
I00
sS'group_name'
p3531
S'Advanced'
p3532
sa(dp3533
S'description'
p3534
S'The name of the variable that this object applies to\n'
p3535
sS'cpp_type'
p3536
S'AuxVariableName'
p3537
sS'default'
p3538
g3
sS'name'
p3539
S'variable'
p3540
sS'required'
p3541
I01
sS'group_name'
p3542
NsasS'name'
p3543
S'/AuxKernels/FunctionAux'
p3544
sa(dp3545
S'description'
p3546
g3
sS'type'
p3547
NsS'subblocks'
p3548
NsS'parameters'
p3549
(lp3550
(dp3551
S'description'
p3552
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p3553
sS'cpp_type'
p3554
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3555
sS'default'
p3556
g3
sS'name'
p3557
S'block'
p3558
sS'required'
p3559
I00
sS'group_name'
p3560
Nsa(dp3561
S'description'
p3562
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3563
sS'cpp_type'
p3564
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3565
sS'default'
p3566
g3
sS'name'
p3567
S'boundary'
p3568
sS'required'
p3569
I00
sS'group_name'
p3570
Nsa(dp3571
S'name'
p3572
S'execute_on'
p3573
sS'cpp_type'
p3574
S'MooseEnum'
p3575
sS'default'
p3576
S'residual'
p3577
sS'description'
p3578
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p3579
sS'required'
p3580
I00
sS'options'
p3581
S'initial residual jacobian timestep timestep_begin custom'
p3582
sS'group_name'
p3583
Nsa(dp3584
S'description'
p3585
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p3586
sS'cpp_type'
p3587
S'double'
p3588
sS'default'
p3589
g3
sS'name'
p3590
S'normal_smoothing_distance'
p3591
sS'required'
p3592
I00
sS'group_name'
p3593
Nsa(dp3594
S'description'
p3595
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p3596
sS'cpp_type'
p3597
S'std::string'
p3598
sS'default'
p3599
g3
sS'name'
p3600
S'normal_smoothing_method'
p3601
sS'required'
p3602
I00
sS'group_name'
p3603
Nsa(dp3604
S'name'
p3605
S'order'
p3606
sS'cpp_type'
p3607
S'MooseEnum'
p3608
sS'default'
p3609
S'FIRST'
p3610
sS'description'
p3611
S'The finite element order\n'
p3612
sS'required'
p3613
I00
sS'options'
p3614
S'FIRST SECOND THIRD FOURTH'
p3615
sS'group_name'
p3616
Nsa(dp3617
S'description'
p3618
S'The boundary on the other side of a gap.\n'
p3619
sS'cpp_type'
p3620
S'BoundaryName'
p3621
sS'default'
p3622
g3
sS'name'
p3623
S'paired_boundary'
p3624
sS'required'
p3625
I01
sS'group_name'
p3626
Nsa(dp3627
S'description'
p3628
S'The variable to get the value of.\n'
p3629
sS'cpp_type'
p3630
S'VariableName'
p3631
sS'default'
p3632
g3
sS'name'
p3633
S'paired_variable'
p3634
sS'required'
p3635
I01
sS'group_name'
p3636
Nsa(dp3637
S'description'
p3638
S'The seed for the master random number generator\n'
p3639
sS'cpp_type'
p3640
S'unsigned int'
p3641
sS'default'
p3642
S'0'
p3643
sS'name'
p3644
S'seed'
p3645
sS'required'
p3646
I00
sS'group_name'
p3647
S'Advanced'
p3648
sa(dp3649
S'description'
p3650
S'Tangential distance to extend edges of contact surfaces\n'
p3651
sS'cpp_type'
p3652
S'double'
p3653
sS'default'
p3654
g3
sS'name'
p3655
S'tangential_tolerance'
p3656
sS'required'
p3657
I00
sS'group_name'
p3658
Nsa(dp3659
S'description'
p3660
g3
sS'cpp_type'
p3661
S'std::string'
p3662
sS'default'
p3663
S'GapValueAux'
p3664
sS'name'
p3665
S'type'
p3666
sS'required'
p3667
I00
sS'group_name'
p3668
Nsa(dp3669
S'description'
p3670
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3671
sS'cpp_type'
p3672
S'bool'
p3673
sS'default'
p3674
S'1'
p3675
sS'name'
p3676
S'use_displaced_mesh'
p3677
sS'required'
p3678
I00
sS'group_name'
p3679
S'Advanced'
p3680
sa(dp3681
S'description'
p3682
S'The name of the variable that this object applies to\n'
p3683
sS'cpp_type'
p3684
S'AuxVariableName'
p3685
sS'default'
p3686
g3
sS'name'
p3687
S'variable'
p3688
sS'required'
p3689
I01
sS'group_name'
p3690
Nsa(dp3691
S'description'
p3692
S'Whether to output warning messages concerning nodes not being found\n'
p3693
sS'cpp_type'
p3694
S'bool'
p3695
sS'default'
p3696
S'0'
p3697
sS'name'
p3698
S'warnings'
p3699
sS'required'
p3700
I00
sS'group_name'
p3701
NsasS'name'
p3702
S'/AuxKernels/GapValueAux'
p3703
sa(dp3704
S'description'
p3705
g3
sS'type'
p3706
NsS'subblocks'
p3707
NsS'parameters'
p3708
(lp3709
(dp3710
S'description'
p3711
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p3712
sS'cpp_type'
p3713
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3714
sS'default'
p3715
g3
sS'name'
p3716
S'block'
p3717
sS'required'
p3718
I00
sS'group_name'
p3719
Nsa(dp3720
S'description'
p3721
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3722
sS'cpp_type'
p3723
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3724
sS'default'
p3725
g3
sS'name'
p3726
S'boundary'
p3727
sS'required'
p3728
I00
sS'group_name'
p3729
Nsa(dp3730
S'name'
p3731
S'execute_on'
p3732
sS'cpp_type'
p3733
S'MooseEnum'
p3734
sS'default'
p3735
S'residual'
p3736
sS'description'
p3737
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p3738
sS'required'
p3739
I00
sS'options'
p3740
S'initial residual jacobian timestep timestep_begin custom'
p3741
sS'group_name'
p3742
Nsa(dp3743
S'description'
p3744
S'The factor by which to multiply your material property for visualization\n'
p3745
sS'cpp_type'
p3746
S'double'
p3747
sS'default'
p3748
S'1'
p3749
sS'name'
p3750
S'factor'
p3751
sS'required'
p3752
I00
sS'group_name'
p3753
Nsa(dp3754
S'description'
p3755
S'The offset to add to your material property for visualization\n'
p3756
sS'cpp_type'
p3757
S'double'
p3758
sS'default'
p3759
S'0'
p3760
sS'name'
p3761
S'offset'
p3762
sS'required'
p3763
I00
sS'group_name'
p3764
Nsa(dp3765
S'description'
p3766
S'The scalar material property name\n'
p3767
sS'cpp_type'
p3768
S'std::string'
p3769
sS'default'
p3770
g3
sS'name'
p3771
S'property'
p3772
sS'required'
p3773
I01
sS'group_name'
p3774
Nsa(dp3775
S'description'
p3776
S'The seed for the master random number generator\n'
p3777
sS'cpp_type'
p3778
S'unsigned int'
p3779
sS'default'
p3780
S'0'
p3781
sS'name'
p3782
S'seed'
p3783
sS'required'
p3784
I00
sS'group_name'
p3785
S'Advanced'
p3786
sa(dp3787
S'description'
p3788
g3
sS'cpp_type'
p3789
S'std::string'
p3790
sS'default'
p3791
S'MaterialRealAux'
p3792
sS'name'
p3793
S'type'
p3794
sS'required'
p3795
I00
sS'group_name'
p3796
Nsa(dp3797
S'description'
p3798
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3799
sS'cpp_type'
p3800
S'bool'
p3801
sS'default'
p3802
S'0'
p3803
sS'name'
p3804
S'use_displaced_mesh'
p3805
sS'required'
p3806
I00
sS'group_name'
p3807
S'Advanced'
p3808
sa(dp3809
S'description'
p3810
S'The name of the variable that this object applies to\n'
p3811
sS'cpp_type'
p3812
S'AuxVariableName'
p3813
sS'default'
p3814
g3
sS'name'
p3815
S'variable'
p3816
sS'required'
p3817
I01
sS'group_name'
p3818
NsasS'name'
p3819
S'/AuxKernels/MaterialRealAux'
p3820
sa(dp3821
S'description'
p3822
g3
sS'type'
p3823
NsS'subblocks'
p3824
NsS'parameters'
p3825
(lp3826
(dp3827
S'description'
p3828
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p3829
sS'cpp_type'
p3830
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3831
sS'default'
p3832
g3
sS'name'
p3833
S'block'
p3834
sS'required'
p3835
I00
sS'group_name'
p3836
Nsa(dp3837
S'description'
p3838
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3839
sS'cpp_type'
p3840
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3841
sS'default'
p3842
g3
sS'name'
p3843
S'boundary'
p3844
sS'required'
p3845
I00
sS'group_name'
p3846
Nsa(dp3847
S'name'
p3848
S'execute_on'
p3849
sS'cpp_type'
p3850
S'MooseEnum'
p3851
sS'default'
p3852
S'residual'
p3853
sS'description'
p3854
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p3855
sS'required'
p3856
I00
sS'options'
p3857
S'initial residual jacobian timestep timestep_begin custom'
p3858
sS'group_name'
p3859
Nsa(dp3860
S'description'
p3861
S'The boundary to find the distance to.\n'
p3862
sS'cpp_type'
p3863
S'BoundaryName'
p3864
sS'default'
p3865
g3
sS'name'
p3866
S'paired_boundary'
p3867
sS'required'
p3868
I01
sS'group_name'
p3869
Nsa(dp3870
S'description'
p3871
S'The seed for the master random number generator\n'
p3872
sS'cpp_type'
p3873
S'unsigned int'
p3874
sS'default'
p3875
S'0'
p3876
sS'name'
p3877
S'seed'
p3878
sS'required'
p3879
I00
sS'group_name'
p3880
S'Advanced'
p3881
sa(dp3882
S'description'
p3883
g3
sS'cpp_type'
p3884
S'std::string'
p3885
sS'default'
p3886
S'NearestNodeDistanceAux'
p3887
sS'name'
p3888
S'type'
p3889
sS'required'
p3890
I00
sS'group_name'
p3891
Nsa(dp3892
S'description'
p3893
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3894
sS'cpp_type'
p3895
S'bool'
p3896
sS'default'
p3897
S'1'
p3898
sS'name'
p3899
S'use_displaced_mesh'
p3900
sS'required'
p3901
I00
sS'group_name'
p3902
S'Advanced'
p3903
sa(dp3904
S'description'
p3905
S'The name of the variable that this object applies to\n'
p3906
sS'cpp_type'
p3907
S'AuxVariableName'
p3908
sS'default'
p3909
g3
sS'name'
p3910
S'variable'
p3911
sS'required'
p3912
I01
sS'group_name'
p3913
NsasS'name'
p3914
S'/AuxKernels/NearestNodeDistanceAux'
p3915
sa(dp3916
S'description'
p3917
g3
sS'type'
p3918
NsS'subblocks'
p3919
NsS'parameters'
p3920
(lp3921
(dp3922
S'description'
p3923
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p3924
sS'cpp_type'
p3925
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p3926
sS'default'
p3927
g3
sS'name'
p3928
S'block'
p3929
sS'required'
p3930
I00
sS'group_name'
p3931
Nsa(dp3932
S'description'
p3933
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3934
sS'cpp_type'
p3935
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p3936
sS'default'
p3937
g3
sS'name'
p3938
S'boundary'
p3939
sS'required'
p3940
I00
sS'group_name'
p3941
Nsa(dp3942
S'name'
p3943
S'execute_on'
p3944
sS'cpp_type'
p3945
S'MooseEnum'
p3946
sS'default'
p3947
S'residual'
p3948
sS'description'
p3949
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p3950
sS'required'
p3951
I00
sS'options'
p3952
S'initial residual jacobian timestep timestep_begin custom'
p3953
sS'group_name'
p3954
Nsa(dp3955
S'description'
p3956
S'The boundary to get the value from.\n'
p3957
sS'cpp_type'
p3958
S'BoundaryName'
p3959
sS'default'
p3960
g3
sS'name'
p3961
S'paired_boundary'
p3962
sS'required'
p3963
I01
sS'group_name'
p3964
Nsa(dp3965
S'description'
p3966
S'The variable to get the value of.\n'
p3967
sS'cpp_type'
p3968
S'std::vector<VariableName>'
p3969
sS'default'
p3970
g3
sS'name'
p3971
S'paired_variable'
p3972
sS'required'
p3973
I01
sS'group_name'
p3974
Nsa(dp3975
S'description'
p3976
S'The seed for the master random number generator\n'
p3977
sS'cpp_type'
p3978
S'unsigned int'
p3979
sS'default'
p3980
S'0'
p3981
sS'name'
p3982
S'seed'
p3983
sS'required'
p3984
I00
sS'group_name'
p3985
S'Advanced'
p3986
sa(dp3987
S'description'
p3988
g3
sS'cpp_type'
p3989
S'std::string'
p3990
sS'default'
p3991
S'NearestNodeValueAux'
p3992
sS'name'
p3993
S'type'
p3994
sS'required'
p3995
I00
sS'group_name'
p3996
Nsa(dp3997
S'description'
p3998
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3999
sS'cpp_type'
p4000
S'bool'
p4001
sS'default'
p4002
S'1'
p4003
sS'name'
p4004
S'use_displaced_mesh'
p4005
sS'required'
p4006
I00
sS'group_name'
p4007
S'Advanced'
p4008
sa(dp4009
S'description'
p4010
S'The name of the variable that this object applies to\n'
p4011
sS'cpp_type'
p4012
S'AuxVariableName'
p4013
sS'default'
p4014
g3
sS'name'
p4015
S'variable'
p4016
sS'required'
p4017
I01
sS'group_name'
p4018
NsasS'name'
p4019
S'/AuxKernels/NearestNodeValueAux'
p4020
sa(dp4021
S'description'
p4022
g3
sS'type'
p4023
NsS'subblocks'
p4024
NsS'parameters'
p4025
(lp4026
(dp4027
S'description'
p4028
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p4029
sS'cpp_type'
p4030
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4031
sS'default'
p4032
g3
sS'name'
p4033
S'block'
p4034
sS'required'
p4035
I00
sS'group_name'
p4036
Nsa(dp4037
S'description'
p4038
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4039
sS'cpp_type'
p4040
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4041
sS'default'
p4042
g3
sS'name'
p4043
S'boundary'
p4044
sS'required'
p4045
I00
sS'group_name'
p4046
Nsa(dp4047
S'description'
p4048
S'The NodalFloodCount UserObject to get values from.\n'
p4049
sS'cpp_type'
p4050
S'UserObjectName'
p4051
sS'default'
p4052
g3
sS'name'
p4053
S'bubble_object'
p4054
sS'required'
p4055
I01
sS'group_name'
p4056
Nsa(dp4057
S'name'
p4058
S'execute_on'
p4059
sS'cpp_type'
p4060
S'MooseEnum'
p4061
sS'default'
p4062
S'residual'
p4063
sS'description'
p4064
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p4065
sS'required'
p4066
I00
sS'options'
p4067
S'initial residual jacobian timestep timestep_begin custom'
p4068
sS'group_name'
p4069
Nsa(dp4070
S'name'
p4071
S'field_display'
p4072
sS'cpp_type'
p4073
S'MooseEnum'
p4074
sS'default'
p4075
S'UNIQUE_REGION'
p4076
sS'description'
p4077
S'Determines how the auxilary field should be colored. (UNIQUE_REGION and VARIABLE_COLORING are nodal, CENTROID is elemental, default: UNIQUE_REGION)\n'
p4078
sS'required'
p4079
I00
sS'options'
p4080
S'UNIQUE_REGION VARIABLE_COLORING ACTIVE_BOUNDS CENTROID'
p4081
sS'group_name'
p4082
Nsa(dp4083
S'description'
p4084
S'The index of which map to retrieve values from when using NodalFloodCount with multiple maps.\n'
p4085
sS'cpp_type'
p4086
S'unsigned int'
p4087
sS'default'
p4088
S'0'
p4089
sS'name'
p4090
S'map_index'
p4091
sS'required'
p4092
I00
sS'group_name'
p4093
Nsa(dp4094
S'description'
p4095
S'The seed for the master random number generator\n'
p4096
sS'cpp_type'
p4097
S'unsigned int'
p4098
sS'default'
p4099
S'0'
p4100
sS'name'
p4101
S'seed'
p4102
sS'required'
p4103
I00
sS'group_name'
p4104
S'Advanced'
p4105
sa(dp4106
S'description'
p4107
g3
sS'cpp_type'
p4108
S'std::string'
p4109
sS'default'
p4110
S'NodalFloodCountAux'
p4111
sS'name'
p4112
S'type'
p4113
sS'required'
p4114
I00
sS'group_name'
p4115
Nsa(dp4116
S'description'
p4117
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4118
sS'cpp_type'
p4119
S'bool'
p4120
sS'default'
p4121
S'0'
p4122
sS'name'
p4123
S'use_displaced_mesh'
p4124
sS'required'
p4125
I00
sS'group_name'
p4126
S'Advanced'
p4127
sa(dp4128
S'description'
p4129
S'The name of the variable that this object applies to\n'
p4130
sS'cpp_type'
p4131
S'AuxVariableName'
p4132
sS'default'
p4133
g3
sS'name'
p4134
S'variable'
p4135
sS'required'
p4136
I01
sS'group_name'
p4137
NsasS'name'
p4138
S'/AuxKernels/NodalFloodCountAux'
p4139
sa(dp4140
S'description'
p4141
g3
sS'type'
p4142
NsS'subblocks'
p4143
NsS'parameters'
p4144
(lp4145
(dp4146
S'description'
p4147
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p4148
sS'cpp_type'
p4149
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4150
sS'default'
p4151
g3
sS'name'
p4152
S'block'
p4153
sS'required'
p4154
I00
sS'group_name'
p4155
Nsa(dp4156
S'description'
p4157
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4158
sS'cpp_type'
p4159
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4160
sS'default'
p4161
g3
sS'name'
p4162
S'boundary'
p4163
sS'required'
p4164
I00
sS'group_name'
p4165
Nsa(dp4166
S'name'
p4167
S'execute_on'
p4168
sS'cpp_type'
p4169
S'MooseEnum'
p4170
sS'default'
p4171
S'residual'
p4172
sS'description'
p4173
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p4174
sS'required'
p4175
I00
sS'options'
p4176
S'initial residual jacobian timestep timestep_begin custom'
p4177
sS'group_name'
p4178
Nsa(dp4179
S'description'
p4180
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p4181
sS'cpp_type'
p4182
S'double'
p4183
sS'default'
p4184
g3
sS'name'
p4185
S'normal_smoothing_distance'
p4186
sS'required'
p4187
I00
sS'group_name'
p4188
Nsa(dp4189
S'description'
p4190
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p4191
sS'cpp_type'
p4192
S'std::string'
p4193
sS'default'
p4194
g3
sS'name'
p4195
S'normal_smoothing_method'
p4196
sS'required'
p4197
I00
sS'group_name'
p4198
Nsa(dp4199
S'name'
p4200
S'order'
p4201
sS'cpp_type'
p4202
S'MooseEnum'
p4203
sS'default'
p4204
S'FIRST'
p4205
sS'description'
p4206
S'The finite element order\n'
p4207
sS'required'
p4208
I00
sS'options'
p4209
S'FIRST SECOND THIRD FOURTH'
p4210
sS'group_name'
p4211
Nsa(dp4212
S'description'
p4213
S'The boundary to be penetrated\n'
p4214
sS'cpp_type'
p4215
S'BoundaryName'
p4216
sS'default'
p4217
g3
sS'name'
p4218
S'paired_boundary'
p4219
sS'required'
p4220
I01
sS'group_name'
p4221
Nsa(dp4222
S'description'
p4223
S'The quantity to recover from the available penetration information: distance(default), tangential_distance, normal_x, normal_y, normal_z, closest_point_x, closest_point_y, closest_point_z, element_id, side, incremental_slip_x, incremental_slip_y, incremental_slip_z, incremental_slip_magnitude, accumulated_slip, force_x, force_y, force_z, normal_force_magnitude, normal_force_x, normal_force_y, normal_force_z, tangential_force_magnitude, tangential_force_x, tangential_force_y, tangential_force_z, frictional_energy, mechanical_status\n'
p4224
sS'cpp_type'
p4225
S'std::string'
p4226
sS'default'
p4227
S'distance'
p4228
sS'name'
p4229
S'quantity'
p4230
sS'required'
p4231
I00
sS'group_name'
p4232
Nsa(dp4233
S'description'
p4234
S'The seed for the master random number generator\n'
p4235
sS'cpp_type'
p4236
S'unsigned int'
p4237
sS'default'
p4238
S'0'
p4239
sS'name'
p4240
S'seed'
p4241
sS'required'
p4242
I00
sS'group_name'
p4243
S'Advanced'
p4244
sa(dp4245
S'description'
p4246
S'Tangential distance to extend edges of contact surfaces\n'
p4247
sS'cpp_type'
p4248
S'double'
p4249
sS'default'
p4250
g3
sS'name'
p4251
S'tangential_tolerance'
p4252
sS'required'
p4253
I00
sS'group_name'
p4254
Nsa(dp4255
S'description'
p4256
g3
sS'cpp_type'
p4257
S'std::string'
p4258
sS'default'
p4259
S'PenetrationAux'
p4260
sS'name'
p4261
S'type'
p4262
sS'required'
p4263
I00
sS'group_name'
p4264
Nsa(dp4265
S'description'
p4266
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4267
sS'cpp_type'
p4268
S'bool'
p4269
sS'default'
p4270
S'1'
p4271
sS'name'
p4272
S'use_displaced_mesh'
p4273
sS'required'
p4274
I00
sS'group_name'
p4275
S'Advanced'
p4276
sa(dp4277
S'description'
p4278
S'The name of the variable that this object applies to\n'
p4279
sS'cpp_type'
p4280
S'AuxVariableName'
p4281
sS'default'
p4282
g3
sS'name'
p4283
S'variable'
p4284
sS'required'
p4285
I01
sS'group_name'
p4286
NsasS'name'
p4287
S'/AuxKernels/PenetrationAux'
p4288
sa(dp4289
S'description'
p4290
g3
sS'type'
p4291
NsS'subblocks'
p4292
NsS'parameters'
p4293
(lp4294
(dp4295
S'description'
p4296
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p4297
sS'cpp_type'
p4298
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4299
sS'default'
p4300
g3
sS'name'
p4301
S'block'
p4302
sS'required'
p4303
I00
sS'group_name'
p4304
Nsa(dp4305
S'description'
p4306
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4307
sS'cpp_type'
p4308
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4309
sS'default'
p4310
g3
sS'name'
p4311
S'boundary'
p4312
sS'required'
p4313
I00
sS'group_name'
p4314
Nsa(dp4315
S'name'
p4316
S'execute_on'
p4317
sS'cpp_type'
p4318
S'MooseEnum'
p4319
sS'default'
p4320
S'residual'
p4321
sS'description'
p4322
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p4323
sS'required'
p4324
I00
sS'options'
p4325
S'initial residual jacobian timestep timestep_begin custom'
p4326
sS'group_name'
p4327
Nsa(dp4328
S'description'
p4329
S'The seed for the master random number generator\n'
p4330
sS'cpp_type'
p4331
S'unsigned int'
p4332
sS'default'
p4333
S'0'
p4334
sS'name'
p4335
S'seed'
p4336
sS'required'
p4337
I00
sS'group_name'
p4338
S'Advanced'
p4339
sa(dp4340
S'description'
p4341
g3
sS'cpp_type'
p4342
S'std::string'
p4343
sS'default'
p4344
S'ProcessorIDAux'
p4345
sS'name'
p4346
S'type'
p4347
sS'required'
p4348
I00
sS'group_name'
p4349
Nsa(dp4350
S'description'
p4351
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4352
sS'cpp_type'
p4353
S'bool'
p4354
sS'default'
p4355
S'0'
p4356
sS'name'
p4357
S'use_displaced_mesh'
p4358
sS'required'
p4359
I00
sS'group_name'
p4360
S'Advanced'
p4361
sa(dp4362
S'description'
p4363
S'The name of the variable that this object applies to\n'
p4364
sS'cpp_type'
p4365
S'AuxVariableName'
p4366
sS'default'
p4367
g3
sS'name'
p4368
S'variable'
p4369
sS'required'
p4370
I01
sS'group_name'
p4371
NsasS'name'
p4372
S'/AuxKernels/ProcessorIDAux'
p4373
sa(dp4374
S'description'
p4375
g3
sS'type'
p4376
NsS'subblocks'
p4377
NsS'parameters'
p4378
(lp4379
(dp4380
S'description'
p4381
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p4382
sS'cpp_type'
p4383
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4384
sS'default'
p4385
g3
sS'name'
p4386
S'block'
p4387
sS'required'
p4388
I00
sS'group_name'
p4389
Nsa(dp4390
S'description'
p4391
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4392
sS'cpp_type'
p4393
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4394
sS'default'
p4395
g3
sS'name'
p4396
S'boundary'
p4397
sS'required'
p4398
I00
sS'group_name'
p4399
Nsa(dp4400
S'description'
p4401
S'The downstairs of the quotient variable\n'
p4402
sS'cpp_type'
p4403
S'std::vector<VariableName>'
p4404
sS'default'
p4405
g3
sS'name'
p4406
S'denominator'
p4407
sS'required'
p4408
I00
sS'group_name'
p4409
Nsa(dp4410
S'name'
p4411
S'execute_on'
p4412
sS'cpp_type'
p4413
S'MooseEnum'
p4414
sS'default'
p4415
S'residual'
p4416
sS'description'
p4417
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p4418
sS'required'
p4419
I00
sS'options'
p4420
S'initial residual jacobian timestep timestep_begin custom'
p4421
sS'group_name'
p4422
Nsa(dp4423
S'description'
p4424
S'The upstairs of the quotient variable\n'
p4425
sS'cpp_type'
p4426
S'std::vector<VariableName>'
p4427
sS'default'
p4428
g3
sS'name'
p4429
S'numerator'
p4430
sS'required'
p4431
I00
sS'group_name'
p4432
Nsa(dp4433
S'description'
p4434
S'The seed for the master random number generator\n'
p4435
sS'cpp_type'
p4436
S'unsigned int'
p4437
sS'default'
p4438
S'0'
p4439
sS'name'
p4440
S'seed'
p4441
sS'required'
p4442
I00
sS'group_name'
p4443
S'Advanced'
p4444
sa(dp4445
S'description'
p4446
g3
sS'cpp_type'
p4447
S'std::string'
p4448
sS'default'
p4449
S'QuotientAux'
p4450
sS'name'
p4451
S'type'
p4452
sS'required'
p4453
I00
sS'group_name'
p4454
Nsa(dp4455
S'description'
p4456
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4457
sS'cpp_type'
p4458
S'bool'
p4459
sS'default'
p4460
S'0'
p4461
sS'name'
p4462
S'use_displaced_mesh'
p4463
sS'required'
p4464
I00
sS'group_name'
p4465
S'Advanced'
p4466
sa(dp4467
S'description'
p4468
S'The name of the variable that this object applies to\n'
p4469
sS'cpp_type'
p4470
S'AuxVariableName'
p4471
sS'default'
p4472
g3
sS'name'
p4473
S'variable'
p4474
sS'required'
p4475
I01
sS'group_name'
p4476
NsasS'name'
p4477
S'/AuxKernels/QuotientAux'
p4478
sa(dp4479
S'description'
p4480
g3
sS'type'
p4481
NsS'subblocks'
p4482
NsS'parameters'
p4483
(lp4484
(dp4485
S'description'
p4486
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p4487
sS'cpp_type'
p4488
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4489
sS'default'
p4490
g3
sS'name'
p4491
S'block'
p4492
sS'required'
p4493
I00
sS'group_name'
p4494
Nsa(dp4495
S'description'
p4496
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4497
sS'cpp_type'
p4498
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4499
sS'default'
p4500
g3
sS'name'
p4501
S'boundary'
p4502
sS'required'
p4503
I00
sS'group_name'
p4504
Nsa(dp4505
S'name'
p4506
S'execute_on'
p4507
sS'cpp_type'
p4508
S'MooseEnum'
p4509
sS'default'
p4510
S'residual'
p4511
sS'description'
p4512
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p4513
sS'required'
p4514
I00
sS'options'
p4515
S'initial residual jacobian timestep timestep_begin custom'
p4516
sS'group_name'
p4517
Nsa(dp4518
S'description'
p4519
S'The seed for the master random number generator\n'
p4520
sS'cpp_type'
p4521
S'unsigned int'
p4522
sS'default'
p4523
S'0'
p4524
sS'name'
p4525
S'seed'
p4526
sS'required'
p4527
I00
sS'group_name'
p4528
S'Advanced'
p4529
sa(dp4530
S'description'
p4531
g3
sS'cpp_type'
p4532
S'std::string'
p4533
sS'default'
p4534
S'SelfAux'
p4535
sS'name'
p4536
S'type'
p4537
sS'required'
p4538
I00
sS'group_name'
p4539
Nsa(dp4540
S'description'
p4541
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4542
sS'cpp_type'
p4543
S'bool'
p4544
sS'default'
p4545
S'0'
p4546
sS'name'
p4547
S'use_displaced_mesh'
p4548
sS'required'
p4549
I00
sS'group_name'
p4550
S'Advanced'
p4551
sa(dp4552
S'description'
p4553
S'The name of the variable that this object applies to\n'
p4554
sS'cpp_type'
p4555
S'AuxVariableName'
p4556
sS'default'
p4557
g3
sS'name'
p4558
S'variable'
p4559
sS'required'
p4560
I01
sS'group_name'
p4561
NsasS'name'
p4562
S'/AuxKernels/SelfAux'
p4563
sa(dp4564
S'description'
p4565
g3
sS'type'
p4566
NsS'subblocks'
p4567
NsS'parameters'
p4568
(lp4569
(dp4570
S'description'
p4571
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p4572
sS'cpp_type'
p4573
S'double'
p4574
sS'default'
p4575
S'0'
p4576
sS'name'
p4577
S'add_factor'
p4578
sS'required'
p4579
I00
sS'group_name'
p4580
Nsa(dp4581
S'description'
p4582
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p4583
sS'cpp_type'
p4584
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4585
sS'default'
p4586
g3
sS'name'
p4587
S'block'
p4588
sS'required'
p4589
I00
sS'group_name'
p4590
Nsa(dp4591
S'description'
p4592
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4593
sS'cpp_type'
p4594
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4595
sS'default'
p4596
g3
sS'name'
p4597
S'boundary'
p4598
sS'required'
p4599
I00
sS'group_name'
p4600
Nsa(dp4601
S'description'
p4602
S'If true the meshes must be the same and then the values are simply copied over.\n'
p4603
sS'cpp_type'
p4604
S'bool'
p4605
sS'default'
p4606
S'0'
p4607
sS'name'
p4608
S'direct'
p4609
sS'required'
p4610
I00
sS'group_name'
p4611
Nsa(dp4612
S'name'
p4613
S'execute_on'
p4614
sS'cpp_type'
p4615
S'MooseEnum'
p4616
sS'default'
p4617
S'residual'
p4618
sS'description'
p4619
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p4620
sS'required'
p4621
I00
sS'options'
p4622
S'initial residual jacobian timestep timestep_begin custom'
p4623
sS'group_name'
p4624
Nsa(dp4625
S'description'
p4626
S'The name of the variable to extract from the file\n'
p4627
sS'cpp_type'
p4628
S'std::string'
p4629
sS'default'
p4630
g3
sS'name'
p4631
S'from_variable'
p4632
sS'required'
p4633
I00
sS'group_name'
p4634
Nsa(dp4635
S'description'
p4636
S"Scale factor (a)  to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p4637
sS'cpp_type'
p4638
S'double'
p4639
sS'default'
p4640
S'1'
p4641
sS'name'
p4642
S'scale_factor'
p4643
sS'required'
p4644
I00
sS'group_name'
p4645
Nsa(dp4646
S'description'
p4647
S'The seed for the master random number generator\n'
p4648
sS'cpp_type'
p4649
S'unsigned int'
p4650
sS'default'
p4651
S'0'
p4652
sS'name'
p4653
S'seed'
p4654
sS'required'
p4655
I00
sS'group_name'
p4656
S'Advanced'
p4657
sa(dp4658
S'description'
p4659
S'The name of the SolutionUserObject\n'
p4660
sS'cpp_type'
p4661
S'UserObjectName'
p4662
sS'default'
p4663
g3
sS'name'
p4664
S'solution'
p4665
sS'required'
p4666
I01
sS'group_name'
p4667
Nsa(dp4668
S'description'
p4669
g3
sS'cpp_type'
p4670
S'std::string'
p4671
sS'default'
p4672
S'SolutionAux'
p4673
sS'name'
p4674
S'type'
p4675
sS'required'
p4676
I00
sS'group_name'
p4677
Nsa(dp4678
S'description'
p4679
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4680
sS'cpp_type'
p4681
S'bool'
p4682
sS'default'
p4683
S'0'
p4684
sS'name'
p4685
S'use_displaced_mesh'
p4686
sS'required'
p4687
I00
sS'group_name'
p4688
S'Advanced'
p4689
sa(dp4690
S'description'
p4691
S'The name of the variable that this object applies to\n'
p4692
sS'cpp_type'
p4693
S'AuxVariableName'
p4694
sS'default'
p4695
g3
sS'name'
p4696
S'variable'
p4697
sS'required'
p4698
I01
sS'group_name'
p4699
NsasS'name'
p4700
S'/AuxKernels/SolutionAux'
p4701
sa(dp4702
S'description'
p4703
g3
sS'type'
p4704
NsS'subblocks'
p4705
NsS'parameters'
p4706
(lp4707
(dp4708
S'description'
p4709
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p4710
sS'cpp_type'
p4711
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4712
sS'default'
p4713
g3
sS'name'
p4714
S'block'
p4715
sS'required'
p4716
I00
sS'group_name'
p4717
Nsa(dp4718
S'description'
p4719
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4720
sS'cpp_type'
p4721
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4722
sS'default'
p4723
g3
sS'name'
p4724
S'boundary'
p4725
sS'required'
p4726
I00
sS'group_name'
p4727
Nsa(dp4728
S'name'
p4729
S'execute_on'
p4730
sS'cpp_type'
p4731
S'MooseEnum'
p4732
sS'default'
p4733
S'residual'
p4734
sS'description'
p4735
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p4736
sS'required'
p4737
I00
sS'options'
p4738
S'initial residual jacobian timestep timestep_begin custom'
p4739
sS'group_name'
p4740
Nsa(dp4741
S'description'
p4742
S'The seed for the master random number generator\n'
p4743
sS'cpp_type'
p4744
S'unsigned int'
p4745
sS'default'
p4746
S'0'
p4747
sS'name'
p4748
S'seed'
p4749
sS'required'
p4750
I00
sS'group_name'
p4751
S'Advanced'
p4752
sa(dp4753
S'description'
p4754
g3
sS'cpp_type'
p4755
S'std::string'
p4756
sS'default'
p4757
S'SpatialUserObjectAux'
p4758
sS'name'
p4759
S'type'
p4760
sS'required'
p4761
I00
sS'group_name'
p4762
Nsa(dp4763
S'description'
p4764
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4765
sS'cpp_type'
p4766
S'bool'
p4767
sS'default'
p4768
S'0'
p4769
sS'name'
p4770
S'use_displaced_mesh'
p4771
sS'required'
p4772
I00
sS'group_name'
p4773
S'Advanced'
p4774
sa(dp4775
S'description'
p4776
S'The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n'
p4777
sS'cpp_type'
p4778
S'UserObjectName'
p4779
sS'default'
p4780
g3
sS'name'
p4781
S'user_object'
p4782
sS'required'
p4783
I01
sS'group_name'
p4784
Nsa(dp4785
S'description'
p4786
S'The name of the variable that this object applies to\n'
p4787
sS'cpp_type'
p4788
S'AuxVariableName'
p4789
sS'default'
p4790
g3
sS'name'
p4791
S'variable'
p4792
sS'required'
p4793
I01
sS'group_name'
p4794
NsasS'name'
p4795
S'/AuxKernels/SpatialUserObjectAux'
p4796
sa(dp4797
S'description'
p4798
g3
sS'type'
p4799
NsS'subblocks'
p4800
NsS'parameters'
p4801
(lp4802
(dp4803
S'description'
p4804
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p4805
sS'cpp_type'
p4806
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p4807
sS'default'
p4808
g3
sS'name'
p4809
S'block'
p4810
sS'required'
p4811
I00
sS'group_name'
p4812
Nsa(dp4813
S'description'
p4814
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4815
sS'cpp_type'
p4816
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p4817
sS'default'
p4818
g3
sS'name'
p4819
S'boundary'
p4820
sS'required'
p4821
I00
sS'group_name'
p4822
Nsa(dp4823
S'name'
p4824
S'execute_on'
p4825
sS'cpp_type'
p4826
S'MooseEnum'
p4827
sS'default'
p4828
S'residual'
p4829
sS'description'
p4830
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p4831
sS'required'
p4832
I00
sS'options'
p4833
S'initial residual jacobian timestep timestep_begin custom'
p4834
sS'group_name'
p4835
Nsa(dp4836
S'description'
p4837
S'The seed for the master random number generator\n'
p4838
sS'cpp_type'
p4839
S'unsigned int'
p4840
sS'default'
p4841
S'0'
p4842
sS'name'
p4843
S'seed'
p4844
sS'required'
p4845
I00
sS'group_name'
p4846
S'Advanced'
p4847
sa(dp4848
S'description'
p4849
g3
sS'cpp_type'
p4850
S'std::string'
p4851
sS'default'
p4852
S'VectorMagnitudeAux'
p4853
sS'name'
p4854
S'type'
p4855
sS'required'
p4856
I00
sS'group_name'
p4857
Nsa(dp4858
S'description'
p4859
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4860
sS'cpp_type'
p4861
S'bool'
p4862
sS'default'
p4863
S'0'
p4864
sS'name'
p4865
S'use_displaced_mesh'
p4866
sS'required'
p4867
I00
sS'group_name'
p4868
S'Advanced'
p4869
sa(dp4870
S'description'
p4871
S'The name of the variable that this object applies to\n'
p4872
sS'cpp_type'
p4873
S'AuxVariableName'
p4874
sS'default'
p4875
g3
sS'name'
p4876
S'variable'
p4877
sS'required'
p4878
I01
sS'group_name'
p4879
Nsa(dp4880
S'description'
p4881
S'x-component of the vector\n'
p4882
sS'cpp_type'
p4883
S'std::vector<VariableName>'
p4884
sS'default'
p4885
g3
sS'name'
p4886
S'x'
p4887
sS'required'
p4888
I01
sS'group_name'
p4889
Nsa(dp4890
S'description'
p4891
S'y-component of the vector\n'
p4892
sS'cpp_type'
p4893
S'std::vector<VariableName>'
p4894
sS'default'
p4895
g3
sS'name'
p4896
S'y'
p4897
sS'required'
p4898
I00
sS'group_name'
p4899
Nsa(dp4900
S'description'
p4901
S'z-component of the vector\n'
p4902
sS'cpp_type'
p4903
S'std::vector<VariableName>'
p4904
sS'default'
p4905
g3
sS'name'
p4906
S'z'
p4907
sS'required'
p4908
I00
sS'group_name'
p4909
NsasS'name'
p4910
S'/AuxKernels/VectorMagnitudeAux'
p4911
sasS'parameters'
p4912
NsS'name'
p4913
S'/AuxKernels'
p4914
sa(dp4915
S'description'
p4916
g3
sS'type'
p4917
NsS'subblocks'
p4918
(lp4919
(dp4920
S'description'
p4921
g3
sS'type'
p4922
NsS'subblocks'
p4923
NsS'parameters'
p4924
(lp4925
(dp4926
S'description'
p4927
S'A string representing the Moose Object that will be built by this Action\n'
p4928
sS'cpp_type'
p4929
S'std::string'
p4930
sS'default'
p4931
g3
sS'name'
p4932
S'type'
p4933
sS'required'
p4934
I01
sS'group_name'
p4935
NsasS'name'
p4936
S'/AuxScalarKernels/*'
p4937
sa(dp4938
S'description'
p4939
g3
sS'type'
p4940
NsS'subblocks'
p4941
NsS'parameters'
p4942
(lp4943
(dp4944
S'description'
p4945
g3
sS'cpp_type'
p4946
S'std::string'
p4947
sS'default'
p4948
S'ConstantScalarAux'
p4949
sS'name'
p4950
S'type'
p4951
sS'required'
p4952
I00
sS'group_name'
p4953
Nsa(dp4954
S'description'
p4955
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4956
sS'cpp_type'
p4957
S'bool'
p4958
sS'default'
p4959
S'0'
p4960
sS'name'
p4961
S'use_displaced_mesh'
p4962
sS'required'
p4963
I00
sS'group_name'
p4964
S'Advanced'
p4965
sa(dp4966
S'description'
p4967
S'The value to be set to the scalar variable.\n'
p4968
sS'cpp_type'
p4969
S'double'
p4970
sS'default'
p4971
g3
sS'name'
p4972
S'value'
p4973
sS'required'
p4974
I01
sS'group_name'
p4975
Nsa(dp4976
S'description'
p4977
S'The name of the variable that this kernel operates on\n'
p4978
sS'cpp_type'
p4979
S'AuxVariableName'
p4980
sS'default'
p4981
g3
sS'name'
p4982
S'variable'
p4983
sS'required'
p4984
I01
sS'group_name'
p4985
NsasS'name'
p4986
S'/AuxScalarKernels/ConstantScalarAux'
p4987
sasS'parameters'
p4988
NsS'name'
p4989
S'/AuxScalarKernels'
p4990
sa(dp4991
S'description'
p4992
g3
sS'type'
p4993
NsS'subblocks'
p4994
(lp4995
(dp4996
S'description'
p4997
g3
sS'type'
p4998
NsS'subblocks'
p4999
(lp5000
(dp5001
S'description'
p5002
g3
sS'type'
p5003
NsS'subblocks'
p5004
(lp5005
(dp5006
S'description'
p5007
g3
sS'type'
p5008
NsS'subblocks'
p5009
(lp5010
(dp5011
S'description'
p5012
g3
sS'type'
p5013
NsS'subblocks'
p5014
NsS'parameters'
p5015
(lp5016
(dp5017
S'description'
p5018
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p5019
sS'cpp_type'
p5020
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5021
sS'default'
p5022
g3
sS'name'
p5023
S'block'
p5024
sS'required'
p5025
I00
sS'group_name'
p5026
Nsa(dp5027
S'description'
p5028
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5029
sS'cpp_type'
p5030
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5031
sS'default'
p5032
g3
sS'name'
p5033
S'boundary'
p5034
sS'required'
p5035
I00
sS'group_name'
p5036
Nsa(dp5037
S'description'
p5038
S'The value of the variable inside the box\n'
p5039
sS'cpp_type'
p5040
S'double'
p5041
sS'default'
p5042
S'0'
p5043
sS'name'
p5044
S'inside'
p5045
sS'required'
p5046
I00
sS'group_name'
p5047
Nsa(dp5048
S'description'
p5049
S'The value of the variable outside the box\n'
p5050
sS'cpp_type'
p5051
S'double'
p5052
sS'default'
p5053
S'0'
p5054
sS'name'
p5055
S'outside'
p5056
sS'required'
p5057
I00
sS'group_name'
p5058
Nsa(dp5059
S'description'
p5060
g3
sS'cpp_type'
p5061
S'std::string'
p5062
sS'default'
p5063
S'BoundingBoxIC'
p5064
sS'name'
p5065
S'type'
p5066
sS'required'
p5067
I00
sS'group_name'
p5068
Nsa(dp5069
S'description'
p5070
S'The variable this initial condition is supposed to provide values for.\n'
p5071
sS'cpp_type'
p5072
S'VariableName'
p5073
sS'default'
p5074
g3
sS'name'
p5075
S'variable'
p5076
sS'required'
p5077
I01
sS'group_name'
p5078
Nsa(dp5079
S'description'
p5080
S'The x coordinate of the lower left-hand corner of the box\n'
p5081
sS'cpp_type'
p5082
S'double'
p5083
sS'default'
p5084
g3
sS'name'
p5085
S'x1'
p5086
sS'required'
p5087
I01
sS'group_name'
p5088
Nsa(dp5089
S'description'
p5090
S'The x coordinate of the upper right-hand corner of the box\n'
p5091
sS'cpp_type'
p5092
S'double'
p5093
sS'default'
p5094
g3
sS'name'
p5095
S'x2'
p5096
sS'required'
p5097
I01
sS'group_name'
p5098
Nsa(dp5099
S'description'
p5100
S'The y coordinate of the lower left-hand corner of the box\n'
p5101
sS'cpp_type'
p5102
S'double'
p5103
sS'default'
p5104
g3
sS'name'
p5105
S'y1'
p5106
sS'required'
p5107
I01
sS'group_name'
p5108
Nsa(dp5109
S'description'
p5110
S'The y coordinate of the upper right-hand corner of the box\n'
p5111
sS'cpp_type'
p5112
S'double'
p5113
sS'default'
p5114
g3
sS'name'
p5115
S'y2'
p5116
sS'required'
p5117
I01
sS'group_name'
p5118
Nsa(dp5119
S'description'
p5120
S'The z coordinate of the lower left-hand corner of the box\n'
p5121
sS'cpp_type'
p5122
S'double'
p5123
sS'default'
p5124
S'0'
p5125
sS'name'
p5126
S'z1'
p5127
sS'required'
p5128
I00
sS'group_name'
p5129
Nsa(dp5130
S'description'
p5131
S'The z coordinate of the upper right-hand corner of the box\n'
p5132
sS'cpp_type'
p5133
S'double'
p5134
sS'default'
p5135
S'0'
p5136
sS'name'
p5137
S'z2'
p5138
sS'required'
p5139
I00
sS'group_name'
p5140
NsasS'name'
p5141
S'/AuxVariables/*/InitialCondition/<type>/BoundingBoxIC'
p5142
sa(dp5143
S'description'
p5144
g3
sS'type'
p5145
NsS'subblocks'
p5146
NsS'parameters'
p5147
(lp5148
(dp5149
S'description'
p5150
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p5151
sS'cpp_type'
p5152
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5153
sS'default'
p5154
g3
sS'name'
p5155
S'block'
p5156
sS'required'
p5157
I00
sS'group_name'
p5158
Nsa(dp5159
S'description'
p5160
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5161
sS'cpp_type'
p5162
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5163
sS'default'
p5164
g3
sS'name'
p5165
S'boundary'
p5166
sS'required'
p5167
I00
sS'group_name'
p5168
Nsa(dp5169
S'description'
p5170
g3
sS'cpp_type'
p5171
S'std::string'
p5172
sS'default'
p5173
S'ConstantIC'
p5174
sS'name'
p5175
S'type'
p5176
sS'required'
p5177
I00
sS'group_name'
p5178
Nsa(dp5179
S'description'
p5180
S'The value to be set in IC\n'
p5181
sS'cpp_type'
p5182
S'double'
p5183
sS'default'
p5184
g3
sS'name'
p5185
S'value'
p5186
sS'required'
p5187
I01
sS'group_name'
p5188
Nsa(dp5189
S'description'
p5190
S'The variable this initial condition is supposed to provide values for.\n'
p5191
sS'cpp_type'
p5192
S'VariableName'
p5193
sS'default'
p5194
g3
sS'name'
p5195
S'variable'
p5196
sS'required'
p5197
I01
sS'group_name'
p5198
NsasS'name'
p5199
S'/AuxVariables/*/InitialCondition/<type>/ConstantIC'
p5200
sa(dp5201
S'description'
p5202
g3
sS'type'
p5203
NsS'subblocks'
p5204
NsS'parameters'
p5205
(lp5206
(dp5207
S'description'
p5208
S'The amplitude\n'
p5209
sS'cpp_type'
p5210
S'double'
p5211
sS'default'
p5212
S'1'
p5213
sS'name'
p5214
S'amplitude'
p5215
sS'required'
p5216
I00
sS'group_name'
p5217
Nsa(dp5218
S'description'
p5219
S'The average value\n'
p5220
sS'cpp_type'
p5221
S'double'
p5222
sS'default'
p5223
S'0'
p5224
sS'name'
p5225
S'average'
p5226
sS'required'
p5227
I00
sS'group_name'
p5228
Nsa(dp5229
S'description'
p5230
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p5231
sS'cpp_type'
p5232
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5233
sS'default'
p5234
g3
sS'name'
p5235
S'block'
p5236
sS'required'
p5237
I00
sS'group_name'
p5238
Nsa(dp5239
S'description'
p5240
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5241
sS'cpp_type'
p5242
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5243
sS'default'
p5244
g3
sS'name'
p5245
S'boundary'
p5246
sS'required'
p5247
I00
sS'group_name'
p5248
Nsa(dp5249
S'description'
p5250
S'A small area between the max value and the interface\n'
p5251
sS'cpp_type'
p5252
S'double'
p5253
sS'default'
p5254
S'0.03125'
p5255
sS'name'
p5256
S'buffer'
p5257
sS'required'
p5258
I00
sS'group_name'
p5259
Nsa(dp5260
S'description'
p5261
S'The interface width\n'
p5262
sS'cpp_type'
p5263
S'double'
p5264
sS'default'
p5265
S'0.03125'
p5266
sS'name'
p5267
S'interface'
p5268
sS'required'
p5269
I00
sS'group_name'
p5270
Nsa(dp5271
S'description'
p5272
S'The length\n'
p5273
sS'cpp_type'
p5274
S'double'
p5275
sS'default'
p5276
S'0.75'
p5277
sS'name'
p5278
S'length'
p5279
sS'required'
p5280
I00
sS'group_name'
p5281
Nsa(dp5282
S'description'
p5283
g3
sS'cpp_type'
p5284
S'std::string'
p5285
sS'default'
p5286
S'CrossIC'
p5287
sS'name'
p5288
S'type'
p5289
sS'required'
p5290
I00
sS'group_name'
p5291
Nsa(dp5292
S'description'
p5293
S'The variable this initial condition is supposed to provide values for.\n'
p5294
sS'cpp_type'
p5295
S'VariableName'
p5296
sS'default'
p5297
g3
sS'name'
p5298
S'variable'
p5299
sS'required'
p5300
I01
sS'group_name'
p5301
Nsa(dp5302
S'description'
p5303
S'The width\n'
p5304
sS'cpp_type'
p5305
S'double'
p5306
sS'default'
p5307
S'0.125'
p5308
sS'name'
p5309
S'width'
p5310
sS'required'
p5311
I00
sS'group_name'
p5312
Nsa(dp5313
S'description'
p5314
S'The x coordinate of the lower left-hand corner of the box\n'
p5315
sS'cpp_type'
p5316
S'double'
p5317
sS'default'
p5318
S'0'
p5319
sS'name'
p5320
S'x1'
p5321
sS'required'
p5322
I00
sS'group_name'
p5323
Nsa(dp5324
S'description'
p5325
S'The x coordinate of the upper right-hand corner of the box\n'
p5326
sS'cpp_type'
p5327
S'double'
p5328
sS'default'
p5329
S'1'
p5330
sS'name'
p5331
S'x2'
p5332
sS'required'
p5333
I00
sS'group_name'
p5334
Nsa(dp5335
S'description'
p5336
S'The y coordinate of the lower left-hand corner of the box\n'
p5337
sS'cpp_type'
p5338
S'double'
p5339
sS'default'
p5340
S'0'
p5341
sS'name'
p5342
S'y1'
p5343
sS'required'
p5344
I00
sS'group_name'
p5345
Nsa(dp5346
S'description'
p5347
S'The y coordinate of the upper right-hand corner of the box\n'
p5348
sS'cpp_type'
p5349
S'double'
p5350
sS'default'
p5351
S'1'
p5352
sS'name'
p5353
S'y2'
p5354
sS'required'
p5355
I00
sS'group_name'
p5356
NsasS'name'
p5357
S'/AuxVariables/*/InitialCondition/<type>/CrossIC'
p5358
sa(dp5359
S'description'
p5360
g3
sS'type'
p5361
NsS'subblocks'
p5362
NsS'parameters'
p5363
(lp5364
(dp5365
S'description'
p5366
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p5367
sS'cpp_type'
p5368
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5369
sS'default'
p5370
g3
sS'name'
p5371
S'block'
p5372
sS'required'
p5373
I00
sS'group_name'
p5374
Nsa(dp5375
S'description'
p5376
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5377
sS'cpp_type'
p5378
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5379
sS'default'
p5380
g3
sS'name'
p5381
S'boundary'
p5382
sS'required'
p5383
I00
sS'group_name'
p5384
Nsa(dp5385
S'description'
p5386
S'The initial condition function.\n'
p5387
sS'cpp_type'
p5388
S'FunctionName'
p5389
sS'default'
p5390
g3
sS'name'
p5391
S'function'
p5392
sS'required'
p5393
I01
sS'group_name'
p5394
Nsa(dp5395
S'description'
p5396
g3
sS'cpp_type'
p5397
S'std::string'
p5398
sS'default'
p5399
S'FunctionIC'
p5400
sS'name'
p5401
S'type'
p5402
sS'required'
p5403
I00
sS'group_name'
p5404
Nsa(dp5405
S'description'
p5406
S'The variable this initial condition is supposed to provide values for.\n'
p5407
sS'cpp_type'
p5408
S'VariableName'
p5409
sS'default'
p5410
g3
sS'name'
p5411
S'variable'
p5412
sS'required'
p5413
I01
sS'group_name'
p5414
NsasS'name'
p5415
S'/AuxVariables/*/InitialCondition/<type>/FunctionIC'
p5416
sa(dp5417
S'description'
p5418
g3
sS'type'
p5419
NsS'subblocks'
p5420
NsS'parameters'
p5421
(lp5422
(dp5423
S'description'
p5424
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p5425
sS'cpp_type'
p5426
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5427
sS'default'
p5428
g3
sS'name'
p5429
S'block'
p5430
sS'required'
p5431
I00
sS'group_name'
p5432
Nsa(dp5433
S'description'
p5434
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5435
sS'cpp_type'
p5436
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5437
sS'default'
p5438
g3
sS'name'
p5439
S'boundary'
p5440
sS'required'
p5441
I00
sS'group_name'
p5442
Nsa(dp5443
S'description'
p5444
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p5445
sS'cpp_type'
p5446
S'bool'
p5447
sS'default'
p5448
S'0'
p5449
sS'name'
p5450
S'cody_test'
p5451
sS'required'
p5452
I00
sS'group_name'
p5453
Nsa(dp5454
S'description'
p5455
S'3D microstructure will be columnar in the z-direction?\n'
p5456
sS'cpp_type'
p5457
S'bool'
p5458
sS'default'
p5459
S'0'
p5460
sS'name'
p5461
S'columnar_3D'
p5462
sS'required'
p5463
I00
sS'group_name'
p5464
Nsa(dp5465
S'description'
p5466
S'The index for the current order parameter\n'
p5467
sS'cpp_type'
p5468
S'unsigned int'
p5469
sS'default'
p5470
g3
sS'name'
p5471
S'crys_index'
p5472
sS'required'
p5473
I01
sS'group_name'
p5474
Nsa(dp5475
S'description'
p5476
S'Number of order parameters\n'
p5477
sS'cpp_type'
p5478
S'unsigned int'
p5479
sS'default'
p5480
g3
sS'name'
p5481
S'crys_num'
p5482
sS'required'
p5483
I01
sS'group_name'
p5484
Nsa(dp5485
S'description'
p5486
S'Number of grains being represented by the order parameters\n'
p5487
sS'cpp_type'
p5488
S'unsigned int'
p5489
sS'default'
p5490
g3
sS'name'
p5491
S'grain_num'
p5492
sS'required'
p5493
I01
sS'group_name'
p5494
Nsa(dp5495
S'description'
p5496
S'The percent to randomly perturbate centers of grains relative to the size of the grain\n'
p5497
sS'cpp_type'
p5498
S'double'
p5499
sS'default'
p5500
S'0'
p5501
sS'name'
p5502
S'perturbation_percent'
p5503
sS'required'
p5504
I00
sS'group_name'
p5505
Nsa(dp5506
S'description'
p5507
S'The random seed\n'
p5508
sS'cpp_type'
p5509
S'unsigned int'
p5510
sS'default'
p5511
S'12444'
p5512
sS'name'
p5513
S'rand_seed'
p5514
sS'required'
p5515
I00
sS'group_name'
p5516
Nsa(dp5517
S'description'
p5518
g3
sS'cpp_type'
p5519
S'int'
p5520
sS'default'
p5521
S'1'
p5522
sS'name'
p5523
S'typ'
p5524
sS'required'
p5525
I00
sS'group_name'
p5526
Nsa(dp5527
S'description'
p5528
g3
sS'cpp_type'
p5529
S'std::string'
p5530
sS'default'
p5531
S'HexPolycrystalIC'
p5532
sS'name'
p5533
S'type'
p5534
sS'required'
p5535
I00
sS'group_name'
p5536
Nsa(dp5537
S'description'
p5538
S'The variable this initial condition is supposed to provide values for.\n'
p5539
sS'cpp_type'
p5540
S'VariableName'
p5541
sS'default'
p5542
g3
sS'name'
p5543
S'variable'
p5544
sS'required'
p5545
I01
sS'group_name'
p5546
Nsa(dp5547
S'description'
p5548
S'Specifies offset of hexagon grid in x-direction\n'
p5549
sS'cpp_type'
p5550
S'double'
p5551
sS'default'
p5552
S'0.5'
p5553
sS'name'
p5554
S'x_offset'
p5555
sS'required'
p5556
I00
sS'group_name'
p5557
NsasS'name'
p5558
S'/AuxVariables/*/InitialCondition/<type>/HexPolycrystalIC'
p5559
sa(dp5560
S'description'
p5561
g3
sS'type'
p5562
NsS'subblocks'
p5563
NsS'parameters'
p5564
(lp5565
(dp5566
S'description'
p5567
S'in 3D, whether the objects are spheres or columns\n'
p5568
sS'cpp_type'
p5569
S'bool'
p5570
sS'default'
p5571
S'1'
p5572
sS'name'
p5573
S'3D_spheres'
p5574
sS'required'
p5575
I00
sS'group_name'
p5576
Nsa(dp5577
S'description'
p5578
S'length of simulation domain in x-direction\n'
p5579
sS'cpp_type'
p5580
S'double'
p5581
sS'default'
p5582
g3
sS'name'
p5583
S'Lx'
p5584
sS'required'
p5585
I01
sS'group_name'
p5586
Nsa(dp5587
S'description'
p5588
S'length of simulation domain in y-direction\n'
p5589
sS'cpp_type'
p5590
S'double'
p5591
sS'default'
p5592
g3
sS'name'
p5593
S'Ly'
p5594
sS'required'
p5595
I01
sS'group_name'
p5596
Nsa(dp5597
S'description'
p5598
S'length of simulation domain in z-direction\n'
p5599
sS'cpp_type'
p5600
S'double'
p5601
sS'default'
p5602
S'0'
p5603
sS'name'
p5604
S'Lz'
p5605
sS'required'
p5606
I00
sS'group_name'
p5607
Nsa(dp5608
S'description'
p5609
S'Variation from central lattice position\n'
p5610
sS'cpp_type'
p5611
S'double'
p5612
sS'default'
p5613
S'0'
p5614
sS'name'
p5615
S'Rnd_variation'
p5616
sS'required'
p5617
I00
sS'group_name'
p5618
Nsa(dp5619
S'description'
p5620
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p5621
sS'cpp_type'
p5622
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5623
sS'default'
p5624
g3
sS'name'
p5625
S'block'
p5626
sS'required'
p5627
I00
sS'group_name'
p5628
Nsa(dp5629
S'description'
p5630
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5631
sS'cpp_type'
p5632
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5633
sS'default'
p5634
g3
sS'name'
p5635
S'boundary'
p5636
sS'required'
p5637
I00
sS'group_name'
p5638
Nsa(dp5639
S'description'
p5640
S'minimum spacing of bubbles, measured from center to center\n'
p5641
sS'cpp_type'
p5642
S'double'
p5643
sS'default'
p5644
S'0'
p5645
sS'name'
p5646
S'bubspac'
p5647
sS'required'
p5648
I01
sS'group_name'
p5649
Nsa(dp5650
S'description'
p5651
S'Vector containing the number of bubbles along each side\n'
p5652
sS'cpp_type'
p5653
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p5654
sS'default'
p5655
g3
sS'name'
p5656
S'circles_per_side'
p5657
sS'required'
p5658
I01
sS'group_name'
p5659
Nsa(dp5660
S'description'
p5661
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p5662
sS'cpp_type'
p5663
S'double'
p5664
sS'default'
p5665
S'0'
p5666
sS'name'
p5667
S'int_width'
p5668
sS'required'
p5669
I00
sS'group_name'
p5670
Nsa(dp5671
S'description'
p5672
S'The variable value inside the circle\n'
p5673
sS'cpp_type'
p5674
S'double'
p5675
sS'default'
p5676
g3
sS'name'
p5677
S'invalue'
p5678
sS'required'
p5679
I01
sS'group_name'
p5680
Nsa(dp5681
S'description'
p5682
S'The number of bubbles to be placed on GB\n'
p5683
sS'cpp_type'
p5684
S'unsigned int'
p5685
sS'default'
p5686
S'0'
p5687
sS'name'
p5688
S'numbub'
p5689
sS'required'
p5690
I01
sS'group_name'
p5691
Nsa(dp5692
S'description'
p5693
S'The number of tries\n'
p5694
sS'cpp_type'
p5695
S'unsigned int'
p5696
sS'default'
p5697
S'1000'
p5698
sS'name'
p5699
S'numtries'
p5700
sS'required'
p5701
I00
sS'group_name'
p5702
Nsa(dp5703
S'description'
p5704
S'The variable value outside the circle\n'
p5705
sS'cpp_type'
p5706
S'double'
p5707
sS'default'
p5708
g3
sS'name'
p5709
S'outvalue'
p5710
sS'required'
p5711
I01
sS'group_name'
p5712
Nsa(dp5713
S'description'
p5714
S'The radius of a circle\n'
p5715
sS'cpp_type'
p5716
S'double'
p5717
sS'default'
p5718
g3
sS'name'
p5719
S'radius'
p5720
sS'required'
p5721
I01
sS'group_name'
p5722
Nsa(dp5723
S'description'
p5724
S'Plus or minus Percent of random variation in the bubble radius\n'
p5725
sS'cpp_type'
p5726
S'double'
p5727
sS'default'
p5728
S'0'
p5729
sS'name'
p5730
S'radius_variation'
p5731
sS'required'
p5732
I00
sS'group_name'
p5733
Nsa(dp5734
S'description'
p5735
S'random seed\n'
p5736
sS'cpp_type'
p5737
S'unsigned int'
p5738
sS'default'
p5739
S'2000'
p5740
sS'name'
p5741
S'rand_seed'
p5742
sS'required'
p5743
I00
sS'group_name'
p5744
Nsa(dp5745
S'description'
p5746
g3
sS'cpp_type'
p5747
S'std::string'
p5748
sS'default'
p5749
S'LatticeSmoothCircleIC'
p5750
sS'name'
p5751
S'type'
p5752
sS'required'
p5753
I00
sS'group_name'
p5754
Nsa(dp5755
S'description'
p5756
S'The variable this initial condition is supposed to provide values for.\n'
p5757
sS'cpp_type'
p5758
S'VariableName'
p5759
sS'default'
p5760
g3
sS'name'
p5761
S'variable'
p5762
sS'required'
p5763
I01
sS'group_name'
p5764
Nsa(dp5765
S'description'
p5766
S'The x coordinate of the circle center\n'
p5767
sS'cpp_type'
p5768
S'double'
p5769
sS'default'
p5770
S'0'
p5771
sS'name'
p5772
S'x1'
p5773
sS'required'
p5774
I01
sS'group_name'
p5775
Nsa(dp5776
S'description'
p5777
S'The y coordinate of the circle center\n'
p5778
sS'cpp_type'
p5779
S'double'
p5780
sS'default'
p5781
S'0'
p5782
sS'name'
p5783
S'y1'
p5784
sS'required'
p5785
I01
sS'group_name'
p5786
Nsa(dp5787
S'description'
p5788
S'The z coordinate of the circle center\n'
p5789
sS'cpp_type'
p5790
S'double'
p5791
sS'default'
p5792
S'0'
p5793
sS'name'
p5794
S'z1'
p5795
sS'required'
p5796
I00
sS'group_name'
p5797
NsasS'name'
p5798
S'/AuxVariables/*/InitialCondition/<type>/LatticeSmoothCircleIC'
p5799
sa(dp5800
S'description'
p5801
g3
sS'type'
p5802
NsS'subblocks'
p5803
NsS'parameters'
p5804
(lp5805
(dp5806
S'description'
p5807
S'in 3D, whether the objects are spheres or columns\n'
p5808
sS'cpp_type'
p5809
S'bool'
p5810
sS'default'
p5811
S'1'
p5812
sS'name'
p5813
S'3D_spheres'
p5814
sS'required'
p5815
I00
sS'group_name'
p5816
Nsa(dp5817
S'description'
p5818
S'length of simulation domain in x-direction\n'
p5819
sS'cpp_type'
p5820
S'double'
p5821
sS'default'
p5822
g3
sS'name'
p5823
S'Lx'
p5824
sS'required'
p5825
I01
sS'group_name'
p5826
Nsa(dp5827
S'description'
p5828
S'length of simulation domain in y-direction\n'
p5829
sS'cpp_type'
p5830
S'double'
p5831
sS'default'
p5832
g3
sS'name'
p5833
S'Ly'
p5834
sS'required'
p5835
I01
sS'group_name'
p5836
Nsa(dp5837
S'description'
p5838
S'length of simulation domain in z-direction\n'
p5839
sS'cpp_type'
p5840
S'double'
p5841
sS'default'
p5842
S'0'
p5843
sS'name'
p5844
S'Lz'
p5845
sS'required'
p5846
I00
sS'group_name'
p5847
Nsa(dp5848
S'description'
p5849
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p5850
sS'cpp_type'
p5851
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p5852
sS'default'
p5853
g3
sS'name'
p5854
S'block'
p5855
sS'required'
p5856
I00
sS'group_name'
p5857
Nsa(dp5858
S'description'
p5859
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5860
sS'cpp_type'
p5861
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p5862
sS'default'
p5863
g3
sS'name'
p5864
S'boundary'
p5865
sS'required'
p5866
I00
sS'group_name'
p5867
Nsa(dp5868
S'description'
p5869
S'minimum spacing of bubbles, measured from center to center\n'
p5870
sS'cpp_type'
p5871
S'double'
p5872
sS'default'
p5873
g3
sS'name'
p5874
S'bubspac'
p5875
sS'required'
p5876
I01
sS'group_name'
p5877
Nsa(dp5878
S'description'
p5879
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p5880
sS'cpp_type'
p5881
S'double'
p5882
sS'default'
p5883
S'0'
p5884
sS'name'
p5885
S'int_width'
p5886
sS'required'
p5887
I00
sS'group_name'
p5888
Nsa(dp5889
S'description'
p5890
S'The variable value inside the circle\n'
p5891
sS'cpp_type'
p5892
S'double'
p5893
sS'default'
p5894
g3
sS'name'
p5895
S'invalue'
p5896
sS'required'
p5897
I01
sS'group_name'
p5898
Nsa(dp5899
S'description'
p5900
S'The number of bubbles to be placed on GB\n'
p5901
sS'cpp_type'
p5902
S'unsigned int'
p5903
sS'default'
p5904
g3
sS'name'
p5905
S'numbub'
p5906
sS'required'
p5907
I01
sS'group_name'
p5908
Nsa(dp5909
S'description'
p5910
S'The number of tries\n'
p5911
sS'cpp_type'
p5912
S'unsigned int'
p5913
sS'default'
p5914
S'1000'
p5915
sS'name'
p5916
S'numtries'
p5917
sS'required'
p5918
I00
sS'group_name'
p5919
Nsa(dp5920
S'description'
p5921
S'The variable value outside the circle\n'
p5922
sS'cpp_type'
p5923
S'double'
p5924
sS'default'
p5925
g3
sS'name'
p5926
S'outvalue'
p5927
sS'required'
p5928
I01
sS'group_name'
p5929
Nsa(dp5930
S'description'
p5931
S'The radius of a circle\n'
p5932
sS'cpp_type'
p5933
S'double'
p5934
sS'default'
p5935
g3
sS'name'
p5936
S'radius'
p5937
sS'required'
p5938
I01
sS'group_name'
p5939
Nsa(dp5940
S'description'
p5941
S'Plus or minus Percent of random variation in the bubble radius\n'
p5942
sS'cpp_type'
p5943
S'double'
p5944
sS'default'
p5945
S'0'
p5946
sS'name'
p5947
S'radius_variation'
p5948
sS'required'
p5949
I00
sS'group_name'
p5950
Nsa(dp5951
S'description'
p5952
S'random seed\n'
p5953
sS'cpp_type'
p5954
S'unsigned int'
p5955
sS'default'
p5956
S'2000'
p5957
sS'name'
p5958
S'rand_seed'
p5959
sS'required'
p5960
I00
sS'group_name'
p5961
Nsa(dp5962
S'description'
p5963
g3
sS'cpp_type'
p5964
S'std::string'
p5965
sS'default'
p5966
S'MultiSmoothCircleIC'
p5967
sS'name'
p5968
S'type'
p5969
sS'required'
p5970
I00
sS'group_name'
p5971
Nsa(dp5972
S'description'
p5973
S'The variable this initial condition is supposed to provide values for.\n'
p5974
sS'cpp_type'
p5975
S'VariableName'
p5976
sS'default'
p5977
g3
sS'name'
p5978
S'variable'
p5979
sS'required'
p5980
I01
sS'group_name'
p5981
Nsa(dp5982
S'description'
p5983
S'The x coordinate of the circle center\n'
p5984
sS'cpp_type'
p5985
S'double'
p5986
sS'default'
p5987
S'0'
p5988
sS'name'
p5989
S'x1'
p5990
sS'required'
p5991
I01
sS'group_name'
p5992
Nsa(dp5993
S'description'
p5994
S'The y coordinate of the circle center\n'
p5995
sS'cpp_type'
p5996
S'double'
p5997
sS'default'
p5998
S'0'
p5999
sS'name'
p6000
S'y1'
p6001
sS'required'
p6002
I01
sS'group_name'
p6003
Nsa(dp6004
S'description'
p6005
S'The z coordinate of the circle center\n'
p6006
sS'cpp_type'
p6007
S'double'
p6008
sS'default'
p6009
S'0'
p6010
sS'name'
p6011
S'z1'
p6012
sS'required'
p6013
I00
sS'group_name'
p6014
NsasS'name'
p6015
S'/AuxVariables/*/InitialCondition/<type>/MultiSmoothCircleIC'
p6016
sa(dp6017
S'description'
p6018
g3
sS'type'
p6019
NsS'subblocks'
p6020
NsS'parameters'
p6021
(lp6022
(dp6023
S'description'
p6024
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p6025
sS'cpp_type'
p6026
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6027
sS'default'
p6028
g3
sS'name'
p6029
S'block'
p6030
sS'required'
p6031
I00
sS'group_name'
p6032
Nsa(dp6033
S'description'
p6034
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6035
sS'cpp_type'
p6036
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6037
sS'default'
p6038
g3
sS'name'
p6039
S'boundary'
p6040
sS'required'
p6041
I00
sS'group_name'
p6042
Nsa(dp6043
S'description'
p6044
S'The index for the current order parameter\n'
p6045
sS'cpp_type'
p6046
S'unsigned int'
p6047
sS'default'
p6048
g3
sS'name'
p6049
S'crys_index'
p6050
sS'required'
p6051
I01
sS'group_name'
p6052
Nsa(dp6053
S'description'
p6054
S'Number of order parameters\n'
p6055
sS'cpp_type'
p6056
S'unsigned int'
p6057
sS'default'
p6058
g3
sS'name'
p6059
S'crys_num'
p6060
sS'required'
p6061
I01
sS'group_name'
p6062
Nsa(dp6063
S'description'
p6064
S'Type of random grain structure\n'
p6065
sS'cpp_type'
p6066
S'unsigned int'
p6067
sS'default'
p6068
g3
sS'name'
p6069
S'typ'
p6070
sS'required'
p6071
I01
sS'group_name'
p6072
Nsa(dp6073
S'description'
p6074
g3
sS'cpp_type'
p6075
S'std::string'
p6076
sS'default'
p6077
S'PolycrystalRandomIC'
p6078
sS'name'
p6079
S'type'
p6080
sS'required'
p6081
I00
sS'group_name'
p6082
Nsa(dp6083
S'description'
p6084
S'The variable this initial condition is supposed to provide values for.\n'
p6085
sS'cpp_type'
p6086
S'VariableName'
p6087
sS'default'
p6088
g3
sS'name'
p6089
S'variable'
p6090
sS'required'
p6091
I01
sS'group_name'
p6092
NsasS'name'
p6093
S'/AuxVariables/*/InitialCondition/<type>/PolycrystalRandomIC'
p6094
sa(dp6095
S'description'
p6096
g3
sS'type'
p6097
NsS'subblocks'
p6098
NsS'parameters'
p6099
(lp6100
(dp6101
S'description'
p6102
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p6103
sS'cpp_type'
p6104
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6105
sS'default'
p6106
g3
sS'name'
p6107
S'block'
p6108
sS'required'
p6109
I00
sS'group_name'
p6110
Nsa(dp6111
S'description'
p6112
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6113
sS'cpp_type'
p6114
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6115
sS'default'
p6116
g3
sS'name'
p6117
S'boundary'
p6118
sS'required'
p6119
I00
sS'group_name'
p6120
Nsa(dp6121
S'description'
p6122
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p6123
sS'cpp_type'
p6124
S'bool'
p6125
sS'default'
p6126
S'0'
p6127
sS'name'
p6128
S'cody_test'
p6129
sS'required'
p6130
I00
sS'group_name'
p6131
Nsa(dp6132
S'description'
p6133
S'3D microstructure will be columnar in the z-direction?\n'
p6134
sS'cpp_type'
p6135
S'bool'
p6136
sS'default'
p6137
S'0'
p6138
sS'name'
p6139
S'columnar_3D'
p6140
sS'required'
p6141
I00
sS'group_name'
p6142
Nsa(dp6143
S'description'
p6144
S'The index for the current order parameter\n'
p6145
sS'cpp_type'
p6146
S'unsigned int'
p6147
sS'default'
p6148
g3
sS'name'
p6149
S'crys_index'
p6150
sS'required'
p6151
I01
sS'group_name'
p6152
Nsa(dp6153
S'description'
p6154
S'Number of order parameters\n'
p6155
sS'cpp_type'
p6156
S'unsigned int'
p6157
sS'default'
p6158
g3
sS'name'
p6159
S'crys_num'
p6160
sS'required'
p6161
I01
sS'group_name'
p6162
Nsa(dp6163
S'description'
p6164
S'Number of grains being represented by the order parameters\n'
p6165
sS'cpp_type'
p6166
S'unsigned int'
p6167
sS'default'
p6168
g3
sS'name'
p6169
S'grain_num'
p6170
sS'required'
p6171
I01
sS'group_name'
p6172
Nsa(dp6173
S'description'
p6174
S'The random seed\n'
p6175
sS'cpp_type'
p6176
S'unsigned int'
p6177
sS'default'
p6178
S'12444'
p6179
sS'name'
p6180
S'rand_seed'
p6181
sS'required'
p6182
I00
sS'group_name'
p6183
Nsa(dp6184
S'description'
p6185
g3
sS'cpp_type'
p6186
S'std::string'
p6187
sS'default'
p6188
S'PolycrystalReducedIC'
p6189
sS'name'
p6190
S'type'
p6191
sS'required'
p6192
I00
sS'group_name'
p6193
Nsa(dp6194
S'description'
p6195
S'The variable this initial condition is supposed to provide values for.\n'
p6196
sS'cpp_type'
p6197
S'VariableName'
p6198
sS'default'
p6199
g3
sS'name'
p6200
S'variable'
p6201
sS'required'
p6202
I01
sS'group_name'
p6203
NsasS'name'
p6204
S'/AuxVariables/*/InitialCondition/<type>/PolycrystalReducedIC'
p6205
sa(dp6206
S'description'
p6207
g3
sS'type'
p6208
NsS'subblocks'
p6209
NsS'parameters'
p6210
(lp6211
(dp6212
S'description'
p6213
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p6214
sS'cpp_type'
p6215
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6216
sS'default'
p6217
g3
sS'name'
p6218
S'block'
p6219
sS'required'
p6220
I00
sS'group_name'
p6221
Nsa(dp6222
S'description'
p6223
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6224
sS'cpp_type'
p6225
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6226
sS'default'
p6227
g3
sS'name'
p6228
S'boundary'
p6229
sS'required'
p6230
I00
sS'group_name'
p6231
Nsa(dp6232
S'description'
p6233
S'Upper bound of the randomly generated values\n'
p6234
sS'cpp_type'
p6235
S'double'
p6236
sS'default'
p6237
S'1'
p6238
sS'name'
p6239
S'max'
p6240
sS'required'
p6241
I00
sS'group_name'
p6242
Nsa(dp6243
S'description'
p6244
S'Lower bound of the randomly generated values\n'
p6245
sS'cpp_type'
p6246
S'double'
p6247
sS'default'
p6248
S'0'
p6249
sS'name'
p6250
S'min'
p6251
sS'required'
p6252
I00
sS'group_name'
p6253
Nsa(dp6254
S'description'
p6255
S'Seed value for the random number generator\n'
p6256
sS'cpp_type'
p6257
S'unsigned int'
p6258
sS'default'
p6259
S'0'
p6260
sS'name'
p6261
S'seed'
p6262
sS'required'
p6263
I00
sS'group_name'
p6264
Nsa(dp6265
S'description'
p6266
g3
sS'cpp_type'
p6267
S'std::string'
p6268
sS'default'
p6269
S'RandomIC'
p6270
sS'name'
p6271
S'type'
p6272
sS'required'
p6273
I00
sS'group_name'
p6274
Nsa(dp6275
S'description'
p6276
S'The variable this initial condition is supposed to provide values for.\n'
p6277
sS'cpp_type'
p6278
S'VariableName'
p6279
sS'default'
p6280
g3
sS'name'
p6281
S'variable'
p6282
sS'required'
p6283
I01
sS'group_name'
p6284
NsasS'name'
p6285
S'/AuxVariables/*/InitialCondition/<type>/RandomIC'
p6286
sa(dp6287
S'description'
p6288
g3
sS'type'
p6289
NsS'subblocks'
p6290
NsS'parameters'
p6291
(lp6292
(dp6293
S'description'
p6294
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p6295
sS'cpp_type'
p6296
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6297
sS'default'
p6298
g3
sS'name'
p6299
S'block'
p6300
sS'required'
p6301
I00
sS'group_name'
p6302
Nsa(dp6303
S'description'
p6304
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6305
sS'cpp_type'
p6306
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6307
sS'default'
p6308
g3
sS'name'
p6309
S'boundary'
p6310
sS'required'
p6311
I00
sS'group_name'
p6312
Nsa(dp6313
S'description'
p6314
S'The min value of the variable invalue the box\n'
p6315
sS'cpp_type'
p6316
S'double'
p6317
sS'default'
p6318
S'0'
p6319
sS'name'
p6320
S'mn_invalue'
p6321
sS'required'
p6322
I00
sS'group_name'
p6323
Nsa(dp6324
S'description'
p6325
S'The min value of the variable outvalue the box\n'
p6326
sS'cpp_type'
p6327
S'double'
p6328
sS'default'
p6329
S'0'
p6330
sS'name'
p6331
S'mn_outvalue'
p6332
sS'required'
p6333
I00
sS'group_name'
p6334
Nsa(dp6335
S'description'
p6336
S'The max value of the variable invalue the box\n'
p6337
sS'cpp_type'
p6338
S'double'
p6339
sS'default'
p6340
g3
sS'name'
p6341
S'mx_invalue'
p6342
sS'required'
p6343
I01
sS'group_name'
p6344
Nsa(dp6345
S'description'
p6346
S'The max value of the variable outvalue the box\n'
p6347
sS'cpp_type'
p6348
S'double'
p6349
sS'default'
p6350
g3
sS'name'
p6351
S'mx_outvalue'
p6352
sS'required'
p6353
I01
sS'group_name'
p6354
Nsa(dp6355
S'description'
p6356
g3
sS'cpp_type'
p6357
S'std::string'
p6358
sS'default'
p6359
S'RndBoundingBoxIC'
p6360
sS'name'
p6361
S'type'
p6362
sS'required'
p6363
I00
sS'group_name'
p6364
Nsa(dp6365
S'description'
p6366
S'The variable this initial condition is supposed to provide values for.\n'
p6367
sS'cpp_type'
p6368
S'VariableName'
p6369
sS'default'
p6370
g3
sS'name'
p6371
S'variable'
p6372
sS'required'
p6373
I01
sS'group_name'
p6374
Nsa(dp6375
S'description'
p6376
S'The x coordinate of the lower left-hand corner of the box\n'
p6377
sS'cpp_type'
p6378
S'double'
p6379
sS'default'
p6380
g3
sS'name'
p6381
S'x1'
p6382
sS'required'
p6383
I01
sS'group_name'
p6384
Nsa(dp6385
S'description'
p6386
S'The x coordinate of the upper right-hand corner of the box\n'
p6387
sS'cpp_type'
p6388
S'double'
p6389
sS'default'
p6390
g3
sS'name'
p6391
S'x2'
p6392
sS'required'
p6393
I01
sS'group_name'
p6394
Nsa(dp6395
S'description'
p6396
S'The y coordinate of the lower left-hand corner of the box\n'
p6397
sS'cpp_type'
p6398
S'double'
p6399
sS'default'
p6400
g3
sS'name'
p6401
S'y1'
p6402
sS'required'
p6403
I01
sS'group_name'
p6404
Nsa(dp6405
S'description'
p6406
S'The y coordinate of the upper right-hand corner of the box\n'
p6407
sS'cpp_type'
p6408
S'double'
p6409
sS'default'
p6410
g3
sS'name'
p6411
S'y2'
p6412
sS'required'
p6413
I01
sS'group_name'
p6414
Nsa(dp6415
S'description'
p6416
S'The z coordinate of the lower left-hand corner of the box\n'
p6417
sS'cpp_type'
p6418
S'double'
p6419
sS'default'
p6420
S'0'
p6421
sS'name'
p6422
S'z1'
p6423
sS'required'
p6424
I00
sS'group_name'
p6425
Nsa(dp6426
S'description'
p6427
S'The z coordinate of the upper right-hand corner of the box\n'
p6428
sS'cpp_type'
p6429
S'double'
p6430
sS'default'
p6431
S'0'
p6432
sS'name'
p6433
S'z2'
p6434
sS'required'
p6435
I00
sS'group_name'
p6436
NsasS'name'
p6437
S'/AuxVariables/*/InitialCondition/<type>/RndBoundingBoxIC'
p6438
sa(dp6439
S'description'
p6440
g3
sS'type'
p6441
NsS'subblocks'
p6442
NsS'parameters'
p6443
(lp6444
(dp6445
S'description'
p6446
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p6447
sS'cpp_type'
p6448
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6449
sS'default'
p6450
g3
sS'name'
p6451
S'block'
p6452
sS'required'
p6453
I00
sS'group_name'
p6454
Nsa(dp6455
S'description'
p6456
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6457
sS'cpp_type'
p6458
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6459
sS'default'
p6460
g3
sS'name'
p6461
S'boundary'
p6462
sS'required'
p6463
I00
sS'group_name'
p6464
Nsa(dp6465
S'description'
p6466
S'The min variable value inside the circle\n'
p6467
sS'cpp_type'
p6468
S'double'
p6469
sS'default'
p6470
g3
sS'name'
p6471
S'mn_invalue'
p6472
sS'required'
p6473
I01
sS'group_name'
p6474
Nsa(dp6475
S'description'
p6476
S'The min variable value outside the circle\n'
p6477
sS'cpp_type'
p6478
S'double'
p6479
sS'default'
p6480
g3
sS'name'
p6481
S'mn_outvalue'
p6482
sS'required'
p6483
I01
sS'group_name'
p6484
Nsa(dp6485
S'description'
p6486
S'The max variable value inside the circle\n'
p6487
sS'cpp_type'
p6488
S'double'
p6489
sS'default'
p6490
g3
sS'name'
p6491
S'mx_invalue'
p6492
sS'required'
p6493
I01
sS'group_name'
p6494
Nsa(dp6495
S'description'
p6496
S'The max variable value outside the circle\n'
p6497
sS'cpp_type'
p6498
S'double'
p6499
sS'default'
p6500
g3
sS'name'
p6501
S'mx_outvalue'
p6502
sS'required'
p6503
I01
sS'group_name'
p6504
Nsa(dp6505
S'description'
p6506
S'The radius of a circle\n'
p6507
sS'cpp_type'
p6508
S'double'
p6509
sS'default'
p6510
g3
sS'name'
p6511
S'radius'
p6512
sS'required'
p6513
I01
sS'group_name'
p6514
Nsa(dp6515
S'description'
p6516
S'Seed value for the random number generator\n'
p6517
sS'cpp_type'
p6518
S'unsigned int'
p6519
sS'default'
p6520
S'12345'
p6521
sS'name'
p6522
S'seed'
p6523
sS'required'
p6524
I00
sS'group_name'
p6525
Nsa(dp6526
S'description'
p6527
g3
sS'cpp_type'
p6528
S'std::string'
p6529
sS'default'
p6530
S'RndSmoothCircleIC'
p6531
sS'name'
p6532
S'type'
p6533
sS'required'
p6534
I00
sS'group_name'
p6535
Nsa(dp6536
S'description'
p6537
S'The variable this initial condition is supposed to provide values for.\n'
p6538
sS'cpp_type'
p6539
S'VariableName'
p6540
sS'default'
p6541
g3
sS'name'
p6542
S'variable'
p6543
sS'required'
p6544
I01
sS'group_name'
p6545
Nsa(dp6546
S'description'
p6547
S'The x coordinate of the circle center\n'
p6548
sS'cpp_type'
p6549
S'double'
p6550
sS'default'
p6551
g3
sS'name'
p6552
S'x1'
p6553
sS'required'
p6554
I01
sS'group_name'
p6555
Nsa(dp6556
S'description'
p6557
S'The y coordinate of the circle center\n'
p6558
sS'cpp_type'
p6559
S'double'
p6560
sS'default'
p6561
g3
sS'name'
p6562
S'y1'
p6563
sS'required'
p6564
I01
sS'group_name'
p6565
Nsa(dp6566
S'description'
p6567
S'The z coordinate of the circle center\n'
p6568
sS'cpp_type'
p6569
S'double'
p6570
sS'default'
p6571
S'0'
p6572
sS'name'
p6573
S'z1'
p6574
sS'required'
p6575
I00
sS'group_name'
p6576
NsasS'name'
p6577
S'/AuxVariables/*/InitialCondition/<type>/RndSmoothCircleIC'
p6578
sa(dp6579
S'description'
p6580
g3
sS'type'
p6581
NsS'subblocks'
p6582
NsS'parameters'
p6583
(lp6584
(dp6585
S'description'
p6586
g3
sS'cpp_type'
p6587
S'std::string'
p6588
sS'default'
p6589
S'ScalarComponentIC'
p6590
sS'name'
p6591
S'type'
p6592
sS'required'
p6593
I00
sS'group_name'
p6594
Nsa(dp6595
S'description'
p6596
S'Initial values to initialize the scalar variable.\n'
p6597
sS'cpp_type'
p6598
S'std::vector<double, std::allocator<double> >'
p6599
sS'default'
p6600
g3
sS'name'
p6601
S'values'
p6602
sS'required'
p6603
I01
sS'group_name'
p6604
Nsa(dp6605
S'description'
p6606
S'The variable this initial condition is supposed to provide values for.\n'
p6607
sS'cpp_type'
p6608
S'VariableName'
p6609
sS'default'
p6610
g3
sS'name'
p6611
S'variable'
p6612
sS'required'
p6613
I00
sS'group_name'
p6614
NsasS'name'
p6615
S'/AuxVariables/*/InitialCondition/<type>/ScalarComponentIC'
p6616
sa(dp6617
S'description'
p6618
g3
sS'type'
p6619
NsS'subblocks'
p6620
NsS'parameters'
p6621
(lp6622
(dp6623
S'description'
p6624
g3
sS'cpp_type'
p6625
S'std::string'
p6626
sS'default'
p6627
S'ScalarConstantIC'
p6628
sS'name'
p6629
S'type'
p6630
sS'required'
p6631
I00
sS'group_name'
p6632
Nsa(dp6633
S'description'
p6634
g3
sS'cpp_type'
p6635
S'double'
p6636
sS'default'
p6637
S'0'
p6638
sS'name'
p6639
S'value'
p6640
sS'required'
p6641
I00
sS'group_name'
p6642
Nsa(dp6643
S'description'
p6644
S'The variable this initial condition is supposed to provide values for.\n'
p6645
sS'cpp_type'
p6646
S'VariableName'
p6647
sS'default'
p6648
g3
sS'name'
p6649
S'variable'
p6650
sS'required'
p6651
I00
sS'group_name'
p6652
NsasS'name'
p6653
S'/AuxVariables/*/InitialCondition/<type>/ScalarConstantIC'
p6654
sa(dp6655
S'description'
p6656
g3
sS'type'
p6657
NsS'subblocks'
p6658
NsS'parameters'
p6659
(lp6660
(dp6661
S'description'
p6662
S'in 3D, whether the objects are spheres or columns\n'
p6663
sS'cpp_type'
p6664
S'bool'
p6665
sS'default'
p6666
S'1'
p6667
sS'name'
p6668
S'3D_spheres'
p6669
sS'required'
p6670
I00
sS'group_name'
p6671
Nsa(dp6672
S'description'
p6673
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p6674
sS'cpp_type'
p6675
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6676
sS'default'
p6677
g3
sS'name'
p6678
S'block'
p6679
sS'required'
p6680
I00
sS'group_name'
p6681
Nsa(dp6682
S'description'
p6683
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6684
sS'cpp_type'
p6685
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6686
sS'default'
p6687
g3
sS'name'
p6688
S'boundary'
p6689
sS'required'
p6690
I00
sS'group_name'
p6691
Nsa(dp6692
S'description'
p6693
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p6694
sS'cpp_type'
p6695
S'double'
p6696
sS'default'
p6697
S'0'
p6698
sS'name'
p6699
S'int_width'
p6700
sS'required'
p6701
I00
sS'group_name'
p6702
Nsa(dp6703
S'description'
p6704
S'The variable value inside the circle\n'
p6705
sS'cpp_type'
p6706
S'double'
p6707
sS'default'
p6708
g3
sS'name'
p6709
S'invalue'
p6710
sS'required'
p6711
I01
sS'group_name'
p6712
Nsa(dp6713
S'description'
p6714
S'The variable value outside the circle\n'
p6715
sS'cpp_type'
p6716
S'double'
p6717
sS'default'
p6718
g3
sS'name'
p6719
S'outvalue'
p6720
sS'required'
p6721
I01
sS'group_name'
p6722
Nsa(dp6723
S'description'
p6724
S'The radius of a circle\n'
p6725
sS'cpp_type'
p6726
S'double'
p6727
sS'default'
p6728
g3
sS'name'
p6729
S'radius'
p6730
sS'required'
p6731
I01
sS'group_name'
p6732
Nsa(dp6733
S'description'
p6734
g3
sS'cpp_type'
p6735
S'std::string'
p6736
sS'default'
p6737
S'SmoothCircleIC'
p6738
sS'name'
p6739
S'type'
p6740
sS'required'
p6741
I00
sS'group_name'
p6742
Nsa(dp6743
S'description'
p6744
S'The variable this initial condition is supposed to provide values for.\n'
p6745
sS'cpp_type'
p6746
S'VariableName'
p6747
sS'default'
p6748
g3
sS'name'
p6749
S'variable'
p6750
sS'required'
p6751
I01
sS'group_name'
p6752
Nsa(dp6753
S'description'
p6754
S'The x coordinate of the circle center\n'
p6755
sS'cpp_type'
p6756
S'double'
p6757
sS'default'
p6758
g3
sS'name'
p6759
S'x1'
p6760
sS'required'
p6761
I01
sS'group_name'
p6762
Nsa(dp6763
S'description'
p6764
S'The y coordinate of the circle center\n'
p6765
sS'cpp_type'
p6766
S'double'
p6767
sS'default'
p6768
g3
sS'name'
p6769
S'y1'
p6770
sS'required'
p6771
I01
sS'group_name'
p6772
Nsa(dp6773
S'description'
p6774
S'The z coordinate of the circle center\n'
p6775
sS'cpp_type'
p6776
S'double'
p6777
sS'default'
p6778
S'0'
p6779
sS'name'
p6780
S'z1'
p6781
sS'required'
p6782
I00
sS'group_name'
p6783
NsasS'name'
p6784
S'/AuxVariables/*/InitialCondition/<type>/SmoothCircleIC'
p6785
sa(dp6786
S'description'
p6787
g3
sS'type'
p6788
NsS'subblocks'
p6789
NsS'parameters'
p6790
(lp6791
(dp6792
S'description'
p6793
S'in 3D, whether the objects are spheres or columns\n'
p6794
sS'cpp_type'
p6795
S'bool'
p6796
sS'default'
p6797
S'1'
p6798
sS'name'
p6799
S'3D_spheres'
p6800
sS'required'
p6801
I00
sS'group_name'
p6802
Nsa(dp6803
S'description'
p6804
S'length of simulation domain in x-direction\n'
p6805
sS'cpp_type'
p6806
S'double'
p6807
sS'default'
p6808
S'0'
p6809
sS'name'
p6810
S'Lx'
p6811
sS'required'
p6812
I01
sS'group_name'
p6813
Nsa(dp6814
S'description'
p6815
S'length of simulation domain in y-direction\n'
p6816
sS'cpp_type'
p6817
S'double'
p6818
sS'default'
p6819
S'0'
p6820
sS'name'
p6821
S'Ly'
p6822
sS'required'
p6823
I01
sS'group_name'
p6824
Nsa(dp6825
S'description'
p6826
S'length of simulation domain in z-direction\n'
p6827
sS'cpp_type'
p6828
S'double'
p6829
sS'default'
p6830
S'0'
p6831
sS'name'
p6832
S'Lz'
p6833
sS'required'
p6834
I00
sS'group_name'
p6835
Nsa(dp6836
S'description'
p6837
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p6838
sS'cpp_type'
p6839
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p6840
sS'default'
p6841
g3
sS'name'
p6842
S'block'
p6843
sS'required'
p6844
I00
sS'group_name'
p6845
Nsa(dp6846
S'description'
p6847
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6848
sS'cpp_type'
p6849
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p6850
sS'default'
p6851
g3
sS'name'
p6852
S'boundary'
p6853
sS'required'
p6854
I00
sS'group_name'
p6855
Nsa(dp6856
S'description'
p6857
S'minimum spacing of bubbles, measured from center to center\n'
p6858
sS'cpp_type'
p6859
S'double'
p6860
sS'default'
p6861
S'0'
p6862
sS'name'
p6863
S'bubspac'
p6864
sS'required'
p6865
I01
sS'group_name'
p6866
Nsa(dp6867
S'description'
p6868
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p6869
sS'cpp_type'
p6870
S'double'
p6871
sS'default'
p6872
S'0'
p6873
sS'name'
p6874
S'int_width'
p6875
sS'required'
p6876
I00
sS'group_name'
p6877
Nsa(dp6878
S'description'
p6879
S'The variable value inside the circle\n'
p6880
sS'cpp_type'
p6881
S'double'
p6882
sS'default'
p6883
g3
sS'name'
p6884
S'invalue'
p6885
sS'required'
p6886
I01
sS'group_name'
p6887
Nsa(dp6888
S'description'
p6889
S'The number of bubbles to be placed on GB\n'
p6890
sS'cpp_type'
p6891
S'unsigned int'
p6892
sS'default'
p6893
S'0'
p6894
sS'name'
p6895
S'numbub'
p6896
sS'required'
p6897
I01
sS'group_name'
p6898
Nsa(dp6899
S'description'
p6900
S'The number of tries\n'
p6901
sS'cpp_type'
p6902
S'unsigned int'
p6903
sS'default'
p6904
S'1000'
p6905
sS'name'
p6906
S'numtries'
p6907
sS'required'
p6908
I00
sS'group_name'
p6909
Nsa(dp6910
S'description'
p6911
S'The variable value outside the circle\n'
p6912
sS'cpp_type'
p6913
S'double'
p6914
sS'default'
p6915
g3
sS'name'
p6916
S'outvalue'
p6917
sS'required'
p6918
I01
sS'group_name'
p6919
Nsa(dp6920
S'description'
p6921
S'The radius for each circle\n'
p6922
sS'cpp_type'
p6923
S'std::vector<double, std::allocator<double> >'
p6924
sS'default'
p6925
g3
sS'name'
p6926
S'radii'
p6927
sS'required'
p6928
I01
sS'group_name'
p6929
Nsa(dp6930
S'description'
p6931
S'The radius of a circle\n'
p6932
sS'cpp_type'
p6933
S'double'
p6934
sS'default'
p6935
S'0'
p6936
sS'name'
p6937
S'radius'
p6938
sS'required'
p6939
I01
sS'group_name'
p6940
Nsa(dp6941
S'description'
p6942
S'Plus or minus Percent of random variation in the bubble radius\n'
p6943
sS'cpp_type'
p6944
S'double'
p6945
sS'default'
p6946
S'0'
p6947
sS'name'
p6948
S'radius_variation'
p6949
sS'required'
p6950
I00
sS'group_name'
p6951
Nsa(dp6952
S'description'
p6953
S'random seed\n'
p6954
sS'cpp_type'
p6955
S'unsigned int'
p6956
sS'default'
p6957
S'2000'
p6958
sS'name'
p6959
S'rand_seed'
p6960
sS'required'
p6961
I00
sS'group_name'
p6962
Nsa(dp6963
S'description'
p6964
g3
sS'cpp_type'
p6965
S'std::string'
p6966
sS'default'
p6967
S'SpecifiedSmoothCircleIC'
p6968
sS'name'
p6969
S'type'
p6970
sS'required'
p6971
I00
sS'group_name'
p6972
Nsa(dp6973
S'description'
p6974
S'The variable this initial condition is supposed to provide values for.\n'
p6975
sS'cpp_type'
p6976
S'VariableName'
p6977
sS'default'
p6978
g3
sS'name'
p6979
S'variable'
p6980
sS'required'
p6981
I01
sS'group_name'
p6982
Nsa(dp6983
S'description'
p6984
S'The x coordinate of the circle center\n'
p6985
sS'cpp_type'
p6986
S'double'
p6987
sS'default'
p6988
S'0'
p6989
sS'name'
p6990
S'x1'
p6991
sS'required'
p6992
I01
sS'group_name'
p6993
Nsa(dp6994
S'description'
p6995
S'The x-coordinate for each circle center\n'
p6996
sS'cpp_type'
p6997
S'std::vector<double, std::allocator<double> >'
p6998
sS'default'
p6999
g3
sS'name'
p7000
S'x_positions'
p7001
sS'required'
p7002
I01
sS'group_name'
p7003
Nsa(dp7004
S'description'
p7005
S'The y coordinate of the circle center\n'
p7006
sS'cpp_type'
p7007
S'double'
p7008
sS'default'
p7009
S'0'
p7010
sS'name'
p7011
S'y1'
p7012
sS'required'
p7013
I01
sS'group_name'
p7014
Nsa(dp7015
S'description'
p7016
S'The y-coordinate for each circle center\n'
p7017
sS'cpp_type'
p7018
S'std::vector<double, std::allocator<double> >'
p7019
sS'default'
p7020
g3
sS'name'
p7021
S'y_positions'
p7022
sS'required'
p7023
I01
sS'group_name'
p7024
Nsa(dp7025
S'description'
p7026
S'The z coordinate of the circle center\n'
p7027
sS'cpp_type'
p7028
S'double'
p7029
sS'default'
p7030
S'0'
p7031
sS'name'
p7032
S'z1'
p7033
sS'required'
p7034
I00
sS'group_name'
p7035
Nsa(dp7036
S'description'
p7037
S'The z-coordinate for each circle center\n'
p7038
sS'cpp_type'
p7039
S'std::vector<double, std::allocator<double> >'
p7040
sS'default'
p7041
g3
sS'name'
p7042
S'z_positions'
p7043
sS'required'
p7044
I01
sS'group_name'
p7045
NsasS'name'
p7046
S'/AuxVariables/*/InitialCondition/<type>/SpecifiedSmoothCircleIC'
p7047
sa(dp7048
S'description'
p7049
g3
sS'type'
p7050
NsS'subblocks'
p7051
NsS'parameters'
p7052
(lp7053
(dp7054
S'description'
p7055
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p7056
sS'cpp_type'
p7057
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7058
sS'default'
p7059
g3
sS'name'
p7060
S'block'
p7061
sS'required'
p7062
I00
sS'group_name'
p7063
Nsa(dp7064
S'description'
p7065
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7066
sS'cpp_type'
p7067
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7068
sS'default'
p7069
g3
sS'name'
p7070
S'boundary'
p7071
sS'required'
p7072
I00
sS'group_name'
p7073
Nsa(dp7074
S'description'
p7075
S'The z coordinate of the circle center\n'
p7076
sS'cpp_type'
p7077
S'double'
p7078
sS'default'
p7079
g3
sS'name'
p7080
S'height'
p7081
sS'required'
p7082
I01
sS'group_name'
p7083
Nsa(dp7084
S'description'
p7085
S'The variable value inside the circle\n'
p7086
sS'cpp_type'
p7087
S'double'
p7088
sS'default'
p7089
g3
sS'name'
p7090
S'invalue'
p7091
sS'required'
p7092
I01
sS'group_name'
p7093
Nsa(dp7094
S'description'
p7095
S'The variable value outside the circle\n'
p7096
sS'cpp_type'
p7097
S'double'
p7098
sS'default'
p7099
g3
sS'name'
p7100
S'outvalue'
p7101
sS'required'
p7102
I01
sS'group_name'
p7103
Nsa(dp7104
S'description'
p7105
g3
sS'cpp_type'
p7106
S'std::string'
p7107
sS'default'
p7108
S'ThumbIC'
p7109
sS'name'
p7110
S'type'
p7111
sS'required'
p7112
I00
sS'group_name'
p7113
Nsa(dp7114
S'description'
p7115
S'The variable this initial condition is supposed to provide values for.\n'
p7116
sS'cpp_type'
p7117
S'VariableName'
p7118
sS'default'
p7119
g3
sS'name'
p7120
S'variable'
p7121
sS'required'
p7122
I01
sS'group_name'
p7123
Nsa(dp7124
S'description'
p7125
S'The y coordinate of the circle center\n'
p7126
sS'cpp_type'
p7127
S'double'
p7128
sS'default'
p7129
g3
sS'name'
p7130
S'width'
p7131
sS'required'
p7132
I01
sS'group_name'
p7133
Nsa(dp7134
S'description'
p7135
S'The x coordinate of the circle center\n'
p7136
sS'cpp_type'
p7137
S'double'
p7138
sS'default'
p7139
g3
sS'name'
p7140
S'xcoord'
p7141
sS'required'
p7142
I01
sS'group_name'
p7143
NsasS'name'
p7144
S'/AuxVariables/*/InitialCondition/<type>/ThumbIC'
p7145
sa(dp7146
S'description'
p7147
g3
sS'type'
p7148
NsS'subblocks'
p7149
NsS'parameters'
p7150
(lp7151
(dp7152
S'description'
p7153
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p7154
sS'cpp_type'
p7155
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7156
sS'default'
p7157
g3
sS'name'
p7158
S'block'
p7159
sS'required'
p7160
I00
sS'group_name'
p7161
Nsa(dp7162
S'description'
p7163
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7164
sS'cpp_type'
p7165
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7166
sS'default'
p7167
g3
sS'name'
p7168
S'boundary'
p7169
sS'required'
p7170
I00
sS'group_name'
p7171
Nsa(dp7172
S'description'
p7173
S'The index for the current crystal\n'
p7174
sS'cpp_type'
p7175
S'unsigned int'
p7176
sS'default'
p7177
g3
sS'name'
p7178
S'crys_index'
p7179
sS'required'
p7180
I01
sS'group_name'
p7181
Nsa(dp7182
S'description'
p7183
S'Number of crystals\n'
p7184
sS'cpp_type'
p7185
S'unsigned int'
p7186
sS'default'
p7187
g3
sS'name'
p7188
S'crys_num'
p7189
sS'required'
p7190
I01
sS'group_name'
p7191
Nsa(dp7192
S'description'
p7193
g3
sS'cpp_type'
p7194
S'std::string'
p7195
sS'default'
p7196
S'Tricrystal2CircleGrainsIC'
p7197
sS'name'
p7198
S'type'
p7199
sS'required'
p7200
I00
sS'group_name'
p7201
Nsa(dp7202
S'description'
p7203
S'The variable this initial condition is supposed to provide values for.\n'
p7204
sS'cpp_type'
p7205
S'VariableName'
p7206
sS'default'
p7207
g3
sS'name'
p7208
S'variable'
p7209
sS'required'
p7210
I01
sS'group_name'
p7211
NsasS'name'
p7212
S'/AuxVariables/*/InitialCondition/<type>/Tricrystal2CircleGrainsIC'
p7213
sasS'parameters'
p7214
NsS'name'
p7215
S'/AuxVariables/*/InitialCondition/<type>'
p7216
sasS'parameters'
p7217
(lp7218
(dp7219
S'description'
p7220
S'A string representing the Moose Object that will be built by this Action\n'
p7221
sS'cpp_type'
p7222
S'std::string'
p7223
sS'default'
p7224
g3
sS'name'
p7225
S'type'
p7226
sS'required'
p7227
I01
sS'group_name'
p7228
NsasS'name'
p7229
S'/AuxVariables/*/InitialCondition'
p7230
sasS'parameters'
p7231
(lp7232
(dp7233
S'description'
p7234
S'The block id where this variable lives\n'
p7235
sS'cpp_type'
p7236
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p7237
sS'default'
p7238
g3
sS'name'
p7239
S'block'
p7240
sS'required'
p7241
I00
sS'group_name'
p7242
Nsa(dp7243
S'name'
p7244
S'family'
p7245
sS'cpp_type'
p7246
S'MooseEnum'
p7247
sS'default'
p7248
S'LAGRANGE'
p7249
sS'description'
p7250
S'Specifies the family of FE shape functions to use for this variable\n'
p7251
sS'required'
p7252
I00
sS'options'
p7253
S'LAGRANGE MONOMIAL SCALAR'
p7254
sS'group_name'
p7255
Nsa(dp7256
S'description'
p7257
S'Specifies the initial condition for this variable\n'
p7258
sS'cpp_type'
p7259
S'double'
p7260
sS'default'
p7261
S'0'
p7262
sS'name'
p7263
S'initial_condition'
p7264
sS'required'
p7265
I00
sS'group_name'
p7266
Nsa(dp7267
S'name'
p7268
S'order'
p7269
sS'cpp_type'
p7270
S'MooseEnum'
p7271
sS'default'
p7272
S'FIRST'
p7273
sS'description'
p7274
S'Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n'
p7275
sS'required'
p7276
I00
sS'options'
p7277
S'CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH'
p7278
sS'group_name'
p7279
Nsa(dp7280
S'description'
p7281
S'Gives the timestep for which to read a solution from a file for a given variable\n'
p7282
sS'cpp_type'
p7283
S'int'
p7284
sS'default'
p7285
S'2'
p7286
sS'name'
p7287
S'initial_from_file_timestep'
p7288
sS'required'
p7289
I00
sS'group_name'
p7290
S'Initial From File'
p7291
sa(dp7292
S'description'
p7293
S'Gives the name of a variable for which to read an initial condition from a mesh file\n'
p7294
sS'cpp_type'
p7295
S'std::string'
p7296
sS'default'
p7297
g3
sS'name'
p7298
S'initial_from_file_var'
p7299
sS'required'
p7300
I00
sS'group_name'
p7301
S'Initial From File'
p7302
sasS'name'
p7303
S'/AuxVariables/*'
p7304
sasS'parameters'
p7305
NsS'name'
p7306
S'/AuxVariables'
p7307
sa(dp7308
S'description'
p7309
g3
sS'type'
p7310
NsS'subblocks'
p7311
(lp7312
(dp7313
S'description'
p7314
g3
sS'type'
p7315
NsS'subblocks'
p7316
NsS'parameters'
p7317
(lp7318
(dp7319
S'description'
p7320
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7321
sS'cpp_type'
p7322
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7323
sS'default'
p7324
g3
sS'name'
p7325
S'boundary'
p7326
sS'required'
p7327
I01
sS'group_name'
p7328
Nsa(dp7329
S'description'
p7330
S'A string representing the Moose Object that will be built by this Action\n'
p7331
sS'cpp_type'
p7332
S'std::string'
p7333
sS'default'
p7334
g3
sS'name'
p7335
S'type'
p7336
sS'required'
p7337
I01
sS'group_name'
p7338
Nsa(dp7339
S'description'
p7340
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7341
sS'cpp_type'
p7342
S'bool'
p7343
sS'default'
p7344
S'0'
p7345
sS'name'
p7346
S'use_displaced_mesh'
p7347
sS'required'
p7348
I00
sS'group_name'
p7349
S'Advanced'
p7350
sa(dp7351
S'description'
p7352
S'The name of the variable that this boundary condition applies to\n'
p7353
sS'cpp_type'
p7354
S'NonlinearVariableName'
p7355
sS'default'
p7356
g3
sS'name'
p7357
S'variable'
p7358
sS'required'
p7359
I01
sS'group_name'
p7360
NsasS'name'
p7361
S'/BCs/*'
p7362
sa(dp7363
S'description'
p7364
g3
sS'type'
p7365
NsS'subblocks'
p7366
NsS'parameters'
p7367
(lp7368
(dp7369
S'description'
p7370
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7371
sS'cpp_type'
p7372
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7373
sS'default'
p7374
g3
sS'name'
p7375
S'boundary'
p7376
sS'required'
p7377
I01
sS'group_name'
p7378
Nsa(dp7379
S'description'
p7380
S"The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7381
sS'cpp_type'
p7382
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p7383
sS'default'
p7384
g3
sS'name'
p7385
S'diag_save_in'
p7386
sS'required'
p7387
I00
sS'group_name'
p7388
S'Advanced'
p7389
sa(dp7390
S'description'
p7391
g3
sS'cpp_type'
p7392
S'double'
p7393
sS'default'
p7394
S'0'
p7395
sS'name'
p7396
S'duration'
p7397
sS'required'
p7398
I00
sS'group_name'
p7399
Nsa(dp7400
S'description'
p7401
g3
sS'cpp_type'
p7402
S'double'
p7403
sS'default'
p7404
S'500'
p7405
sS'name'
p7406
S'final'
p7407
sS'required'
p7408
I00
sS'group_name'
p7409
Nsa(dp7410
S'description'
p7411
g3
sS'cpp_type'
p7412
S'double'
p7413
sS'default'
p7414
S'500'
p7415
sS'name'
p7416
S'initial'
p7417
sS'required'
p7418
I00
sS'group_name'
p7419
Nsa(dp7420
S'description'
p7421
g3
sS'cpp_type'
p7422
S'double'
p7423
sS'default'
p7424
S'7500'
p7425
sS'name'
p7426
S'rate'
p7427
sS'required'
p7428
I00
sS'group_name'
p7429
Nsa(dp7430
S'description'
p7431
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7432
sS'cpp_type'
p7433
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p7434
sS'default'
p7435
g3
sS'name'
p7436
S'save_in'
p7437
sS'required'
p7438
I00
sS'group_name'
p7439
S'Advanced'
p7440
sa(dp7441
S'description'
p7442
S'The seed for the master random number generator\n'
p7443
sS'cpp_type'
p7444
S'unsigned int'
p7445
sS'default'
p7446
S'0'
p7447
sS'name'
p7448
S'seed'
p7449
sS'required'
p7450
I00
sS'group_name'
p7451
S'Advanced'
p7452
sa(dp7453
S'description'
p7454
g3
sS'cpp_type'
p7455
S'std::string'
p7456
sS'default'
p7457
S'ConvectiveFluxBC'
p7458
sS'name'
p7459
S'type'
p7460
sS'required'
p7461
I00
sS'group_name'
p7462
Nsa(dp7463
S'description'
p7464
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7465
sS'cpp_type'
p7466
S'bool'
p7467
sS'default'
p7468
S'0'
p7469
sS'name'
p7470
S'use_displaced_mesh'
p7471
sS'required'
p7472
I00
sS'group_name'
p7473
S'Advanced'
p7474
sa(dp7475
S'description'
p7476
S'The name of the variable that this boundary condition applies to\n'
p7477
sS'cpp_type'
p7478
S'NonlinearVariableName'
p7479
sS'default'
p7480
g3
sS'name'
p7481
S'variable'
p7482
sS'required'
p7483
I01
sS'group_name'
p7484
NsasS'name'
p7485
S'/BCs/ConvectiveFluxBC'
p7486
sa(dp7487
S'description'
p7488
g3
sS'type'
p7489
NsS'subblocks'
p7490
NsS'parameters'
p7491
(lp7492
(dp7493
S'description'
p7494
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7495
sS'cpp_type'
p7496
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7497
sS'default'
p7498
g3
sS'name'
p7499
S'boundary'
p7500
sS'required'
p7501
I01
sS'group_name'
p7502
Nsa(dp7503
S'description'
p7504
S"The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7505
sS'cpp_type'
p7506
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p7507
sS'default'
p7508
g3
sS'name'
p7509
S'diag_save_in'
p7510
sS'required'
p7511
I00
sS'group_name'
p7512
S'Advanced'
p7513
sa(dp7514
S'description'
p7515
S'Epsilon\n'
p7516
sS'cpp_type'
p7517
S'double'
p7518
sS'default'
p7519
g3
sS'name'
p7520
S'epsilon'
p7521
sS'required'
p7522
I01
sS'group_name'
p7523
Nsa(dp7524
S'description'
p7525
S'The forcing function.\n'
p7526
sS'cpp_type'
p7527
S'FunctionName'
p7528
sS'default'
p7529
g3
sS'name'
p7530
S'function'
p7531
sS'required'
p7532
I01
sS'group_name'
p7533
Nsa(dp7534
S'description'
p7535
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7536
sS'cpp_type'
p7537
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p7538
sS'default'
p7539
g3
sS'name'
p7540
S'save_in'
p7541
sS'required'
p7542
I00
sS'group_name'
p7543
S'Advanced'
p7544
sa(dp7545
S'description'
p7546
S'The seed for the master random number generator\n'
p7547
sS'cpp_type'
p7548
S'unsigned int'
p7549
sS'default'
p7550
S'0'
p7551
sS'name'
p7552
S'seed'
p7553
sS'required'
p7554
I00
sS'group_name'
p7555
S'Advanced'
p7556
sa(dp7557
S'description'
p7558
S'Sigma\n'
p7559
sS'cpp_type'
p7560
S'double'
p7561
sS'default'
p7562
g3
sS'name'
p7563
S'sigma'
p7564
sS'required'
p7565
I01
sS'group_name'
p7566
Nsa(dp7567
S'description'
p7568
g3
sS'cpp_type'
p7569
S'std::string'
p7570
sS'default'
p7571
S'DGFunctionDiffusionDirichletBC'
p7572
sS'name'
p7573
S'type'
p7574
sS'required'
p7575
I00
sS'group_name'
p7576
Nsa(dp7577
S'description'
p7578
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7579
sS'cpp_type'
p7580
S'bool'
p7581
sS'default'
p7582
S'0'
p7583
sS'name'
p7584
S'use_displaced_mesh'
p7585
sS'required'
p7586
I00
sS'group_name'
p7587
S'Advanced'
p7588
sa(dp7589
S'description'
p7590
S'The value the variable should have on the boundary\n'
p7591
sS'cpp_type'
p7592
S'double'
p7593
sS'default'
p7594
S'0'
p7595
sS'name'
p7596
S'value'
p7597
sS'required'
p7598
I00
sS'group_name'
p7599
Nsa(dp7600
S'description'
p7601
S'The name of the variable that this boundary condition applies to\n'
p7602
sS'cpp_type'
p7603
S'NonlinearVariableName'
p7604
sS'default'
p7605
g3
sS'name'
p7606
S'variable'
p7607
sS'required'
p7608
I01
sS'group_name'
p7609
NsasS'name'
p7610
S'/BCs/DGFunctionDiffusionDirichletBC'
p7611
sa(dp7612
S'description'
p7613
g3
sS'type'
p7614
NsS'subblocks'
p7615
NsS'parameters'
p7616
(lp7617
(dp7618
S'description'
p7619
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7620
sS'cpp_type'
p7621
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7622
sS'default'
p7623
g3
sS'name'
p7624
S'boundary'
p7625
sS'required'
p7626
I01
sS'group_name'
p7627
Nsa(dp7628
S'description'
p7629
S"The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7630
sS'cpp_type'
p7631
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p7632
sS'default'
p7633
g3
sS'name'
p7634
S'diag_save_in'
p7635
sS'required'
p7636
I00
sS'group_name'
p7637
S'Advanced'
p7638
sa(dp7639
S'description'
p7640
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7641
sS'cpp_type'
p7642
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p7643
sS'default'
p7644
g3
sS'name'
p7645
S'save_in'
p7646
sS'required'
p7647
I00
sS'group_name'
p7648
S'Advanced'
p7649
sa(dp7650
S'description'
p7651
S'The seed for the master random number generator\n'
p7652
sS'cpp_type'
p7653
S'unsigned int'
p7654
sS'default'
p7655
S'0'
p7656
sS'name'
p7657
S'seed'
p7658
sS'required'
p7659
I00
sS'group_name'
p7660
S'Advanced'
p7661
sa(dp7662
S'description'
p7663
g3
sS'cpp_type'
p7664
S'std::string'
p7665
sS'default'
p7666
S'DiffusionFluxBC'
p7667
sS'name'
p7668
S'type'
p7669
sS'required'
p7670
I00
sS'group_name'
p7671
Nsa(dp7672
S'description'
p7673
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7674
sS'cpp_type'
p7675
S'bool'
p7676
sS'default'
p7677
S'0'
p7678
sS'name'
p7679
S'use_displaced_mesh'
p7680
sS'required'
p7681
I00
sS'group_name'
p7682
S'Advanced'
p7683
sa(dp7684
S'description'
p7685
S'The name of the variable that this boundary condition applies to\n'
p7686
sS'cpp_type'
p7687
S'NonlinearVariableName'
p7688
sS'default'
p7689
g3
sS'name'
p7690
S'variable'
p7691
sS'required'
p7692
I01
sS'group_name'
p7693
NsasS'name'
p7694
S'/BCs/DiffusionFluxBC'
p7695
sa(dp7696
S'description'
p7697
g3
sS'type'
p7698
NsS'subblocks'
p7699
NsS'parameters'
p7700
(lp7701
(dp7702
S'description'
p7703
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7704
sS'cpp_type'
p7705
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7706
sS'default'
p7707
g3
sS'name'
p7708
S'boundary'
p7709
sS'required'
p7710
I01
sS'group_name'
p7711
Nsa(dp7712
S'description'
p7713
S'The seed for the master random number generator\n'
p7714
sS'cpp_type'
p7715
S'unsigned int'
p7716
sS'default'
p7717
S'0'
p7718
sS'name'
p7719
S'seed'
p7720
sS'required'
p7721
I00
sS'group_name'
p7722
S'Advanced'
p7723
sa(dp7724
S'description'
p7725
g3
sS'cpp_type'
p7726
S'std::string'
p7727
sS'default'
p7728
S'DirichletBC'
p7729
sS'name'
p7730
S'type'
p7731
sS'required'
p7732
I00
sS'group_name'
p7733
Nsa(dp7734
S'description'
p7735
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7736
sS'cpp_type'
p7737
S'bool'
p7738
sS'default'
p7739
S'0'
p7740
sS'name'
p7741
S'use_displaced_mesh'
p7742
sS'required'
p7743
I00
sS'group_name'
p7744
S'Advanced'
p7745
sa(dp7746
S'description'
p7747
S'Value of the BC\n'
p7748
sS'cpp_type'
p7749
S'double'
p7750
sS'default'
p7751
g3
sS'name'
p7752
S'value'
p7753
sS'required'
p7754
I01
sS'group_name'
p7755
Nsa(dp7756
S'description'
p7757
S'The name of the variable that this boundary condition applies to\n'
p7758
sS'cpp_type'
p7759
S'NonlinearVariableName'
p7760
sS'default'
p7761
g3
sS'name'
p7762
S'variable'
p7763
sS'required'
p7764
I01
sS'group_name'
p7765
NsasS'name'
p7766
S'/BCs/DirichletBC'
p7767
sa(dp7768
S'description'
p7769
g3
sS'type'
p7770
NsS'subblocks'
p7771
NsS'parameters'
p7772
(lp7773
(dp7774
S'description'
p7775
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7776
sS'cpp_type'
p7777
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7778
sS'default'
p7779
g3
sS'name'
p7780
S'boundary'
p7781
sS'required'
p7782
I01
sS'group_name'
p7783
Nsa(dp7784
S'description'
p7785
S'The forcing function.\n'
p7786
sS'cpp_type'
p7787
S'FunctionName'
p7788
sS'default'
p7789
g3
sS'name'
p7790
S'function'
p7791
sS'required'
p7792
I01
sS'group_name'
p7793
Nsa(dp7794
S'description'
p7795
S'The seed for the master random number generator\n'
p7796
sS'cpp_type'
p7797
S'unsigned int'
p7798
sS'default'
p7799
S'0'
p7800
sS'name'
p7801
S'seed'
p7802
sS'required'
p7803
I00
sS'group_name'
p7804
S'Advanced'
p7805
sa(dp7806
S'description'
p7807
g3
sS'cpp_type'
p7808
S'std::string'
p7809
sS'default'
p7810
S'FunctionDirichletBC'
p7811
sS'name'
p7812
S'type'
p7813
sS'required'
p7814
I00
sS'group_name'
p7815
Nsa(dp7816
S'description'
p7817
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7818
sS'cpp_type'
p7819
S'bool'
p7820
sS'default'
p7821
S'0'
p7822
sS'name'
p7823
S'use_displaced_mesh'
p7824
sS'required'
p7825
I00
sS'group_name'
p7826
S'Advanced'
p7827
sa(dp7828
S'description'
p7829
S'The name of the variable that this boundary condition applies to\n'
p7830
sS'cpp_type'
p7831
S'NonlinearVariableName'
p7832
sS'default'
p7833
g3
sS'name'
p7834
S'variable'
p7835
sS'required'
p7836
I01
sS'group_name'
p7837
NsasS'name'
p7838
S'/BCs/FunctionDirichletBC'
p7839
sa(dp7840
S'description'
p7841
g3
sS'type'
p7842
NsS'subblocks'
p7843
NsS'parameters'
p7844
(lp7845
(dp7846
S'description'
p7847
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7848
sS'cpp_type'
p7849
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7850
sS'default'
p7851
g3
sS'name'
p7852
S'boundary'
p7853
sS'required'
p7854
I01
sS'group_name'
p7855
Nsa(dp7856
S'description'
p7857
S"The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7858
sS'cpp_type'
p7859
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p7860
sS'default'
p7861
g3
sS'name'
p7862
S'diag_save_in'
p7863
sS'required'
p7864
I00
sS'group_name'
p7865
S'Advanced'
p7866
sa(dp7867
S'description'
p7868
S'The function.\n'
p7869
sS'cpp_type'
p7870
S'FunctionName'
p7871
sS'default'
p7872
g3
sS'name'
p7873
S'function'
p7874
sS'required'
p7875
I01
sS'group_name'
p7876
Nsa(dp7877
S'description'
p7878
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7879
sS'cpp_type'
p7880
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p7881
sS'default'
p7882
g3
sS'name'
p7883
S'save_in'
p7884
sS'required'
p7885
I00
sS'group_name'
p7886
S'Advanced'
p7887
sa(dp7888
S'description'
p7889
S'The seed for the master random number generator\n'
p7890
sS'cpp_type'
p7891
S'unsigned int'
p7892
sS'default'
p7893
S'0'
p7894
sS'name'
p7895
S'seed'
p7896
sS'required'
p7897
I00
sS'group_name'
p7898
S'Advanced'
p7899
sa(dp7900
S'description'
p7901
g3
sS'cpp_type'
p7902
S'std::string'
p7903
sS'default'
p7904
S'FunctionNeumannBC'
p7905
sS'name'
p7906
S'type'
p7907
sS'required'
p7908
I00
sS'group_name'
p7909
Nsa(dp7910
S'description'
p7911
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7912
sS'cpp_type'
p7913
S'bool'
p7914
sS'default'
p7915
S'0'
p7916
sS'name'
p7917
S'use_displaced_mesh'
p7918
sS'required'
p7919
I00
sS'group_name'
p7920
S'Advanced'
p7921
sa(dp7922
S'description'
p7923
S'The name of the variable that this boundary condition applies to\n'
p7924
sS'cpp_type'
p7925
S'NonlinearVariableName'
p7926
sS'default'
p7927
g3
sS'name'
p7928
S'variable'
p7929
sS'required'
p7930
I01
sS'group_name'
p7931
NsasS'name'
p7932
S'/BCs/FunctionNeumannBC'
p7933
sa(dp7934
S'description'
p7935
g3
sS'type'
p7936
NsS'subblocks'
p7937
NsS'parameters'
p7938
(lp7939
(dp7940
S'description'
p7941
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7942
sS'cpp_type'
p7943
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p7944
sS'default'
p7945
g3
sS'name'
p7946
S'boundary'
p7947
sS'required'
p7948
I01
sS'group_name'
p7949
Nsa(dp7950
S'description'
p7951
S'The forcing function.\n'
p7952
sS'cpp_type'
p7953
S'FunctionName'
p7954
sS'default'
p7955
g3
sS'name'
p7956
S'function'
p7957
sS'required'
p7958
I01
sS'group_name'
p7959
Nsa(dp7960
S'description'
p7961
S'The seed for the master random number generator\n'
p7962
sS'cpp_type'
p7963
S'unsigned int'
p7964
sS'default'
p7965
S'0'
p7966
sS'name'
p7967
S'seed'
p7968
sS'required'
p7969
I00
sS'group_name'
p7970
S'Advanced'
p7971
sa(dp7972
S'description'
p7973
g3
sS'cpp_type'
p7974
S'std::string'
p7975
sS'default'
p7976
S'FunctionPresetBC'
p7977
sS'name'
p7978
S'type'
p7979
sS'required'
p7980
I00
sS'group_name'
p7981
Nsa(dp7982
S'description'
p7983
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7984
sS'cpp_type'
p7985
S'bool'
p7986
sS'default'
p7987
S'0'
p7988
sS'name'
p7989
S'use_displaced_mesh'
p7990
sS'required'
p7991
I00
sS'group_name'
p7992
S'Advanced'
p7993
sa(dp7994
S'description'
p7995
S'The name of the variable that this boundary condition applies to\n'
p7996
sS'cpp_type'
p7997
S'NonlinearVariableName'
p7998
sS'default'
p7999
g3
sS'name'
p8000
S'variable'
p8001
sS'required'
p8002
I01
sS'group_name'
p8003
NsasS'name'
p8004
S'/BCs/FunctionPresetBC'
p8005
sa(dp8006
S'description'
p8007
g3
sS'type'
p8008
NsS'subblocks'
p8009
NsS'parameters'
p8010
(lp8011
(dp8012
S'description'
p8013
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8014
sS'cpp_type'
p8015
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8016
sS'default'
p8017
g3
sS'name'
p8018
S'boundary'
p8019
sS'required'
p8020
I01
sS'group_name'
p8021
Nsa(dp8022
S'description'
p8023
S'The seed for the master random number generator\n'
p8024
sS'cpp_type'
p8025
S'unsigned int'
p8026
sS'default'
p8027
S'0'
p8028
sS'name'
p8029
S'seed'
p8030
sS'required'
p8031
I00
sS'group_name'
p8032
S'Advanced'
p8033
sa(dp8034
S'description'
p8035
g3
sS'cpp_type'
p8036
S'std::string'
p8037
sS'default'
p8038
S'MatchedValueBC'
p8039
sS'name'
p8040
S'type'
p8041
sS'required'
p8042
I00
sS'group_name'
p8043
Nsa(dp8044
S'description'
p8045
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8046
sS'cpp_type'
p8047
S'bool'
p8048
sS'default'
p8049
S'0'
p8050
sS'name'
p8051
S'use_displaced_mesh'
p8052
sS'required'
p8053
I00
sS'group_name'
p8054
S'Advanced'
p8055
sa(dp8056
S'description'
p8057
g3
sS'cpp_type'
p8058
S'std::vector<VariableName>'
p8059
sS'default'
p8060
g3
sS'name'
p8061
S'v'
p8062
sS'required'
p8063
I01
sS'group_name'
p8064
Nsa(dp8065
S'description'
p8066
S'The name of the variable that this boundary condition applies to\n'
p8067
sS'cpp_type'
p8068
S'NonlinearVariableName'
p8069
sS'default'
p8070
g3
sS'name'
p8071
S'variable'
p8072
sS'required'
p8073
I01
sS'group_name'
p8074
NsasS'name'
p8075
S'/BCs/MatchedValueBC'
p8076
sa(dp8077
S'description'
p8078
g3
sS'type'
p8079
NsS'subblocks'
p8080
NsS'parameters'
p8081
(lp8082
(dp8083
S'description'
p8084
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8085
sS'cpp_type'
p8086
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8087
sS'default'
p8088
g3
sS'name'
p8089
S'boundary'
p8090
sS'required'
p8091
I01
sS'group_name'
p8092
Nsa(dp8093
S'description'
p8094
S"The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8095
sS'cpp_type'
p8096
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p8097
sS'default'
p8098
g3
sS'name'
p8099
S'diag_save_in'
p8100
sS'required'
p8101
I00
sS'group_name'
p8102
S'Advanced'
p8103
sa(dp8104
S'description'
p8105
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8106
sS'cpp_type'
p8107
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p8108
sS'default'
p8109
g3
sS'name'
p8110
S'save_in'
p8111
sS'required'
p8112
I00
sS'group_name'
p8113
S'Advanced'
p8114
sa(dp8115
S'description'
p8116
S'The seed for the master random number generator\n'
p8117
sS'cpp_type'
p8118
S'unsigned int'
p8119
sS'default'
p8120
S'0'
p8121
sS'name'
p8122
S'seed'
p8123
sS'required'
p8124
I00
sS'group_name'
p8125
S'Advanced'
p8126
sa(dp8127
S'description'
p8128
g3
sS'cpp_type'
p8129
S'std::string'
p8130
sS'default'
p8131
S'NeumannBC'
p8132
sS'name'
p8133
S'type'
p8134
sS'required'
p8135
I00
sS'group_name'
p8136
Nsa(dp8137
S'description'
p8138
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8139
sS'cpp_type'
p8140
S'bool'
p8141
sS'default'
p8142
S'0'
p8143
sS'name'
p8144
S'use_displaced_mesh'
p8145
sS'required'
p8146
I00
sS'group_name'
p8147
S'Advanced'
p8148
sa(dp8149
S'description'
p8150
S'The value of the gradient on the boundary.\n'
p8151
sS'cpp_type'
p8152
S'double'
p8153
sS'default'
p8154
S'0'
p8155
sS'name'
p8156
S'value'
p8157
sS'required'
p8158
I00
sS'group_name'
p8159
Nsa(dp8160
S'description'
p8161
S'The name of the variable that this boundary condition applies to\n'
p8162
sS'cpp_type'
p8163
S'NonlinearVariableName'
p8164
sS'default'
p8165
g3
sS'name'
p8166
S'variable'
p8167
sS'required'
p8168
I01
sS'group_name'
p8169
NsasS'name'
p8170
S'/BCs/NeumannBC'
p8171
sa(dp8172
S'description'
p8173
g3
sS'type'
p8174
NsS'subblocks'
p8175
(lp8176
(dp8177
S'description'
p8178
g3
sS'type'
p8179
NsS'subblocks'
p8180
NsS'parameters'
p8181
(lp8182
(dp8183
S'description'
p8184
S'If using a generated mesh, you can specifiy just the dimension(s) you want to mark as periodic\n'
p8185
sS'cpp_type'
p8186
S'std::vector<std::string, std::allocator<std::string> >'
p8187
sS'default'
p8188
g3
sS'name'
p8189
S'auto_direction'
p8190
sS'required'
p8191
I00
sS'group_name'
p8192
Nsa(dp8193
S'description'
p8194
S'Functions that specify the inverse transformation\n'
p8195
sS'cpp_type'
p8196
S'std::vector<std::string, std::allocator<std::string> >'
p8197
sS'default'
p8198
g3
sS'name'
p8199
S'inv_transform_func'
p8200
sS'required'
p8201
I00
sS'group_name'
p8202
Nsa(dp8203
S'description'
p8204
S'Boundary ID associated with the primary boundary.\n'
p8205
sS'cpp_type'
p8206
S'BoundaryName'
p8207
sS'default'
p8208
g3
sS'name'
p8209
S'primary'
p8210
sS'required'
p8211
I00
sS'group_name'
p8212
Nsa(dp8213
S'description'
p8214
S'Boundary ID associated with the secondary boundary.\n'
p8215
sS'cpp_type'
p8216
S'BoundaryName'
p8217
sS'default'
p8218
g3
sS'name'
p8219
S'secondary'
p8220
sS'required'
p8221
I00
sS'group_name'
p8222
Nsa(dp8223
S'description'
p8224
S'Functions that specify the transformation\n'
p8225
sS'cpp_type'
p8226
S'std::vector<std::string, std::allocator<std::string> >'
p8227
sS'default'
p8228
g3
sS'name'
p8229
S'transform_func'
p8230
sS'required'
p8231
I00
sS'group_name'
p8232
Nsa(dp8233
S'description'
p8234
S'Vector that translates coordinates on the primary boundary to coordinates on the secondary boundary.\n'
p8235
sS'cpp_type'
p8236
S'libMesh::VectorValue<double>'
p8237
sS'default'
p8238
g3
sS'name'
p8239
S'translation'
p8240
sS'required'
p8241
I00
sS'group_name'
p8242
Nsa(dp8243
S'description'
p8244
S'Variable for the periodic boundary\n'
p8245
sS'cpp_type'
p8246
S'std::vector<VariableName, std::allocator<VariableName> >'
p8247
sS'default'
p8248
g3
sS'name'
p8249
S'variable'
p8250
sS'required'
p8251
I00
sS'group_name'
p8252
NsasS'name'
p8253
S'/BCs/Periodic/*'
p8254
sasS'parameters'
p8255
NsS'name'
p8256
S'/BCs/Periodic'
p8257
sa(dp8258
S'description'
p8259
g3
sS'type'
p8260
NsS'subblocks'
p8261
NsS'parameters'
p8262
(lp8263
(dp8264
S'description'
p8265
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8266
sS'cpp_type'
p8267
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8268
sS'default'
p8269
g3
sS'name'
p8270
S'boundary'
p8271
sS'required'
p8272
I01
sS'group_name'
p8273
Nsa(dp8274
S'description'
p8275
S'The seed for the master random number generator\n'
p8276
sS'cpp_type'
p8277
S'unsigned int'
p8278
sS'default'
p8279
S'0'
p8280
sS'name'
p8281
S'seed'
p8282
sS'required'
p8283
I00
sS'group_name'
p8284
S'Advanced'
p8285
sa(dp8286
S'description'
p8287
g3
sS'cpp_type'
p8288
S'std::string'
p8289
sS'default'
p8290
S'PresetBC'
p8291
sS'name'
p8292
S'type'
p8293
sS'required'
p8294
I00
sS'group_name'
p8295
Nsa(dp8296
S'description'
p8297
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8298
sS'cpp_type'
p8299
S'bool'
p8300
sS'default'
p8301
S'0'
p8302
sS'name'
p8303
S'use_displaced_mesh'
p8304
sS'required'
p8305
I00
sS'group_name'
p8306
S'Advanced'
p8307
sa(dp8308
S'description'
p8309
S'Value of the BC\n'
p8310
sS'cpp_type'
p8311
S'double'
p8312
sS'default'
p8313
g3
sS'name'
p8314
S'value'
p8315
sS'required'
p8316
I01
sS'group_name'
p8317
Nsa(dp8318
S'description'
p8319
S'The name of the variable that this boundary condition applies to\n'
p8320
sS'cpp_type'
p8321
S'NonlinearVariableName'
p8322
sS'default'
p8323
g3
sS'name'
p8324
S'variable'
p8325
sS'required'
p8326
I01
sS'group_name'
p8327
NsasS'name'
p8328
S'/BCs/PresetBC'
p8329
sa(dp8330
S'description'
p8331
g3
sS'type'
p8332
NsS'subblocks'
p8333
NsS'parameters'
p8334
(lp8335
(dp8336
S'description'
p8337
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8338
sS'cpp_type'
p8339
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8340
sS'default'
p8341
g3
sS'name'
p8342
S'boundary'
p8343
sS'required'
p8344
I01
sS'group_name'
p8345
Nsa(dp8346
S'description'
p8347
g3
sS'cpp_type'
p8348
S'double'
p8349
sS'default'
p8350
S'0'
p8351
sS'name'
p8352
S'duration'
p8353
sS'required'
p8354
I00
sS'group_name'
p8355
Nsa(dp8356
S'description'
p8357
g3
sS'cpp_type'
p8358
S'double'
p8359
sS'default'
p8360
S'0'
p8361
sS'name'
p8362
S'final'
p8363
sS'required'
p8364
I00
sS'group_name'
p8365
Nsa(dp8366
S'description'
p8367
g3
sS'cpp_type'
p8368
S'double'
p8369
sS'default'
p8370
S'0'
p8371
sS'name'
p8372
S'initial'
p8373
sS'required'
p8374
I00
sS'group_name'
p8375
Nsa(dp8376
S'description'
p8377
S'The seed for the master random number generator\n'
p8378
sS'cpp_type'
p8379
S'unsigned int'
p8380
sS'default'
p8381
S'0'
p8382
sS'name'
p8383
S'seed'
p8384
sS'required'
p8385
I00
sS'group_name'
p8386
S'Advanced'
p8387
sa(dp8388
S'description'
p8389
g3
sS'cpp_type'
p8390
S'std::string'
p8391
sS'default'
p8392
S'SinDirichletBC'
p8393
sS'name'
p8394
S'type'
p8395
sS'required'
p8396
I00
sS'group_name'
p8397
Nsa(dp8398
S'description'
p8399
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8400
sS'cpp_type'
p8401
S'bool'
p8402
sS'default'
p8403
S'0'
p8404
sS'name'
p8405
S'use_displaced_mesh'
p8406
sS'required'
p8407
I00
sS'group_name'
p8408
S'Advanced'
p8409
sa(dp8410
S'description'
p8411
S'The name of the variable that this boundary condition applies to\n'
p8412
sS'cpp_type'
p8413
S'NonlinearVariableName'
p8414
sS'default'
p8415
g3
sS'name'
p8416
S'variable'
p8417
sS'required'
p8418
I01
sS'group_name'
p8419
NsasS'name'
p8420
S'/BCs/SinDirichletBC'
p8421
sa(dp8422
S'description'
p8423
g3
sS'type'
p8424
NsS'subblocks'
p8425
NsS'parameters'
p8426
(lp8427
(dp8428
S'description'
p8429
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8430
sS'cpp_type'
p8431
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8432
sS'default'
p8433
g3
sS'name'
p8434
S'boundary'
p8435
sS'required'
p8436
I01
sS'group_name'
p8437
Nsa(dp8438
S'description'
p8439
S"The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8440
sS'cpp_type'
p8441
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p8442
sS'default'
p8443
g3
sS'name'
p8444
S'diag_save_in'
p8445
sS'required'
p8446
I00
sS'group_name'
p8447
S'Advanced'
p8448
sa(dp8449
S'description'
p8450
S'The duration of the ramp\n'
p8451
sS'cpp_type'
p8452
S'double'
p8453
sS'default'
p8454
S'0'
p8455
sS'name'
p8456
S'duration'
p8457
sS'required'
p8458
I00
sS'group_name'
p8459
Nsa(dp8460
S'description'
p8461
S'The final value of the gradient on the boundary\n'
p8462
sS'cpp_type'
p8463
S'double'
p8464
sS'default'
p8465
S'0'
p8466
sS'name'
p8467
S'final'
p8468
sS'required'
p8469
I00
sS'group_name'
p8470
Nsa(dp8471
S'description'
p8472
S'The initial value of the gradient on the boundary\n'
p8473
sS'cpp_type'
p8474
S'double'
p8475
sS'default'
p8476
S'0'
p8477
sS'name'
p8478
S'initial'
p8479
sS'required'
p8480
I00
sS'group_name'
p8481
Nsa(dp8482
S'description'
p8483
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8484
sS'cpp_type'
p8485
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p8486
sS'default'
p8487
g3
sS'name'
p8488
S'save_in'
p8489
sS'required'
p8490
I00
sS'group_name'
p8491
S'Advanced'
p8492
sa(dp8493
S'description'
p8494
S'The seed for the master random number generator\n'
p8495
sS'cpp_type'
p8496
S'unsigned int'
p8497
sS'default'
p8498
S'0'
p8499
sS'name'
p8500
S'seed'
p8501
sS'required'
p8502
I00
sS'group_name'
p8503
S'Advanced'
p8504
sa(dp8505
S'description'
p8506
g3
sS'cpp_type'
p8507
S'std::string'
p8508
sS'default'
p8509
S'SinNeumannBC'
p8510
sS'name'
p8511
S'type'
p8512
sS'required'
p8513
I00
sS'group_name'
p8514
Nsa(dp8515
S'description'
p8516
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8517
sS'cpp_type'
p8518
S'bool'
p8519
sS'default'
p8520
S'0'
p8521
sS'name'
p8522
S'use_displaced_mesh'
p8523
sS'required'
p8524
I00
sS'group_name'
p8525
S'Advanced'
p8526
sa(dp8527
S'description'
p8528
S'The name of the variable that this boundary condition applies to\n'
p8529
sS'cpp_type'
p8530
S'NonlinearVariableName'
p8531
sS'default'
p8532
g3
sS'name'
p8533
S'variable'
p8534
sS'required'
p8535
I01
sS'group_name'
p8536
NsasS'name'
p8537
S'/BCs/SinNeumannBC'
p8538
sa(dp8539
S'description'
p8540
g3
sS'type'
p8541
NsS'subblocks'
p8542
NsS'parameters'
p8543
(lp8544
(dp8545
S'description'
p8546
S'No idea.\n'
p8547
sS'cpp_type'
p8548
S'double'
p8549
sS'default'
p8550
S'1'
p8551
sS'name'
p8552
S'alpha'
p8553
sS'required'
p8554
I00
sS'group_name'
p8555
Nsa(dp8556
S'description'
p8557
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8558
sS'cpp_type'
p8559
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8560
sS'default'
p8561
g3
sS'name'
p8562
S'boundary'
p8563
sS'required'
p8564
I01
sS'group_name'
p8565
Nsa(dp8566
S'description'
p8567
S"The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8568
sS'cpp_type'
p8569
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p8570
sS'default'
p8571
g3
sS'name'
p8572
S'diag_save_in'
p8573
sS'required'
p8574
I00
sS'group_name'
p8575
S'Advanced'
p8576
sa(dp8577
S'description'
p8578
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8579
sS'cpp_type'
p8580
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p8581
sS'default'
p8582
g3
sS'name'
p8583
S'save_in'
p8584
sS'required'
p8585
I00
sS'group_name'
p8586
S'Advanced'
p8587
sa(dp8588
S'description'
p8589
S'The seed for the master random number generator\n'
p8590
sS'cpp_type'
p8591
S'unsigned int'
p8592
sS'default'
p8593
S'0'
p8594
sS'name'
p8595
S'seed'
p8596
sS'required'
p8597
I00
sS'group_name'
p8598
S'Advanced'
p8599
sa(dp8600
S'description'
p8601
g3
sS'cpp_type'
p8602
S'std::string'
p8603
sS'default'
p8604
S'VacuumBC'
p8605
sS'name'
p8606
S'type'
p8607
sS'required'
p8608
I00
sS'group_name'
p8609
Nsa(dp8610
S'description'
p8611
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8612
sS'cpp_type'
p8613
S'bool'
p8614
sS'default'
p8615
S'0'
p8616
sS'name'
p8617
S'use_displaced_mesh'
p8618
sS'required'
p8619
I00
sS'group_name'
p8620
S'Advanced'
p8621
sa(dp8622
S'description'
p8623
S'The name of the variable that this boundary condition applies to\n'
p8624
sS'cpp_type'
p8625
S'NonlinearVariableName'
p8626
sS'default'
p8627
g3
sS'name'
p8628
S'variable'
p8629
sS'required'
p8630
I01
sS'group_name'
p8631
NsasS'name'
p8632
S'/BCs/VacuumBC'
p8633
sa(dp8634
S'description'
p8635
g3
sS'type'
p8636
NsS'subblocks'
p8637
NsS'parameters'
p8638
(lp8639
(dp8640
S'description'
p8641
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8642
sS'cpp_type'
p8643
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8644
sS'default'
p8645
g3
sS'name'
p8646
S'boundary'
p8647
sS'required'
p8648
I01
sS'group_name'
p8649
Nsa(dp8650
S'description'
p8651
S"The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8652
sS'cpp_type'
p8653
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p8654
sS'default'
p8655
g3
sS'name'
p8656
S'diag_save_in'
p8657
sS'required'
p8658
I00
sS'group_name'
p8659
S'Advanced'
p8660
sa(dp8661
S'description'
p8662
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8663
sS'cpp_type'
p8664
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p8665
sS'default'
p8666
g3
sS'name'
p8667
S'save_in'
p8668
sS'required'
p8669
I00
sS'group_name'
p8670
S'Advanced'
p8671
sa(dp8672
S'description'
p8673
S'The seed for the master random number generator\n'
p8674
sS'cpp_type'
p8675
S'unsigned int'
p8676
sS'default'
p8677
S'0'
p8678
sS'name'
p8679
S'seed'
p8680
sS'required'
p8681
I00
sS'group_name'
p8682
S'Advanced'
p8683
sa(dp8684
S'description'
p8685
g3
sS'cpp_type'
p8686
S'std::string'
p8687
sS'default'
p8688
S'VectorNeumannBC'
p8689
sS'name'
p8690
S'type'
p8691
sS'required'
p8692
I00
sS'group_name'
p8693
Nsa(dp8694
S'description'
p8695
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8696
sS'cpp_type'
p8697
S'bool'
p8698
sS'default'
p8699
S'0'
p8700
sS'name'
p8701
S'use_displaced_mesh'
p8702
sS'required'
p8703
I00
sS'group_name'
p8704
S'Advanced'
p8705
sa(dp8706
S'description'
p8707
S'The name of the variable that this boundary condition applies to\n'
p8708
sS'cpp_type'
p8709
S'NonlinearVariableName'
p8710
sS'default'
p8711
g3
sS'name'
p8712
S'variable'
p8713
sS'required'
p8714
I01
sS'group_name'
p8715
Nsa(dp8716
S'description'
p8717
S'vector this BC should act in\n'
p8718
sS'cpp_type'
p8719
S'libMesh::VectorValue<double>'
p8720
sS'default'
p8721
S'0 0 0'
p8722
sS'name'
p8723
S'vector_value'
p8724
sS'required'
p8725
I00
sS'group_name'
p8726
NsasS'name'
p8727
S'/BCs/VectorNeumannBC'
p8728
sa(dp8729
S'description'
p8730
g3
sS'type'
p8731
NsS'subblocks'
p8732
NsS'parameters'
p8733
(lp8734
(dp8735
S'description'
p8736
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8737
sS'cpp_type'
p8738
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8739
sS'default'
p8740
g3
sS'name'
p8741
S'boundary'
p8742
sS'required'
p8743
I01
sS'group_name'
p8744
Nsa(dp8745
S'description'
p8746
S"The name of auxiliary variables to save this Kernel's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8747
sS'cpp_type'
p8748
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p8749
sS'default'
p8750
g3
sS'name'
p8751
S'diag_save_in'
p8752
sS'required'
p8753
I00
sS'group_name'
p8754
S'Advanced'
p8755
sa(dp8756
S'description'
p8757
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8758
sS'cpp_type'
p8759
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p8760
sS'default'
p8761
g3
sS'name'
p8762
S'save_in'
p8763
sS'required'
p8764
I00
sS'group_name'
p8765
S'Advanced'
p8766
sa(dp8767
S'description'
p8768
S'The seed for the master random number generator\n'
p8769
sS'cpp_type'
p8770
S'unsigned int'
p8771
sS'default'
p8772
S'0'
p8773
sS'name'
p8774
S'seed'
p8775
sS'required'
p8776
I00
sS'group_name'
p8777
S'Advanced'
p8778
sa(dp8779
S'description'
p8780
g3
sS'cpp_type'
p8781
S'std::string'
p8782
sS'default'
p8783
S'WeakGradientBC'
p8784
sS'name'
p8785
S'type'
p8786
sS'required'
p8787
I00
sS'group_name'
p8788
Nsa(dp8789
S'description'
p8790
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8791
sS'cpp_type'
p8792
S'bool'
p8793
sS'default'
p8794
S'0'
p8795
sS'name'
p8796
S'use_displaced_mesh'
p8797
sS'required'
p8798
I00
sS'group_name'
p8799
S'Advanced'
p8800
sa(dp8801
S'description'
p8802
S'The name of the variable that this boundary condition applies to\n'
p8803
sS'cpp_type'
p8804
S'NonlinearVariableName'
p8805
sS'default'
p8806
g3
sS'name'
p8807
S'variable'
p8808
sS'required'
p8809
I01
sS'group_name'
p8810
NsasS'name'
p8811
S'/BCs/WeakGradientBC'
p8812
sasS'parameters'
p8813
NsS'name'
p8814
S'/BCs'
p8815
sa(dp8816
S'description'
p8817
g3
sS'type'
p8818
NsS'subblocks'
p8819
(lp8820
(dp8821
S'description'
p8822
g3
sS'type'
p8823
NsS'subblocks'
p8824
NsS'parameters'
p8825
(lp8826
(dp8827
S'description'
p8828
S'A string representing the Moose Object that will be built by this Action\n'
p8829
sS'cpp_type'
p8830
S'std::string'
p8831
sS'default'
p8832
g3
sS'name'
p8833
S'type'
p8834
sS'required'
p8835
I01
sS'group_name'
p8836
NsasS'name'
p8837
S'/Bounds/*'
p8838
sa(dp8839
S'description'
p8840
g3
sS'type'
p8841
NsS'subblocks'
p8842
NsS'parameters'
p8843
(lp8844
(dp8845
S'description'
p8846
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p8847
sS'cpp_type'
p8848
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8849
sS'default'
p8850
g3
sS'name'
p8851
S'block'
p8852
sS'required'
p8853
I00
sS'group_name'
p8854
Nsa(dp8855
S'description'
p8856
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8857
sS'cpp_type'
p8858
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8859
sS'default'
p8860
g3
sS'name'
p8861
S'boundary'
p8862
sS'required'
p8863
I00
sS'group_name'
p8864
Nsa(dp8865
S'description'
p8866
S'number of grains\n'
p8867
sS'cpp_type'
p8868
S'unsigned int'
p8869
sS'default'
p8870
g3
sS'name'
p8871
S'crys_num'
p8872
sS'required'
p8873
I01
sS'group_name'
p8874
Nsa(dp8875
S'name'
p8876
S'execute_on'
p8877
sS'cpp_type'
p8878
S'MooseEnum'
p8879
sS'default'
p8880
S'residual'
p8881
sS'description'
p8882
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p8883
sS'required'
p8884
I00
sS'options'
p8885
S'initial residual jacobian timestep timestep_begin custom'
p8886
sS'group_name'
p8887
Nsa(dp8888
S'description'
p8889
S'The seed for the master random number generator\n'
p8890
sS'cpp_type'
p8891
S'unsigned int'
p8892
sS'default'
p8893
S'0'
p8894
sS'name'
p8895
S'seed'
p8896
sS'required'
p8897
I00
sS'group_name'
p8898
S'Advanced'
p8899
sa(dp8900
S'description'
p8901
g3
sS'cpp_type'
p8902
S'std::string'
p8903
sS'default'
p8904
S'BndsCalcAux'
p8905
sS'name'
p8906
S'type'
p8907
sS'required'
p8908
I00
sS'group_name'
p8909
Nsa(dp8910
S'description'
p8911
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8912
sS'cpp_type'
p8913
S'bool'
p8914
sS'default'
p8915
S'0'
p8916
sS'name'
p8917
S'use_displaced_mesh'
p8918
sS'required'
p8919
I00
sS'group_name'
p8920
S'Advanced'
p8921
sa(dp8922
S'description'
p8923
S'Array of coupled variables\n'
p8924
sS'cpp_type'
p8925
S'std::vector<VariableName>'
p8926
sS'default'
p8927
g3
sS'name'
p8928
S'v'
p8929
sS'required'
p8930
I00
sS'group_name'
p8931
Nsa(dp8932
S'description'
p8933
S'base for variable names\n'
p8934
sS'cpp_type'
p8935
S'std::string'
p8936
sS'default'
p8937
g3
sS'name'
p8938
S'var_name_base'
p8939
sS'required'
p8940
I01
sS'group_name'
p8941
Nsa(dp8942
S'description'
p8943
S'The name of the variable that this object applies to\n'
p8944
sS'cpp_type'
p8945
S'AuxVariableName'
p8946
sS'default'
p8947
g3
sS'name'
p8948
S'variable'
p8949
sS'required'
p8950
I01
sS'group_name'
p8951
NsasS'name'
p8952
S'/Bounds/BndsCalcAux'
p8953
sa(dp8954
S'description'
p8955
g3
sS'type'
p8956
NsS'subblocks'
p8957
NsS'parameters'
p8958
(lp8959
(dp8960
S'description'
p8961
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p8962
sS'cpp_type'
p8963
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p8964
sS'default'
p8965
g3
sS'name'
p8966
S'block'
p8967
sS'required'
p8968
I00
sS'group_name'
p8969
Nsa(dp8970
S'description'
p8971
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8972
sS'cpp_type'
p8973
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p8974
sS'default'
p8975
g3
sS'name'
p8976
S'boundary'
p8977
sS'required'
p8978
I00
sS'group_name'
p8979
Nsa(dp8980
S'description'
p8981
S'The variable to be bounded\n'
p8982
sS'cpp_type'
p8983
S'std::vector<VariableName>'
p8984
sS'default'
p8985
g3
sS'name'
p8986
S'bounded_variable'
p8987
sS'required'
p8988
I01
sS'group_name'
p8989
Nsa(dp8990
S'name'
p8991
S'execute_on'
p8992
sS'cpp_type'
p8993
S'MooseEnum'
p8994
sS'default'
p8995
S'residual'
p8996
sS'description'
p8997
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p8998
sS'required'
p8999
I00
sS'options'
p9000
S'initial residual jacobian timestep timestep_begin custom'
p9001
sS'group_name'
p9002
Nsa(dp9003
S'description'
p9004
S'The lower bound for the variable\n'
p9005
sS'cpp_type'
p9006
S'double'
p9007
sS'default'
p9008
g3
sS'name'
p9009
S'lower'
p9010
sS'required'
p9011
I00
sS'group_name'
p9012
Nsa(dp9013
S'description'
p9014
S'The seed for the master random number generator\n'
p9015
sS'cpp_type'
p9016
S'unsigned int'
p9017
sS'default'
p9018
S'0'
p9019
sS'name'
p9020
S'seed'
p9021
sS'required'
p9022
I00
sS'group_name'
p9023
S'Advanced'
p9024
sa(dp9025
S'description'
p9026
g3
sS'cpp_type'
p9027
S'std::string'
p9028
sS'default'
p9029
S'BoundsAux'
p9030
sS'name'
p9031
S'type'
p9032
sS'required'
p9033
I00
sS'group_name'
p9034
Nsa(dp9035
S'description'
p9036
S'The upper bound for the variable\n'
p9037
sS'cpp_type'
p9038
S'double'
p9039
sS'default'
p9040
g3
sS'name'
p9041
S'upper'
p9042
sS'required'
p9043
I00
sS'group_name'
p9044
Nsa(dp9045
S'description'
p9046
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9047
sS'cpp_type'
p9048
S'bool'
p9049
sS'default'
p9050
S'0'
p9051
sS'name'
p9052
S'use_displaced_mesh'
p9053
sS'required'
p9054
I00
sS'group_name'
p9055
S'Advanced'
p9056
sa(dp9057
S'description'
p9058
S'The name of the variable that this object applies to\n'
p9059
sS'cpp_type'
p9060
S'AuxVariableName'
p9061
sS'default'
p9062
g3
sS'name'
p9063
S'variable'
p9064
sS'required'
p9065
I01
sS'group_name'
p9066
NsasS'name'
p9067
S'/Bounds/BoundsAux'
p9068
sa(dp9069
S'description'
p9070
g3
sS'type'
p9071
NsS'subblocks'
p9072
NsS'parameters'
p9073
(lp9074
(dp9075
S'description'
p9076
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p9077
sS'cpp_type'
p9078
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9079
sS'default'
p9080
g3
sS'name'
p9081
S'block'
p9082
sS'required'
p9083
I00
sS'group_name'
p9084
Nsa(dp9085
S'description'
p9086
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9087
sS'cpp_type'
p9088
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9089
sS'default'
p9090
g3
sS'name'
p9091
S'boundary'
p9092
sS'required'
p9093
I00
sS'group_name'
p9094
Nsa(dp9095
S'name'
p9096
S'execute_on'
p9097
sS'cpp_type'
p9098
S'MooseEnum'
p9099
sS'default'
p9100
S'residual'
p9101
sS'description'
p9102
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p9103
sS'required'
p9104
I00
sS'options'
p9105
S'initial residual jacobian timestep timestep_begin custom'
p9106
sS'group_name'
p9107
Nsa(dp9108
S'description'
p9109
S'The seed for the master random number generator\n'
p9110
sS'cpp_type'
p9111
S'unsigned int'
p9112
sS'default'
p9113
S'0'
p9114
sS'name'
p9115
S'seed'
p9116
sS'required'
p9117
I00
sS'group_name'
p9118
S'Advanced'
p9119
sa(dp9120
S'description'
p9121
g3
sS'cpp_type'
p9122
S'std::string'
p9123
sS'default'
p9124
S'ConstantAux'
p9125
sS'name'
p9126
S'type'
p9127
sS'required'
p9128
I00
sS'group_name'
p9129
Nsa(dp9130
S'description'
p9131
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9132
sS'cpp_type'
p9133
S'bool'
p9134
sS'default'
p9135
S'0'
p9136
sS'name'
p9137
S'use_displaced_mesh'
p9138
sS'required'
p9139
I00
sS'group_name'
p9140
S'Advanced'
p9141
sa(dp9142
S'description'
p9143
S'Some constant value that can be read from the input file\n'
p9144
sS'cpp_type'
p9145
S'double'
p9146
sS'default'
p9147
S'0'
p9148
sS'name'
p9149
S'value'
p9150
sS'required'
p9151
I00
sS'group_name'
p9152
Nsa(dp9153
S'description'
p9154
S'The name of the variable that this object applies to\n'
p9155
sS'cpp_type'
p9156
S'AuxVariableName'
p9157
sS'default'
p9158
g3
sS'name'
p9159
S'variable'
p9160
sS'required'
p9161
I01
sS'group_name'
p9162
NsasS'name'
p9163
S'/Bounds/ConstantAux'
p9164
sa(dp9165
S'description'
p9166
g3
sS'type'
p9167
NsS'subblocks'
p9168
NsS'parameters'
p9169
(lp9170
(dp9171
S'description'
p9172
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p9173
sS'cpp_type'
p9174
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9175
sS'default'
p9176
g3
sS'name'
p9177
S'block'
p9178
sS'required'
p9179
I00
sS'group_name'
p9180
Nsa(dp9181
S'description'
p9182
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9183
sS'cpp_type'
p9184
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9185
sS'default'
p9186
g3
sS'name'
p9187
S'boundary'
p9188
sS'required'
p9189
I00
sS'group_name'
p9190
Nsa(dp9191
S'description'
p9192
S'The variable that is being debugged.\n'
p9193
sS'cpp_type'
p9194
S'NonlinearVariableName'
p9195
sS'default'
p9196
g3
sS'name'
p9197
S'debug_variable'
p9198
sS'required'
p9199
I01
sS'group_name'
p9200
Nsa(dp9201
S'name'
p9202
S'execute_on'
p9203
sS'cpp_type'
p9204
S'MooseEnum'
p9205
sS'default'
p9206
S'residual'
p9207
sS'description'
p9208
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p9209
sS'required'
p9210
I00
sS'options'
p9211
S'initial residual jacobian timestep timestep_begin custom'
p9212
sS'group_name'
p9213
Nsa(dp9214
S'description'
p9215
S'The seed for the master random number generator\n'
p9216
sS'cpp_type'
p9217
S'unsigned int'
p9218
sS'default'
p9219
S'0'
p9220
sS'name'
p9221
S'seed'
p9222
sS'required'
p9223
I00
sS'group_name'
p9224
S'Advanced'
p9225
sa(dp9226
S'description'
p9227
g3
sS'cpp_type'
p9228
S'std::string'
p9229
sS'default'
p9230
S'DebugResidualAux'
p9231
sS'name'
p9232
S'type'
p9233
sS'required'
p9234
I00
sS'group_name'
p9235
Nsa(dp9236
S'description'
p9237
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9238
sS'cpp_type'
p9239
S'bool'
p9240
sS'default'
p9241
S'0'
p9242
sS'name'
p9243
S'use_displaced_mesh'
p9244
sS'required'
p9245
I00
sS'group_name'
p9246
S'Advanced'
p9247
sa(dp9248
S'description'
p9249
S'The name of the variable that this object applies to\n'
p9250
sS'cpp_type'
p9251
S'AuxVariableName'
p9252
sS'default'
p9253
g3
sS'name'
p9254
S'variable'
p9255
sS'required'
p9256
I01
sS'group_name'
p9257
NsasS'name'
p9258
S'/Bounds/DebugResidualAux'
p9259
sa(dp9260
S'description'
p9261
g3
sS'type'
p9262
NsS'subblocks'
p9263
NsS'parameters'
p9264
(lp9265
(dp9266
S'description'
p9267
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p9268
sS'cpp_type'
p9269
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9270
sS'default'
p9271
g3
sS'name'
p9272
S'block'
p9273
sS'required'
p9274
I00
sS'group_name'
p9275
Nsa(dp9276
S'description'
p9277
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9278
sS'cpp_type'
p9279
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9280
sS'default'
p9281
g3
sS'name'
p9282
S'boundary'
p9283
sS'required'
p9284
I00
sS'group_name'
p9285
Nsa(dp9286
S'name'
p9287
S'execute_on'
p9288
sS'cpp_type'
p9289
S'MooseEnum'
p9290
sS'default'
p9291
S'residual'
p9292
sS'description'
p9293
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p9294
sS'required'
p9295
I00
sS'options'
p9296
S'initial residual jacobian timestep timestep_begin custom'
p9297
sS'group_name'
p9298
Nsa(dp9299
S'description'
p9300
S'The function to use as the value\n'
p9301
sS'cpp_type'
p9302
S'FunctionName'
p9303
sS'default'
p9304
g3
sS'name'
p9305
S'function'
p9306
sS'required'
p9307
I01
sS'group_name'
p9308
Nsa(dp9309
S'description'
p9310
S'The seed for the master random number generator\n'
p9311
sS'cpp_type'
p9312
S'unsigned int'
p9313
sS'default'
p9314
S'0'
p9315
sS'name'
p9316
S'seed'
p9317
sS'required'
p9318
I00
sS'group_name'
p9319
S'Advanced'
p9320
sa(dp9321
S'description'
p9322
g3
sS'cpp_type'
p9323
S'std::string'
p9324
sS'default'
p9325
S'FunctionAux'
p9326
sS'name'
p9327
S'type'
p9328
sS'required'
p9329
I00
sS'group_name'
p9330
Nsa(dp9331
S'description'
p9332
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9333
sS'cpp_type'
p9334
S'bool'
p9335
sS'default'
p9336
S'0'
p9337
sS'name'
p9338
S'use_displaced_mesh'
p9339
sS'required'
p9340
I00
sS'group_name'
p9341
S'Advanced'
p9342
sa(dp9343
S'description'
p9344
S'The name of the variable that this object applies to\n'
p9345
sS'cpp_type'
p9346
S'AuxVariableName'
p9347
sS'default'
p9348
g3
sS'name'
p9349
S'variable'
p9350
sS'required'
p9351
I01
sS'group_name'
p9352
NsasS'name'
p9353
S'/Bounds/FunctionAux'
p9354
sa(dp9355
S'description'
p9356
g3
sS'type'
p9357
NsS'subblocks'
p9358
NsS'parameters'
p9359
(lp9360
(dp9361
S'description'
p9362
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p9363
sS'cpp_type'
p9364
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9365
sS'default'
p9366
g3
sS'name'
p9367
S'block'
p9368
sS'required'
p9369
I00
sS'group_name'
p9370
Nsa(dp9371
S'description'
p9372
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9373
sS'cpp_type'
p9374
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9375
sS'default'
p9376
g3
sS'name'
p9377
S'boundary'
p9378
sS'required'
p9379
I00
sS'group_name'
p9380
Nsa(dp9381
S'name'
p9382
S'execute_on'
p9383
sS'cpp_type'
p9384
S'MooseEnum'
p9385
sS'default'
p9386
S'residual'
p9387
sS'description'
p9388
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p9389
sS'required'
p9390
I00
sS'options'
p9391
S'initial residual jacobian timestep timestep_begin custom'
p9392
sS'group_name'
p9393
Nsa(dp9394
S'description'
p9395
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p9396
sS'cpp_type'
p9397
S'double'
p9398
sS'default'
p9399
g3
sS'name'
p9400
S'normal_smoothing_distance'
p9401
sS'required'
p9402
I00
sS'group_name'
p9403
Nsa(dp9404
S'description'
p9405
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p9406
sS'cpp_type'
p9407
S'std::string'
p9408
sS'default'
p9409
g3
sS'name'
p9410
S'normal_smoothing_method'
p9411
sS'required'
p9412
I00
sS'group_name'
p9413
Nsa(dp9414
S'name'
p9415
S'order'
p9416
sS'cpp_type'
p9417
S'MooseEnum'
p9418
sS'default'
p9419
S'FIRST'
p9420
sS'description'
p9421
S'The finite element order\n'
p9422
sS'required'
p9423
I00
sS'options'
p9424
S'FIRST SECOND THIRD FOURTH'
p9425
sS'group_name'
p9426
Nsa(dp9427
S'description'
p9428
S'The boundary on the other side of a gap.\n'
p9429
sS'cpp_type'
p9430
S'BoundaryName'
p9431
sS'default'
p9432
g3
sS'name'
p9433
S'paired_boundary'
p9434
sS'required'
p9435
I01
sS'group_name'
p9436
Nsa(dp9437
S'description'
p9438
S'The variable to get the value of.\n'
p9439
sS'cpp_type'
p9440
S'VariableName'
p9441
sS'default'
p9442
g3
sS'name'
p9443
S'paired_variable'
p9444
sS'required'
p9445
I01
sS'group_name'
p9446
Nsa(dp9447
S'description'
p9448
S'The seed for the master random number generator\n'
p9449
sS'cpp_type'
p9450
S'unsigned int'
p9451
sS'default'
p9452
S'0'
p9453
sS'name'
p9454
S'seed'
p9455
sS'required'
p9456
I00
sS'group_name'
p9457
S'Advanced'
p9458
sa(dp9459
S'description'
p9460
S'Tangential distance to extend edges of contact surfaces\n'
p9461
sS'cpp_type'
p9462
S'double'
p9463
sS'default'
p9464
g3
sS'name'
p9465
S'tangential_tolerance'
p9466
sS'required'
p9467
I00
sS'group_name'
p9468
Nsa(dp9469
S'description'
p9470
g3
sS'cpp_type'
p9471
S'std::string'
p9472
sS'default'
p9473
S'GapValueAux'
p9474
sS'name'
p9475
S'type'
p9476
sS'required'
p9477
I00
sS'group_name'
p9478
Nsa(dp9479
S'description'
p9480
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9481
sS'cpp_type'
p9482
S'bool'
p9483
sS'default'
p9484
S'1'
p9485
sS'name'
p9486
S'use_displaced_mesh'
p9487
sS'required'
p9488
I00
sS'group_name'
p9489
S'Advanced'
p9490
sa(dp9491
S'description'
p9492
S'The name of the variable that this object applies to\n'
p9493
sS'cpp_type'
p9494
S'AuxVariableName'
p9495
sS'default'
p9496
g3
sS'name'
p9497
S'variable'
p9498
sS'required'
p9499
I01
sS'group_name'
p9500
Nsa(dp9501
S'description'
p9502
S'Whether to output warning messages concerning nodes not being found\n'
p9503
sS'cpp_type'
p9504
S'bool'
p9505
sS'default'
p9506
S'0'
p9507
sS'name'
p9508
S'warnings'
p9509
sS'required'
p9510
I00
sS'group_name'
p9511
NsasS'name'
p9512
S'/Bounds/GapValueAux'
p9513
sa(dp9514
S'description'
p9515
g3
sS'type'
p9516
NsS'subblocks'
p9517
NsS'parameters'
p9518
(lp9519
(dp9520
S'description'
p9521
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p9522
sS'cpp_type'
p9523
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9524
sS'default'
p9525
g3
sS'name'
p9526
S'block'
p9527
sS'required'
p9528
I00
sS'group_name'
p9529
Nsa(dp9530
S'description'
p9531
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9532
sS'cpp_type'
p9533
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9534
sS'default'
p9535
g3
sS'name'
p9536
S'boundary'
p9537
sS'required'
p9538
I00
sS'group_name'
p9539
Nsa(dp9540
S'name'
p9541
S'execute_on'
p9542
sS'cpp_type'
p9543
S'MooseEnum'
p9544
sS'default'
p9545
S'residual'
p9546
sS'description'
p9547
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p9548
sS'required'
p9549
I00
sS'options'
p9550
S'initial residual jacobian timestep timestep_begin custom'
p9551
sS'group_name'
p9552
Nsa(dp9553
S'description'
p9554
S'The factor by which to multiply your material property for visualization\n'
p9555
sS'cpp_type'
p9556
S'double'
p9557
sS'default'
p9558
S'1'
p9559
sS'name'
p9560
S'factor'
p9561
sS'required'
p9562
I00
sS'group_name'
p9563
Nsa(dp9564
S'description'
p9565
S'The offset to add to your material property for visualization\n'
p9566
sS'cpp_type'
p9567
S'double'
p9568
sS'default'
p9569
S'0'
p9570
sS'name'
p9571
S'offset'
p9572
sS'required'
p9573
I00
sS'group_name'
p9574
Nsa(dp9575
S'description'
p9576
S'The scalar material property name\n'
p9577
sS'cpp_type'
p9578
S'std::string'
p9579
sS'default'
p9580
g3
sS'name'
p9581
S'property'
p9582
sS'required'
p9583
I01
sS'group_name'
p9584
Nsa(dp9585
S'description'
p9586
S'The seed for the master random number generator\n'
p9587
sS'cpp_type'
p9588
S'unsigned int'
p9589
sS'default'
p9590
S'0'
p9591
sS'name'
p9592
S'seed'
p9593
sS'required'
p9594
I00
sS'group_name'
p9595
S'Advanced'
p9596
sa(dp9597
S'description'
p9598
g3
sS'cpp_type'
p9599
S'std::string'
p9600
sS'default'
p9601
S'MaterialRealAux'
p9602
sS'name'
p9603
S'type'
p9604
sS'required'
p9605
I00
sS'group_name'
p9606
Nsa(dp9607
S'description'
p9608
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9609
sS'cpp_type'
p9610
S'bool'
p9611
sS'default'
p9612
S'0'
p9613
sS'name'
p9614
S'use_displaced_mesh'
p9615
sS'required'
p9616
I00
sS'group_name'
p9617
S'Advanced'
p9618
sa(dp9619
S'description'
p9620
S'The name of the variable that this object applies to\n'
p9621
sS'cpp_type'
p9622
S'AuxVariableName'
p9623
sS'default'
p9624
g3
sS'name'
p9625
S'variable'
p9626
sS'required'
p9627
I01
sS'group_name'
p9628
NsasS'name'
p9629
S'/Bounds/MaterialRealAux'
p9630
sa(dp9631
S'description'
p9632
g3
sS'type'
p9633
NsS'subblocks'
p9634
NsS'parameters'
p9635
(lp9636
(dp9637
S'description'
p9638
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p9639
sS'cpp_type'
p9640
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9641
sS'default'
p9642
g3
sS'name'
p9643
S'block'
p9644
sS'required'
p9645
I00
sS'group_name'
p9646
Nsa(dp9647
S'description'
p9648
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9649
sS'cpp_type'
p9650
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9651
sS'default'
p9652
g3
sS'name'
p9653
S'boundary'
p9654
sS'required'
p9655
I00
sS'group_name'
p9656
Nsa(dp9657
S'name'
p9658
S'execute_on'
p9659
sS'cpp_type'
p9660
S'MooseEnum'
p9661
sS'default'
p9662
S'residual'
p9663
sS'description'
p9664
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p9665
sS'required'
p9666
I00
sS'options'
p9667
S'initial residual jacobian timestep timestep_begin custom'
p9668
sS'group_name'
p9669
Nsa(dp9670
S'description'
p9671
S'The boundary to find the distance to.\n'
p9672
sS'cpp_type'
p9673
S'BoundaryName'
p9674
sS'default'
p9675
g3
sS'name'
p9676
S'paired_boundary'
p9677
sS'required'
p9678
I01
sS'group_name'
p9679
Nsa(dp9680
S'description'
p9681
S'The seed for the master random number generator\n'
p9682
sS'cpp_type'
p9683
S'unsigned int'
p9684
sS'default'
p9685
S'0'
p9686
sS'name'
p9687
S'seed'
p9688
sS'required'
p9689
I00
sS'group_name'
p9690
S'Advanced'
p9691
sa(dp9692
S'description'
p9693
g3
sS'cpp_type'
p9694
S'std::string'
p9695
sS'default'
p9696
S'NearestNodeDistanceAux'
p9697
sS'name'
p9698
S'type'
p9699
sS'required'
p9700
I00
sS'group_name'
p9701
Nsa(dp9702
S'description'
p9703
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9704
sS'cpp_type'
p9705
S'bool'
p9706
sS'default'
p9707
S'1'
p9708
sS'name'
p9709
S'use_displaced_mesh'
p9710
sS'required'
p9711
I00
sS'group_name'
p9712
S'Advanced'
p9713
sa(dp9714
S'description'
p9715
S'The name of the variable that this object applies to\n'
p9716
sS'cpp_type'
p9717
S'AuxVariableName'
p9718
sS'default'
p9719
g3
sS'name'
p9720
S'variable'
p9721
sS'required'
p9722
I01
sS'group_name'
p9723
NsasS'name'
p9724
S'/Bounds/NearestNodeDistanceAux'
p9725
sa(dp9726
S'description'
p9727
g3
sS'type'
p9728
NsS'subblocks'
p9729
NsS'parameters'
p9730
(lp9731
(dp9732
S'description'
p9733
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p9734
sS'cpp_type'
p9735
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9736
sS'default'
p9737
g3
sS'name'
p9738
S'block'
p9739
sS'required'
p9740
I00
sS'group_name'
p9741
Nsa(dp9742
S'description'
p9743
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9744
sS'cpp_type'
p9745
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9746
sS'default'
p9747
g3
sS'name'
p9748
S'boundary'
p9749
sS'required'
p9750
I00
sS'group_name'
p9751
Nsa(dp9752
S'name'
p9753
S'execute_on'
p9754
sS'cpp_type'
p9755
S'MooseEnum'
p9756
sS'default'
p9757
S'residual'
p9758
sS'description'
p9759
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p9760
sS'required'
p9761
I00
sS'options'
p9762
S'initial residual jacobian timestep timestep_begin custom'
p9763
sS'group_name'
p9764
Nsa(dp9765
S'description'
p9766
S'The boundary to get the value from.\n'
p9767
sS'cpp_type'
p9768
S'BoundaryName'
p9769
sS'default'
p9770
g3
sS'name'
p9771
S'paired_boundary'
p9772
sS'required'
p9773
I01
sS'group_name'
p9774
Nsa(dp9775
S'description'
p9776
S'The variable to get the value of.\n'
p9777
sS'cpp_type'
p9778
S'std::vector<VariableName>'
p9779
sS'default'
p9780
g3
sS'name'
p9781
S'paired_variable'
p9782
sS'required'
p9783
I01
sS'group_name'
p9784
Nsa(dp9785
S'description'
p9786
S'The seed for the master random number generator\n'
p9787
sS'cpp_type'
p9788
S'unsigned int'
p9789
sS'default'
p9790
S'0'
p9791
sS'name'
p9792
S'seed'
p9793
sS'required'
p9794
I00
sS'group_name'
p9795
S'Advanced'
p9796
sa(dp9797
S'description'
p9798
g3
sS'cpp_type'
p9799
S'std::string'
p9800
sS'default'
p9801
S'NearestNodeValueAux'
p9802
sS'name'
p9803
S'type'
p9804
sS'required'
p9805
I00
sS'group_name'
p9806
Nsa(dp9807
S'description'
p9808
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9809
sS'cpp_type'
p9810
S'bool'
p9811
sS'default'
p9812
S'1'
p9813
sS'name'
p9814
S'use_displaced_mesh'
p9815
sS'required'
p9816
I00
sS'group_name'
p9817
S'Advanced'
p9818
sa(dp9819
S'description'
p9820
S'The name of the variable that this object applies to\n'
p9821
sS'cpp_type'
p9822
S'AuxVariableName'
p9823
sS'default'
p9824
g3
sS'name'
p9825
S'variable'
p9826
sS'required'
p9827
I01
sS'group_name'
p9828
NsasS'name'
p9829
S'/Bounds/NearestNodeValueAux'
p9830
sa(dp9831
S'description'
p9832
g3
sS'type'
p9833
NsS'subblocks'
p9834
NsS'parameters'
p9835
(lp9836
(dp9837
S'description'
p9838
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p9839
sS'cpp_type'
p9840
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9841
sS'default'
p9842
g3
sS'name'
p9843
S'block'
p9844
sS'required'
p9845
I00
sS'group_name'
p9846
Nsa(dp9847
S'description'
p9848
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9849
sS'cpp_type'
p9850
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9851
sS'default'
p9852
g3
sS'name'
p9853
S'boundary'
p9854
sS'required'
p9855
I00
sS'group_name'
p9856
Nsa(dp9857
S'description'
p9858
S'The NodalFloodCount UserObject to get values from.\n'
p9859
sS'cpp_type'
p9860
S'UserObjectName'
p9861
sS'default'
p9862
g3
sS'name'
p9863
S'bubble_object'
p9864
sS'required'
p9865
I01
sS'group_name'
p9866
Nsa(dp9867
S'name'
p9868
S'execute_on'
p9869
sS'cpp_type'
p9870
S'MooseEnum'
p9871
sS'default'
p9872
S'residual'
p9873
sS'description'
p9874
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p9875
sS'required'
p9876
I00
sS'options'
p9877
S'initial residual jacobian timestep timestep_begin custom'
p9878
sS'group_name'
p9879
Nsa(dp9880
S'name'
p9881
S'field_display'
p9882
sS'cpp_type'
p9883
S'MooseEnum'
p9884
sS'default'
p9885
S'UNIQUE_REGION'
p9886
sS'description'
p9887
S'Determines how the auxilary field should be colored. (UNIQUE_REGION and VARIABLE_COLORING are nodal, CENTROID is elemental, default: UNIQUE_REGION)\n'
p9888
sS'required'
p9889
I00
sS'options'
p9890
S'UNIQUE_REGION VARIABLE_COLORING ACTIVE_BOUNDS CENTROID'
p9891
sS'group_name'
p9892
Nsa(dp9893
S'description'
p9894
S'The index of which map to retrieve values from when using NodalFloodCount with multiple maps.\n'
p9895
sS'cpp_type'
p9896
S'unsigned int'
p9897
sS'default'
p9898
S'0'
p9899
sS'name'
p9900
S'map_index'
p9901
sS'required'
p9902
I00
sS'group_name'
p9903
Nsa(dp9904
S'description'
p9905
S'The seed for the master random number generator\n'
p9906
sS'cpp_type'
p9907
S'unsigned int'
p9908
sS'default'
p9909
S'0'
p9910
sS'name'
p9911
S'seed'
p9912
sS'required'
p9913
I00
sS'group_name'
p9914
S'Advanced'
p9915
sa(dp9916
S'description'
p9917
g3
sS'cpp_type'
p9918
S'std::string'
p9919
sS'default'
p9920
S'NodalFloodCountAux'
p9921
sS'name'
p9922
S'type'
p9923
sS'required'
p9924
I00
sS'group_name'
p9925
Nsa(dp9926
S'description'
p9927
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9928
sS'cpp_type'
p9929
S'bool'
p9930
sS'default'
p9931
S'0'
p9932
sS'name'
p9933
S'use_displaced_mesh'
p9934
sS'required'
p9935
I00
sS'group_name'
p9936
S'Advanced'
p9937
sa(dp9938
S'description'
p9939
S'The name of the variable that this object applies to\n'
p9940
sS'cpp_type'
p9941
S'AuxVariableName'
p9942
sS'default'
p9943
g3
sS'name'
p9944
S'variable'
p9945
sS'required'
p9946
I01
sS'group_name'
p9947
NsasS'name'
p9948
S'/Bounds/NodalFloodCountAux'
p9949
sa(dp9950
S'description'
p9951
g3
sS'type'
p9952
NsS'subblocks'
p9953
NsS'parameters'
p9954
(lp9955
(dp9956
S'description'
p9957
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p9958
sS'cpp_type'
p9959
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p9960
sS'default'
p9961
g3
sS'name'
p9962
S'block'
p9963
sS'required'
p9964
I00
sS'group_name'
p9965
Nsa(dp9966
S'description'
p9967
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9968
sS'cpp_type'
p9969
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p9970
sS'default'
p9971
g3
sS'name'
p9972
S'boundary'
p9973
sS'required'
p9974
I00
sS'group_name'
p9975
Nsa(dp9976
S'name'
p9977
S'execute_on'
p9978
sS'cpp_type'
p9979
S'MooseEnum'
p9980
sS'default'
p9981
S'residual'
p9982
sS'description'
p9983
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p9984
sS'required'
p9985
I00
sS'options'
p9986
S'initial residual jacobian timestep timestep_begin custom'
p9987
sS'group_name'
p9988
Nsa(dp9989
S'description'
p9990
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p9991
sS'cpp_type'
p9992
S'double'
p9993
sS'default'
p9994
g3
sS'name'
p9995
S'normal_smoothing_distance'
p9996
sS'required'
p9997
I00
sS'group_name'
p9998
Nsa(dp9999
S'description'
p10000
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p10001
sS'cpp_type'
p10002
S'std::string'
p10003
sS'default'
p10004
g3
sS'name'
p10005
S'normal_smoothing_method'
p10006
sS'required'
p10007
I00
sS'group_name'
p10008
Nsa(dp10009
S'name'
p10010
S'order'
p10011
sS'cpp_type'
p10012
S'MooseEnum'
p10013
sS'default'
p10014
S'FIRST'
p10015
sS'description'
p10016
S'The finite element order\n'
p10017
sS'required'
p10018
I00
sS'options'
p10019
S'FIRST SECOND THIRD FOURTH'
p10020
sS'group_name'
p10021
Nsa(dp10022
S'description'
p10023
S'The boundary to be penetrated\n'
p10024
sS'cpp_type'
p10025
S'BoundaryName'
p10026
sS'default'
p10027
g3
sS'name'
p10028
S'paired_boundary'
p10029
sS'required'
p10030
I01
sS'group_name'
p10031
Nsa(dp10032
S'description'
p10033
S'The quantity to recover from the available penetration information: distance(default), tangential_distance, normal_x, normal_y, normal_z, closest_point_x, closest_point_y, closest_point_z, element_id, side, incremental_slip_x, incremental_slip_y, incremental_slip_z, incremental_slip_magnitude, accumulated_slip, force_x, force_y, force_z, normal_force_magnitude, normal_force_x, normal_force_y, normal_force_z, tangential_force_magnitude, tangential_force_x, tangential_force_y, tangential_force_z, frictional_energy, mechanical_status\n'
p10034
sS'cpp_type'
p10035
S'std::string'
p10036
sS'default'
p10037
S'distance'
p10038
sS'name'
p10039
S'quantity'
p10040
sS'required'
p10041
I00
sS'group_name'
p10042
Nsa(dp10043
S'description'
p10044
S'The seed for the master random number generator\n'
p10045
sS'cpp_type'
p10046
S'unsigned int'
p10047
sS'default'
p10048
S'0'
p10049
sS'name'
p10050
S'seed'
p10051
sS'required'
p10052
I00
sS'group_name'
p10053
S'Advanced'
p10054
sa(dp10055
S'description'
p10056
S'Tangential distance to extend edges of contact surfaces\n'
p10057
sS'cpp_type'
p10058
S'double'
p10059
sS'default'
p10060
g3
sS'name'
p10061
S'tangential_tolerance'
p10062
sS'required'
p10063
I00
sS'group_name'
p10064
Nsa(dp10065
S'description'
p10066
g3
sS'cpp_type'
p10067
S'std::string'
p10068
sS'default'
p10069
S'PenetrationAux'
p10070
sS'name'
p10071
S'type'
p10072
sS'required'
p10073
I00
sS'group_name'
p10074
Nsa(dp10075
S'description'
p10076
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10077
sS'cpp_type'
p10078
S'bool'
p10079
sS'default'
p10080
S'1'
p10081
sS'name'
p10082
S'use_displaced_mesh'
p10083
sS'required'
p10084
I00
sS'group_name'
p10085
S'Advanced'
p10086
sa(dp10087
S'description'
p10088
S'The name of the variable that this object applies to\n'
p10089
sS'cpp_type'
p10090
S'AuxVariableName'
p10091
sS'default'
p10092
g3
sS'name'
p10093
S'variable'
p10094
sS'required'
p10095
I01
sS'group_name'
p10096
NsasS'name'
p10097
S'/Bounds/PenetrationAux'
p10098
sa(dp10099
S'description'
p10100
g3
sS'type'
p10101
NsS'subblocks'
p10102
NsS'parameters'
p10103
(lp10104
(dp10105
S'description'
p10106
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p10107
sS'cpp_type'
p10108
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10109
sS'default'
p10110
g3
sS'name'
p10111
S'block'
p10112
sS'required'
p10113
I00
sS'group_name'
p10114
Nsa(dp10115
S'description'
p10116
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10117
sS'cpp_type'
p10118
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10119
sS'default'
p10120
g3
sS'name'
p10121
S'boundary'
p10122
sS'required'
p10123
I00
sS'group_name'
p10124
Nsa(dp10125
S'name'
p10126
S'execute_on'
p10127
sS'cpp_type'
p10128
S'MooseEnum'
p10129
sS'default'
p10130
S'residual'
p10131
sS'description'
p10132
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p10133
sS'required'
p10134
I00
sS'options'
p10135
S'initial residual jacobian timestep timestep_begin custom'
p10136
sS'group_name'
p10137
Nsa(dp10138
S'description'
p10139
S'The seed for the master random number generator\n'
p10140
sS'cpp_type'
p10141
S'unsigned int'
p10142
sS'default'
p10143
S'0'
p10144
sS'name'
p10145
S'seed'
p10146
sS'required'
p10147
I00
sS'group_name'
p10148
S'Advanced'
p10149
sa(dp10150
S'description'
p10151
g3
sS'cpp_type'
p10152
S'std::string'
p10153
sS'default'
p10154
S'ProcessorIDAux'
p10155
sS'name'
p10156
S'type'
p10157
sS'required'
p10158
I00
sS'group_name'
p10159
Nsa(dp10160
S'description'
p10161
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10162
sS'cpp_type'
p10163
S'bool'
p10164
sS'default'
p10165
S'0'
p10166
sS'name'
p10167
S'use_displaced_mesh'
p10168
sS'required'
p10169
I00
sS'group_name'
p10170
S'Advanced'
p10171
sa(dp10172
S'description'
p10173
S'The name of the variable that this object applies to\n'
p10174
sS'cpp_type'
p10175
S'AuxVariableName'
p10176
sS'default'
p10177
g3
sS'name'
p10178
S'variable'
p10179
sS'required'
p10180
I01
sS'group_name'
p10181
NsasS'name'
p10182
S'/Bounds/ProcessorIDAux'
p10183
sa(dp10184
S'description'
p10185
g3
sS'type'
p10186
NsS'subblocks'
p10187
NsS'parameters'
p10188
(lp10189
(dp10190
S'description'
p10191
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p10192
sS'cpp_type'
p10193
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10194
sS'default'
p10195
g3
sS'name'
p10196
S'block'
p10197
sS'required'
p10198
I00
sS'group_name'
p10199
Nsa(dp10200
S'description'
p10201
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10202
sS'cpp_type'
p10203
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10204
sS'default'
p10205
g3
sS'name'
p10206
S'boundary'
p10207
sS'required'
p10208
I00
sS'group_name'
p10209
Nsa(dp10210
S'description'
p10211
S'The downstairs of the quotient variable\n'
p10212
sS'cpp_type'
p10213
S'std::vector<VariableName>'
p10214
sS'default'
p10215
g3
sS'name'
p10216
S'denominator'
p10217
sS'required'
p10218
I00
sS'group_name'
p10219
Nsa(dp10220
S'name'
p10221
S'execute_on'
p10222
sS'cpp_type'
p10223
S'MooseEnum'
p10224
sS'default'
p10225
S'residual'
p10226
sS'description'
p10227
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p10228
sS'required'
p10229
I00
sS'options'
p10230
S'initial residual jacobian timestep timestep_begin custom'
p10231
sS'group_name'
p10232
Nsa(dp10233
S'description'
p10234
S'The upstairs of the quotient variable\n'
p10235
sS'cpp_type'
p10236
S'std::vector<VariableName>'
p10237
sS'default'
p10238
g3
sS'name'
p10239
S'numerator'
p10240
sS'required'
p10241
I00
sS'group_name'
p10242
Nsa(dp10243
S'description'
p10244
S'The seed for the master random number generator\n'
p10245
sS'cpp_type'
p10246
S'unsigned int'
p10247
sS'default'
p10248
S'0'
p10249
sS'name'
p10250
S'seed'
p10251
sS'required'
p10252
I00
sS'group_name'
p10253
S'Advanced'
p10254
sa(dp10255
S'description'
p10256
g3
sS'cpp_type'
p10257
S'std::string'
p10258
sS'default'
p10259
S'QuotientAux'
p10260
sS'name'
p10261
S'type'
p10262
sS'required'
p10263
I00
sS'group_name'
p10264
Nsa(dp10265
S'description'
p10266
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10267
sS'cpp_type'
p10268
S'bool'
p10269
sS'default'
p10270
S'0'
p10271
sS'name'
p10272
S'use_displaced_mesh'
p10273
sS'required'
p10274
I00
sS'group_name'
p10275
S'Advanced'
p10276
sa(dp10277
S'description'
p10278
S'The name of the variable that this object applies to\n'
p10279
sS'cpp_type'
p10280
S'AuxVariableName'
p10281
sS'default'
p10282
g3
sS'name'
p10283
S'variable'
p10284
sS'required'
p10285
I01
sS'group_name'
p10286
NsasS'name'
p10287
S'/Bounds/QuotientAux'
p10288
sa(dp10289
S'description'
p10290
g3
sS'type'
p10291
NsS'subblocks'
p10292
NsS'parameters'
p10293
(lp10294
(dp10295
S'description'
p10296
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p10297
sS'cpp_type'
p10298
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10299
sS'default'
p10300
g3
sS'name'
p10301
S'block'
p10302
sS'required'
p10303
I00
sS'group_name'
p10304
Nsa(dp10305
S'description'
p10306
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10307
sS'cpp_type'
p10308
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10309
sS'default'
p10310
g3
sS'name'
p10311
S'boundary'
p10312
sS'required'
p10313
I00
sS'group_name'
p10314
Nsa(dp10315
S'name'
p10316
S'execute_on'
p10317
sS'cpp_type'
p10318
S'MooseEnum'
p10319
sS'default'
p10320
S'residual'
p10321
sS'description'
p10322
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p10323
sS'required'
p10324
I00
sS'options'
p10325
S'initial residual jacobian timestep timestep_begin custom'
p10326
sS'group_name'
p10327
Nsa(dp10328
S'description'
p10329
S'The seed for the master random number generator\n'
p10330
sS'cpp_type'
p10331
S'unsigned int'
p10332
sS'default'
p10333
S'0'
p10334
sS'name'
p10335
S'seed'
p10336
sS'required'
p10337
I00
sS'group_name'
p10338
S'Advanced'
p10339
sa(dp10340
S'description'
p10341
g3
sS'cpp_type'
p10342
S'std::string'
p10343
sS'default'
p10344
S'SelfAux'
p10345
sS'name'
p10346
S'type'
p10347
sS'required'
p10348
I00
sS'group_name'
p10349
Nsa(dp10350
S'description'
p10351
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10352
sS'cpp_type'
p10353
S'bool'
p10354
sS'default'
p10355
S'0'
p10356
sS'name'
p10357
S'use_displaced_mesh'
p10358
sS'required'
p10359
I00
sS'group_name'
p10360
S'Advanced'
p10361
sa(dp10362
S'description'
p10363
S'The name of the variable that this object applies to\n'
p10364
sS'cpp_type'
p10365
S'AuxVariableName'
p10366
sS'default'
p10367
g3
sS'name'
p10368
S'variable'
p10369
sS'required'
p10370
I01
sS'group_name'
p10371
NsasS'name'
p10372
S'/Bounds/SelfAux'
p10373
sa(dp10374
S'description'
p10375
g3
sS'type'
p10376
NsS'subblocks'
p10377
NsS'parameters'
p10378
(lp10379
(dp10380
S'description'
p10381
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p10382
sS'cpp_type'
p10383
S'double'
p10384
sS'default'
p10385
S'0'
p10386
sS'name'
p10387
S'add_factor'
p10388
sS'required'
p10389
I00
sS'group_name'
p10390
Nsa(dp10391
S'description'
p10392
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p10393
sS'cpp_type'
p10394
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10395
sS'default'
p10396
g3
sS'name'
p10397
S'block'
p10398
sS'required'
p10399
I00
sS'group_name'
p10400
Nsa(dp10401
S'description'
p10402
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10403
sS'cpp_type'
p10404
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10405
sS'default'
p10406
g3
sS'name'
p10407
S'boundary'
p10408
sS'required'
p10409
I00
sS'group_name'
p10410
Nsa(dp10411
S'description'
p10412
S'If true the meshes must be the same and then the values are simply copied over.\n'
p10413
sS'cpp_type'
p10414
S'bool'
p10415
sS'default'
p10416
S'0'
p10417
sS'name'
p10418
S'direct'
p10419
sS'required'
p10420
I00
sS'group_name'
p10421
Nsa(dp10422
S'name'
p10423
S'execute_on'
p10424
sS'cpp_type'
p10425
S'MooseEnum'
p10426
sS'default'
p10427
S'residual'
p10428
sS'description'
p10429
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p10430
sS'required'
p10431
I00
sS'options'
p10432
S'initial residual jacobian timestep timestep_begin custom'
p10433
sS'group_name'
p10434
Nsa(dp10435
S'description'
p10436
S'The name of the variable to extract from the file\n'
p10437
sS'cpp_type'
p10438
S'std::string'
p10439
sS'default'
p10440
g3
sS'name'
p10441
S'from_variable'
p10442
sS'required'
p10443
I00
sS'group_name'
p10444
Nsa(dp10445
S'description'
p10446
S"Scale factor (a)  to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p10447
sS'cpp_type'
p10448
S'double'
p10449
sS'default'
p10450
S'1'
p10451
sS'name'
p10452
S'scale_factor'
p10453
sS'required'
p10454
I00
sS'group_name'
p10455
Nsa(dp10456
S'description'
p10457
S'The seed for the master random number generator\n'
p10458
sS'cpp_type'
p10459
S'unsigned int'
p10460
sS'default'
p10461
S'0'
p10462
sS'name'
p10463
S'seed'
p10464
sS'required'
p10465
I00
sS'group_name'
p10466
S'Advanced'
p10467
sa(dp10468
S'description'
p10469
S'The name of the SolutionUserObject\n'
p10470
sS'cpp_type'
p10471
S'UserObjectName'
p10472
sS'default'
p10473
g3
sS'name'
p10474
S'solution'
p10475
sS'required'
p10476
I01
sS'group_name'
p10477
Nsa(dp10478
S'description'
p10479
g3
sS'cpp_type'
p10480
S'std::string'
p10481
sS'default'
p10482
S'SolutionAux'
p10483
sS'name'
p10484
S'type'
p10485
sS'required'
p10486
I00
sS'group_name'
p10487
Nsa(dp10488
S'description'
p10489
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10490
sS'cpp_type'
p10491
S'bool'
p10492
sS'default'
p10493
S'0'
p10494
sS'name'
p10495
S'use_displaced_mesh'
p10496
sS'required'
p10497
I00
sS'group_name'
p10498
S'Advanced'
p10499
sa(dp10500
S'description'
p10501
S'The name of the variable that this object applies to\n'
p10502
sS'cpp_type'
p10503
S'AuxVariableName'
p10504
sS'default'
p10505
g3
sS'name'
p10506
S'variable'
p10507
sS'required'
p10508
I01
sS'group_name'
p10509
NsasS'name'
p10510
S'/Bounds/SolutionAux'
p10511
sa(dp10512
S'description'
p10513
g3
sS'type'
p10514
NsS'subblocks'
p10515
NsS'parameters'
p10516
(lp10517
(dp10518
S'description'
p10519
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p10520
sS'cpp_type'
p10521
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10522
sS'default'
p10523
g3
sS'name'
p10524
S'block'
p10525
sS'required'
p10526
I00
sS'group_name'
p10527
Nsa(dp10528
S'description'
p10529
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10530
sS'cpp_type'
p10531
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10532
sS'default'
p10533
g3
sS'name'
p10534
S'boundary'
p10535
sS'required'
p10536
I00
sS'group_name'
p10537
Nsa(dp10538
S'name'
p10539
S'execute_on'
p10540
sS'cpp_type'
p10541
S'MooseEnum'
p10542
sS'default'
p10543
S'residual'
p10544
sS'description'
p10545
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p10546
sS'required'
p10547
I00
sS'options'
p10548
S'initial residual jacobian timestep timestep_begin custom'
p10549
sS'group_name'
p10550
Nsa(dp10551
S'description'
p10552
S'The seed for the master random number generator\n'
p10553
sS'cpp_type'
p10554
S'unsigned int'
p10555
sS'default'
p10556
S'0'
p10557
sS'name'
p10558
S'seed'
p10559
sS'required'
p10560
I00
sS'group_name'
p10561
S'Advanced'
p10562
sa(dp10563
S'description'
p10564
g3
sS'cpp_type'
p10565
S'std::string'
p10566
sS'default'
p10567
S'SpatialUserObjectAux'
p10568
sS'name'
p10569
S'type'
p10570
sS'required'
p10571
I00
sS'group_name'
p10572
Nsa(dp10573
S'description'
p10574
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10575
sS'cpp_type'
p10576
S'bool'
p10577
sS'default'
p10578
S'0'
p10579
sS'name'
p10580
S'use_displaced_mesh'
p10581
sS'required'
p10582
I00
sS'group_name'
p10583
S'Advanced'
p10584
sa(dp10585
S'description'
p10586
S'The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n'
p10587
sS'cpp_type'
p10588
S'UserObjectName'
p10589
sS'default'
p10590
g3
sS'name'
p10591
S'user_object'
p10592
sS'required'
p10593
I01
sS'group_name'
p10594
Nsa(dp10595
S'description'
p10596
S'The name of the variable that this object applies to\n'
p10597
sS'cpp_type'
p10598
S'AuxVariableName'
p10599
sS'default'
p10600
g3
sS'name'
p10601
S'variable'
p10602
sS'required'
p10603
I01
sS'group_name'
p10604
NsasS'name'
p10605
S'/Bounds/SpatialUserObjectAux'
p10606
sa(dp10607
S'description'
p10608
g3
sS'type'
p10609
NsS'subblocks'
p10610
NsS'parameters'
p10611
(lp10612
(dp10613
S'description'
p10614
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p10615
sS'cpp_type'
p10616
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p10617
sS'default'
p10618
g3
sS'name'
p10619
S'block'
p10620
sS'required'
p10621
I00
sS'group_name'
p10622
Nsa(dp10623
S'description'
p10624
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10625
sS'cpp_type'
p10626
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p10627
sS'default'
p10628
g3
sS'name'
p10629
S'boundary'
p10630
sS'required'
p10631
I00
sS'group_name'
p10632
Nsa(dp10633
S'name'
p10634
S'execute_on'
p10635
sS'cpp_type'
p10636
S'MooseEnum'
p10637
sS'default'
p10638
S'residual'
p10639
sS'description'
p10640
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p10641
sS'required'
p10642
I00
sS'options'
p10643
S'initial residual jacobian timestep timestep_begin custom'
p10644
sS'group_name'
p10645
Nsa(dp10646
S'description'
p10647
S'The seed for the master random number generator\n'
p10648
sS'cpp_type'
p10649
S'unsigned int'
p10650
sS'default'
p10651
S'0'
p10652
sS'name'
p10653
S'seed'
p10654
sS'required'
p10655
I00
sS'group_name'
p10656
S'Advanced'
p10657
sa(dp10658
S'description'
p10659
g3
sS'cpp_type'
p10660
S'std::string'
p10661
sS'default'
p10662
S'VectorMagnitudeAux'
p10663
sS'name'
p10664
S'type'
p10665
sS'required'
p10666
I00
sS'group_name'
p10667
Nsa(dp10668
S'description'
p10669
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10670
sS'cpp_type'
p10671
S'bool'
p10672
sS'default'
p10673
S'0'
p10674
sS'name'
p10675
S'use_displaced_mesh'
p10676
sS'required'
p10677
I00
sS'group_name'
p10678
S'Advanced'
p10679
sa(dp10680
S'description'
p10681
S'The name of the variable that this object applies to\n'
p10682
sS'cpp_type'
p10683
S'AuxVariableName'
p10684
sS'default'
p10685
g3
sS'name'
p10686
S'variable'
p10687
sS'required'
p10688
I01
sS'group_name'
p10689
Nsa(dp10690
S'description'
p10691
S'x-component of the vector\n'
p10692
sS'cpp_type'
p10693
S'std::vector<VariableName>'
p10694
sS'default'
p10695
g3
sS'name'
p10696
S'x'
p10697
sS'required'
p10698
I01
sS'group_name'
p10699
Nsa(dp10700
S'description'
p10701
S'y-component of the vector\n'
p10702
sS'cpp_type'
p10703
S'std::vector<VariableName>'
p10704
sS'default'
p10705
g3
sS'name'
p10706
S'y'
p10707
sS'required'
p10708
I00
sS'group_name'
p10709
Nsa(dp10710
S'description'
p10711
S'z-component of the vector\n'
p10712
sS'cpp_type'
p10713
S'std::vector<VariableName>'
p10714
sS'default'
p10715
g3
sS'name'
p10716
S'z'
p10717
sS'required'
p10718
I00
sS'group_name'
p10719
NsasS'name'
p10720
S'/Bounds/VectorMagnitudeAux'
p10721
sasS'parameters'
p10722
NsS'name'
p10723
S'/Bounds'
p10724
sa(dp10725
S'description'
p10726
g3
sS'type'
p10727
NsS'subblocks'
p10728
(lp10729
(dp10730
S'description'
p10731
g3
sS'type'
p10732
NsS'subblocks'
p10733
NsS'parameters'
p10734
(lp10735
(dp10736
S'description'
p10737
S'A string representing the Moose Object that will be built by this Action\n'
p10738
sS'cpp_type'
p10739
S'std::string'
p10740
sS'default'
p10741
g3
sS'name'
p10742
S'type'
p10743
sS'required'
p10744
I01
sS'group_name'
p10745
NsasS'name'
p10746
S'/Constraints/*'
p10747
sa(dp10748
S'description'
p10749
g3
sS'type'
p10750
NsS'subblocks'
p10751
NsS'parameters'
p10752
(lp10753
(dp10754
S'name'
p10755
S'execute_on'
p10756
sS'cpp_type'
p10757
S'MooseEnum'
p10758
sS'default'
p10759
S'residual'
p10760
sS'description'
p10761
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p10762
sS'required'
p10763
I00
sS'options'
p10764
S'initial residual jacobian timestep timestep_begin custom'
p10765
sS'group_name'
p10766
Nsa(dp10767
S'description'
p10768
S'The name of the interface.\n'
p10769
sS'cpp_type'
p10770
S'std::string'
p10771
sS'default'
p10772
g3
sS'name'
p10773
S'interface'
p10774
sS'required'
p10775
I01
sS'group_name'
p10776
Nsa(dp10777
S'description'
p10778
S'Variable on master surface\n'
p10779
sS'cpp_type'
p10780
S'VariableName'
p10781
sS'default'
p10782
g3
sS'name'
p10783
S'master_variable'
p10784
sS'required'
p10785
I01
sS'group_name'
p10786
Nsa(dp10787
S'description'
p10788
S'Variable on master surface\n'
p10789
sS'cpp_type'
p10790
S'VariableName'
p10791
sS'default'
p10792
g3
sS'name'
p10793
S'slave_variable'
p10794
sS'required'
p10795
I00
sS'group_name'
p10796
Nsa(dp10797
S'description'
p10798
g3
sS'cpp_type'
p10799
S'std::string'
p10800
sS'default'
p10801
S'EqualValueConstraint'
p10802
sS'name'
p10803
S'type'
p10804
sS'required'
p10805
I00
sS'group_name'
p10806
Nsa(dp10807
S'description'
p10808
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10809
sS'cpp_type'
p10810
S'bool'
p10811
sS'default'
p10812
S'0'
p10813
sS'name'
p10814
S'use_displaced_mesh'
p10815
sS'required'
p10816
I00
sS'group_name'
p10817
S'Advanced'
p10818
sa(dp10819
S'description'
p10820
S'The name of the variable that this constraint is applied to.\n'
p10821
sS'cpp_type'
p10822
S'NonlinearVariableName'
p10823
sS'default'
p10824
g3
sS'name'
p10825
S'variable'
p10826
sS'required'
p10827
I01
sS'group_name'
p10828
NsasS'name'
p10829
S'/Constraints/EqualValueConstraint'
p10830
sa(dp10831
S'description'
p10832
g3
sS'type'
p10833
NsS'subblocks'
p10834
NsS'parameters'
p10835
(lp10836
(dp10837
S'name'
p10838
S'execute_on'
p10839
sS'cpp_type'
p10840
S'MooseEnum'
p10841
sS'default'
p10842
S'residual'
p10843
sS'description'
p10844
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p10845
sS'required'
p10846
I00
sS'options'
p10847
S'initial residual jacobian timestep timestep_begin custom'
p10848
sS'group_name'
p10849
Nsa(dp10850
S'description'
p10851
S'The boundary ID associated with the master side\n'
p10852
sS'cpp_type'
p10853
S'BoundaryName'
p10854
sS'default'
p10855
g3
sS'name'
p10856
S'master'
p10857
sS'required'
p10858
I01
sS'group_name'
p10859
Nsa(dp10860
S'description'
p10861
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p10862
sS'cpp_type'
p10863
S'double'
p10864
sS'default'
p10865
g3
sS'name'
p10866
S'normal_smoothing_distance'
p10867
sS'required'
p10868
I00
sS'group_name'
p10869
Nsa(dp10870
S'description'
p10871
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p10872
sS'cpp_type'
p10873
S'std::string'
p10874
sS'default'
p10875
g3
sS'name'
p10876
S'normal_smoothing_method'
p10877
sS'required'
p10878
I00
sS'group_name'
p10879
Nsa(dp10880
S'name'
p10881
S'order'
p10882
sS'cpp_type'
p10883
S'MooseEnum'
p10884
sS'default'
p10885
S'FIRST'
p10886
sS'description'
p10887
S'The finite element order used for projections\n'
p10888
sS'required'
p10889
I00
sS'options'
p10890
S'FIRST SECOND THIRD FORTH'
p10891
sS'group_name'
p10892
Nsa(dp10893
S'description'
p10894
S'scaling factor to be applied to constraint equations\n'
p10895
sS'cpp_type'
p10896
S'double'
p10897
sS'default'
p10898
S'1'
p10899
sS'name'
p10900
S'scaling'
p10901
sS'required'
p10902
I00
sS'group_name'
p10903
Nsa(dp10904
S'description'
p10905
S'The boundary ID associated with the slave side\n'
p10906
sS'cpp_type'
p10907
S'BoundaryName'
p10908
sS'default'
p10909
g3
sS'name'
p10910
S'slave'
p10911
sS'required'
p10912
I01
sS'group_name'
p10913
Nsa(dp10914
S'description'
p10915
S'Tangential distance to extend edges of contact surfaces\n'
p10916
sS'cpp_type'
p10917
S'double'
p10918
sS'default'
p10919
g3
sS'name'
p10920
S'tangential_tolerance'
p10921
sS'required'
p10922
I00
sS'group_name'
p10923
Nsa(dp10924
S'description'
p10925
g3
sS'cpp_type'
p10926
S'std::string'
p10927
sS'default'
p10928
S'TiedValueConstraint'
p10929
sS'name'
p10930
S'type'
p10931
sS'required'
p10932
I00
sS'group_name'
p10933
Nsa(dp10934
S'description'
p10935
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10936
sS'cpp_type'
p10937
S'bool'
p10938
sS'default'
p10939
S'1'
p10940
sS'name'
p10941
S'use_displaced_mesh'
p10942
sS'required'
p10943
I00
sS'group_name'
p10944
S'Advanced'
p10945
sa(dp10946
S'description'
p10947
S'The name of the variable that this constraint is applied to.\n'
p10948
sS'cpp_type'
p10949
S'NonlinearVariableName'
p10950
sS'default'
p10951
g3
sS'name'
p10952
S'variable'
p10953
sS'required'
p10954
I01
sS'group_name'
p10955
NsasS'name'
p10956
S'/Constraints/TiedValueConstraint'
p10957
sasS'parameters'
p10958
NsS'name'
p10959
S'/Constraints'
p10960
sa(dp10961
S'description'
p10962
g3
sS'type'
p10963
NsS'subblocks'
p10964
(lp10965
(dp10966
S'description'
p10967
g3
sS'type'
p10968
NsS'subblocks'
p10969
(lp10970
(dp10971
S'description'
p10972
g3
sS'type'
p10973
NsS'subblocks'
p10974
NsS'parameters'
p10975
(lp10976
(dp10977
S'description'
p10978
S'The name of the problem we are getting the variable from\n'
p10979
sS'cpp_type'
p10980
S'std::string'
p10981
sS'default'
p10982
g3
sS'name'
p10983
S'from'
p10984
sS'required'
p10985
I01
sS'group_name'
p10986
Nsa(dp10987
S'description'
p10988
S'The name of the variable we are getting from the problem\n'
p10989
sS'cpp_type'
p10990
S'std::string'
p10991
sS'default'
p10992
g3
sS'name'
p10993
S'var_name'
p10994
sS'required'
p10995
I01
sS'group_name'
p10996
NsasS'name'
p10997
S'/CoupledProblems/*/*'
p10998
sasS'parameters'
p10999
(lp11000
(dp11001
S'description'
p11002
S'File name of the input file\n'
p11003
sS'cpp_type'
p11004
S'FileName'
p11005
sS'default'
p11006
g3
sS'name'
p11007
S'input_file'
p11008
sS'required'
p11009
I01
sS'group_name'
p11010
NsasS'name'
p11011
S'/CoupledProblems/*'
p11012
sasS'parameters'
p11013
NsS'name'
p11014
S'/CoupledProblems'
p11015
sa(dp11016
S'description'
p11017
g3
sS'type'
p11018
NsS'subblocks'
p11019
(lp11020
(dp11021
S'description'
p11022
g3
sS'type'
p11023
NsS'subblocks'
p11024
NsS'parameters'
p11025
(lp11026
(dp11027
S'description'
p11028
S'A string representing the Moose Object that will be built by this Action\n'
p11029
sS'cpp_type'
p11030
S'std::string'
p11031
sS'default'
p11032
g3
sS'name'
p11033
S'type'
p11034
sS'required'
p11035
I01
sS'group_name'
p11036
NsasS'name'
p11037
S'/DGKernels/*'
p11038
sa(dp11039
S'description'
p11040
g3
sS'type'
p11041
NsS'subblocks'
p11042
NsS'parameters'
p11043
(lp11044
(dp11045
S'description'
p11046
S'epsilon\n'
p11047
sS'cpp_type'
p11048
S'double'
p11049
sS'default'
p11050
g3
sS'name'
p11051
S'epsilon'
p11052
sS'required'
p11053
I01
sS'group_name'
p11054
Nsa(dp11055
S'description'
p11056
S'sigma\n'
p11057
sS'cpp_type'
p11058
S'double'
p11059
sS'default'
p11060
g3
sS'name'
p11061
S'sigma'
p11062
sS'required'
p11063
I01
sS'group_name'
p11064
Nsa(dp11065
S'description'
p11066
g3
sS'cpp_type'
p11067
S'std::string'
p11068
sS'default'
p11069
S'DGDiffusion'
p11070
sS'name'
p11071
S'type'
p11072
sS'required'
p11073
I00
sS'group_name'
p11074
Nsa(dp11075
S'description'
p11076
S'The name of the variable that this boundary condition applies to\n'
p11077
sS'cpp_type'
p11078
S'NonlinearVariableName'
p11079
sS'default'
p11080
g3
sS'name'
p11081
S'variable'
p11082
sS'required'
p11083
I01
sS'group_name'
p11084
NsasS'name'
p11085
S'/DGKernels/DGDiffusion'
p11086
sasS'parameters'
p11087
NsS'name'
p11088
S'/DGKernels'
p11089
sa(dp11090
S'description'
p11091
g3
sS'type'
p11092
NsS'subblocks'
p11093
(lp11094
(dp11095
S'description'
p11096
g3
sS'type'
p11097
NsS'subblocks'
p11098
NsS'parameters'
p11099
(lp11100
(dp11101
S'description'
p11102
S'A string representing the Moose Object that will be built by this Action\n'
p11103
sS'cpp_type'
p11104
S'std::string'
p11105
sS'default'
p11106
g3
sS'name'
p11107
S'type'
p11108
sS'required'
p11109
I01
sS'group_name'
p11110
NsasS'name'
p11111
S'/Dampers/*'
p11112
sa(dp11113
S'description'
p11114
g3
sS'type'
p11115
NsS'subblocks'
p11116
NsS'parameters'
p11117
(lp11118
(dp11119
S'description'
p11120
S'The percentage (between 0 and 1) of the newton update to take.\n'
p11121
sS'cpp_type'
p11122
S'double'
p11123
sS'default'
p11124
g3
sS'name'
p11125
S'damping'
p11126
sS'required'
p11127
I01
sS'group_name'
p11128
Nsa(dp11129
S'description'
p11130
g3
sS'cpp_type'
p11131
S'std::string'
p11132
sS'default'
p11133
S'ConstantDamper'
p11134
sS'name'
p11135
S'type'
p11136
sS'required'
p11137
I00
sS'group_name'
p11138
Nsa(dp11139
S'description'
p11140
S'The name of the variable that this damper operates on\n'
p11141
sS'cpp_type'
p11142
S'NonlinearVariableName'
p11143
sS'default'
p11144
g3
sS'name'
p11145
S'variable'
p11146
sS'required'
p11147
I01
sS'group_name'
p11148
NsasS'name'
p11149
S'/Dampers/ConstantDamper'
p11150
sa(dp11151
S'description'
p11152
g3
sS'type'
p11153
NsS'subblocks'
p11154
NsS'parameters'
p11155
(lp11156
(dp11157
S'description'
p11158
S'The maximum newton increment for the variable.\n'
p11159
sS'cpp_type'
p11160
S'double'
p11161
sS'default'
p11162
g3
sS'name'
p11163
S'max_increment'
p11164
sS'required'
p11165
I01
sS'group_name'
p11166
Nsa(dp11167
S'description'
p11168
g3
sS'cpp_type'
p11169
S'std::string'
p11170
sS'default'
p11171
S'MaxIncrement'
p11172
sS'name'
p11173
S'type'
p11174
sS'required'
p11175
I00
sS'group_name'
p11176
Nsa(dp11177
S'description'
p11178
S'The name of the variable that this damper operates on\n'
p11179
sS'cpp_type'
p11180
S'NonlinearVariableName'
p11181
sS'default'
p11182
g3
sS'name'
p11183
S'variable'
p11184
sS'required'
p11185
I01
sS'group_name'
p11186
NsasS'name'
p11187
S'/Dampers/MaxIncrement'
p11188
sasS'parameters'
p11189
NsS'name'
p11190
S'/Dampers'
p11191
sa(dp11192
S'description'
p11193
g3
sS'type'
p11194
NsS'subblocks'
p11195
NsS'parameters'
p11196
(lp11197
(dp11198
S'description'
p11199
S'Print out the actions being executed\n'
p11200
sS'cpp_type'
p11201
S'bool'
p11202
sS'default'
p11203
S'0'
p11204
sS'name'
p11205
S'show_actions'
p11206
sS'required'
p11207
I00
sS'group_name'
p11208
Nsa(dp11209
S'description'
p11210
S'Print out the material properties supplied for each block, face, neighbor, and/or sideset\n'
p11211
sS'cpp_type'
p11212
S'bool'
p11213
sS'default'
p11214
S'0'
p11215
sS'name'
p11216
S'show_material_props'
p11217
sS'required'
p11218
I00
sS'group_name'
p11219
Nsa(dp11220
S'description'
p11221
S'Shows parser block extraction and debugging information\n'
p11222
sS'cpp_type'
p11223
S'bool'
p11224
sS'default'
p11225
S'0'
p11226
sS'name'
p11227
S'show_parser'
p11228
sS'required'
p11229
I00
sS'group_name'
p11230
Nsa(dp11231
S'description'
p11232
S'The number of top residuals to print out (0 = no output)\n'
p11233
sS'cpp_type'
p11234
S'unsigned int'
p11235
sS'default'
p11236
S'0'
p11237
sS'name'
p11238
S'show_top_residuals'
p11239
sS'required'
p11240
I00
sS'group_name'
p11241
Nsa(dp11242
S'description'
p11243
S'Print the residual norms of the individual solution variables at each nonlinear iteration\n'
p11244
sS'cpp_type'
p11245
S'bool'
p11246
sS'default'
p11247
S'0'
p11248
sS'name'
p11249
S'show_var_residual_norms'
p11250
sS'required'
p11251
I00
sS'group_name'
p11252
Nsa(dp11253
S'description'
p11254
S'Variables for which residuals will be sent to the output file\n'
p11255
sS'cpp_type'
p11256
S'std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >'
p11257
sS'default'
p11258
g3
sS'name'
p11259
S'show_var_residual'
p11260
sS'required'
p11261
I00
sS'group_name'
p11262
NsasS'name'
p11263
S'/Debug'
p11264
sa(dp11265
S'description'
p11266
g3
sS'type'
p11267
NsS'subblocks'
p11268
NsS'parameters'
p11269
(lp11270
(dp11271
S'description'
p11272
S'*** WARNING: This block is deprecated - DO NOT USE ***\n'
p11273
sS'cpp_type'
p11274
S'bool'
p11275
sS'default'
p11276
g3
sS'name'
p11277
S'DEPRECATED'
p11278
sS'required'
p11279
I00
sS'group_name'
p11280
NsasS'name'
p11281
S'/DeprecatedBlock'
p11282
sa(dp11283
S'description'
p11284
g3
sS'type'
p11285
NsS'subblocks'
p11286
(lp11287
(dp11288
S'description'
p11289
g3
sS'type'
p11290
NsS'subblocks'
p11291
NsS'parameters'
p11292
(lp11293
(dp11294
S'description'
p11295
S'A string representing the Moose Object that will be built by this Action\n'
p11296
sS'cpp_type'
p11297
S'std::string'
p11298
sS'default'
p11299
g3
sS'name'
p11300
S'type'
p11301
sS'required'
p11302
I01
sS'group_name'
p11303
NsasS'name'
p11304
S'/DiracKernels/*'
p11305
sa(dp11306
S'description'
p11307
g3
sS'type'
p11308
NsS'subblocks'
p11309
NsS'parameters'
p11310
(lp11311
(dp11312
S'description'
p11313
S'The x,y,z coordinates of the point\n'
p11314
sS'cpp_type'
p11315
S'std::vector<double, std::allocator<double> >'
p11316
sS'default'
p11317
g3
sS'name'
p11318
S'point'
p11319
sS'required'
p11320
I01
sS'group_name'
p11321
Nsa(dp11322
S'description'
p11323
g3
sS'cpp_type'
p11324
S'std::string'
p11325
sS'default'
p11326
S'ConstantPointSource'
p11327
sS'name'
p11328
S'type'
p11329
sS'required'
p11330
I00
sS'group_name'
p11331
Nsa(dp11332
S'description'
p11333
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11334
sS'cpp_type'
p11335
S'bool'
p11336
sS'default'
p11337
S'0'
p11338
sS'name'
p11339
S'use_displaced_mesh'
p11340
sS'required'
p11341
I00
sS'group_name'
p11342
S'Advanced'
p11343
sa(dp11344
S'description'
p11345
S'The value of the point source\n'
p11346
sS'cpp_type'
p11347
S'double'
p11348
sS'default'
p11349
g3
sS'name'
p11350
S'value'
p11351
sS'required'
p11352
I01
sS'group_name'
p11353
Nsa(dp11354
S'description'
p11355
S'The name of the variable that this kernel operates on\n'
p11356
sS'cpp_type'
p11357
S'NonlinearVariableName'
p11358
sS'default'
p11359
g3
sS'name'
p11360
S'variable'
p11361
sS'required'
p11362
I01
sS'group_name'
p11363
NsasS'name'
p11364
S'/DiracKernels/ConstantPointSource'
p11365
sasS'parameters'
p11366
NsS'name'
p11367
S'/DiracKernels'
p11368
sa(dp11369
S'description'
p11370
g3
sS'type'
p11371
NsS'subblocks'
p11372
(lp11373
(dp11374
S'description'
p11375
g3
sS'type'
p11376
NsS'subblocks'
p11377
(lp11378
(dp11379
S'description'
p11380
g3
sS'type'
p11381
NsS'subblocks'
p11382
NsS'parameters'
p11383
(lp11384
(dp11385
S'description'
p11386
S'The number of timesteps in a transient run\n'
p11387
sS'cpp_type'
p11388
S'unsigned int'
p11389
sS'default'
p11390
S'4294967295'
p11391
sS'name'
p11392
S'num_steps'
p11393
sS'required'
p11394
I00
sS'group_name'
p11395
Nsa(dp11396
S'description'
p11397
S'File base name used for restart\n'
p11398
sS'cpp_type'
p11399
S'FileNameNoExtension'
p11400
sS'default'
p11401
g3
sS'name'
p11402
S'restart_file_base'
p11403
sS'required'
p11404
I00
sS'group_name'
p11405
S'Restart'
p11406
sa(dp11407
S'description'
p11408
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p11409
sS'cpp_type'
p11410
S'std::vector<std::string, std::allocator<std::string> >'
p11411
sS'default'
p11412
g3
sS'name'
p11413
S'splitting'
p11414
sS'required'
p11415
I00
sS'group_name'
p11416
Nsa(dp11417
S'description'
p11418
g3
sS'cpp_type'
p11419
S'std::string'
p11420
sS'default'
p11421
S'CoupledTransientExecutioner'
p11422
sS'name'
p11423
S'type'
p11424
sS'required'
p11425
I00
sS'group_name'
p11426
NsasS'name'
p11427
S'/Executioner/<type>/CoupledTransientExecutioner'
p11428
sa(dp11429
S'description'
p11430
g3
sS'type'
p11431
NsS'subblocks'
p11432
NsS'parameters'
p11433
NsS'name'
p11434
S'/Executioner/<type>/CoupledTransientExecutioner'
p11435
sa(dp11436
S'description'
p11437
g3
sS'type'
p11438
NsS'subblocks'
p11439
NsS'parameters'
p11440
(lp11441
(dp11442
S'description'
p11443
S'If Chebyshev acceleration is turned on\n'
p11444
sS'cpp_type'
p11445
S'bool'
p11446
sS'default'
p11447
S'1'
p11448
sS'name'
p11449
S'Chebyshev_acceleration_on'
p11450
sS'required'
p11451
I00
sS'group_name'
p11452
Nsa(dp11453
S'description'
p11454
S'True to ask the solver to set initial\n'
p11455
sS'cpp_type'
p11456
S'bool'
p11457
sS'default'
p11458
S'1'
p11459
sS'name'
p11460
S'auto_initialization'
p11461
sS'required'
p11462
I00
sS'group_name'
p11463
Nsa(dp11464
S'description'
p11465
S'To evaluate |Bx| for the eigenvalue\n'
p11466
sS'cpp_type'
p11467
S'PostprocessorName'
p11468
sS'default'
p11469
g3
sS'name'
p11470
S'bx_norm'
p11471
sS'required'
p11472
I01
sS'group_name'
p11473
Nsa(dp11474
S'description'
p11475
S'Eigenvalue convergence tolerance\n'
p11476
sS'cpp_type'
p11477
S'double'
p11478
sS'default'
p11479
S'1e-06'
p11480
sS'name'
p11481
S'eig_check_tol'
p11482
sS'required'
p11483
I00
sS'group_name'
p11484
Nsa(dp11485
S'description'
p11486
S'True to evaluate custom user objects at the end\n'
p11487
sS'cpp_type'
p11488
S'bool'
p11489
sS'default'
p11490
S'1'
p11491
sS'name'
p11492
S'evaluate_custom_uo'
p11493
sS'required'
p11494
I00
sS'group_name'
p11495
Nsa(dp11496
S'description'
p11497
S'Initial guess of the eigenvalue\n'
p11498
sS'cpp_type'
p11499
S'double'
p11500
sS'default'
p11501
S'1'
p11502
sS'name'
p11503
S'k0'
p11504
sS'required'
p11505
I00
sS'group_name'
p11506
Nsa(dp11507
S'description'
p11508
S'The maximum number of power iterations\n'
p11509
sS'cpp_type'
p11510
S'unsigned int'
p11511
sS'default'
p11512
S'300'
p11513
sS'name'
p11514
S'max_power_iterations'
p11515
sS'required'
p11516
I00
sS'group_name'
p11517
Nsa(dp11518
S'description'
p11519
S'Minimum number of power iterations\n'
p11520
sS'cpp_type'
p11521
S'unsigned int'
p11522
sS'default'
p11523
S'1'
p11524
sS'name'
p11525
S'min_power_iterations'
p11526
sS'required'
p11527
I00
sS'group_name'
p11528
Nsa(dp11529
S'description'
p11530
S'Normalize x to make |x| equal to this factor\n'
p11531
sS'cpp_type'
p11532
S'double'
p11533
sS'default'
p11534
g3
sS'name'
p11535
S'normal_factor'
p11536
sS'required'
p11537
I00
sS'group_name'
p11538
Nsa(dp11539
S'description'
p11540
S'To evaluate |x| for normalization\n'
p11541
sS'cpp_type'
p11542
S'PostprocessorName'
p11543
sS'default'
p11544
g3
sS'name'
p11545
S'normalization'
p11546
sS'required'
p11547
I00
sS'group_name'
p11548
Nsa(dp11549
S'description'
p11550
S'True to disable all the intemediate exodus outputs\n'
p11551
sS'cpp_type'
p11552
S'bool'
p11553
sS'default'
p11554
S'0'
p11555
sS'name'
p11556
S'output_on_final'
p11557
sS'required'
p11558
I00
sS'group_name'
p11559
Nsa(dp11560
S'description'
p11561
S'True to output solutions durint PI\n'
p11562
sS'cpp_type'
p11563
S'bool'
p11564
sS'default'
p11565
S'0'
p11566
sS'name'
p11567
S'output_pi_history'
p11568
sS'required'
p11569
I00
sS'group_name'
p11570
Nsa(dp11571
S'description'
p11572
S'Reduce residual norm per power iteration by this factor\n'
p11573
sS'cpp_type'
p11574
S'double'
p11575
sS'default'
p11576
S'0.01'
p11577
sS'name'
p11578
S'pfactor'
p11579
sS'required'
p11580
I00
sS'group_name'
p11581
Nsa(dp11582
S'description'
p11583
S'File base name used for restart\n'
p11584
sS'cpp_type'
p11585
S'FileNameNoExtension'
p11586
sS'default'
p11587
g3
sS'name'
p11588
S'restart_file_base'
p11589
sS'required'
p11590
I00
sS'group_name'
p11591
S'Restart'
p11592
sa(dp11593
S'description'
p11594
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p11595
sS'cpp_type'
p11596
S'std::vector<std::string, std::allocator<std::string> >'
p11597
sS'default'
p11598
g3
sS'name'
p11599
S'splitting'
p11600
sS'required'
p11601
I00
sS'group_name'
p11602
Nsa(dp11603
S'description'
p11604
S'System time\n'
p11605
sS'cpp_type'
p11606
S'double'
p11607
sS'default'
p11608
S'0'
p11609
sS'name'
p11610
S'time'
p11611
sS'required'
p11612
I00
sS'group_name'
p11613
Nsa(dp11614
S'description'
p11615
g3
sS'cpp_type'
p11616
S'std::string'
p11617
sS'default'
p11618
S'InversePowerMethod'
p11619
sS'name'
p11620
S'type'
p11621
sS'required'
p11622
I00
sS'group_name'
p11623
Nsa(dp11624
S'description'
p11625
S'To evaluate |x-x_previous| for power iterations\n'
p11626
sS'cpp_type'
p11627
S'PostprocessorName'
p11628
sS'default'
p11629
g3
sS'name'
p11630
S'xdiff'
p11631
sS'required'
p11632
I00
sS'group_name'
p11633
NsasS'name'
p11634
S'/Executioner/<type>/InversePowerMethod'
p11635
sa(dp11636
S'description'
p11637
g3
sS'type'
p11638
NsS'subblocks'
p11639
NsS'parameters'
p11640
NsS'name'
p11641
S'/Executioner/<type>/InversePowerMethod'
p11642
sa(dp11643
S'description'
p11644
g3
sS'type'
p11645
NsS'subblocks'
p11646
NsS'parameters'
p11647
(lp11648
(dp11649
S'description'
p11650
S'True to ask the solver to set initial\n'
p11651
sS'cpp_type'
p11652
S'bool'
p11653
sS'default'
p11654
S'1'
p11655
sS'name'
p11656
S'auto_initialization'
p11657
sS'required'
p11658
I00
sS'group_name'
p11659
Nsa(dp11660
S'description'
p11661
S'To evaluate |Bx| for the eigenvalue\n'
p11662
sS'cpp_type'
p11663
S'PostprocessorName'
p11664
sS'default'
p11665
g3
sS'name'
p11666
S'bx_norm'
p11667
sS'required'
p11668
I01
sS'group_name'
p11669
Nsa(dp11670
S'description'
p11671
S'True to evaluate custom user objects at the end\n'
p11672
sS'cpp_type'
p11673
S'bool'
p11674
sS'default'
p11675
S'1'
p11676
sS'name'
p11677
S'evaluate_custom_uo'
p11678
sS'required'
p11679
I00
sS'group_name'
p11680
Nsa(dp11681
S'description'
p11682
S'The number of free power iterations\n'
p11683
sS'cpp_type'
p11684
S'unsigned int'
p11685
sS'default'
p11686
S'4'
p11687
sS'name'
p11688
S'free_power_iterations'
p11689
sS'required'
p11690
I00
sS'group_name'
p11691
Nsa(dp11692
S'description'
p11693
S'Initial guess of the eigenvalue\n'
p11694
sS'cpp_type'
p11695
S'double'
p11696
sS'default'
p11697
S'1'
p11698
sS'name'
p11699
S'k0'
p11700
sS'required'
p11701
I00
sS'group_name'
p11702
Nsa(dp11703
S'description'
p11704
S'Normalize x to make |x| equal to this factor\n'
p11705
sS'cpp_type'
p11706
S'double'
p11707
sS'default'
p11708
g3
sS'name'
p11709
S'normal_factor'
p11710
sS'required'
p11711
I00
sS'group_name'
p11712
Nsa(dp11713
S'description'
p11714
S'To evaluate |x| for normalization\n'
p11715
sS'cpp_type'
p11716
S'PostprocessorName'
p11717
sS'default'
p11718
g3
sS'name'
p11719
S'normalization'
p11720
sS'required'
p11721
I00
sS'group_name'
p11722
Nsa(dp11723
S'description'
p11724
S'True to disable all the intemediate exodus outputs\n'
p11725
sS'cpp_type'
p11726
S'bool'
p11727
sS'default'
p11728
S'0'
p11729
sS'name'
p11730
S'output_on_final'
p11731
sS'required'
p11732
I00
sS'group_name'
p11733
Nsa(dp11734
S'description'
p11735
S'True to output solutions durint PI\n'
p11736
sS'cpp_type'
p11737
S'bool'
p11738
sS'default'
p11739
S'0'
p11740
sS'name'
p11741
S'output_pi_history'
p11742
sS'required'
p11743
I00
sS'group_name'
p11744
Nsa(dp11745
S'description'
p11746
S'The factor of residual to be reduced per power iteration\n'
p11747
sS'cpp_type'
p11748
S'double'
p11749
sS'default'
p11750
S'0.01'
p11751
sS'name'
p11752
S'pfactor'
p11753
sS'required'
p11754
I00
sS'group_name'
p11755
Nsa(dp11756
S'description'
p11757
S'File base name used for restart\n'
p11758
sS'cpp_type'
p11759
S'FileNameNoExtension'
p11760
sS'default'
p11761
g3
sS'name'
p11762
S'restart_file_base'
p11763
sS'required'
p11764
I00
sS'group_name'
p11765
S'Restart'
p11766
sa(dp11767
S'description'
p11768
S'Absolute tolernance on residual norm\n'
p11769
sS'cpp_type'
p11770
S'double'
p11771
sS'default'
p11772
S'1e-06'
p11773
sS'name'
p11774
S'source_abs_tol'
p11775
sS'required'
p11776
I00
sS'group_name'
p11777
Nsa(dp11778
S'description'
p11779
S'Relative tolernance on residual norm\n'
p11780
sS'cpp_type'
p11781
S'double'
p11782
sS'default'
p11783
S'1e-50'
p11784
sS'name'
p11785
S'source_rel_tol'
p11786
sS'required'
p11787
I00
sS'group_name'
p11788
Nsa(dp11789
S'description'
p11790
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p11791
sS'cpp_type'
p11792
S'std::vector<std::string, std::allocator<std::string> >'
p11793
sS'default'
p11794
g3
sS'name'
p11795
S'splitting'
p11796
sS'required'
p11797
I00
sS'group_name'
p11798
Nsa(dp11799
S'description'
p11800
S'System time\n'
p11801
sS'cpp_type'
p11802
S'double'
p11803
sS'default'
p11804
S'0'
p11805
sS'name'
p11806
S'time'
p11807
sS'required'
p11808
I00
sS'group_name'
p11809
Nsa(dp11810
S'description'
p11811
g3
sS'cpp_type'
p11812
S'std::string'
p11813
sS'default'
p11814
S'NonlinearEigen'
p11815
sS'name'
p11816
S'type'
p11817
sS'required'
p11818
I00
sS'group_name'
p11819
Nsa(dp11820
S'description'
p11821
S'To evaluate |x-x_previous| for power iterations\n'
p11822
sS'cpp_type'
p11823
S'PostprocessorName'
p11824
sS'default'
p11825
g3
sS'name'
p11826
S'xdiff'
p11827
sS'required'
p11828
I00
sS'group_name'
p11829
NsasS'name'
p11830
S'/Executioner/<type>/NonlinearEigen'
p11831
sa(dp11832
S'description'
p11833
g3
sS'type'
p11834
NsS'subblocks'
p11835
NsS'parameters'
p11836
NsS'name'
p11837
S'/Executioner/<type>/NonlinearEigen'
p11838
sa(dp11839
S'description'
p11840
g3
sS'type'
p11841
NsS'subblocks'
p11842
NsS'parameters'
p11843
(lp11844
(dp11845
S'description'
p11846
S'File base name used for restart\n'
p11847
sS'cpp_type'
p11848
S'FileNameNoExtension'
p11849
sS'default'
p11850
g3
sS'name'
p11851
S'restart_file_base'
p11852
sS'required'
p11853
I00
sS'group_name'
p11854
S'Restart'
p11855
sa(dp11856
S'description'
p11857
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p11858
sS'cpp_type'
p11859
S'std::vector<std::string, std::allocator<std::string> >'
p11860
sS'default'
p11861
g3
sS'name'
p11862
S'splitting'
p11863
sS'required'
p11864
I00
sS'group_name'
p11865
Nsa(dp11866
S'description'
p11867
g3
sS'cpp_type'
p11868
S'std::string'
p11869
sS'default'
p11870
S'Steady'
p11871
sS'name'
p11872
S'type'
p11873
sS'required'
p11874
I00
sS'group_name'
p11875
NsasS'name'
p11876
S'/Executioner/<type>/Steady'
p11877
sa(dp11878
S'description'
p11879
g3
sS'type'
p11880
NsS'subblocks'
p11881
NsS'parameters'
p11882
NsS'name'
p11883
S'/Executioner/<type>/Steady'
p11884
sa(dp11885
S'description'
p11886
g3
sS'type'
p11887
NsS'subblocks'
p11888
NsS'parameters'
p11889
(lp11890
(dp11891
S'description'
p11892
S'abort if solve not converged rather than cut timestep\n'
p11893
sS'cpp_type'
p11894
S'bool'
p11895
sS'default'
p11896
S'0'
p11897
sS'name'
p11898
S'abort_on_solve_fail'
p11899
sS'required'
p11900
I00
sS'group_name'
p11901
S'Advanced'
p11902
sa(dp11903
S'description'
p11904
S'The timestep size between solves\n'
p11905
sS'cpp_type'
p11906
S'double'
p11907
sS'default'
p11908
S'1'
p11909
sS'name'
p11910
S'dt'
p11911
sS'required'
p11912
I00
sS'group_name'
p11913
Nsa(dp11914
S'description'
p11915
S'The maximum timestep size in an adaptive run\n'
p11916
sS'cpp_type'
p11917
S'double'
p11918
sS'default'
p11919
S'1e+30'
p11920
sS'name'
p11921
S'dtmax'
p11922
sS'required'
p11923
I00
sS'group_name'
p11924
S'Advanced'
p11925
sa(dp11926
S'description'
p11927
S'The minimum timestep size in an adaptive run\n'
p11928
sS'cpp_type'
p11929
S'double'
p11930
sS'default'
p11931
S'2e-14'
p11932
sS'name'
p11933
S'dtmin'
p11934
sS'required'
p11935
I00
sS'group_name'
p11936
S'Advanced'
p11937
sa(dp11938
S'description'
p11939
S'The end time of the simulation\n'
p11940
sS'cpp_type'
p11941
S'double'
p11942
sS'default'
p11943
S'1e+30'
p11944
sS'name'
p11945
S'end_time'
p11946
sS'required'
p11947
I00
sS'group_name'
p11948
Nsa(dp11949
S'description'
p11950
S'The number of timesteps during startup\n'
p11951
sS'cpp_type'
p11952
S'int'
p11953
sS'default'
p11954
S'0'
p11955
sS'name'
p11956
S'n_startup_steps'
p11957
sS'required'
p11958
I00
sS'group_name'
p11959
S'Advanced'
p11960
sa(dp11961
S'description'
p11962
S'The number of timesteps in a transient run\n'
p11963
sS'cpp_type'
p11964
S'unsigned int'
p11965
sS'default'
p11966
S'4294967295'
p11967
sS'name'
p11968
S'num_steps'
p11969
sS'required'
p11970
I00
sS'group_name'
p11971
Nsa(dp11972
S'description'
p11973
S"The absolute nonlinear residual to shoot for during Picard iterations.  This check is performed based on the Master app's nonlinear residual.\n"
p11974
sS'cpp_type'
p11975
S'double'
p11976
sS'default'
p11977
S'1e-50'
p11978
sS'name'
p11979
S'picard_abs_tol'
p11980
sS'required'
p11981
I00
sS'group_name'
p11982
S'Picard'
p11983
sa(dp11984
S'description'
p11985
S'Number of times each timestep will be solved.  Mainly used when wanting to do Picard iterations with MultiApps that are set to execute_on timestep or timestep_begin\n'
p11986
sS'cpp_type'
p11987
S'unsigned int'
p11988
sS'default'
p11989
S'1'
p11990
sS'name'
p11991
S'picard_max_its'
p11992
sS'required'
p11993
I00
sS'group_name'
p11994
S'Picard'
p11995
sa(dp11996
S'description'
p11997
S"The relative nonlinear residual drop to shoot for during Picard iterations.  This check is performed based on the Master app's nonlinear residual.\n"
p11998
sS'cpp_type'
p11999
S'double'
p12000
sS'default'
p12001
S'1e-08'
p12002
sS'name'
p12003
S'picard_rel_tol'
p12004
sS'required'
p12005
I00
sS'group_name'
p12006
S'Picard'
p12007
sa(dp12008
S'description'
p12009
S'The scale factor for the predictor (can range from 0 to 1)\n'
p12010
sS'cpp_type'
p12011
S'double'
p12012
sS'default'
p12013
g3
sS'name'
p12014
S'predictor_scale'
p12015
sS'required'
p12016
I00
sS'group_name'
p12017
S'Advanced'
p12018
sa(dp12019
S'description'
p12020
S'Use when restarting a calculation to force a change in dt.\n'
p12021
sS'cpp_type'
p12022
S'bool'
p12023
sS'default'
p12024
S'0'
p12025
sS'name'
p12026
S'reset_dt'
p12027
sS'required'
p12028
I00
sS'group_name'
p12029
Nsa(dp12030
S'description'
p12031
S'File base name used for restart\n'
p12032
sS'cpp_type'
p12033
S'FileNameNoExtension'
p12034
sS'default'
p12035
g3
sS'name'
p12036
S'restart_file_base'
p12037
sS'required'
p12038
I00
sS'group_name'
p12039
S'Restart'
p12040
sa(dp12041
S'name'
p12042
S'scheme'
p12043
sS'cpp_type'
p12044
S'MooseEnum'
p12045
sS'default'
p12046
S'implicit-euler'
p12047
sS'description'
p12048
S'Time integration scheme used.\n'
p12049
sS'required'
p12050
I00
sS'options'
p12051
S'implicit-euler explicit-euler crank-nicolson bdf2 rk-2'
p12052
sS'group_name'
p12053
Nsa(dp12054
S'description'
p12055
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p12056
sS'cpp_type'
p12057
S'std::vector<std::string, std::allocator<std::string> >'
p12058
sS'default'
p12059
g3
sS'name'
p12060
S'splitting'
p12061
sS'required'
p12062
I00
sS'group_name'
p12063
Nsa(dp12064
S'description'
p12065
S'Whenever the relative residual changes by less than this the solution will be considered to be at steady state.\n'
p12066
sS'cpp_type'
p12067
S'double'
p12068
sS'default'
p12069
S'1e-08'
p12070
sS'name'
p12071
S'ss_check_tol'
p12072
sS'required'
p12073
I00
sS'group_name'
p12074
S'Advanced'
p12075
sa(dp12076
S'description'
p12077
S'Minimum number of timesteps to take before checking for steady state conditions.\n'
p12078
sS'cpp_type'
p12079
S'double'
p12080
sS'default'
p12081
S'0'
p12082
sS'name'
p12083
S'ss_tmin'
p12084
sS'required'
p12085
I00
sS'group_name'
p12086
S'Advanced'
p12087
sa(dp12088
S'description'
p12089
S'The start time of the simulation\n'
p12090
sS'cpp_type'
p12091
S'double'
p12092
sS'default'
p12093
S'0'
p12094
sS'name'
p12095
S'start_time'
p12096
sS'required'
p12097
I00
sS'group_name'
p12098
S'Advanced'
p12099
sa(dp12100
S'description'
p12101
S'A list of times that will be solved for provided they are within the simulation time\n'
p12102
sS'cpp_type'
p12103
S'std::vector<double, std::allocator<double> >'
p12104
sS'default'
p12105
S'-1.79769e+308'
p12106
sS'name'
p12107
S'sync_times'
p12108
sS'required'
p12109
I00
sS'group_name'
p12110
S'Advanced'
p12111
sa(dp12112
S'description'
p12113
S'The end times of time periods\n'
p12114
sS'cpp_type'
p12115
S'std::vector<double, std::allocator<double> >'
p12116
sS'default'
p12117
g3
sS'name'
p12118
S'time_period_ends'
p12119
sS'required'
p12120
I00
sS'group_name'
p12121
S'Time Periods'
p12122
sa(dp12123
S'description'
p12124
S'The start times of time periods\n'
p12125
sS'cpp_type'
p12126
S'std::vector<double, std::allocator<double> >'
p12127
sS'default'
p12128
g3
sS'name'
p12129
S'time_period_starts'
p12130
sS'required'
p12131
I00
sS'group_name'
p12132
S'Time Periods'
p12133
sa(dp12134
S'description'
p12135
S'The names of periods\n'
p12136
sS'cpp_type'
p12137
S'std::vector<std::string, std::allocator<std::string> >'
p12138
sS'default'
p12139
g3
sS'name'
p12140
S'time_periods'
p12141
sS'required'
p12142
I00
sS'group_name'
p12143
S'Time Periods'
p12144
sa(dp12145
S'description'
p12146
S'the tolerance setting for final timestep size and sync times\n'
p12147
sS'cpp_type'
p12148
S'double'
p12149
sS'default'
p12150
S'2e-14'
p12151
sS'name'
p12152
S'timestep_tolerance'
p12153
sS'required'
p12154
I00
sS'group_name'
p12155
S'Advanced'
p12156
sa(dp12157
S'description'
p12158
S'Whether or not to check for steady state conditions\n'
p12159
sS'cpp_type'
p12160
S'bool'
p12161
sS'default'
p12162
S'0'
p12163
sS'name'
p12164
S'trans_ss_check'
p12165
sS'required'
p12166
I00
sS'group_name'
p12167
S'Advanced'
p12168
sa(dp12169
S'description'
p12170
g3
sS'cpp_type'
p12171
S'std::string'
p12172
sS'default'
p12173
S'Transient'
p12174
sS'name'
p12175
S'type'
p12176
sS'required'
p12177
I00
sS'group_name'
p12178
Nsa(dp12179
S'description'
p12180
S'If true then the dt for the simulation will be chosen by the MultiApps.  If false (the default) then the minimum over the master dt and the MultiApps is used\n'
p12181
sS'cpp_type'
p12182
S'bool'
p12183
sS'default'
p12184
S'0'
p12185
sS'name'
p12186
S'use_multiapp_dt'
p12187
sS'required'
p12188
I00
sS'group_name'
p12189
S'Advanced'
p12190
sa(dp12191
S'description'
p12192
S'Print detailed diagnostics on timestep calculation\n'
p12193
sS'cpp_type'
p12194
S'bool'
p12195
sS'default'
p12196
S'0'
p12197
sS'name'
p12198
S'verbose'
p12199
sS'required'
p12200
I00
sS'group_name'
p12201
NsasS'name'
p12202
S'/Executioner/<type>/Transient'
p12203
sa(dp12204
S'description'
p12205
g3
sS'type'
p12206
NsS'subblocks'
p12207
NsS'parameters'
p12208
NsS'name'
p12209
S'/Executioner/<type>/Transient'
p12210
sasS'parameters'
p12211
NsS'name'
p12212
S'/Executioner/<type>'
p12213
sa(dp12214
S'description'
p12215
g3
sS'type'
p12216
NsS'subblocks'
p12217
NsS'parameters'
p12218
(lp12219
(dp12220
S'description'
p12221
S'The fraction of elements or error to coarsen. Should be between 0 and 1.\n'
p12222
sS'cpp_type'
p12223
S'double'
p12224
sS'default'
p12225
S'0'
p12226
sS'name'
p12227
S'coarsen_fraction'
p12228
sS'required'
p12229
I00
sS'group_name'
p12230
Nsa(dp12231
S'description'
p12232
S'The number of adaptivity cycles per step\n'
p12233
sS'cpp_type'
p12234
S'unsigned int'
p12235
sS'default'
p12236
S'1'
p12237
sS'name'
p12238
S'cycles_per_step'
p12239
sS'required'
p12240
I00
sS'group_name'
p12241
Nsa(dp12242
S'name'
p12243
S'error_estimator'
p12244
sS'cpp_type'
p12245
S'MooseEnum'
p12246
sS'default'
p12247
S'KellyErrorEstimator'
p12248
sS'description'
p12249
S'The class name of the error estimator you want to use.\n'
p12250
sS'required'
p12251
I00
sS'options'
p12252
S'KellyErrorEstimator LaplacianErrorEstimator PatchRecoveryErrorEstimator'
p12253
sS'group_name'
p12254
Nsa(dp12255
S'description'
p12256
S'The number of adaptivity steps to perform using the initial conditions\n'
p12257
sS'cpp_type'
p12258
S'unsigned int'
p12259
sS'default'
p12260
S'0'
p12261
sS'name'
p12262
S'initial_adaptivity'
p12263
sS'required'
p12264
I00
sS'group_name'
p12265
Nsa(dp12266
S'description'
p12267
S'Maximum number of times a single element can be refined. If 0 then infinite.\n'
p12268
sS'cpp_type'
p12269
S'unsigned int'
p12270
sS'default'
p12271
S'0'
p12272
sS'name'
p12273
S'max_h_level'
p12274
sS'required'
p12275
I00
sS'group_name'
p12276
Nsa(dp12277
S'description'
p12278
S'Determines whether information about the mesh is printed when adaptivity occurs\n'
p12279
sS'cpp_type'
p12280
S'bool'
p12281
sS'default'
p12282
S'0'
p12283
sS'name'
p12284
S'print_changed_info'
p12285
sS'required'
p12286
I00
sS'group_name'
p12287
Nsa(dp12288
S'description'
p12289
S'The fraction of elements or error to refine. Should be between 0 and 1.\n'
p12290
sS'cpp_type'
p12291
S'double'
p12292
sS'default'
p12293
S'0'
p12294
sS'name'
p12295
S'refine_fraction'
p12296
sS'required'
p12297
I00
sS'group_name'
p12298
Nsa(dp12299
S'description'
p12300
S'The time that adaptivity will be active after.\n'
p12301
sS'cpp_type'
p12302
S'double'
p12303
sS'default'
p12304
S'-1.79769e+308'
p12305
sS'name'
p12306
S'start_time'
p12307
sS'required'
p12308
I00
sS'group_name'
p12309
Nsa(dp12310
S'description'
p12311
S'The number of adaptivity steps to perform at any one time for steady state\n'
p12312
sS'cpp_type'
p12313
S'unsigned int'
p12314
sS'default'
p12315
S'0'
p12316
sS'name'
p12317
S'steps'
p12318
sS'required'
p12319
I00
sS'group_name'
p12320
Nsa(dp12321
S'description'
p12322
S'The time after which adaptivity will no longer be active.\n'
p12323
sS'cpp_type'
p12324
S'double'
p12325
sS'default'
p12326
S'1.79769e+308'
p12327
sS'name'
p12328
S'stop_time'
p12329
sS'required'
p12330
I00
sS'group_name'
p12331
Nsa(dp12332
S'description'
p12333
S'List of names of variables that will be associated with weight_values\n'
p12334
sS'cpp_type'
p12335
S'std::vector<std::string, std::allocator<std::string> >'
p12336
sS'default'
p12337
g3
sS'name'
p12338
S'weight_names'
p12339
sS'required'
p12340
I00
sS'group_name'
p12341
Nsa(dp12342
S'description'
p12343
S'List of values between 0 and 1 to weight the associated weight_names error by\n'
p12344
sS'cpp_type'
p12345
S'std::vector<double, std::allocator<double> >'
p12346
sS'default'
p12347
g3
sS'name'
p12348
S'weight_values'
p12349
sS'required'
p12350
I00
sS'group_name'
p12351
NsasS'name'
p12352
S'/Executioner/Adaptivity'
p12353
sa(dp12354
S'description'
p12355
g3
sS'type'
p12356
NsS'subblocks'
p12357
(lp12358
(dp12359
S'description'
p12360
g3
sS'type'
p12361
NsS'subblocks'
p12362
(lp12363
(dp12364
S'description'
p12365
g3
sS'type'
p12366
NsS'subblocks'
p12367
NsS'parameters'
p12368
(lp12369
(dp12370
S'description'
p12371
S'The maximum reachable order of the Adams-Bashforth Predictor\n'
p12372
sS'cpp_type'
p12373
S'int'
p12374
sS'default'
p12375
S'2'
p12376
sS'name'
p12377
S'order'
p12378
sS'required'
p12379
I00
sS'group_name'
p12380
Nsa(dp12381
S'description'
p12382
S'The scale factor for the predictor (can range from 0 to 1)\n'
p12383
sS'cpp_type'
p12384
S'double'
p12385
sS'default'
p12386
g3
sS'name'
p12387
S'scale'
p12388
sS'required'
p12389
I01
sS'group_name'
p12390
Nsa(dp12391
S'description'
p12392
g3
sS'cpp_type'
p12393
S'std::string'
p12394
sS'default'
p12395
S'AdamsPredictor'
p12396
sS'name'
p12397
S'type'
p12398
sS'required'
p12399
I00
sS'group_name'
p12400
NsasS'name'
p12401
S'/Executioner/Predictor/<type>/AdamsPredictor'
p12402
sa(dp12403
S'description'
p12404
g3
sS'type'
p12405
NsS'subblocks'
p12406
NsS'parameters'
p12407
(lp12408
(dp12409
S'description'
p12410
S'The scale factor for the predictor (can range from 0 to 1)\n'
p12411
sS'cpp_type'
p12412
S'double'
p12413
sS'default'
p12414
g3
sS'name'
p12415
S'scale'
p12416
sS'required'
p12417
I01
sS'group_name'
p12418
Nsa(dp12419
S'description'
p12420
g3
sS'cpp_type'
p12421
S'std::string'
p12422
sS'default'
p12423
S'SimplePredictor'
p12424
sS'name'
p12425
S'type'
p12426
sS'required'
p12427
I00
sS'group_name'
p12428
NsasS'name'
p12429
S'/Executioner/Predictor/<type>/SimplePredictor'
p12430
sasS'parameters'
p12431
NsS'name'
p12432
S'/Executioner/Predictor/<type>'
p12433
sasS'parameters'
p12434
(lp12435
(dp12436
S'description'
p12437
S'A string representing the Moose Object that will be built by this Action\n'
p12438
sS'cpp_type'
p12439
S'std::string'
p12440
sS'default'
p12441
g3
sS'name'
p12442
S'type'
p12443
sS'required'
p12444
I01
sS'group_name'
p12445
NsasS'name'
p12446
S'/Executioner/Predictor'
p12447
sa(dp12448
S'description'
p12449
g3
sS'type'
p12450
NsS'subblocks'
p12451
NsS'parameters'
p12452
(lp12453
(dp12454
S'name'
p12455
S'order'
p12456
sS'cpp_type'
p12457
S'MooseEnum'
p12458
sS'default'
p12459
S'AUTO'
p12460
sS'description'
p12461
S'Order of the quadrature\n'
p12462
sS'required'
p12463
I00
sS'options'
p12464
S'AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH'
p12465
sS'group_name'
p12466
Nsa(dp12467
S'name'
p12468
S'type'
p12469
sS'cpp_type'
p12470
S'MooseEnum'
p12471
sS'default'
p12472
S'GAUSS'
p12473
sS'description'
p12474
S'Type of the quadrature rule\n'
p12475
sS'required'
p12476
I00
sS'options'
p12477
S'CLOUGH CONICAL GAUSS GRID MONOMIAL SIMPSON TRAP'
p12478
sS'group_name'
p12479
NsasS'name'
p12480
S'/Executioner/Quadrature'
p12481
sa(dp12482
S'description'
p12483
g3
sS'type'
p12484
NsS'subblocks'
p12485
(lp12486
(dp12487
S'description'
p12488
g3
sS'type'
p12489
NsS'subblocks'
p12490
NsS'parameters'
p12491
(lp12492
(dp12493
S'description'
p12494
S'The list of active boundary conditions during this time period (must not be used with "inactive_bcs")\n'
p12495
sS'cpp_type'
p12496
S'std::vector<std::string, std::allocator<std::string> >'
p12497
sS'default'
p12498
g3
sS'name'
p12499
S'active_bcs'
p12500
sS'required'
p12501
I00
sS'group_name'
p12502
Nsa(dp12503
S'description'
p12504
S'The list of active kernels during this time period (must not be used with "inactive_kernels")\n'
p12505
sS'cpp_type'
p12506
S'std::vector<std::string, std::allocator<std::string> >'
p12507
sS'default'
p12508
g3
sS'name'
p12509
S'active_kernels'
p12510
sS'required'
p12511
I00
sS'group_name'
p12512
Nsa(dp12513
S'description'
p12514
S'The list of inactive boundary conditions during this time period (must not be used with "active_bcs")\n'
p12515
sS'cpp_type'
p12516
S'std::vector<std::string, std::allocator<std::string> >'
p12517
sS'default'
p12518
g3
sS'name'
p12519
S'inactive_bcs'
p12520
sS'required'
p12521
I00
sS'group_name'
p12522
Nsa(dp12523
S'description'
p12524
S'The list of inactive kernels during this time period (must not be used with "active_kernels")\n'
p12525
sS'cpp_type'
p12526
S'std::vector<std::string, std::allocator<std::string> >'
p12527
sS'default'
p12528
g3
sS'name'
p12529
S'inactive_kernels'
p12530
sS'required'
p12531
I00
sS'group_name'
p12532
Nsa(dp12533
S'description'
p12534
S'The start time for this time period\n'
p12535
sS'cpp_type'
p12536
S'double'
p12537
sS'default'
p12538
S'0'
p12539
sS'name'
p12540
S'start'
p12541
sS'required'
p12542
I00
sS'group_name'
p12543
NsasS'name'
p12544
S'/Executioner/TimePeriods/*'
p12545
sasS'parameters'
p12546
NsS'name'
p12547
S'/Executioner/TimePeriods'
p12548
sa(dp12549
S'description'
p12550
g3
sS'type'
p12551
NsS'subblocks'
p12552
(lp12553
(dp12554
S'description'
p12555
g3
sS'type'
p12556
NsS'subblocks'
p12557
(lp12558
(dp12559
S'description'
p12560
g3
sS'type'
p12561
NsS'subblocks'
p12562
NsS'parameters'
p12563
(lp12564
(dp12565
S'description'
p12566
S'Initial time step size\n'
p12567
sS'cpp_type'
p12568
S'double'
p12569
sS'default'
p12570
g3
sS'name'
p12571
S'dt'
p12572
sS'required'
p12573
I01
sS'group_name'
p12574
Nsa(dp12575
S'description'
p12576
S'Maximum acceptable error.\n'
p12577
sS'cpp_type'
p12578
S'double'
p12579
sS'default'
p12580
g3
sS'name'
p12581
S'e_max'
p12582
sS'required'
p12583
I01
sS'group_name'
p12584
Nsa(dp12585
S'description'
p12586
S'Target error tolerance.\n'
p12587
sS'cpp_type'
p12588
S'double'
p12589
sS'default'
p12590
g3
sS'name'
p12591
S'e_tol'
p12592
sS'required'
p12593
I01
sS'group_name'
p12594
Nsa(dp12595
S'description'
p12596
S'Maximum ratio that the time step can increase.\n'
p12597
sS'cpp_type'
p12598
S'double'
p12599
sS'default'
p12600
S'1e+09'
p12601
sS'name'
p12602
S'max_increase'
p12603
sS'required'
p12604
I00
sS'group_name'
p12605
Nsa(dp12606
S'description'
p12607
S'Use when restarting a calculation to force a change in dt.\n'
p12608
sS'cpp_type'
p12609
S'bool'
p12610
sS'default'
p12611
S'0'
p12612
sS'name'
p12613
S'reset_dt'
p12614
sS'required'
p12615
I00
sS'group_name'
p12616
Nsa(dp12617
S'description'
p12618
S'scaling parameter for dt selection\n'
p12619
sS'cpp_type'
p12620
S'double'
p12621
sS'default'
p12622
S'0.8'
p12623
sS'name'
p12624
S'scaling_parameter'
p12625
sS'required'
p12626
I00
sS'group_name'
p12627
Nsa(dp12628
S'description'
p12629
S'when to start taking adaptive time steps\n'
p12630
sS'cpp_type'
p12631
S'int'
p12632
sS'default'
p12633
S'2'
p12634
sS'name'
p12635
S'start_adapting'
p12636
sS'required'
p12637
I00
sS'group_name'
p12638
Nsa(dp12639
S'description'
p12640
S'the number of time steps before recalculating dt\n'
p12641
sS'cpp_type'
p12642
S'int'
p12643
sS'default'
p12644
S'1'
p12645
sS'name'
p12646
S'steps_between_increase'
p12647
sS'required'
p12648
I00
sS'group_name'
p12649
Nsa(dp12650
S'description'
p12651
g3
sS'cpp_type'
p12652
S'std::string'
p12653
sS'default'
p12654
S'AB2PredictorCorrector'
p12655
sS'name'
p12656
S'type'
p12657
sS'required'
p12658
I00
sS'group_name'
p12659
NsasS'name'
p12660
S'/Executioner/TimeStepper/<type>/AB2PredictorCorrector'
p12661
sa(dp12662
S'description'
p12663
g3
sS'type'
p12664
NsS'subblocks'
p12665
NsS'parameters'
p12666
(lp12667
(dp12668
S'description'
p12669
S'Size of the time step\n'
p12670
sS'cpp_type'
p12671
S'double'
p12672
sS'default'
p12673
g3
sS'name'
p12674
S'dt'
p12675
sS'required'
p12676
I01
sS'group_name'
p12677
Nsa(dp12678
S'description'
p12679
S'Use when restarting a calculation to force a change in dt.\n'
p12680
sS'cpp_type'
p12681
S'bool'
p12682
sS'default'
p12683
S'0'
p12684
sS'name'
p12685
S'reset_dt'
p12686
sS'required'
p12687
I00
sS'group_name'
p12688
Nsa(dp12689
S'description'
p12690
g3
sS'cpp_type'
p12691
S'std::string'
p12692
sS'default'
p12693
S'ConstantDT'
p12694
sS'name'
p12695
S'type'
p12696
sS'required'
p12697
I00
sS'group_name'
p12698
NsasS'name'
p12699
S'/Executioner/TimeStepper/<type>/ConstantDT'
p12700
sa(dp12701
S'description'
p12702
g3
sS'type'
p12703
NsS'subblocks'
p12704
NsS'parameters'
p12705
(lp12706
(dp12707
S'description'
p12708
S'The initial time step size.\n'
p12709
sS'cpp_type'
p12710
S'double'
p12711
sS'default'
p12712
S'1'
p12713
sS'name'
p12714
S'dt'
p12715
sS'required'
p12716
I00
sS'group_name'
p12717
Nsa(dp12718
S'description'
p12719
S'Maximum acceptable error.\n'
p12720
sS'cpp_type'
p12721
S'double'
p12722
sS'default'
p12723
g3
sS'name'
p12724
S'e_max'
p12725
sS'required'
p12726
I01
sS'group_name'
p12727
Nsa(dp12728
S'description'
p12729
S'Target error tolerance.\n'
p12730
sS'cpp_type'
p12731
S'double'
p12732
sS'default'
p12733
g3
sS'name'
p12734
S'e_tol'
p12735
sS'required'
p12736
I01
sS'group_name'
p12737
Nsa(dp12738
S'description'
p12739
S'Maximum ratio that the time step can increase.\n'
p12740
sS'cpp_type'
p12741
S'double'
p12742
sS'default'
p12743
S'1e+09'
p12744
sS'name'
p12745
S'max_increase'
p12746
sS'required'
p12747
I00
sS'group_name'
p12748
Nsa(dp12749
S'description'
p12750
S'Use when restarting a calculation to force a change in dt.\n'
p12751
sS'cpp_type'
p12752
S'bool'
p12753
sS'default'
p12754
S'0'
p12755
sS'name'
p12756
S'reset_dt'
p12757
sS'required'
p12758
I00
sS'group_name'
p12759
Nsa(dp12760
S'description'
p12761
g3
sS'cpp_type'
p12762
S'std::string'
p12763
sS'default'
p12764
S'DT2'
p12765
sS'name'
p12766
S'type'
p12767
sS'required'
p12768
I00
sS'group_name'
p12769
NsasS'name'
p12770
S'/Executioner/TimeStepper/<type>/DT2'
p12771
sa(dp12772
S'description'
p12773
g3
sS'type'
p12774
NsS'subblocks'
p12775
NsS'parameters'
p12776
(lp12777
(dp12778
S'description'
p12779
S'Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.\n'
p12780
sS'cpp_type'
p12781
S'double'
p12782
sS'default'
p12783
S'2'
p12784
sS'name'
p12785
S'growth_factor'
p12786
sS'required'
p12787
I00
sS'group_name'
p12788
Nsa(dp12789
S'description'
p12790
S'The minimal dt to take.\n'
p12791
sS'cpp_type'
p12792
S'double'
p12793
sS'default'
p12794
S'0'
p12795
sS'name'
p12796
S'min_dt'
p12797
sS'required'
p12798
I00
sS'group_name'
p12799
Nsa(dp12800
S'description'
p12801
S'Use when restarting a calculation to force a change in dt.\n'
p12802
sS'cpp_type'
p12803
S'bool'
p12804
sS'default'
p12805
S'0'
p12806
sS'name'
p12807
S'reset_dt'
p12808
sS'required'
p12809
I00
sS'group_name'
p12810
Nsa(dp12811
S'description'
p12812
S'The values of dt\n'
p12813
sS'cpp_type'
p12814
S'std::vector<double, std::allocator<double> >'
p12815
sS'default'
p12816
g3
sS'name'
p12817
S'time_dt'
p12818
sS'required'
p12819
I00
sS'group_name'
p12820
Nsa(dp12821
S'description'
p12822
S'The values of t\n'
p12823
sS'cpp_type'
p12824
S'std::vector<double, std::allocator<double> >'
p12825
sS'default'
p12826
g3
sS'name'
p12827
S'time_t'
p12828
sS'required'
p12829
I00
sS'group_name'
p12830
Nsa(dp12831
S'description'
p12832
g3
sS'cpp_type'
p12833
S'std::string'
p12834
sS'default'
p12835
S'FunctionDT'
p12836
sS'name'
p12837
S'type'
p12838
sS'required'
p12839
I00
sS'group_name'
p12840
NsasS'name'
p12841
S'/Executioner/TimeStepper/<type>/FunctionDT'
p12842
sa(dp12843
S'description'
p12844
g3
sS'type'
p12845
NsS'subblocks'
p12846
NsS'parameters'
p12847
(lp12848
(dp12849
S'description'
p12850
S"Factor to apply to timestep if difficult convergence (if 'optimal_iterations' is specified) or if solution failed.\n"
p12851
sS'cpp_type'
p12852
S'double'
p12853
sS'default'
p12854
S'0.5'
p12855
sS'name'
p12856
S'cutback_factor'
p12857
sS'required'
p12858
I00
sS'group_name'
p12859
Nsa(dp12860
S'description'
p12861
S'The default timestep size between solves\n'
p12862
sS'cpp_type'
p12863
S'double'
p12864
sS'default'
p12865
g3
sS'name'
p12866
S'dt'
p12867
sS'required'
p12868
I01
sS'group_name'
p12869
Nsa(dp12870
S'description'
p12871
S'Forces the timestepper to take a step that is consistent with points defined in the function.\n'
p12872
sS'cpp_type'
p12873
S'bool'
p12874
sS'default'
p12875
S'0'
p12876
sS'name'
p12877
S'force_step_every_function_point'
p12878
sS'required'
p12879
I00
sS'group_name'
p12880
Nsa(dp12881
S'description'
p12882
S"Factor to apply to timestep if easy convergence (if 'optimal_iterations' is specified) or if recovering from failed solve\n"
p12883
sS'cpp_type'
p12884
S'double'
p12885
sS'default'
p12886
S'2'
p12887
sS'name'
p12888
S'growth_factor'
p12889
sS'required'
p12890
I00
sS'group_name'
p12891
Nsa(dp12892
S'description'
p12893
S'The size of the nonlinear iteration window for adaptive timestepping (default = 0.2*optimal_iterations)\n'
p12894
sS'cpp_type'
p12895
S'int'
p12896
sS'default'
p12897
g3
sS'name'
p12898
S'iteration_window'
p12899
sS'required'
p12900
I00
sS'group_name'
p12901
Nsa(dp12902
S'description'
p12903
S'The ratio of linear to nonlinear iterations to determine target linear iterations and window for adaptive timestepping (default = 25)\n'
p12904
sS'cpp_type'
p12905
S'unsigned int'
p12906
sS'default'
p12907
g3
sS'name'
p12908
S'linear_iteration_ratio'
p12909
sS'required'
p12910
I00
sS'group_name'
p12911
Nsa(dp12912
S'description'
p12913
S'The absolute value of the maximum change in timestep_limiting_function over a timestep\n'
p12914
sS'cpp_type'
p12915
S'double'
p12916
sS'default'
p12917
g3
sS'name'
p12918
S'max_function_change'
p12919
sS'required'
p12920
I00
sS'group_name'
p12921
Nsa(dp12922
S'description'
p12923
S'The target number of nonlinear iterations for adaptive timestepping\n'
p12924
sS'cpp_type'
p12925
S'int'
p12926
sS'default'
p12927
g3
sS'name'
p12928
S'optimal_iterations'
p12929
sS'required'
p12930
I00
sS'group_name'
p12931
Nsa(dp12932
S'description'
p12933
S'Use when restarting a calculation to force a change in dt.\n'
p12934
sS'cpp_type'
p12935
S'bool'
p12936
sS'default'
p12937
S'0'
p12938
sS'name'
p12939
S'reset_dt'
p12940
sS'required'
p12941
I00
sS'group_name'
p12942
Nsa(dp12943
S'description'
p12944
S'The values of dt\n'
p12945
sS'cpp_type'
p12946
S'std::vector<double, std::allocator<double> >'
p12947
sS'default'
p12948
g3
sS'name'
p12949
S'time_dt'
p12950
sS'required'
p12951
I00
sS'group_name'
p12952
Nsa(dp12953
S'description'
p12954
S'The values of t\n'
p12955
sS'cpp_type'
p12956
S'std::vector<double, std::allocator<double> >'
p12957
sS'default'
p12958
g3
sS'name'
p12959
S'time_t'
p12960
sS'required'
p12961
I00
sS'group_name'
p12962
Nsa(dp12963
S'description'
p12964
S'A function used to control the timestep by limiting the change in the function over a timestep\n'
p12965
sS'cpp_type'
p12966
S'FunctionName'
p12967
sS'default'
p12968
g3
sS'name'
p12969
S'timestep_limiting_function'
p12970
sS'required'
p12971
I00
sS'group_name'
p12972
Nsa(dp12973
S'description'
p12974
g3
sS'cpp_type'
p12975
S'std::string'
p12976
sS'default'
p12977
S'IterationAdaptiveDT'
p12978
sS'name'
p12979
S'type'
p12980
sS'required'
p12981
I00
sS'group_name'
p12982
NsasS'name'
p12983
S'/Executioner/TimeStepper/<type>/IterationAdaptiveDT'
p12984
sa(dp12985
S'description'
p12986
g3
sS'type'
p12987
NsS'subblocks'
p12988
NsS'parameters'
p12989
(lp12990
(dp12991
S'description'
p12992
S'Initial value of dt\n'
p12993
sS'cpp_type'
p12994
S'double'
p12995
sS'default'
p12996
g3
sS'name'
p12997
S'dt'
p12998
sS'required'
p12999
I00
sS'group_name'
p13000
Nsa(dp13001
S'description'
p13002
S'The name of the postprocessor that computes the dt\n'
p13003
sS'cpp_type'
p13004
S'PostprocessorName'
p13005
sS'default'
p13006
g3
sS'name'
p13007
S'postprocessor'
p13008
sS'required'
p13009
I01
sS'group_name'
p13010
Nsa(dp13011
S'description'
p13012
S'Use when restarting a calculation to force a change in dt.\n'
p13013
sS'cpp_type'
p13014
S'bool'
p13015
sS'default'
p13016
S'0'
p13017
sS'name'
p13018
S'reset_dt'
p13019
sS'required'
p13020
I00
sS'group_name'
p13021
Nsa(dp13022
S'description'
p13023
g3
sS'cpp_type'
p13024
S'std::string'
p13025
sS'default'
p13026
S'PostprocessorDT'
p13027
sS'name'
p13028
S'type'
p13029
sS'required'
p13030
I00
sS'group_name'
p13031
NsasS'name'
p13032
S'/Executioner/TimeStepper/<type>/PostprocessorDT'
p13033
sa(dp13034
S'description'
p13035
g3
sS'type'
p13036
NsS'subblocks'
p13037
NsS'parameters'
p13038
(lp13039
(dp13040
S'description'
p13041
S'Output adaptive time step log\n'
p13042
sS'cpp_type'
p13043
S'bool'
p13044
sS'default'
p13045
S'0'
p13046
sS'name'
p13047
S'adapt_log'
p13048
sS'required'
p13049
I00
sS'group_name'
p13050
Nsa(dp13051
S'description'
p13052
S'The timestep size between solves\n'
p13053
sS'cpp_type'
p13054
S'double'
p13055
sS'default'
p13056
g3
sS'name'
p13057
S'dt'
p13058
sS'required'
p13059
I01
sS'group_name'
p13060
Nsa(dp13061
S'description'
p13062
S'Direction for the first step.  1 for up... -1 for down. \n'
p13063
sS'cpp_type'
p13064
S'int'
p13065
sS'default'
p13066
S'1'
p13067
sS'name'
p13068
S'initial_direction'
p13069
sS'required'
p13070
I00
sS'group_name'
p13071
Nsa(dp13072
S'description'
p13073
S'Percentage to change the timestep by.  Should be between 0 and 1\n'
p13074
sS'cpp_type'
p13075
S'double'
p13076
sS'default'
p13077
S'0.1'
p13078
sS'name'
p13079
S'percent_change'
p13080
sS'required'
p13081
I00
sS'group_name'
p13082
Nsa(dp13083
S'description'
p13084
S'Use when restarting a calculation to force a change in dt.\n'
p13085
sS'cpp_type'
p13086
S'bool'
p13087
sS'default'
p13088
S'0'
p13089
sS'name'
p13090
S'reset_dt'
p13091
sS'required'
p13092
I00
sS'group_name'
p13093
Nsa(dp13094
S'description'
p13095
g3
sS'cpp_type'
p13096
S'std::string'
p13097
sS'default'
p13098
S'SolutionTimeAdaptiveDT'
p13099
sS'name'
p13100
S'type'
p13101
sS'required'
p13102
I00
sS'group_name'
p13103
NsasS'name'
p13104
S'/Executioner/TimeStepper/<type>/SolutionTimeAdaptiveDT'
p13105
sasS'parameters'
p13106
NsS'name'
p13107
S'/Executioner/TimeStepper/<type>'
p13108
sasS'parameters'
p13109
(lp13110
(dp13111
S'description'
p13112
S'A string representing the Moose Object that will be built by this Action\n'
p13113
sS'cpp_type'
p13114
S'std::string'
p13115
sS'default'
p13116
g3
sS'name'
p13117
S'type'
p13118
sS'required'
p13119
I01
sS'group_name'
p13120
NsasS'name'
p13121
S'/Executioner/TimeStepper'
p13122
sasS'parameters'
p13123
(lp13124
(dp13125
S'description'
p13126
S'Linear Absolute Step Tolerance\n'
p13127
sS'cpp_type'
p13128
S'double'
p13129
sS'default'
p13130
S'-1'
p13131
sS'name'
p13132
S'l_abs_step_tol'
p13133
sS'required'
p13134
I00
sS'group_name'
p13135
S'Solver'
p13136
sa(dp13137
S'description'
p13138
S'Max Linear Iterations\n'
p13139
sS'cpp_type'
p13140
S'unsigned int'
p13141
sS'default'
p13142
S'10000'
p13143
sS'name'
p13144
S'l_max_its'
p13145
sS'required'
p13146
I00
sS'group_name'
p13147
S'Solver'
p13148
sa(dp13149
S'description'
p13150
S'Linear Tolerance\n'
p13151
sS'cpp_type'
p13152
S'double'
p13153
sS'default'
p13154
S'1e-05'
p13155
sS'name'
p13156
S'l_tol'
p13157
sS'required'
p13158
I00
sS'group_name'
p13159
S'Solver'
p13160
sa(dp13161
S'name'
p13162
S'line_search'
p13163
sS'cpp_type'
p13164
S'MooseEnum'
p13165
sS'default'
p13166
S'default'
p13167
sS'description'
p13168
S'Specifies the line search type (Note: none = basic)\n'
p13169
sS'required'
p13170
I00
sS'options'
p13171
S'default shell none basic l2 bt cp'
p13172
sS'group_name'
p13173
Nsa(dp13174
S'description'
p13175
S'Nonlinear Absolute step Tolerance\n'
p13176
sS'cpp_type'
p13177
S'double'
p13178
sS'default'
p13179
S'1e-50'
p13180
sS'name'
p13181
S'nl_abs_step_tol'
p13182
sS'required'
p13183
I00
sS'group_name'
p13184
S'Solver'
p13185
sa(dp13186
S'description'
p13187
S'Nonlinear Absolute Tolerance\n'
p13188
sS'cpp_type'
p13189
S'double'
p13190
sS'default'
p13191
S'1e-50'
p13192
sS'name'
p13193
S'nl_abs_tol'
p13194
sS'required'
p13195
I00
sS'group_name'
p13196
S'Solver'
p13197
sa(dp13198
S'description'
p13199
S'Max Nonlinear solver function evaluations\n'
p13200
sS'cpp_type'
p13201
S'unsigned int'
p13202
sS'default'
p13203
S'10000'
p13204
sS'name'
p13205
S'nl_max_funcs'
p13206
sS'required'
p13207
I00
sS'group_name'
p13208
S'Solver'
p13209
sa(dp13210
S'description'
p13211
S'Max Nonlinear Iterations\n'
p13212
sS'cpp_type'
p13213
S'unsigned int'
p13214
sS'default'
p13215
S'50'
p13216
sS'name'
p13217
S'nl_max_its'
p13218
sS'required'
p13219
I00
sS'group_name'
p13220
S'Solver'
p13221
sa(dp13222
S'description'
p13223
S'Nonlinear Relative step Tolerance\n'
p13224
sS'cpp_type'
p13225
S'double'
p13226
sS'default'
p13227
S'1e-50'
p13228
sS'name'
p13229
S'nl_rel_step_tol'
p13230
sS'required'
p13231
I00
sS'group_name'
p13232
S'Solver'
p13233
sa(dp13234
S'description'
p13235
S'Nonlinear Relative Tolerance\n'
p13236
sS'cpp_type'
p13237
S'double'
p13238
sS'default'
p13239
S'1e-08'
p13240
sS'name'
p13241
S'nl_rel_tol'
p13242
sS'required'
p13243
I00
sS'group_name'
p13244
S'Solver'
p13245
sa(dp13246
S'description'
p13247
S'Specifies whether or not to reinitialize FEs\n'
p13248
sS'cpp_type'
p13249
S'bool'
p13250
sS'default'
p13251
S'0'
p13252
sS'name'
p13253
S'no_fe_reinit'
p13254
sS'required'
p13255
I00
sS'group_name'
p13256
S'Advanced'
p13257
sa(dp13258
S'name'
p13259
S'petsc_options'
p13260
sS'cpp_type'
p13261
S'std::vector<MooseEnum, std::allocator<MooseEnum> >'
p13262
sS'default'
p13263
g3
sS'description'
p13264
S'Singleton PETSc options\n'
p13265
sS'required'
p13266
I00
sS'options'
p13267
NsS'group_name'
p13268
Nsa(dp13269
S'description'
p13270
S'Names of PETSc name/value pairs\n'
p13271
sS'cpp_type'
p13272
S'std::vector<std::string, std::allocator<std::string> >'
p13273
sS'default'
p13274
g3
sS'name'
p13275
S'petsc_options_iname'
p13276
sS'required'
p13277
I00
sS'group_name'
p13278
Nsa(dp13279
S'description'
p13280
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p13281
sS'cpp_type'
p13282
S'std::vector<std::string, std::allocator<std::string> >'
p13283
sS'default'
p13284
g3
sS'name'
p13285
S'petsc_options_value'
p13286
sS'required'
p13287
I00
sS'group_name'
p13288
Nsa(dp13289
S'name'
p13290
S'solve_type'
p13291
sS'cpp_type'
p13292
S'MooseEnum'
p13293
sS'default'
p13294
g3
sS'description'
p13295
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p13296
sS'required'
p13297
I00
sS'options'
p13298
S'PJFNK JFNK NEWTON FD LINEAR'
p13299
sS'group_name'
p13300
Nsa(dp13301
S'description'
p13302
S'A string representing the Moose Object that will be built by this Action\n'
p13303
sS'cpp_type'
p13304
S'std::string'
p13305
sS'default'
p13306
g3
sS'name'
p13307
S'type'
p13308
sS'required'
p13309
I01
sS'group_name'
p13310
NsasS'name'
p13311
S'/Executioner'
p13312
sa(dp13313
S'description'
p13314
g3
sS'type'
p13315
NsS'subblocks'
p13316
(lp13317
(dp13318
S'description'
p13319
g3
sS'type'
p13320
NsS'subblocks'
p13321
NsS'parameters'
p13322
(lp13323
(dp13324
S'description'
p13325
S'A string representing the Moose Object that will be built by this Action\n'
p13326
sS'cpp_type'
p13327
S'std::string'
p13328
sS'default'
p13329
g3
sS'name'
p13330
S'type'
p13331
sS'required'
p13332
I01
sS'group_name'
p13333
NsasS'name'
p13334
S'/Functions/*'
p13335
sa(dp13336
S'description'
p13337
g3
sS'type'
p13338
NsS'subblocks'
p13339
NsS'parameters'
p13340
(lp13341
(dp13342
S'description'
p13343
S'The functions to be multiplied together.\n'
p13344
sS'cpp_type'
p13345
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p13346
sS'default'
p13347
g3
sS'name'
p13348
S'functions'
p13349
sS'required'
p13350
I00
sS'group_name'
p13351
Nsa(dp13352
S'description'
p13353
S'Scale factor to be applied to the ordinate values\n'
p13354
sS'cpp_type'
p13355
S'double'
p13356
sS'default'
p13357
S'1'
p13358
sS'name'
p13359
S'scale_factor'
p13360
sS'required'
p13361
I00
sS'group_name'
p13362
Nsa(dp13363
S'description'
p13364
g3
sS'cpp_type'
p13365
S'std::string'
p13366
sS'default'
p13367
S'CompositeFunction'
p13368
sS'name'
p13369
S'type'
p13370
sS'required'
p13371
I00
sS'group_name'
p13372
NsasS'name'
p13373
S'/Functions/CompositeFunction'
p13374
sa(dp13375
S'description'
p13376
g3
sS'type'
p13377
NsS'subblocks'
p13378
NsS'parameters'
p13379
(lp13380
(dp13381
S'description'
p13382
g3
sS'cpp_type'
p13383
S'std::string'
p13384
sS'default'
p13385
S'ConstantFunction'
p13386
sS'name'
p13387
S'type'
p13388
sS'required'
p13389
I00
sS'group_name'
p13390
Nsa(dp13391
S'description'
p13392
S'The constant value\n'
p13393
sS'cpp_type'
p13394
S'double'
p13395
sS'default'
p13396
S'0'
p13397
sS'name'
p13398
S'value'
p13399
sS'required'
p13400
I00
sS'group_name'
p13401
NsasS'name'
p13402
S'/Functions/ConstantFunction'
p13403
sa(dp13404
S'description'
p13405
g3
sS'type'
p13406
NsS'subblocks'
p13407
NsS'parameters'
p13408
(lp13409
(dp13410
S'description'
p13411
g3
sS'cpp_type'
p13412
S'std::string'
p13413
sS'default'
p13414
S'ParsedFunction'
p13415
sS'name'
p13416
S'type'
p13417
sS'required'
p13418
I00
sS'group_name'
p13419
Nsa(dp13420
S'description'
p13421
S'The initial values of the variables (optional)\n'
p13422
sS'cpp_type'
p13423
S'std::vector<std::string, std::allocator<std::string> >'
p13424
sS'default'
p13425
g3
sS'name'
p13426
S'vals'
p13427
sS'required'
p13428
I00
sS'group_name'
p13429
Nsa(dp13430
S'description'
p13431
S'The user defined function.\n'
p13432
sS'cpp_type'
p13433
S'std::string'
p13434
sS'default'
p13435
g3
sS'name'
p13436
S'value'
p13437
sS'required'
p13438
I01
sS'group_name'
p13439
Nsa(dp13440
S'description'
p13441
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p13442
sS'cpp_type'
p13443
S'std::vector<std::string, std::allocator<std::string> >'
p13444
sS'default'
p13445
g3
sS'name'
p13446
S'vars'
p13447
sS'required'
p13448
I00
sS'group_name'
p13449
NsasS'name'
p13450
S'/Functions/ParsedFunction'
p13451
sa(dp13452
S'description'
p13453
g3
sS'type'
p13454
NsS'subblocks'
p13455
NsS'parameters'
p13456
(lp13457
(dp13458
S'description'
p13459
S'Partial with respect to x.\n'
p13460
sS'cpp_type'
p13461
S'std::string'
p13462
sS'default'
p13463
S'0'
p13464
sS'name'
p13465
S'grad_x'
p13466
sS'required'
p13467
I00
sS'group_name'
p13468
Nsa(dp13469
S'description'
p13470
S'Partial with respect to y.\n'
p13471
sS'cpp_type'
p13472
S'std::string'
p13473
sS'default'
p13474
S'0'
p13475
sS'name'
p13476
S'grad_y'
p13477
sS'required'
p13478
I00
sS'group_name'
p13479
Nsa(dp13480
S'description'
p13481
S'Partial with respect to z.\n'
p13482
sS'cpp_type'
p13483
S'std::string'
p13484
sS'default'
p13485
S'0'
p13486
sS'name'
p13487
S'grad_z'
p13488
sS'required'
p13489
I00
sS'group_name'
p13490
Nsa(dp13491
S'description'
p13492
g3
sS'cpp_type'
p13493
S'std::string'
p13494
sS'default'
p13495
S'ParsedGradFunction'
p13496
sS'name'
p13497
S'type'
p13498
sS'required'
p13499
I00
sS'group_name'
p13500
Nsa(dp13501
S'description'
p13502
S'The initial values of the variables (optional)\n'
p13503
sS'cpp_type'
p13504
S'std::vector<std::string, std::allocator<std::string> >'
p13505
sS'default'
p13506
g3
sS'name'
p13507
S'vals'
p13508
sS'required'
p13509
I00
sS'group_name'
p13510
Nsa(dp13511
S'description'
p13512
S'User defined function.\n'
p13513
sS'cpp_type'
p13514
S'std::string'
p13515
sS'default'
p13516
S'0'
p13517
sS'name'
p13518
S'value'
p13519
sS'required'
p13520
I00
sS'group_name'
p13521
Nsa(dp13522
S'description'
p13523
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p13524
sS'cpp_type'
p13525
S'std::vector<std::string, std::allocator<std::string> >'
p13526
sS'default'
p13527
g3
sS'name'
p13528
S'vars'
p13529
sS'required'
p13530
I00
sS'group_name'
p13531
NsasS'name'
p13532
S'/Functions/ParsedGradFunction'
p13533
sa(dp13534
S'description'
p13535
g3
sS'type'
p13536
NsS'subblocks'
p13537
NsS'parameters'
p13538
(lp13539
(dp13540
S'description'
p13541
g3
sS'cpp_type'
p13542
S'std::string'
p13543
sS'default'
p13544
S'ParsedVectorFunction'
p13545
sS'name'
p13546
S'type'
p13547
sS'required'
p13548
I00
sS'group_name'
p13549
Nsa(dp13550
S'description'
p13551
S'The initial values of the variables (optional)\n'
p13552
sS'cpp_type'
p13553
S'std::vector<std::string, std::allocator<std::string> >'
p13554
sS'default'
p13555
g3
sS'name'
p13556
S'vals'
p13557
sS'required'
p13558
I00
sS'group_name'
p13559
Nsa(dp13560
S'description'
p13561
S'x-component of function.\n'
p13562
sS'cpp_type'
p13563
S'std::string'
p13564
sS'default'
p13565
S'0'
p13566
sS'name'
p13567
S'value_x'
p13568
sS'required'
p13569
I00
sS'group_name'
p13570
Nsa(dp13571
S'description'
p13572
S'y-component of function.\n'
p13573
sS'cpp_type'
p13574
S'std::string'
p13575
sS'default'
p13576
S'0'
p13577
sS'name'
p13578
S'value_y'
p13579
sS'required'
p13580
I00
sS'group_name'
p13581
Nsa(dp13582
S'description'
p13583
S'z-component of function.\n'
p13584
sS'cpp_type'
p13585
S'std::string'
p13586
sS'default'
p13587
S'0'
p13588
sS'name'
p13589
S'value_z'
p13590
sS'required'
p13591
I00
sS'group_name'
p13592
Nsa(dp13593
S'description'
p13594
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p13595
sS'cpp_type'
p13596
S'std::vector<std::string, std::allocator<std::string> >'
p13597
sS'default'
p13598
g3
sS'name'
p13599
S'vars'
p13600
sS'required'
p13601
I00
sS'group_name'
p13602
NsasS'name'
p13603
S'/Functions/ParsedVectorFunction'
p13604
sa(dp13605
S'description'
p13606
g3
sS'type'
p13607
NsS'subblocks'
p13608
NsS'parameters'
p13609
(lp13610
(dp13611
S'description'
p13612
S'The axis used (0, 1, or 2 for x, y, or z).\n'
p13613
sS'cpp_type'
p13614
S'int'
p13615
sS'default'
p13616
S'-1'
p13617
sS'name'
p13618
S'axis'
p13619
sS'required'
p13620
I00
sS'group_name'
p13621
Nsa(dp13622
S'description'
p13623
S'File holding csv data for use with PiecewiseBilinear\n'
p13624
sS'cpp_type'
p13625
S'std::string'
p13626
sS'default'
p13627
g3
sS'name'
p13628
S'data_file'
p13629
sS'required'
p13630
I00
sS'group_name'
p13631
Nsa(dp13632
S'description'
p13633
S'Set to true if you want to interpolate along a radius rather that along a specific axis, and note that you have to define xaxis and yaxis in the input file\n'
p13634
sS'cpp_type'
p13635
S'bool'
p13636
sS'default'
p13637
S'0'
p13638
sS'name'
p13639
S'radial'
p13640
sS'required'
p13641
I00
sS'group_name'
p13642
Nsa(dp13643
S'description'
p13644
S'Scale factor to be applied to the axis, yaxis, or xaxis values\n'
p13645
sS'cpp_type'
p13646
S'double'
p13647
sS'default'
p13648
S'1'
p13649
sS'name'
p13650
S'scale_factor'
p13651
sS'required'
p13652
I00
sS'group_name'
p13653
Nsa(dp13654
S'description'
p13655
g3
sS'cpp_type'
p13656
S'std::string'
p13657
sS'default'
p13658
S'PiecewiseBilinear'
p13659
sS'name'
p13660
S'type'
p13661
sS'required'
p13662
I00
sS'group_name'
p13663
Nsa(dp13664
S'description'
p13665
S'The coordinate used for x-axis data (0, 1, or 2 for x, y, or z).\n'
p13666
sS'cpp_type'
p13667
S'int'
p13668
sS'default'
p13669
S'-1'
p13670
sS'name'
p13671
S'xaxis'
p13672
sS'required'
p13673
I00
sS'group_name'
p13674
Nsa(dp13675
S'description'
p13676
S'The coordinate used for y-axis data (0, 1, or 2 for x, y, or z).\n'
p13677
sS'cpp_type'
p13678
S'int'
p13679
sS'default'
p13680
S'-1'
p13681
sS'name'
p13682
S'yaxis'
p13683
sS'required'
p13684
I00
sS'group_name'
p13685
Nsa(dp13686
S'description'
p13687
S'File holding csv data for use with PiecewiseBilinear (Deprecated)\n'
p13688
sS'cpp_type'
p13689
S'std::string'
p13690
sS'default'
p13691
g3
sS'name'
p13692
S'yourFileName'
p13693
sS'required'
p13694
I00
sS'group_name'
p13695
NsasS'name'
p13696
S'/Functions/PiecewiseBilinear'
p13697
sa(dp13698
S'description'
p13699
g3
sS'type'
p13700
NsS'subblocks'
p13701
NsS'parameters'
p13702
(lp13703
(dp13704
S'description'
p13705
S'The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n'
p13706
sS'cpp_type'
p13707
S'int'
p13708
sS'default'
p13709
g3
sS'name'
p13710
S'axis'
p13711
sS'required'
p13712
I00
sS'group_name'
p13713
Nsa(dp13714
S'description'
p13715
S'File holding csv data for use with Piecewise\n'
p13716
sS'cpp_type'
p13717
S'std::string'
p13718
sS'default'
p13719
g3
sS'name'
p13720
S'data_file'
p13721
sS'required'
p13722
I00
sS'group_name'
p13723
Nsa(dp13724
S'name'
p13725
S'direction'
p13726
sS'cpp_type'
p13727
S'MooseEnum'
p13728
sS'default'
p13729
S'left'
p13730
sS'description'
p13731
S'Direction to look to find value: left, right\n'
p13732
sS'required'
p13733
I00
sS'options'
p13734
S'left right'
p13735
sS'group_name'
p13736
Nsa(dp13737
S'description'
p13738
S'Format of csv data file that is in either in columns or rows\n'
p13739
sS'cpp_type'
p13740
S'std::string'
p13741
sS'default'
p13742
S'rows'
p13743
sS'name'
p13744
S'format'
p13745
sS'required'
p13746
I00
sS'group_name'
p13747
Nsa(dp13748
S'description'
p13749
S'Scale factor to be applied to the ordinate values\n'
p13750
sS'cpp_type'
p13751
S'double'
p13752
sS'default'
p13753
S'1'
p13754
sS'name'
p13755
S'scale_factor'
p13756
sS'required'
p13757
I00
sS'group_name'
p13758
Nsa(dp13759
S'description'
p13760
g3
sS'cpp_type'
p13761
S'std::string'
p13762
sS'default'
p13763
S'PiecewiseConstant'
p13764
sS'name'
p13765
S'type'
p13766
sS'required'
p13767
I00
sS'group_name'
p13768
Nsa(dp13769
S'description'
p13770
S'The abscissa values\n'
p13771
sS'cpp_type'
p13772
S'std::vector<double, std::allocator<double> >'
p13773
sS'default'
p13774
g3
sS'name'
p13775
S'x'
p13776
sS'required'
p13777
I00
sS'group_name'
p13778
Nsa(dp13779
S'description'
p13780
S'All function data, supplied in abscissa, ordinate pairs\n'
p13781
sS'cpp_type'
p13782
S'std::vector<double, std::allocator<double> >'
p13783
sS'default'
p13784
g3
sS'name'
p13785
S'xy_data'
p13786
sS'required'
p13787
I00
sS'group_name'
p13788
Nsa(dp13789
S'description'
p13790
S'The ordinate values\n'
p13791
sS'cpp_type'
p13792
S'std::vector<double, std::allocator<double> >'
p13793
sS'default'
p13794
g3
sS'name'
p13795
S'y'
p13796
sS'required'
p13797
I00
sS'group_name'
p13798
Nsa(dp13799
S'description'
p13800
S'File holding csv data for use with Piecewise (Deprecated)\n'
p13801
sS'cpp_type'
p13802
S'std::string'
p13803
sS'default'
p13804
g3
sS'name'
p13805
S'yourFileName'
p13806
sS'required'
p13807
I00
sS'group_name'
p13808
NsasS'name'
p13809
S'/Functions/PiecewiseConstant'
p13810
sa(dp13811
S'description'
p13812
g3
sS'type'
p13813
NsS'subblocks'
p13814
NsS'parameters'
p13815
(lp13816
(dp13817
S'description'
p13818
S'The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n'
p13819
sS'cpp_type'
p13820
S'int'
p13821
sS'default'
p13822
g3
sS'name'
p13823
S'axis'
p13824
sS'required'
p13825
I00
sS'group_name'
p13826
Nsa(dp13827
S'description'
p13828
S'File holding csv data for use with Piecewise\n'
p13829
sS'cpp_type'
p13830
S'std::string'
p13831
sS'default'
p13832
g3
sS'name'
p13833
S'data_file'
p13834
sS'required'
p13835
I00
sS'group_name'
p13836
Nsa(dp13837
S'description'
p13838
S'Format of csv data file that is in either in columns or rows\n'
p13839
sS'cpp_type'
p13840
S'std::string'
p13841
sS'default'
p13842
S'rows'
p13843
sS'name'
p13844
S'format'
p13845
sS'required'
p13846
I00
sS'group_name'
p13847
Nsa(dp13848
S'description'
p13849
S'Scale factor to be applied to the ordinate values\n'
p13850
sS'cpp_type'
p13851
S'double'
p13852
sS'default'
p13853
S'1'
p13854
sS'name'
p13855
S'scale_factor'
p13856
sS'required'
p13857
I00
sS'group_name'
p13858
Nsa(dp13859
S'description'
p13860
g3
sS'cpp_type'
p13861
S'std::string'
p13862
sS'default'
p13863
S'PiecewiseLinear'
p13864
sS'name'
p13865
S'type'
p13866
sS'required'
p13867
I00
sS'group_name'
p13868
Nsa(dp13869
S'description'
p13870
S'The abscissa values\n'
p13871
sS'cpp_type'
p13872
S'std::vector<double, std::allocator<double> >'
p13873
sS'default'
p13874
g3
sS'name'
p13875
S'x'
p13876
sS'required'
p13877
I00
sS'group_name'
p13878
Nsa(dp13879
S'description'
p13880
S'All function data, supplied in abscissa, ordinate pairs\n'
p13881
sS'cpp_type'
p13882
S'std::vector<double, std::allocator<double> >'
p13883
sS'default'
p13884
g3
sS'name'
p13885
S'xy_data'
p13886
sS'required'
p13887
I00
sS'group_name'
p13888
Nsa(dp13889
S'description'
p13890
S'The ordinate values\n'
p13891
sS'cpp_type'
p13892
S'std::vector<double, std::allocator<double> >'
p13893
sS'default'
p13894
g3
sS'name'
p13895
S'y'
p13896
sS'required'
p13897
I00
sS'group_name'
p13898
Nsa(dp13899
S'description'
p13900
S'File holding csv data for use with Piecewise (Deprecated)\n'
p13901
sS'cpp_type'
p13902
S'std::string'
p13903
sS'default'
p13904
g3
sS'name'
p13905
S'yourFileName'
p13906
sS'required'
p13907
I00
sS'group_name'
p13908
NsasS'name'
p13909
S'/Functions/PiecewiseLinear'
p13910
sa(dp13911
S'description'
p13912
g3
sS'type'
p13913
NsS'subblocks'
p13914
NsS'parameters'
p13915
(lp13916
(dp13917
S'description'
p13918
S'The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n'
p13919
sS'cpp_type'
p13920
S'int'
p13921
sS'default'
p13922
g3
sS'name'
p13923
S'axis'
p13924
sS'required'
p13925
I00
sS'group_name'
p13926
Nsa(dp13927
S'description'
p13928
S'File holding csv data for use with Piecewise\n'
p13929
sS'cpp_type'
p13930
S'std::string'
p13931
sS'default'
p13932
g3
sS'name'
p13933
S'data_file'
p13934
sS'required'
p13935
I00
sS'group_name'
p13936
Nsa(dp13937
S'description'
p13938
S'Format of csv data file that is in either in columns or rows\n'
p13939
sS'cpp_type'
p13940
S'std::string'
p13941
sS'default'
p13942
S'rows'
p13943
sS'name'
p13944
S'format'
p13945
sS'required'
p13946
I00
sS'group_name'
p13947
Nsa(dp13948
S'description'
p13949
S'Scale factor to be applied to the ordinate values\n'
p13950
sS'cpp_type'
p13951
S'double'
p13952
sS'default'
p13953
S'1'
p13954
sS'name'
p13955
S'scale_factor'
p13956
sS'required'
p13957
I00
sS'group_name'
p13958
Nsa(dp13959
S'description'
p13960
g3
sS'cpp_type'
p13961
S'std::string'
p13962
sS'default'
p13963
S'PiecewiseLinearFile'
p13964
sS'name'
p13965
S'type'
p13966
sS'required'
p13967
I00
sS'group_name'
p13968
Nsa(dp13969
S'description'
p13970
S'The abscissa values\n'
p13971
sS'cpp_type'
p13972
S'std::vector<double, std::allocator<double> >'
p13973
sS'default'
p13974
g3
sS'name'
p13975
S'x'
p13976
sS'required'
p13977
I00
sS'group_name'
p13978
Nsa(dp13979
S'description'
p13980
S'All function data, supplied in abscissa, ordinate pairs\n'
p13981
sS'cpp_type'
p13982
S'std::vector<double, std::allocator<double> >'
p13983
sS'default'
p13984
g3
sS'name'
p13985
S'xy_data'
p13986
sS'required'
p13987
I00
sS'group_name'
p13988
Nsa(dp13989
S'description'
p13990
S'The ordinate values\n'
p13991
sS'cpp_type'
p13992
S'std::vector<double, std::allocator<double> >'
p13993
sS'default'
p13994
g3
sS'name'
p13995
S'y'
p13996
sS'required'
p13997
I00
sS'group_name'
p13998
Nsa(dp13999
S'description'
p14000
S'File holding csv data for use with Piecewise (Deprecated)\n'
p14001
sS'cpp_type'
p14002
S'std::string'
p14003
sS'default'
p14004
g3
sS'name'
p14005
S'yourFileName'
p14006
sS'required'
p14007
I00
sS'group_name'
p14008
NsasS'name'
p14009
S'/Functions/PiecewiseLinearFile'
p14010
sa(dp14011
S'description'
p14012
g3
sS'type'
p14013
NsS'subblocks'
p14014
NsS'parameters'
p14015
(lp14016
(dp14017
S'description'
p14018
S'File holding data for use with PiecewiseMultilinear.  Format: any empty line and any line beginning with # are ignored, all other lines are assumed to contain relevant information.  The file must begin with specification of the grid.  This is done through lines containing the keywords: AXIS X; AXIS Y; AXIS Z; or AXIS T.  Immediately following the keyword line must be a space-separated line of real numbers which define the grid along the specified axis.  These data must be monotonically increasing.  After all the axes and their grids have been specified, there must be a line that is DATA.  Following that line, function values are given in the correct order (they may be on indivicual lines, or be space-separated on a number of lines).  When the function is evaluated, f[i,j,k,l] corresponds to the i + j*Ni + k*Ni*Nj + l*Ni*Nj*Nk data value.  Here i>=0 corresponding to the index along the first AXIS, j>=0 corresponding to the index along the second AXIS, etc, and Ni = number of grid points along the first AXIS, etc.\n'
p14019
sS'cpp_type'
p14020
S'std::string'
p14021
sS'default'
p14022
g3
sS'name'
p14023
S'data_file'
p14024
sS'required'
p14025
I00
sS'group_name'
p14026
Nsa(dp14027
S'description'
p14028
g3
sS'cpp_type'
p14029
S'std::string'
p14030
sS'default'
p14031
S'PiecewiseMultilinear'
p14032
sS'name'
p14033
S'type'
p14034
sS'required'
p14035
I00
sS'group_name'
p14036
NsasS'name'
p14037
S'/Functions/PiecewiseMultilinear'
p14038
sa(dp14039
S'description'
p14040
g3
sS'type'
p14041
NsS'subblocks'
p14042
NsS'parameters'
p14043
(lp14044
(dp14045
S'description'
p14046
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p14047
sS'cpp_type'
p14048
S'double'
p14049
sS'default'
p14050
S'0'
p14051
sS'name'
p14052
S'add_factor'
p14053
sS'required'
p14054
I00
sS'group_name'
p14055
Nsa(dp14056
S'description'
p14057
S'The name of the variable in the file that is too be extracted\n'
p14058
sS'cpp_type'
p14059
S'std::string'
p14060
sS'default'
p14061
g3
sS'name'
p14062
S'from_variable'
p14063
sS'required'
p14064
I00
sS'group_name'
p14065
Nsa(dp14066
S'description'
p14067
S"Scale factor (a) to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p14068
sS'cpp_type'
p14069
S'double'
p14070
sS'default'
p14071
S'1'
p14072
sS'name'
p14073
S'scale_factor'
p14074
sS'required'
p14075
I00
sS'group_name'
p14076
Nsa(dp14077
S'description'
p14078
S'The SolutionUserObject to extract data from.\n'
p14079
sS'cpp_type'
p14080
S'UserObjectName'
p14081
sS'default'
p14082
g3
sS'name'
p14083
S'solution'
p14084
sS'required'
p14085
I01
sS'group_name'
p14086
Nsa(dp14087
S'description'
p14088
g3
sS'cpp_type'
p14089
S'std::string'
p14090
sS'default'
p14091
S'SolutionFunction'
p14092
sS'name'
p14093
S'type'
p14094
sS'required'
p14095
I00
sS'group_name'
p14096
NsasS'name'
p14097
S'/Functions/SolutionFunction'
p14098
sa(dp14099
S'description'
p14100
g3
sS'type'
p14101
NsS'subblocks'
p14102
NsS'parameters'
p14103
(lp14104
(dp14105
S'description'
p14106
g3
sS'cpp_type'
p14107
S'std::string'
p14108
sS'default'
p14109
S'SplineFunction'
p14110
sS'name'
p14111
S'type'
p14112
sS'required'
p14113
I00
sS'group_name'
p14114
Nsa(dp14115
S'description'
p14116
S'The abscissa values\n'
p14117
sS'cpp_type'
p14118
S'std::vector<double, std::allocator<double> >'
p14119
sS'default'
p14120
g3
sS'name'
p14121
S'x'
p14122
sS'required'
p14123
I01
sS'group_name'
p14124
Nsa(dp14125
S'description'
p14126
S'The ordinate values\n'
p14127
sS'cpp_type'
p14128
S'std::vector<double, std::allocator<double> >'
p14129
sS'default'
p14130
g3
sS'name'
p14131
S'y'
p14132
sS'required'
p14133
I01
sS'group_name'
p14134
Nsa(dp14135
S'description'
p14136
S'The value of the first derivative of the interpolating function at point 1\n'
p14137
sS'cpp_type'
p14138
S'double'
p14139
sS'default'
p14140
S'1e+30'
p14141
sS'name'
p14142
S'yp1'
p14143
sS'required'
p14144
I00
sS'group_name'
p14145
Nsa(dp14146
S'description'
p14147
S'The value of the first derivative of the interpolating function at point n\n'
p14148
sS'cpp_type'
p14149
S'double'
p14150
sS'default'
p14151
S'1e+30'
p14152
sS'name'
p14153
S'ypn'
p14154
sS'required'
p14155
I00
sS'group_name'
p14156
NsasS'name'
p14157
S'/Functions/SplineFunction'
p14158
sasS'parameters'
p14159
NsS'name'
p14160
S'/Functions'
p14161
sa(dp14162
S'description'
p14163
g3
sS'type'
p14164
NsS'subblocks'
p14165
NsS'parameters'
p14166
NsS'name'
p14167
S'/GlobalParams'
p14168
sa(dp14169
S'description'
p14170
g3
sS'type'
p14171
NsS'subblocks'
p14172
(lp14173
(dp14174
S'description'
p14175
g3
sS'type'
p14176
NsS'subblocks'
p14177
NsS'parameters'
p14178
(lp14179
(dp14180
S'description'
p14181
S'A string representing the Moose Object that will be built by this Action\n'
p14182
sS'cpp_type'
p14183
S'std::string'
p14184
sS'default'
p14185
g3
sS'name'
p14186
S'type'
p14187
sS'required'
p14188
I01
sS'group_name'
p14189
NsasS'name'
p14190
S'/ICs/*'
p14191
sa(dp14192
S'description'
p14193
g3
sS'type'
p14194
NsS'subblocks'
p14195
NsS'parameters'
p14196
(lp14197
(dp14198
S'description'
p14199
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p14200
sS'cpp_type'
p14201
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p14202
sS'default'
p14203
g3
sS'name'
p14204
S'block'
p14205
sS'required'
p14206
I00
sS'group_name'
p14207
Nsa(dp14208
S'description'
p14209
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14210
sS'cpp_type'
p14211
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p14212
sS'default'
p14213
g3
sS'name'
p14214
S'boundary'
p14215
sS'required'
p14216
I00
sS'group_name'
p14217
Nsa(dp14218
S'description'
p14219
S'The value of the variable inside the box\n'
p14220
sS'cpp_type'
p14221
S'double'
p14222
sS'default'
p14223
S'0'
p14224
sS'name'
p14225
S'inside'
p14226
sS'required'
p14227
I00
sS'group_name'
p14228
Nsa(dp14229
S'description'
p14230
S'The value of the variable outside the box\n'
p14231
sS'cpp_type'
p14232
S'double'
p14233
sS'default'
p14234
S'0'
p14235
sS'name'
p14236
S'outside'
p14237
sS'required'
p14238
I00
sS'group_name'
p14239
Nsa(dp14240
S'description'
p14241
g3
sS'cpp_type'
p14242
S'std::string'
p14243
sS'default'
p14244
S'BoundingBoxIC'
p14245
sS'name'
p14246
S'type'
p14247
sS'required'
p14248
I00
sS'group_name'
p14249
Nsa(dp14250
S'description'
p14251
S'The variable this initial condition is supposed to provide values for.\n'
p14252
sS'cpp_type'
p14253
S'VariableName'
p14254
sS'default'
p14255
g3
sS'name'
p14256
S'variable'
p14257
sS'required'
p14258
I01
sS'group_name'
p14259
Nsa(dp14260
S'description'
p14261
S'The x coordinate of the lower left-hand corner of the box\n'
p14262
sS'cpp_type'
p14263
S'double'
p14264
sS'default'
p14265
g3
sS'name'
p14266
S'x1'
p14267
sS'required'
p14268
I01
sS'group_name'
p14269
Nsa(dp14270
S'description'
p14271
S'The x coordinate of the upper right-hand corner of the box\n'
p14272
sS'cpp_type'
p14273
S'double'
p14274
sS'default'
p14275
g3
sS'name'
p14276
S'x2'
p14277
sS'required'
p14278
I01
sS'group_name'
p14279
Nsa(dp14280
S'description'
p14281
S'The y coordinate of the lower left-hand corner of the box\n'
p14282
sS'cpp_type'
p14283
S'double'
p14284
sS'default'
p14285
g3
sS'name'
p14286
S'y1'
p14287
sS'required'
p14288
I01
sS'group_name'
p14289
Nsa(dp14290
S'description'
p14291
S'The y coordinate of the upper right-hand corner of the box\n'
p14292
sS'cpp_type'
p14293
S'double'
p14294
sS'default'
p14295
g3
sS'name'
p14296
S'y2'
p14297
sS'required'
p14298
I01
sS'group_name'
p14299
Nsa(dp14300
S'description'
p14301
S'The z coordinate of the lower left-hand corner of the box\n'
p14302
sS'cpp_type'
p14303
S'double'
p14304
sS'default'
p14305
S'0'
p14306
sS'name'
p14307
S'z1'
p14308
sS'required'
p14309
I00
sS'group_name'
p14310
Nsa(dp14311
S'description'
p14312
S'The z coordinate of the upper right-hand corner of the box\n'
p14313
sS'cpp_type'
p14314
S'double'
p14315
sS'default'
p14316
S'0'
p14317
sS'name'
p14318
S'z2'
p14319
sS'required'
p14320
I00
sS'group_name'
p14321
NsasS'name'
p14322
S'/ICs/BoundingBoxIC'
p14323
sa(dp14324
S'description'
p14325
g3
sS'type'
p14326
NsS'subblocks'
p14327
NsS'parameters'
p14328
(lp14329
(dp14330
S'description'
p14331
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p14332
sS'cpp_type'
p14333
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p14334
sS'default'
p14335
g3
sS'name'
p14336
S'block'
p14337
sS'required'
p14338
I00
sS'group_name'
p14339
Nsa(dp14340
S'description'
p14341
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14342
sS'cpp_type'
p14343
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p14344
sS'default'
p14345
g3
sS'name'
p14346
S'boundary'
p14347
sS'required'
p14348
I00
sS'group_name'
p14349
Nsa(dp14350
S'description'
p14351
g3
sS'cpp_type'
p14352
S'std::string'
p14353
sS'default'
p14354
S'ConstantIC'
p14355
sS'name'
p14356
S'type'
p14357
sS'required'
p14358
I00
sS'group_name'
p14359
Nsa(dp14360
S'description'
p14361
S'The value to be set in IC\n'
p14362
sS'cpp_type'
p14363
S'double'
p14364
sS'default'
p14365
g3
sS'name'
p14366
S'value'
p14367
sS'required'
p14368
I01
sS'group_name'
p14369
Nsa(dp14370
S'description'
p14371
S'The variable this initial condition is supposed to provide values for.\n'
p14372
sS'cpp_type'
p14373
S'VariableName'
p14374
sS'default'
p14375
g3
sS'name'
p14376
S'variable'
p14377
sS'required'
p14378
I01
sS'group_name'
p14379
NsasS'name'
p14380
S'/ICs/ConstantIC'
p14381
sa(dp14382
S'description'
p14383
g3
sS'type'
p14384
NsS'subblocks'
p14385
NsS'parameters'
p14386
(lp14387
(dp14388
S'description'
p14389
S'The amplitude\n'
p14390
sS'cpp_type'
p14391
S'double'
p14392
sS'default'
p14393
S'1'
p14394
sS'name'
p14395
S'amplitude'
p14396
sS'required'
p14397
I00
sS'group_name'
p14398
Nsa(dp14399
S'description'
p14400
S'The average value\n'
p14401
sS'cpp_type'
p14402
S'double'
p14403
sS'default'
p14404
S'0'
p14405
sS'name'
p14406
S'average'
p14407
sS'required'
p14408
I00
sS'group_name'
p14409
Nsa(dp14410
S'description'
p14411
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p14412
sS'cpp_type'
p14413
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p14414
sS'default'
p14415
g3
sS'name'
p14416
S'block'
p14417
sS'required'
p14418
I00
sS'group_name'
p14419
Nsa(dp14420
S'description'
p14421
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14422
sS'cpp_type'
p14423
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p14424
sS'default'
p14425
g3
sS'name'
p14426
S'boundary'
p14427
sS'required'
p14428
I00
sS'group_name'
p14429
Nsa(dp14430
S'description'
p14431
S'A small area between the max value and the interface\n'
p14432
sS'cpp_type'
p14433
S'double'
p14434
sS'default'
p14435
S'0.03125'
p14436
sS'name'
p14437
S'buffer'
p14438
sS'required'
p14439
I00
sS'group_name'
p14440
Nsa(dp14441
S'description'
p14442
S'The interface width\n'
p14443
sS'cpp_type'
p14444
S'double'
p14445
sS'default'
p14446
S'0.03125'
p14447
sS'name'
p14448
S'interface'
p14449
sS'required'
p14450
I00
sS'group_name'
p14451
Nsa(dp14452
S'description'
p14453
S'The length\n'
p14454
sS'cpp_type'
p14455
S'double'
p14456
sS'default'
p14457
S'0.75'
p14458
sS'name'
p14459
S'length'
p14460
sS'required'
p14461
I00
sS'group_name'
p14462
Nsa(dp14463
S'description'
p14464
g3
sS'cpp_type'
p14465
S'std::string'
p14466
sS'default'
p14467
S'CrossIC'
p14468
sS'name'
p14469
S'type'
p14470
sS'required'
p14471
I00
sS'group_name'
p14472
Nsa(dp14473
S'description'
p14474
S'The variable this initial condition is supposed to provide values for.\n'
p14475
sS'cpp_type'
p14476
S'VariableName'
p14477
sS'default'
p14478
g3
sS'name'
p14479
S'variable'
p14480
sS'required'
p14481
I01
sS'group_name'
p14482
Nsa(dp14483
S'description'
p14484
S'The width\n'
p14485
sS'cpp_type'
p14486
S'double'
p14487
sS'default'
p14488
S'0.125'
p14489
sS'name'
p14490
S'width'
p14491
sS'required'
p14492
I00
sS'group_name'
p14493
Nsa(dp14494
S'description'
p14495
S'The x coordinate of the lower left-hand corner of the box\n'
p14496
sS'cpp_type'
p14497
S'double'
p14498
sS'default'
p14499
S'0'
p14500
sS'name'
p14501
S'x1'
p14502
sS'required'
p14503
I00
sS'group_name'
p14504
Nsa(dp14505
S'description'
p14506
S'The x coordinate of the upper right-hand corner of the box\n'
p14507
sS'cpp_type'
p14508
S'double'
p14509
sS'default'
p14510
S'1'
p14511
sS'name'
p14512
S'x2'
p14513
sS'required'
p14514
I00
sS'group_name'
p14515
Nsa(dp14516
S'description'
p14517
S'The y coordinate of the lower left-hand corner of the box\n'
p14518
sS'cpp_type'
p14519
S'double'
p14520
sS'default'
p14521
S'0'
p14522
sS'name'
p14523
S'y1'
p14524
sS'required'
p14525
I00
sS'group_name'
p14526
Nsa(dp14527
S'description'
p14528
S'The y coordinate of the upper right-hand corner of the box\n'
p14529
sS'cpp_type'
p14530
S'double'
p14531
sS'default'
p14532
S'1'
p14533
sS'name'
p14534
S'y2'
p14535
sS'required'
p14536
I00
sS'group_name'
p14537
NsasS'name'
p14538
S'/ICs/CrossIC'
p14539
sa(dp14540
S'description'
p14541
g3
sS'type'
p14542
NsS'subblocks'
p14543
NsS'parameters'
p14544
(lp14545
(dp14546
S'description'
p14547
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p14548
sS'cpp_type'
p14549
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p14550
sS'default'
p14551
g3
sS'name'
p14552
S'block'
p14553
sS'required'
p14554
I00
sS'group_name'
p14555
Nsa(dp14556
S'description'
p14557
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14558
sS'cpp_type'
p14559
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p14560
sS'default'
p14561
g3
sS'name'
p14562
S'boundary'
p14563
sS'required'
p14564
I00
sS'group_name'
p14565
Nsa(dp14566
S'description'
p14567
S'The initial condition function.\n'
p14568
sS'cpp_type'
p14569
S'FunctionName'
p14570
sS'default'
p14571
g3
sS'name'
p14572
S'function'
p14573
sS'required'
p14574
I01
sS'group_name'
p14575
Nsa(dp14576
S'description'
p14577
g3
sS'cpp_type'
p14578
S'std::string'
p14579
sS'default'
p14580
S'FunctionIC'
p14581
sS'name'
p14582
S'type'
p14583
sS'required'
p14584
I00
sS'group_name'
p14585
Nsa(dp14586
S'description'
p14587
S'The variable this initial condition is supposed to provide values for.\n'
p14588
sS'cpp_type'
p14589
S'VariableName'
p14590
sS'default'
p14591
g3
sS'name'
p14592
S'variable'
p14593
sS'required'
p14594
I01
sS'group_name'
p14595
NsasS'name'
p14596
S'/ICs/FunctionIC'
p14597
sa(dp14598
S'description'
p14599
g3
sS'type'
p14600
NsS'subblocks'
p14601
NsS'parameters'
p14602
(lp14603
(dp14604
S'description'
p14605
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p14606
sS'cpp_type'
p14607
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p14608
sS'default'
p14609
g3
sS'name'
p14610
S'block'
p14611
sS'required'
p14612
I00
sS'group_name'
p14613
Nsa(dp14614
S'description'
p14615
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14616
sS'cpp_type'
p14617
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p14618
sS'default'
p14619
g3
sS'name'
p14620
S'boundary'
p14621
sS'required'
p14622
I00
sS'group_name'
p14623
Nsa(dp14624
S'description'
p14625
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p14626
sS'cpp_type'
p14627
S'bool'
p14628
sS'default'
p14629
S'0'
p14630
sS'name'
p14631
S'cody_test'
p14632
sS'required'
p14633
I00
sS'group_name'
p14634
Nsa(dp14635
S'description'
p14636
S'3D microstructure will be columnar in the z-direction?\n'
p14637
sS'cpp_type'
p14638
S'bool'
p14639
sS'default'
p14640
S'0'
p14641
sS'name'
p14642
S'columnar_3D'
p14643
sS'required'
p14644
I00
sS'group_name'
p14645
Nsa(dp14646
S'description'
p14647
S'The index for the current order parameter\n'
p14648
sS'cpp_type'
p14649
S'unsigned int'
p14650
sS'default'
p14651
g3
sS'name'
p14652
S'crys_index'
p14653
sS'required'
p14654
I01
sS'group_name'
p14655
Nsa(dp14656
S'description'
p14657
S'Number of order parameters\n'
p14658
sS'cpp_type'
p14659
S'unsigned int'
p14660
sS'default'
p14661
g3
sS'name'
p14662
S'crys_num'
p14663
sS'required'
p14664
I01
sS'group_name'
p14665
Nsa(dp14666
S'description'
p14667
S'Number of grains being represented by the order parameters\n'
p14668
sS'cpp_type'
p14669
S'unsigned int'
p14670
sS'default'
p14671
g3
sS'name'
p14672
S'grain_num'
p14673
sS'required'
p14674
I01
sS'group_name'
p14675
Nsa(dp14676
S'description'
p14677
S'The percent to randomly perturbate centers of grains relative to the size of the grain\n'
p14678
sS'cpp_type'
p14679
S'double'
p14680
sS'default'
p14681
S'0'
p14682
sS'name'
p14683
S'perturbation_percent'
p14684
sS'required'
p14685
I00
sS'group_name'
p14686
Nsa(dp14687
S'description'
p14688
S'The random seed\n'
p14689
sS'cpp_type'
p14690
S'unsigned int'
p14691
sS'default'
p14692
S'12444'
p14693
sS'name'
p14694
S'rand_seed'
p14695
sS'required'
p14696
I00
sS'group_name'
p14697
Nsa(dp14698
S'description'
p14699
g3
sS'cpp_type'
p14700
S'int'
p14701
sS'default'
p14702
S'1'
p14703
sS'name'
p14704
S'typ'
p14705
sS'required'
p14706
I00
sS'group_name'
p14707
Nsa(dp14708
S'description'
p14709
g3
sS'cpp_type'
p14710
S'std::string'
p14711
sS'default'
p14712
S'HexPolycrystalIC'
p14713
sS'name'
p14714
S'type'
p14715
sS'required'
p14716
I00
sS'group_name'
p14717
Nsa(dp14718
S'description'
p14719
S'The variable this initial condition is supposed to provide values for.\n'
p14720
sS'cpp_type'
p14721
S'VariableName'
p14722
sS'default'
p14723
g3
sS'name'
p14724
S'variable'
p14725
sS'required'
p14726
I01
sS'group_name'
p14727
Nsa(dp14728
S'description'
p14729
S'Specifies offset of hexagon grid in x-direction\n'
p14730
sS'cpp_type'
p14731
S'double'
p14732
sS'default'
p14733
S'0.5'
p14734
sS'name'
p14735
S'x_offset'
p14736
sS'required'
p14737
I00
sS'group_name'
p14738
NsasS'name'
p14739
S'/ICs/HexPolycrystalIC'
p14740
sa(dp14741
S'description'
p14742
g3
sS'type'
p14743
NsS'subblocks'
p14744
NsS'parameters'
p14745
(lp14746
(dp14747
S'description'
p14748
S'in 3D, whether the objects are spheres or columns\n'
p14749
sS'cpp_type'
p14750
S'bool'
p14751
sS'default'
p14752
S'1'
p14753
sS'name'
p14754
S'3D_spheres'
p14755
sS'required'
p14756
I00
sS'group_name'
p14757
Nsa(dp14758
S'description'
p14759
S'length of simulation domain in x-direction\n'
p14760
sS'cpp_type'
p14761
S'double'
p14762
sS'default'
p14763
g3
sS'name'
p14764
S'Lx'
p14765
sS'required'
p14766
I01
sS'group_name'
p14767
Nsa(dp14768
S'description'
p14769
S'length of simulation domain in y-direction\n'
p14770
sS'cpp_type'
p14771
S'double'
p14772
sS'default'
p14773
g3
sS'name'
p14774
S'Ly'
p14775
sS'required'
p14776
I01
sS'group_name'
p14777
Nsa(dp14778
S'description'
p14779
S'length of simulation domain in z-direction\n'
p14780
sS'cpp_type'
p14781
S'double'
p14782
sS'default'
p14783
S'0'
p14784
sS'name'
p14785
S'Lz'
p14786
sS'required'
p14787
I00
sS'group_name'
p14788
Nsa(dp14789
S'description'
p14790
S'Variation from central lattice position\n'
p14791
sS'cpp_type'
p14792
S'double'
p14793
sS'default'
p14794
S'0'
p14795
sS'name'
p14796
S'Rnd_variation'
p14797
sS'required'
p14798
I00
sS'group_name'
p14799
Nsa(dp14800
S'description'
p14801
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p14802
sS'cpp_type'
p14803
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p14804
sS'default'
p14805
g3
sS'name'
p14806
S'block'
p14807
sS'required'
p14808
I00
sS'group_name'
p14809
Nsa(dp14810
S'description'
p14811
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14812
sS'cpp_type'
p14813
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p14814
sS'default'
p14815
g3
sS'name'
p14816
S'boundary'
p14817
sS'required'
p14818
I00
sS'group_name'
p14819
Nsa(dp14820
S'description'
p14821
S'minimum spacing of bubbles, measured from center to center\n'
p14822
sS'cpp_type'
p14823
S'double'
p14824
sS'default'
p14825
S'0'
p14826
sS'name'
p14827
S'bubspac'
p14828
sS'required'
p14829
I01
sS'group_name'
p14830
Nsa(dp14831
S'description'
p14832
S'Vector containing the number of bubbles along each side\n'
p14833
sS'cpp_type'
p14834
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p14835
sS'default'
p14836
g3
sS'name'
p14837
S'circles_per_side'
p14838
sS'required'
p14839
I01
sS'group_name'
p14840
Nsa(dp14841
S'description'
p14842
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p14843
sS'cpp_type'
p14844
S'double'
p14845
sS'default'
p14846
S'0'
p14847
sS'name'
p14848
S'int_width'
p14849
sS'required'
p14850
I00
sS'group_name'
p14851
Nsa(dp14852
S'description'
p14853
S'The variable value inside the circle\n'
p14854
sS'cpp_type'
p14855
S'double'
p14856
sS'default'
p14857
g3
sS'name'
p14858
S'invalue'
p14859
sS'required'
p14860
I01
sS'group_name'
p14861
Nsa(dp14862
S'description'
p14863
S'The number of bubbles to be placed on GB\n'
p14864
sS'cpp_type'
p14865
S'unsigned int'
p14866
sS'default'
p14867
S'0'
p14868
sS'name'
p14869
S'numbub'
p14870
sS'required'
p14871
I01
sS'group_name'
p14872
Nsa(dp14873
S'description'
p14874
S'The number of tries\n'
p14875
sS'cpp_type'
p14876
S'unsigned int'
p14877
sS'default'
p14878
S'1000'
p14879
sS'name'
p14880
S'numtries'
p14881
sS'required'
p14882
I00
sS'group_name'
p14883
Nsa(dp14884
S'description'
p14885
S'The variable value outside the circle\n'
p14886
sS'cpp_type'
p14887
S'double'
p14888
sS'default'
p14889
g3
sS'name'
p14890
S'outvalue'
p14891
sS'required'
p14892
I01
sS'group_name'
p14893
Nsa(dp14894
S'description'
p14895
S'The radius of a circle\n'
p14896
sS'cpp_type'
p14897
S'double'
p14898
sS'default'
p14899
g3
sS'name'
p14900
S'radius'
p14901
sS'required'
p14902
I01
sS'group_name'
p14903
Nsa(dp14904
S'description'
p14905
S'Plus or minus Percent of random variation in the bubble radius\n'
p14906
sS'cpp_type'
p14907
S'double'
p14908
sS'default'
p14909
S'0'
p14910
sS'name'
p14911
S'radius_variation'
p14912
sS'required'
p14913
I00
sS'group_name'
p14914
Nsa(dp14915
S'description'
p14916
S'random seed\n'
p14917
sS'cpp_type'
p14918
S'unsigned int'
p14919
sS'default'
p14920
S'2000'
p14921
sS'name'
p14922
S'rand_seed'
p14923
sS'required'
p14924
I00
sS'group_name'
p14925
Nsa(dp14926
S'description'
p14927
g3
sS'cpp_type'
p14928
S'std::string'
p14929
sS'default'
p14930
S'LatticeSmoothCircleIC'
p14931
sS'name'
p14932
S'type'
p14933
sS'required'
p14934
I00
sS'group_name'
p14935
Nsa(dp14936
S'description'
p14937
S'The variable this initial condition is supposed to provide values for.\n'
p14938
sS'cpp_type'
p14939
S'VariableName'
p14940
sS'default'
p14941
g3
sS'name'
p14942
S'variable'
p14943
sS'required'
p14944
I01
sS'group_name'
p14945
Nsa(dp14946
S'description'
p14947
S'The x coordinate of the circle center\n'
p14948
sS'cpp_type'
p14949
S'double'
p14950
sS'default'
p14951
S'0'
p14952
sS'name'
p14953
S'x1'
p14954
sS'required'
p14955
I01
sS'group_name'
p14956
Nsa(dp14957
S'description'
p14958
S'The y coordinate of the circle center\n'
p14959
sS'cpp_type'
p14960
S'double'
p14961
sS'default'
p14962
S'0'
p14963
sS'name'
p14964
S'y1'
p14965
sS'required'
p14966
I01
sS'group_name'
p14967
Nsa(dp14968
S'description'
p14969
S'The z coordinate of the circle center\n'
p14970
sS'cpp_type'
p14971
S'double'
p14972
sS'default'
p14973
S'0'
p14974
sS'name'
p14975
S'z1'
p14976
sS'required'
p14977
I00
sS'group_name'
p14978
NsasS'name'
p14979
S'/ICs/LatticeSmoothCircleIC'
p14980
sa(dp14981
S'description'
p14982
g3
sS'type'
p14983
NsS'subblocks'
p14984
NsS'parameters'
p14985
(lp14986
(dp14987
S'description'
p14988
S'in 3D, whether the objects are spheres or columns\n'
p14989
sS'cpp_type'
p14990
S'bool'
p14991
sS'default'
p14992
S'1'
p14993
sS'name'
p14994
S'3D_spheres'
p14995
sS'required'
p14996
I00
sS'group_name'
p14997
Nsa(dp14998
S'description'
p14999
S'length of simulation domain in x-direction\n'
p15000
sS'cpp_type'
p15001
S'double'
p15002
sS'default'
p15003
g3
sS'name'
p15004
S'Lx'
p15005
sS'required'
p15006
I01
sS'group_name'
p15007
Nsa(dp15008
S'description'
p15009
S'length of simulation domain in y-direction\n'
p15010
sS'cpp_type'
p15011
S'double'
p15012
sS'default'
p15013
g3
sS'name'
p15014
S'Ly'
p15015
sS'required'
p15016
I01
sS'group_name'
p15017
Nsa(dp15018
S'description'
p15019
S'length of simulation domain in z-direction\n'
p15020
sS'cpp_type'
p15021
S'double'
p15022
sS'default'
p15023
S'0'
p15024
sS'name'
p15025
S'Lz'
p15026
sS'required'
p15027
I00
sS'group_name'
p15028
Nsa(dp15029
S'description'
p15030
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p15031
sS'cpp_type'
p15032
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p15033
sS'default'
p15034
g3
sS'name'
p15035
S'block'
p15036
sS'required'
p15037
I00
sS'group_name'
p15038
Nsa(dp15039
S'description'
p15040
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15041
sS'cpp_type'
p15042
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15043
sS'default'
p15044
g3
sS'name'
p15045
S'boundary'
p15046
sS'required'
p15047
I00
sS'group_name'
p15048
Nsa(dp15049
S'description'
p15050
S'minimum spacing of bubbles, measured from center to center\n'
p15051
sS'cpp_type'
p15052
S'double'
p15053
sS'default'
p15054
g3
sS'name'
p15055
S'bubspac'
p15056
sS'required'
p15057
I01
sS'group_name'
p15058
Nsa(dp15059
S'description'
p15060
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p15061
sS'cpp_type'
p15062
S'double'
p15063
sS'default'
p15064
S'0'
p15065
sS'name'
p15066
S'int_width'
p15067
sS'required'
p15068
I00
sS'group_name'
p15069
Nsa(dp15070
S'description'
p15071
S'The variable value inside the circle\n'
p15072
sS'cpp_type'
p15073
S'double'
p15074
sS'default'
p15075
g3
sS'name'
p15076
S'invalue'
p15077
sS'required'
p15078
I01
sS'group_name'
p15079
Nsa(dp15080
S'description'
p15081
S'The number of bubbles to be placed on GB\n'
p15082
sS'cpp_type'
p15083
S'unsigned int'
p15084
sS'default'
p15085
g3
sS'name'
p15086
S'numbub'
p15087
sS'required'
p15088
I01
sS'group_name'
p15089
Nsa(dp15090
S'description'
p15091
S'The number of tries\n'
p15092
sS'cpp_type'
p15093
S'unsigned int'
p15094
sS'default'
p15095
S'1000'
p15096
sS'name'
p15097
S'numtries'
p15098
sS'required'
p15099
I00
sS'group_name'
p15100
Nsa(dp15101
S'description'
p15102
S'The variable value outside the circle\n'
p15103
sS'cpp_type'
p15104
S'double'
p15105
sS'default'
p15106
g3
sS'name'
p15107
S'outvalue'
p15108
sS'required'
p15109
I01
sS'group_name'
p15110
Nsa(dp15111
S'description'
p15112
S'The radius of a circle\n'
p15113
sS'cpp_type'
p15114
S'double'
p15115
sS'default'
p15116
g3
sS'name'
p15117
S'radius'
p15118
sS'required'
p15119
I01
sS'group_name'
p15120
Nsa(dp15121
S'description'
p15122
S'Plus or minus Percent of random variation in the bubble radius\n'
p15123
sS'cpp_type'
p15124
S'double'
p15125
sS'default'
p15126
S'0'
p15127
sS'name'
p15128
S'radius_variation'
p15129
sS'required'
p15130
I00
sS'group_name'
p15131
Nsa(dp15132
S'description'
p15133
S'random seed\n'
p15134
sS'cpp_type'
p15135
S'unsigned int'
p15136
sS'default'
p15137
S'2000'
p15138
sS'name'
p15139
S'rand_seed'
p15140
sS'required'
p15141
I00
sS'group_name'
p15142
Nsa(dp15143
S'description'
p15144
g3
sS'cpp_type'
p15145
S'std::string'
p15146
sS'default'
p15147
S'MultiSmoothCircleIC'
p15148
sS'name'
p15149
S'type'
p15150
sS'required'
p15151
I00
sS'group_name'
p15152
Nsa(dp15153
S'description'
p15154
S'The variable this initial condition is supposed to provide values for.\n'
p15155
sS'cpp_type'
p15156
S'VariableName'
p15157
sS'default'
p15158
g3
sS'name'
p15159
S'variable'
p15160
sS'required'
p15161
I01
sS'group_name'
p15162
Nsa(dp15163
S'description'
p15164
S'The x coordinate of the circle center\n'
p15165
sS'cpp_type'
p15166
S'double'
p15167
sS'default'
p15168
S'0'
p15169
sS'name'
p15170
S'x1'
p15171
sS'required'
p15172
I01
sS'group_name'
p15173
Nsa(dp15174
S'description'
p15175
S'The y coordinate of the circle center\n'
p15176
sS'cpp_type'
p15177
S'double'
p15178
sS'default'
p15179
S'0'
p15180
sS'name'
p15181
S'y1'
p15182
sS'required'
p15183
I01
sS'group_name'
p15184
Nsa(dp15185
S'description'
p15186
S'The z coordinate of the circle center\n'
p15187
sS'cpp_type'
p15188
S'double'
p15189
sS'default'
p15190
S'0'
p15191
sS'name'
p15192
S'z1'
p15193
sS'required'
p15194
I00
sS'group_name'
p15195
NsasS'name'
p15196
S'/ICs/MultiSmoothCircleIC'
p15197
sa(dp15198
S'description'
p15199
g3
sS'type'
p15200
NsS'subblocks'
p15201
(lp15202
(dp15203
S'description'
p15204
g3
sS'type'
p15205
NsS'subblocks'
p15206
NsS'parameters'
p15207
(lp15208
(dp15209
S'description'
p15210
S'Number of grains, should be 2\n'
p15211
sS'cpp_type'
p15212
S'unsigned int'
p15213
sS'default'
p15214
g3
sS'name'
p15215
S'crys_num'
p15216
sS'required'
p15217
I01
sS'group_name'
p15218
Nsa(dp15219
S'description'
p15220
S'specifies the base name of the variables\n'
p15221
sS'cpp_type'
p15222
S'std::string'
p15223
sS'default'
p15224
g3
sS'name'
p15225
S'var_name_base'
p15226
sS'required'
p15227
I01
sS'group_name'
p15228
Nsa(dp15229
S'description'
p15230
S'The x coordinate of the lower left-hand corner of the box\n'
p15231
sS'cpp_type'
p15232
S'double'
p15233
sS'default'
p15234
g3
sS'name'
p15235
S'x1'
p15236
sS'required'
p15237
I01
sS'group_name'
p15238
Nsa(dp15239
S'description'
p15240
S'The x coordinate of the upper right-hand corner of the box\n'
p15241
sS'cpp_type'
p15242
S'double'
p15243
sS'default'
p15244
g3
sS'name'
p15245
S'x2'
p15246
sS'required'
p15247
I01
sS'group_name'
p15248
Nsa(dp15249
S'description'
p15250
S'The y coordinate of the lower left-hand corner of the box\n'
p15251
sS'cpp_type'
p15252
S'double'
p15253
sS'default'
p15254
g3
sS'name'
p15255
S'y1'
p15256
sS'required'
p15257
I01
sS'group_name'
p15258
Nsa(dp15259
S'description'
p15260
S'The y coordinate of the upper right-hand corner of the box\n'
p15261
sS'cpp_type'
p15262
S'double'
p15263
sS'default'
p15264
g3
sS'name'
p15265
S'y2'
p15266
sS'required'
p15267
I01
sS'group_name'
p15268
Nsa(dp15269
S'description'
p15270
S'The z coordinate of the lower left-hand corner of the box\n'
p15271
sS'cpp_type'
p15272
S'double'
p15273
sS'default'
p15274
S'0'
p15275
sS'name'
p15276
S'z1'
p15277
sS'required'
p15278
I00
sS'group_name'
p15279
Nsa(dp15280
S'description'
p15281
S'The z coordinate of the upper right-hand corner of the box\n'
p15282
sS'cpp_type'
p15283
S'double'
p15284
sS'default'
p15285
S'0'
p15286
sS'name'
p15287
S'z2'
p15288
sS'required'
p15289
I00
sS'group_name'
p15290
NsasS'name'
p15291
S'/ICs/PolycrystalICs/BicrystalBoundingBoxIC'
p15292
sa(dp15293
S'description'
p15294
g3
sS'type'
p15295
NsS'subblocks'
p15296
NsS'parameters'
p15297
(lp15298
(dp15299
S'description'
p15300
S'in 3D, whether the smaller grain is a spheres or columnar grain\n'
p15301
sS'cpp_type'
p15302
S'bool'
p15303
sS'default'
p15304
S'1'
p15305
sS'name'
p15306
S'3D_sphere'
p15307
sS'required'
p15308
I00
sS'group_name'
p15309
Nsa(dp15310
S'description'
p15311
S'Number of grains, should be 2\n'
p15312
sS'cpp_type'
p15313
S'unsigned int'
p15314
sS'default'
p15315
g3
sS'name'
p15316
S'crys_num'
p15317
sS'required'
p15318
I01
sS'group_name'
p15319
Nsa(dp15320
S'description'
p15321
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p15322
sS'cpp_type'
p15323
S'double'
p15324
sS'default'
p15325
S'0'
p15326
sS'name'
p15327
S'int_width'
p15328
sS'required'
p15329
I00
sS'group_name'
p15330
Nsa(dp15331
S'description'
p15332
S'Void radius\n'
p15333
sS'cpp_type'
p15334
S'double'
p15335
sS'default'
p15336
g3
sS'name'
p15337
S'radius'
p15338
sS'required'
p15339
I01
sS'group_name'
p15340
Nsa(dp15341
S'description'
p15342
S'specifies the base name of the variables\n'
p15343
sS'cpp_type'
p15344
S'std::string'
p15345
sS'default'
p15346
g3
sS'name'
p15347
S'var_name_base'
p15348
sS'required'
p15349
I01
sS'group_name'
p15350
Nsa(dp15351
S'description'
p15352
S'The x coordinate of the circle grain center\n'
p15353
sS'cpp_type'
p15354
S'double'
p15355
sS'default'
p15356
g3
sS'name'
p15357
S'x'
p15358
sS'required'
p15359
I01
sS'group_name'
p15360
Nsa(dp15361
S'description'
p15362
S'The y coordinate of the circle grain center\n'
p15363
sS'cpp_type'
p15364
S'double'
p15365
sS'default'
p15366
g3
sS'name'
p15367
S'y'
p15368
sS'required'
p15369
I01
sS'group_name'
p15370
Nsa(dp15371
S'description'
p15372
S'The z coordinate of the circle grain center\n'
p15373
sS'cpp_type'
p15374
S'double'
p15375
sS'default'
p15376
S'0'
p15377
sS'name'
p15378
S'z'
p15379
sS'required'
p15380
I00
sS'group_name'
p15381
NsasS'name'
p15382
S'/ICs/PolycrystalICs/BicrystalCircleGrainIC'
p15383
sa(dp15384
S'description'
p15385
g3
sS'type'
p15386
NsS'subblocks'
p15387
NsS'parameters'
p15388
(lp15389
(dp15390
S'description'
p15391
S'Number of order parameters\n'
p15392
sS'cpp_type'
p15393
S'unsigned int'
p15394
sS'default'
p15395
g3
sS'name'
p15396
S'crys_num'
p15397
sS'required'
p15398
I01
sS'group_name'
p15399
Nsa(dp15400
S'description'
p15401
S'Number of grains, must be a square (4, 9, 16, etc)\n'
p15402
sS'cpp_type'
p15403
S'unsigned int'
p15404
sS'default'
p15405
g3
sS'name'
p15406
S'grain_num'
p15407
sS'required'
p15408
I01
sS'group_name'
p15409
Nsa(dp15410
S'description'
p15411
S'The percent to randomly perturbate centers of grains relative to the size of the grain\n'
p15412
sS'cpp_type'
p15413
S'double'
p15414
sS'default'
p15415
S'0'
p15416
sS'name'
p15417
S'perturbation_percent'
p15418
sS'required'
p15419
I00
sS'group_name'
p15420
Nsa(dp15421
S'description'
p15422
S'The random seed\n'
p15423
sS'cpp_type'
p15424
S'unsigned int'
p15425
sS'default'
p15426
S'12444'
p15427
sS'name'
p15428
S'rand_seed'
p15429
sS'required'
p15430
I00
sS'group_name'
p15431
Nsa(dp15432
S'description'
p15433
S'specifies the base name of the variables\n'
p15434
sS'cpp_type'
p15435
S'std::string'
p15436
sS'default'
p15437
g3
sS'name'
p15438
S'var_name_base'
p15439
sS'required'
p15440
I01
sS'group_name'
p15441
Nsa(dp15442
S'description'
p15443
S'Specifies offset of hexagon grid in x-direction\n'
p15444
sS'cpp_type'
p15445
S'double'
p15446
sS'default'
p15447
S'0.5'
p15448
sS'name'
p15449
S'x_offset'
p15450
sS'required'
p15451
I00
sS'group_name'
p15452
NsasS'name'
p15453
S'/ICs/PolycrystalICs/PolycrystalHexGrainIC'
p15454
sa(dp15455
S'description'
p15456
g3
sS'type'
p15457
NsS'subblocks'
p15458
NsS'parameters'
p15459
(lp15460
(dp15461
S'description'
p15462
S'number of order parameters to create\n'
p15463
sS'cpp_type'
p15464
S'unsigned int'
p15465
sS'default'
p15466
g3
sS'name'
p15467
S'crys_num'
p15468
sS'required'
p15469
I01
sS'group_name'
p15470
Nsa(dp15471
S'name'
p15472
S'random_type'
p15473
sS'cpp_type'
p15474
S'MooseEnum'
p15475
sS'default'
p15476
g3
sS'description'
p15477
S'The type of random polycrystal initial condition. Whether one order parameter is chosen to be 1 at each node or if each order parameter continuously varies from 0 to 1\n'
p15478
sS'required'
p15479
I00
sS'options'
p15480
S'continuous discrete'
p15481
sS'group_name'
p15482
Nsa(dp15483
S'description'
p15484
S'specifies the base name of the variables\n'
p15485
sS'cpp_type'
p15486
S'std::string'
p15487
sS'default'
p15488
g3
sS'name'
p15489
S'var_name_base'
p15490
sS'required'
p15491
I01
sS'group_name'
p15492
NsasS'name'
p15493
S'/ICs/PolycrystalICs/PolycrystalRandomIC'
p15494
sa(dp15495
S'description'
p15496
g3
sS'type'
p15497
NsS'subblocks'
p15498
NsS'parameters'
p15499
(lp15500
(dp15501
S'description'
p15502
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p15503
sS'cpp_type'
p15504
S'bool'
p15505
sS'default'
p15506
S'0'
p15507
sS'name'
p15508
S'cody_test'
p15509
sS'required'
p15510
I00
sS'group_name'
p15511
Nsa(dp15512
S'description'
p15513
S'3D microstructure will be columnar in the z-direction?\n'
p15514
sS'cpp_type'
p15515
S'bool'
p15516
sS'default'
p15517
S'0'
p15518
sS'name'
p15519
S'columnar_3D'
p15520
sS'required'
p15521
I00
sS'group_name'
p15522
Nsa(dp15523
S'description'
p15524
S'number of order parameters to create\n'
p15525
sS'cpp_type'
p15526
S'unsigned int'
p15527
sS'default'
p15528
g3
sS'name'
p15529
S'crys_num'
p15530
sS'required'
p15531
I01
sS'group_name'
p15532
Nsa(dp15533
S'description'
p15534
S'number of grains to create, if it is going to greater than crys_num\n'
p15535
sS'cpp_type'
p15536
S'unsigned int'
p15537
sS'default'
p15538
g3
sS'name'
p15539
S'grain_num'
p15540
sS'required'
p15541
I01
sS'group_name'
p15542
Nsa(dp15543
S'description'
p15544
S'The random seed\n'
p15545
sS'cpp_type'
p15546
S'unsigned int'
p15547
sS'default'
p15548
S'12444'
p15549
sS'name'
p15550
S'rand_seed'
p15551
sS'required'
p15552
I00
sS'group_name'
p15553
Nsa(dp15554
S'description'
p15555
S'specifies the base name of the variables\n'
p15556
sS'cpp_type'
p15557
S'std::string'
p15558
sS'default'
p15559
g3
sS'name'
p15560
S'var_name_base'
p15561
sS'required'
p15562
I01
sS'group_name'
p15563
NsasS'name'
p15564
S'/ICs/PolycrystalICs/PolycrystalVoronoiIC'
p15565
sa(dp15566
S'description'
p15567
g3
sS'type'
p15568
NsS'subblocks'
p15569
NsS'parameters'
p15570
(lp15571
(dp15572
S'description'
p15573
S'number of order parameters to create\n'
p15574
sS'cpp_type'
p15575
S'unsigned int'
p15576
sS'default'
p15577
g3
sS'name'
p15578
S'crys_num'
p15579
sS'required'
p15580
I01
sS'group_name'
p15581
Nsa(dp15582
S'description'
p15583
S'specifies the base name of the variables\n'
p15584
sS'cpp_type'
p15585
S'std::string'
p15586
sS'default'
p15587
g3
sS'name'
p15588
S'var_name_base'
p15589
sS'required'
p15590
I01
sS'group_name'
p15591
NsasS'name'
p15592
S'/ICs/PolycrystalICs/Tricrystal2CircleGrainsIC'
p15593
sasS'parameters'
p15594
NsS'name'
p15595
S'/ICs/PolycrystalICs'
p15596
sa(dp15597
S'description'
p15598
g3
sS'type'
p15599
NsS'subblocks'
p15600
NsS'parameters'
p15601
(lp15602
(dp15603
S'description'
p15604
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p15605
sS'cpp_type'
p15606
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p15607
sS'default'
p15608
g3
sS'name'
p15609
S'block'
p15610
sS'required'
p15611
I00
sS'group_name'
p15612
Nsa(dp15613
S'description'
p15614
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15615
sS'cpp_type'
p15616
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15617
sS'default'
p15618
g3
sS'name'
p15619
S'boundary'
p15620
sS'required'
p15621
I00
sS'group_name'
p15622
Nsa(dp15623
S'description'
p15624
S'The index for the current order parameter\n'
p15625
sS'cpp_type'
p15626
S'unsigned int'
p15627
sS'default'
p15628
g3
sS'name'
p15629
S'crys_index'
p15630
sS'required'
p15631
I01
sS'group_name'
p15632
Nsa(dp15633
S'description'
p15634
S'Number of order parameters\n'
p15635
sS'cpp_type'
p15636
S'unsigned int'
p15637
sS'default'
p15638
g3
sS'name'
p15639
S'crys_num'
p15640
sS'required'
p15641
I01
sS'group_name'
p15642
Nsa(dp15643
S'description'
p15644
S'Type of random grain structure\n'
p15645
sS'cpp_type'
p15646
S'unsigned int'
p15647
sS'default'
p15648
g3
sS'name'
p15649
S'typ'
p15650
sS'required'
p15651
I01
sS'group_name'
p15652
Nsa(dp15653
S'description'
p15654
g3
sS'cpp_type'
p15655
S'std::string'
p15656
sS'default'
p15657
S'PolycrystalRandomIC'
p15658
sS'name'
p15659
S'type'
p15660
sS'required'
p15661
I00
sS'group_name'
p15662
Nsa(dp15663
S'description'
p15664
S'The variable this initial condition is supposed to provide values for.\n'
p15665
sS'cpp_type'
p15666
S'VariableName'
p15667
sS'default'
p15668
g3
sS'name'
p15669
S'variable'
p15670
sS'required'
p15671
I01
sS'group_name'
p15672
NsasS'name'
p15673
S'/ICs/PolycrystalRandomIC'
p15674
sa(dp15675
S'description'
p15676
g3
sS'type'
p15677
NsS'subblocks'
p15678
NsS'parameters'
p15679
(lp15680
(dp15681
S'description'
p15682
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p15683
sS'cpp_type'
p15684
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p15685
sS'default'
p15686
g3
sS'name'
p15687
S'block'
p15688
sS'required'
p15689
I00
sS'group_name'
p15690
Nsa(dp15691
S'description'
p15692
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15693
sS'cpp_type'
p15694
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15695
sS'default'
p15696
g3
sS'name'
p15697
S'boundary'
p15698
sS'required'
p15699
I00
sS'group_name'
p15700
Nsa(dp15701
S'description'
p15702
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p15703
sS'cpp_type'
p15704
S'bool'
p15705
sS'default'
p15706
S'0'
p15707
sS'name'
p15708
S'cody_test'
p15709
sS'required'
p15710
I00
sS'group_name'
p15711
Nsa(dp15712
S'description'
p15713
S'3D microstructure will be columnar in the z-direction?\n'
p15714
sS'cpp_type'
p15715
S'bool'
p15716
sS'default'
p15717
S'0'
p15718
sS'name'
p15719
S'columnar_3D'
p15720
sS'required'
p15721
I00
sS'group_name'
p15722
Nsa(dp15723
S'description'
p15724
S'The index for the current order parameter\n'
p15725
sS'cpp_type'
p15726
S'unsigned int'
p15727
sS'default'
p15728
g3
sS'name'
p15729
S'crys_index'
p15730
sS'required'
p15731
I01
sS'group_name'
p15732
Nsa(dp15733
S'description'
p15734
S'Number of order parameters\n'
p15735
sS'cpp_type'
p15736
S'unsigned int'
p15737
sS'default'
p15738
g3
sS'name'
p15739
S'crys_num'
p15740
sS'required'
p15741
I01
sS'group_name'
p15742
Nsa(dp15743
S'description'
p15744
S'Number of grains being represented by the order parameters\n'
p15745
sS'cpp_type'
p15746
S'unsigned int'
p15747
sS'default'
p15748
g3
sS'name'
p15749
S'grain_num'
p15750
sS'required'
p15751
I01
sS'group_name'
p15752
Nsa(dp15753
S'description'
p15754
S'The random seed\n'
p15755
sS'cpp_type'
p15756
S'unsigned int'
p15757
sS'default'
p15758
S'12444'
p15759
sS'name'
p15760
S'rand_seed'
p15761
sS'required'
p15762
I00
sS'group_name'
p15763
Nsa(dp15764
S'description'
p15765
g3
sS'cpp_type'
p15766
S'std::string'
p15767
sS'default'
p15768
S'PolycrystalReducedIC'
p15769
sS'name'
p15770
S'type'
p15771
sS'required'
p15772
I00
sS'group_name'
p15773
Nsa(dp15774
S'description'
p15775
S'The variable this initial condition is supposed to provide values for.\n'
p15776
sS'cpp_type'
p15777
S'VariableName'
p15778
sS'default'
p15779
g3
sS'name'
p15780
S'variable'
p15781
sS'required'
p15782
I01
sS'group_name'
p15783
NsasS'name'
p15784
S'/ICs/PolycrystalReducedIC'
p15785
sa(dp15786
S'description'
p15787
g3
sS'type'
p15788
NsS'subblocks'
p15789
NsS'parameters'
p15790
(lp15791
(dp15792
S'description'
p15793
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p15794
sS'cpp_type'
p15795
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p15796
sS'default'
p15797
g3
sS'name'
p15798
S'block'
p15799
sS'required'
p15800
I00
sS'group_name'
p15801
Nsa(dp15802
S'description'
p15803
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15804
sS'cpp_type'
p15805
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15806
sS'default'
p15807
g3
sS'name'
p15808
S'boundary'
p15809
sS'required'
p15810
I00
sS'group_name'
p15811
Nsa(dp15812
S'description'
p15813
S'Upper bound of the randomly generated values\n'
p15814
sS'cpp_type'
p15815
S'double'
p15816
sS'default'
p15817
S'1'
p15818
sS'name'
p15819
S'max'
p15820
sS'required'
p15821
I00
sS'group_name'
p15822
Nsa(dp15823
S'description'
p15824
S'Lower bound of the randomly generated values\n'
p15825
sS'cpp_type'
p15826
S'double'
p15827
sS'default'
p15828
S'0'
p15829
sS'name'
p15830
S'min'
p15831
sS'required'
p15832
I00
sS'group_name'
p15833
Nsa(dp15834
S'description'
p15835
S'Seed value for the random number generator\n'
p15836
sS'cpp_type'
p15837
S'unsigned int'
p15838
sS'default'
p15839
S'0'
p15840
sS'name'
p15841
S'seed'
p15842
sS'required'
p15843
I00
sS'group_name'
p15844
Nsa(dp15845
S'description'
p15846
g3
sS'cpp_type'
p15847
S'std::string'
p15848
sS'default'
p15849
S'RandomIC'
p15850
sS'name'
p15851
S'type'
p15852
sS'required'
p15853
I00
sS'group_name'
p15854
Nsa(dp15855
S'description'
p15856
S'The variable this initial condition is supposed to provide values for.\n'
p15857
sS'cpp_type'
p15858
S'VariableName'
p15859
sS'default'
p15860
g3
sS'name'
p15861
S'variable'
p15862
sS'required'
p15863
I01
sS'group_name'
p15864
NsasS'name'
p15865
S'/ICs/RandomIC'
p15866
sa(dp15867
S'description'
p15868
g3
sS'type'
p15869
NsS'subblocks'
p15870
NsS'parameters'
p15871
(lp15872
(dp15873
S'description'
p15874
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p15875
sS'cpp_type'
p15876
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p15877
sS'default'
p15878
g3
sS'name'
p15879
S'block'
p15880
sS'required'
p15881
I00
sS'group_name'
p15882
Nsa(dp15883
S'description'
p15884
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15885
sS'cpp_type'
p15886
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p15887
sS'default'
p15888
g3
sS'name'
p15889
S'boundary'
p15890
sS'required'
p15891
I00
sS'group_name'
p15892
Nsa(dp15893
S'description'
p15894
S'The min value of the variable invalue the box\n'
p15895
sS'cpp_type'
p15896
S'double'
p15897
sS'default'
p15898
S'0'
p15899
sS'name'
p15900
S'mn_invalue'
p15901
sS'required'
p15902
I00
sS'group_name'
p15903
Nsa(dp15904
S'description'
p15905
S'The min value of the variable outvalue the box\n'
p15906
sS'cpp_type'
p15907
S'double'
p15908
sS'default'
p15909
S'0'
p15910
sS'name'
p15911
S'mn_outvalue'
p15912
sS'required'
p15913
I00
sS'group_name'
p15914
Nsa(dp15915
S'description'
p15916
S'The max value of the variable invalue the box\n'
p15917
sS'cpp_type'
p15918
S'double'
p15919
sS'default'
p15920
g3
sS'name'
p15921
S'mx_invalue'
p15922
sS'required'
p15923
I01
sS'group_name'
p15924
Nsa(dp15925
S'description'
p15926
S'The max value of the variable outvalue the box\n'
p15927
sS'cpp_type'
p15928
S'double'
p15929
sS'default'
p15930
g3
sS'name'
p15931
S'mx_outvalue'
p15932
sS'required'
p15933
I01
sS'group_name'
p15934
Nsa(dp15935
S'description'
p15936
g3
sS'cpp_type'
p15937
S'std::string'
p15938
sS'default'
p15939
S'RndBoundingBoxIC'
p15940
sS'name'
p15941
S'type'
p15942
sS'required'
p15943
I00
sS'group_name'
p15944
Nsa(dp15945
S'description'
p15946
S'The variable this initial condition is supposed to provide values for.\n'
p15947
sS'cpp_type'
p15948
S'VariableName'
p15949
sS'default'
p15950
g3
sS'name'
p15951
S'variable'
p15952
sS'required'
p15953
I01
sS'group_name'
p15954
Nsa(dp15955
S'description'
p15956
S'The x coordinate of the lower left-hand corner of the box\n'
p15957
sS'cpp_type'
p15958
S'double'
p15959
sS'default'
p15960
g3
sS'name'
p15961
S'x1'
p15962
sS'required'
p15963
I01
sS'group_name'
p15964
Nsa(dp15965
S'description'
p15966
S'The x coordinate of the upper right-hand corner of the box\n'
p15967
sS'cpp_type'
p15968
S'double'
p15969
sS'default'
p15970
g3
sS'name'
p15971
S'x2'
p15972
sS'required'
p15973
I01
sS'group_name'
p15974
Nsa(dp15975
S'description'
p15976
S'The y coordinate of the lower left-hand corner of the box\n'
p15977
sS'cpp_type'
p15978
S'double'
p15979
sS'default'
p15980
g3
sS'name'
p15981
S'y1'
p15982
sS'required'
p15983
I01
sS'group_name'
p15984
Nsa(dp15985
S'description'
p15986
S'The y coordinate of the upper right-hand corner of the box\n'
p15987
sS'cpp_type'
p15988
S'double'
p15989
sS'default'
p15990
g3
sS'name'
p15991
S'y2'
p15992
sS'required'
p15993
I01
sS'group_name'
p15994
Nsa(dp15995
S'description'
p15996
S'The z coordinate of the lower left-hand corner of the box\n'
p15997
sS'cpp_type'
p15998
S'double'
p15999
sS'default'
p16000
S'0'
p16001
sS'name'
p16002
S'z1'
p16003
sS'required'
p16004
I00
sS'group_name'
p16005
Nsa(dp16006
S'description'
p16007
S'The z coordinate of the upper right-hand corner of the box\n'
p16008
sS'cpp_type'
p16009
S'double'
p16010
sS'default'
p16011
S'0'
p16012
sS'name'
p16013
S'z2'
p16014
sS'required'
p16015
I00
sS'group_name'
p16016
NsasS'name'
p16017
S'/ICs/RndBoundingBoxIC'
p16018
sa(dp16019
S'description'
p16020
g3
sS'type'
p16021
NsS'subblocks'
p16022
NsS'parameters'
p16023
(lp16024
(dp16025
S'description'
p16026
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p16027
sS'cpp_type'
p16028
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p16029
sS'default'
p16030
g3
sS'name'
p16031
S'block'
p16032
sS'required'
p16033
I00
sS'group_name'
p16034
Nsa(dp16035
S'description'
p16036
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16037
sS'cpp_type'
p16038
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16039
sS'default'
p16040
g3
sS'name'
p16041
S'boundary'
p16042
sS'required'
p16043
I00
sS'group_name'
p16044
Nsa(dp16045
S'description'
p16046
S'The min variable value inside the circle\n'
p16047
sS'cpp_type'
p16048
S'double'
p16049
sS'default'
p16050
g3
sS'name'
p16051
S'mn_invalue'
p16052
sS'required'
p16053
I01
sS'group_name'
p16054
Nsa(dp16055
S'description'
p16056
S'The min variable value outside the circle\n'
p16057
sS'cpp_type'
p16058
S'double'
p16059
sS'default'
p16060
g3
sS'name'
p16061
S'mn_outvalue'
p16062
sS'required'
p16063
I01
sS'group_name'
p16064
Nsa(dp16065
S'description'
p16066
S'The max variable value inside the circle\n'
p16067
sS'cpp_type'
p16068
S'double'
p16069
sS'default'
p16070
g3
sS'name'
p16071
S'mx_invalue'
p16072
sS'required'
p16073
I01
sS'group_name'
p16074
Nsa(dp16075
S'description'
p16076
S'The max variable value outside the circle\n'
p16077
sS'cpp_type'
p16078
S'double'
p16079
sS'default'
p16080
g3
sS'name'
p16081
S'mx_outvalue'
p16082
sS'required'
p16083
I01
sS'group_name'
p16084
Nsa(dp16085
S'description'
p16086
S'The radius of a circle\n'
p16087
sS'cpp_type'
p16088
S'double'
p16089
sS'default'
p16090
g3
sS'name'
p16091
S'radius'
p16092
sS'required'
p16093
I01
sS'group_name'
p16094
Nsa(dp16095
S'description'
p16096
S'Seed value for the random number generator\n'
p16097
sS'cpp_type'
p16098
S'unsigned int'
p16099
sS'default'
p16100
S'12345'
p16101
sS'name'
p16102
S'seed'
p16103
sS'required'
p16104
I00
sS'group_name'
p16105
Nsa(dp16106
S'description'
p16107
g3
sS'cpp_type'
p16108
S'std::string'
p16109
sS'default'
p16110
S'RndSmoothCircleIC'
p16111
sS'name'
p16112
S'type'
p16113
sS'required'
p16114
I00
sS'group_name'
p16115
Nsa(dp16116
S'description'
p16117
S'The variable this initial condition is supposed to provide values for.\n'
p16118
sS'cpp_type'
p16119
S'VariableName'
p16120
sS'default'
p16121
g3
sS'name'
p16122
S'variable'
p16123
sS'required'
p16124
I01
sS'group_name'
p16125
Nsa(dp16126
S'description'
p16127
S'The x coordinate of the circle center\n'
p16128
sS'cpp_type'
p16129
S'double'
p16130
sS'default'
p16131
g3
sS'name'
p16132
S'x1'
p16133
sS'required'
p16134
I01
sS'group_name'
p16135
Nsa(dp16136
S'description'
p16137
S'The y coordinate of the circle center\n'
p16138
sS'cpp_type'
p16139
S'double'
p16140
sS'default'
p16141
g3
sS'name'
p16142
S'y1'
p16143
sS'required'
p16144
I01
sS'group_name'
p16145
Nsa(dp16146
S'description'
p16147
S'The z coordinate of the circle center\n'
p16148
sS'cpp_type'
p16149
S'double'
p16150
sS'default'
p16151
S'0'
p16152
sS'name'
p16153
S'z1'
p16154
sS'required'
p16155
I00
sS'group_name'
p16156
NsasS'name'
p16157
S'/ICs/RndSmoothCircleIC'
p16158
sa(dp16159
S'description'
p16160
g3
sS'type'
p16161
NsS'subblocks'
p16162
NsS'parameters'
p16163
(lp16164
(dp16165
S'description'
p16166
g3
sS'cpp_type'
p16167
S'std::string'
p16168
sS'default'
p16169
S'ScalarComponentIC'
p16170
sS'name'
p16171
S'type'
p16172
sS'required'
p16173
I00
sS'group_name'
p16174
Nsa(dp16175
S'description'
p16176
S'Initial values to initialize the scalar variable.\n'
p16177
sS'cpp_type'
p16178
S'std::vector<double, std::allocator<double> >'
p16179
sS'default'
p16180
g3
sS'name'
p16181
S'values'
p16182
sS'required'
p16183
I01
sS'group_name'
p16184
Nsa(dp16185
S'description'
p16186
S'The variable this initial condition is supposed to provide values for.\n'
p16187
sS'cpp_type'
p16188
S'VariableName'
p16189
sS'default'
p16190
g3
sS'name'
p16191
S'variable'
p16192
sS'required'
p16193
I00
sS'group_name'
p16194
NsasS'name'
p16195
S'/ICs/ScalarComponentIC'
p16196
sa(dp16197
S'description'
p16198
g3
sS'type'
p16199
NsS'subblocks'
p16200
NsS'parameters'
p16201
(lp16202
(dp16203
S'description'
p16204
g3
sS'cpp_type'
p16205
S'std::string'
p16206
sS'default'
p16207
S'ScalarConstantIC'
p16208
sS'name'
p16209
S'type'
p16210
sS'required'
p16211
I00
sS'group_name'
p16212
Nsa(dp16213
S'description'
p16214
g3
sS'cpp_type'
p16215
S'double'
p16216
sS'default'
p16217
S'0'
p16218
sS'name'
p16219
S'value'
p16220
sS'required'
p16221
I00
sS'group_name'
p16222
Nsa(dp16223
S'description'
p16224
S'The variable this initial condition is supposed to provide values for.\n'
p16225
sS'cpp_type'
p16226
S'VariableName'
p16227
sS'default'
p16228
g3
sS'name'
p16229
S'variable'
p16230
sS'required'
p16231
I00
sS'group_name'
p16232
NsasS'name'
p16233
S'/ICs/ScalarConstantIC'
p16234
sa(dp16235
S'description'
p16236
g3
sS'type'
p16237
NsS'subblocks'
p16238
NsS'parameters'
p16239
(lp16240
(dp16241
S'description'
p16242
S'in 3D, whether the objects are spheres or columns\n'
p16243
sS'cpp_type'
p16244
S'bool'
p16245
sS'default'
p16246
S'1'
p16247
sS'name'
p16248
S'3D_spheres'
p16249
sS'required'
p16250
I00
sS'group_name'
p16251
Nsa(dp16252
S'description'
p16253
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p16254
sS'cpp_type'
p16255
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p16256
sS'default'
p16257
g3
sS'name'
p16258
S'block'
p16259
sS'required'
p16260
I00
sS'group_name'
p16261
Nsa(dp16262
S'description'
p16263
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16264
sS'cpp_type'
p16265
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16266
sS'default'
p16267
g3
sS'name'
p16268
S'boundary'
p16269
sS'required'
p16270
I00
sS'group_name'
p16271
Nsa(dp16272
S'description'
p16273
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p16274
sS'cpp_type'
p16275
S'double'
p16276
sS'default'
p16277
S'0'
p16278
sS'name'
p16279
S'int_width'
p16280
sS'required'
p16281
I00
sS'group_name'
p16282
Nsa(dp16283
S'description'
p16284
S'The variable value inside the circle\n'
p16285
sS'cpp_type'
p16286
S'double'
p16287
sS'default'
p16288
g3
sS'name'
p16289
S'invalue'
p16290
sS'required'
p16291
I01
sS'group_name'
p16292
Nsa(dp16293
S'description'
p16294
S'The variable value outside the circle\n'
p16295
sS'cpp_type'
p16296
S'double'
p16297
sS'default'
p16298
g3
sS'name'
p16299
S'outvalue'
p16300
sS'required'
p16301
I01
sS'group_name'
p16302
Nsa(dp16303
S'description'
p16304
S'The radius of a circle\n'
p16305
sS'cpp_type'
p16306
S'double'
p16307
sS'default'
p16308
g3
sS'name'
p16309
S'radius'
p16310
sS'required'
p16311
I01
sS'group_name'
p16312
Nsa(dp16313
S'description'
p16314
g3
sS'cpp_type'
p16315
S'std::string'
p16316
sS'default'
p16317
S'SmoothCircleIC'
p16318
sS'name'
p16319
S'type'
p16320
sS'required'
p16321
I00
sS'group_name'
p16322
Nsa(dp16323
S'description'
p16324
S'The variable this initial condition is supposed to provide values for.\n'
p16325
sS'cpp_type'
p16326
S'VariableName'
p16327
sS'default'
p16328
g3
sS'name'
p16329
S'variable'
p16330
sS'required'
p16331
I01
sS'group_name'
p16332
Nsa(dp16333
S'description'
p16334
S'The x coordinate of the circle center\n'
p16335
sS'cpp_type'
p16336
S'double'
p16337
sS'default'
p16338
g3
sS'name'
p16339
S'x1'
p16340
sS'required'
p16341
I01
sS'group_name'
p16342
Nsa(dp16343
S'description'
p16344
S'The y coordinate of the circle center\n'
p16345
sS'cpp_type'
p16346
S'double'
p16347
sS'default'
p16348
g3
sS'name'
p16349
S'y1'
p16350
sS'required'
p16351
I01
sS'group_name'
p16352
Nsa(dp16353
S'description'
p16354
S'The z coordinate of the circle center\n'
p16355
sS'cpp_type'
p16356
S'double'
p16357
sS'default'
p16358
S'0'
p16359
sS'name'
p16360
S'z1'
p16361
sS'required'
p16362
I00
sS'group_name'
p16363
NsasS'name'
p16364
S'/ICs/SmoothCircleIC'
p16365
sa(dp16366
S'description'
p16367
g3
sS'type'
p16368
NsS'subblocks'
p16369
NsS'parameters'
p16370
(lp16371
(dp16372
S'description'
p16373
S'in 3D, whether the objects are spheres or columns\n'
p16374
sS'cpp_type'
p16375
S'bool'
p16376
sS'default'
p16377
S'1'
p16378
sS'name'
p16379
S'3D_spheres'
p16380
sS'required'
p16381
I00
sS'group_name'
p16382
Nsa(dp16383
S'description'
p16384
S'length of simulation domain in x-direction\n'
p16385
sS'cpp_type'
p16386
S'double'
p16387
sS'default'
p16388
S'0'
p16389
sS'name'
p16390
S'Lx'
p16391
sS'required'
p16392
I01
sS'group_name'
p16393
Nsa(dp16394
S'description'
p16395
S'length of simulation domain in y-direction\n'
p16396
sS'cpp_type'
p16397
S'double'
p16398
sS'default'
p16399
S'0'
p16400
sS'name'
p16401
S'Ly'
p16402
sS'required'
p16403
I01
sS'group_name'
p16404
Nsa(dp16405
S'description'
p16406
S'length of simulation domain in z-direction\n'
p16407
sS'cpp_type'
p16408
S'double'
p16409
sS'default'
p16410
S'0'
p16411
sS'name'
p16412
S'Lz'
p16413
sS'required'
p16414
I00
sS'group_name'
p16415
Nsa(dp16416
S'description'
p16417
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p16418
sS'cpp_type'
p16419
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p16420
sS'default'
p16421
g3
sS'name'
p16422
S'block'
p16423
sS'required'
p16424
I00
sS'group_name'
p16425
Nsa(dp16426
S'description'
p16427
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16428
sS'cpp_type'
p16429
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16430
sS'default'
p16431
g3
sS'name'
p16432
S'boundary'
p16433
sS'required'
p16434
I00
sS'group_name'
p16435
Nsa(dp16436
S'description'
p16437
S'minimum spacing of bubbles, measured from center to center\n'
p16438
sS'cpp_type'
p16439
S'double'
p16440
sS'default'
p16441
S'0'
p16442
sS'name'
p16443
S'bubspac'
p16444
sS'required'
p16445
I01
sS'group_name'
p16446
Nsa(dp16447
S'description'
p16448
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p16449
sS'cpp_type'
p16450
S'double'
p16451
sS'default'
p16452
S'0'
p16453
sS'name'
p16454
S'int_width'
p16455
sS'required'
p16456
I00
sS'group_name'
p16457
Nsa(dp16458
S'description'
p16459
S'The variable value inside the circle\n'
p16460
sS'cpp_type'
p16461
S'double'
p16462
sS'default'
p16463
g3
sS'name'
p16464
S'invalue'
p16465
sS'required'
p16466
I01
sS'group_name'
p16467
Nsa(dp16468
S'description'
p16469
S'The number of bubbles to be placed on GB\n'
p16470
sS'cpp_type'
p16471
S'unsigned int'
p16472
sS'default'
p16473
S'0'
p16474
sS'name'
p16475
S'numbub'
p16476
sS'required'
p16477
I01
sS'group_name'
p16478
Nsa(dp16479
S'description'
p16480
S'The number of tries\n'
p16481
sS'cpp_type'
p16482
S'unsigned int'
p16483
sS'default'
p16484
S'1000'
p16485
sS'name'
p16486
S'numtries'
p16487
sS'required'
p16488
I00
sS'group_name'
p16489
Nsa(dp16490
S'description'
p16491
S'The variable value outside the circle\n'
p16492
sS'cpp_type'
p16493
S'double'
p16494
sS'default'
p16495
g3
sS'name'
p16496
S'outvalue'
p16497
sS'required'
p16498
I01
sS'group_name'
p16499
Nsa(dp16500
S'description'
p16501
S'The radius for each circle\n'
p16502
sS'cpp_type'
p16503
S'std::vector<double, std::allocator<double> >'
p16504
sS'default'
p16505
g3
sS'name'
p16506
S'radii'
p16507
sS'required'
p16508
I01
sS'group_name'
p16509
Nsa(dp16510
S'description'
p16511
S'The radius of a circle\n'
p16512
sS'cpp_type'
p16513
S'double'
p16514
sS'default'
p16515
S'0'
p16516
sS'name'
p16517
S'radius'
p16518
sS'required'
p16519
I01
sS'group_name'
p16520
Nsa(dp16521
S'description'
p16522
S'Plus or minus Percent of random variation in the bubble radius\n'
p16523
sS'cpp_type'
p16524
S'double'
p16525
sS'default'
p16526
S'0'
p16527
sS'name'
p16528
S'radius_variation'
p16529
sS'required'
p16530
I00
sS'group_name'
p16531
Nsa(dp16532
S'description'
p16533
S'random seed\n'
p16534
sS'cpp_type'
p16535
S'unsigned int'
p16536
sS'default'
p16537
S'2000'
p16538
sS'name'
p16539
S'rand_seed'
p16540
sS'required'
p16541
I00
sS'group_name'
p16542
Nsa(dp16543
S'description'
p16544
g3
sS'cpp_type'
p16545
S'std::string'
p16546
sS'default'
p16547
S'SpecifiedSmoothCircleIC'
p16548
sS'name'
p16549
S'type'
p16550
sS'required'
p16551
I00
sS'group_name'
p16552
Nsa(dp16553
S'description'
p16554
S'The variable this initial condition is supposed to provide values for.\n'
p16555
sS'cpp_type'
p16556
S'VariableName'
p16557
sS'default'
p16558
g3
sS'name'
p16559
S'variable'
p16560
sS'required'
p16561
I01
sS'group_name'
p16562
Nsa(dp16563
S'description'
p16564
S'The x coordinate of the circle center\n'
p16565
sS'cpp_type'
p16566
S'double'
p16567
sS'default'
p16568
S'0'
p16569
sS'name'
p16570
S'x1'
p16571
sS'required'
p16572
I01
sS'group_name'
p16573
Nsa(dp16574
S'description'
p16575
S'The x-coordinate for each circle center\n'
p16576
sS'cpp_type'
p16577
S'std::vector<double, std::allocator<double> >'
p16578
sS'default'
p16579
g3
sS'name'
p16580
S'x_positions'
p16581
sS'required'
p16582
I01
sS'group_name'
p16583
Nsa(dp16584
S'description'
p16585
S'The y coordinate of the circle center\n'
p16586
sS'cpp_type'
p16587
S'double'
p16588
sS'default'
p16589
S'0'
p16590
sS'name'
p16591
S'y1'
p16592
sS'required'
p16593
I01
sS'group_name'
p16594
Nsa(dp16595
S'description'
p16596
S'The y-coordinate for each circle center\n'
p16597
sS'cpp_type'
p16598
S'std::vector<double, std::allocator<double> >'
p16599
sS'default'
p16600
g3
sS'name'
p16601
S'y_positions'
p16602
sS'required'
p16603
I01
sS'group_name'
p16604
Nsa(dp16605
S'description'
p16606
S'The z coordinate of the circle center\n'
p16607
sS'cpp_type'
p16608
S'double'
p16609
sS'default'
p16610
S'0'
p16611
sS'name'
p16612
S'z1'
p16613
sS'required'
p16614
I00
sS'group_name'
p16615
Nsa(dp16616
S'description'
p16617
S'The z-coordinate for each circle center\n'
p16618
sS'cpp_type'
p16619
S'std::vector<double, std::allocator<double> >'
p16620
sS'default'
p16621
g3
sS'name'
p16622
S'z_positions'
p16623
sS'required'
p16624
I01
sS'group_name'
p16625
NsasS'name'
p16626
S'/ICs/SpecifiedSmoothCircleIC'
p16627
sa(dp16628
S'description'
p16629
g3
sS'type'
p16630
NsS'subblocks'
p16631
NsS'parameters'
p16632
(lp16633
(dp16634
S'description'
p16635
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p16636
sS'cpp_type'
p16637
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p16638
sS'default'
p16639
g3
sS'name'
p16640
S'block'
p16641
sS'required'
p16642
I00
sS'group_name'
p16643
Nsa(dp16644
S'description'
p16645
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16646
sS'cpp_type'
p16647
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16648
sS'default'
p16649
g3
sS'name'
p16650
S'boundary'
p16651
sS'required'
p16652
I00
sS'group_name'
p16653
Nsa(dp16654
S'description'
p16655
S'The z coordinate of the circle center\n'
p16656
sS'cpp_type'
p16657
S'double'
p16658
sS'default'
p16659
g3
sS'name'
p16660
S'height'
p16661
sS'required'
p16662
I01
sS'group_name'
p16663
Nsa(dp16664
S'description'
p16665
S'The variable value inside the circle\n'
p16666
sS'cpp_type'
p16667
S'double'
p16668
sS'default'
p16669
g3
sS'name'
p16670
S'invalue'
p16671
sS'required'
p16672
I01
sS'group_name'
p16673
Nsa(dp16674
S'description'
p16675
S'The variable value outside the circle\n'
p16676
sS'cpp_type'
p16677
S'double'
p16678
sS'default'
p16679
g3
sS'name'
p16680
S'outvalue'
p16681
sS'required'
p16682
I01
sS'group_name'
p16683
Nsa(dp16684
S'description'
p16685
g3
sS'cpp_type'
p16686
S'std::string'
p16687
sS'default'
p16688
S'ThumbIC'
p16689
sS'name'
p16690
S'type'
p16691
sS'required'
p16692
I00
sS'group_name'
p16693
Nsa(dp16694
S'description'
p16695
S'The variable this initial condition is supposed to provide values for.\n'
p16696
sS'cpp_type'
p16697
S'VariableName'
p16698
sS'default'
p16699
g3
sS'name'
p16700
S'variable'
p16701
sS'required'
p16702
I01
sS'group_name'
p16703
Nsa(dp16704
S'description'
p16705
S'The y coordinate of the circle center\n'
p16706
sS'cpp_type'
p16707
S'double'
p16708
sS'default'
p16709
g3
sS'name'
p16710
S'width'
p16711
sS'required'
p16712
I01
sS'group_name'
p16713
Nsa(dp16714
S'description'
p16715
S'The x coordinate of the circle center\n'
p16716
sS'cpp_type'
p16717
S'double'
p16718
sS'default'
p16719
g3
sS'name'
p16720
S'xcoord'
p16721
sS'required'
p16722
I01
sS'group_name'
p16723
NsasS'name'
p16724
S'/ICs/ThumbIC'
p16725
sa(dp16726
S'description'
p16727
g3
sS'type'
p16728
NsS'subblocks'
p16729
NsS'parameters'
p16730
(lp16731
(dp16732
S'description'
p16733
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p16734
sS'cpp_type'
p16735
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p16736
sS'default'
p16737
g3
sS'name'
p16738
S'block'
p16739
sS'required'
p16740
I00
sS'group_name'
p16741
Nsa(dp16742
S'description'
p16743
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16744
sS'cpp_type'
p16745
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p16746
sS'default'
p16747
g3
sS'name'
p16748
S'boundary'
p16749
sS'required'
p16750
I00
sS'group_name'
p16751
Nsa(dp16752
S'description'
p16753
S'The index for the current crystal\n'
p16754
sS'cpp_type'
p16755
S'unsigned int'
p16756
sS'default'
p16757
g3
sS'name'
p16758
S'crys_index'
p16759
sS'required'
p16760
I01
sS'group_name'
p16761
Nsa(dp16762
S'description'
p16763
S'Number of crystals\n'
p16764
sS'cpp_type'
p16765
S'unsigned int'
p16766
sS'default'
p16767
g3
sS'name'
p16768
S'crys_num'
p16769
sS'required'
p16770
I01
sS'group_name'
p16771
Nsa(dp16772
S'description'
p16773
g3
sS'cpp_type'
p16774
S'std::string'
p16775
sS'default'
p16776
S'Tricrystal2CircleGrainsIC'
p16777
sS'name'
p16778
S'type'
p16779
sS'required'
p16780
I00
sS'group_name'
p16781
Nsa(dp16782
S'description'
p16783
S'The variable this initial condition is supposed to provide values for.\n'
p16784
sS'cpp_type'
p16785
S'VariableName'
p16786
sS'default'
p16787
g3
sS'name'
p16788
S'variable'
p16789
sS'required'
p16790
I01
sS'group_name'
p16791
NsasS'name'
p16792
S'/ICs/Tricrystal2CircleGrainsIC'
p16793
sasS'parameters'
p16794
NsS'name'
p16795
S'/ICs'
p16796
sa(dp16797
S'description'
p16798
g3
sS'type'
p16799
NsS'subblocks'
p16800
(lp16801
(dp16802
S'description'
p16803
g3
sS'type'
p16804
NsS'subblocks'
p16805
NsS'parameters'
p16806
(lp16807
(dp16808
S'description'
p16809
S'A string representing the Moose Object that will be built by this Action\n'
p16810
sS'cpp_type'
p16811
S'std::string'
p16812
sS'default'
p16813
g3
sS'name'
p16814
S'type'
p16815
sS'required'
p16816
I01
sS'group_name'
p16817
NsasS'name'
p16818
S'/Kernels/*'
p16819
sa(dp16820
S'description'
p16821
g3
sS'type'
p16822
NsS'subblocks'
p16823
NsS'parameters'
p16824
(lp16825
(dp16826
S'description'
p16827
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p16828
sS'cpp_type'
p16829
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p16830
sS'default'
p16831
g3
sS'name'
p16832
S'block'
p16833
sS'required'
p16834
I00
sS'group_name'
p16835
Nsa(dp16836
S'description'
p16837
S'Other species concentration\n'
p16838
sS'cpp_type'
p16839
S'std::vector<VariableName>'
p16840
sS'default'
p16841
g3
sS'name'
p16842
S'c'
p16843
sS'required'
p16844
I01
sS'group_name'
p16845
Nsa(dp16846
S'description'
p16847
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16848
sS'cpp_type'
p16849
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16850
sS'default'
p16851
g3
sS'name'
p16852
S'diag_save_in'
p16853
sS'required'
p16854
I00
sS'group_name'
p16855
S'Advanced'
p16856
sa(dp16857
S'description'
p16858
S'Ratio of surface energy to GB energy\n'
p16859
sS'cpp_type'
p16860
S'double'
p16861
sS'default'
p16862
S'1'
p16863
sS'name'
p16864
S'en_ratio'
p16865
sS'required'
p16866
I00
sS'group_name'
p16867
Nsa(dp16868
S'description'
p16869
S'The mobility used with the kernel\n'
p16870
sS'cpp_type'
p16871
S'std::string'
p16872
sS'default'
p16873
S'L'
p16874
sS'name'
p16875
S'mob_name'
p16876
sS'required'
p16877
I00
sS'group_name'
p16878
Nsa(dp16879
S'description'
p16880
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16881
sS'cpp_type'
p16882
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16883
sS'default'
p16884
g3
sS'name'
p16885
S'save_in'
p16886
sS'required'
p16887
I00
sS'group_name'
p16888
S'Advanced'
p16889
sa(dp16890
S'description'
p16891
S'The seed for the master random number generator\n'
p16892
sS'cpp_type'
p16893
S'unsigned int'
p16894
sS'default'
p16895
S'0'
p16896
sS'name'
p16897
S'seed'
p16898
sS'required'
p16899
I00
sS'group_name'
p16900
S'Advanced'
p16901
sa(dp16902
S'description'
p16903
g3
sS'cpp_type'
p16904
S'std::string'
p16905
sS'default'
p16906
S'ACGBPoly'
p16907
sS'name'
p16908
S'type'
p16909
sS'required'
p16910
I00
sS'group_name'
p16911
Nsa(dp16912
S'description'
p16913
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p16914
sS'cpp_type'
p16915
S'bool'
p16916
sS'default'
p16917
S'0'
p16918
sS'name'
p16919
S'use_displaced_mesh'
p16920
sS'required'
p16921
I00
sS'group_name'
p16922
S'Advanced'
p16923
sa(dp16924
S'description'
p16925
S'The name of the variable that this Kernel operates on\n'
p16926
sS'cpp_type'
p16927
S'NonlinearVariableName'
p16928
sS'default'
p16929
g3
sS'name'
p16930
S'variable'
p16931
sS'required'
p16932
I01
sS'group_name'
p16933
NsasS'name'
p16934
S'/Kernels/ACGBPoly'
p16935
sa(dp16936
S'description'
p16937
g3
sS'type'
p16938
NsS'subblocks'
p16939
NsS'parameters'
p16940
(lp16941
(dp16942
S'description'
p16943
S'temperature\n'
p16944
sS'cpp_type'
p16945
S'std::vector<VariableName>'
p16946
sS'default'
p16947
g3
sS'name'
p16948
S'T'
p16949
sS'required'
p16950
I00
sS'group_name'
p16951
Nsa(dp16952
S'description'
p16953
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p16954
sS'cpp_type'
p16955
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p16956
sS'default'
p16957
g3
sS'name'
p16958
S'block'
p16959
sS'required'
p16960
I00
sS'group_name'
p16961
Nsa(dp16962
S'description'
p16963
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16964
sS'cpp_type'
p16965
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16966
sS'default'
p16967
g3
sS'name'
p16968
S'diag_save_in'
p16969
sS'required'
p16970
I00
sS'group_name'
p16971
S'Advanced'
p16972
sa(dp16973
S'description'
p16974
S'The mobility used with the kernel\n'
p16975
sS'cpp_type'
p16976
S'std::string'
p16977
sS'default'
p16978
S'L'
p16979
sS'name'
p16980
S'mob_name'
p16981
sS'required'
p16982
I00
sS'group_name'
p16983
Nsa(dp16984
S'description'
p16985
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p16986
sS'cpp_type'
p16987
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p16988
sS'default'
p16989
g3
sS'name'
p16990
S'save_in'
p16991
sS'required'
p16992
I00
sS'group_name'
p16993
S'Advanced'
p16994
sa(dp16995
S'description'
p16996
S'The seed for the master random number generator\n'
p16997
sS'cpp_type'
p16998
S'unsigned int'
p16999
sS'default'
p17000
S'0'
p17001
sS'name'
p17002
S'seed'
p17003
sS'required'
p17004
I00
sS'group_name'
p17005
S'Advanced'
p17006
sa(dp17007
S'description'
p17008
g3
sS'cpp_type'
p17009
S'std::string'
p17010
sS'default'
p17011
S'ACGrGrPoly'
p17012
sS'name'
p17013
S'type'
p17014
sS'required'
p17015
I00
sS'group_name'
p17016
Nsa(dp17017
S'description'
p17018
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17019
sS'cpp_type'
p17020
S'bool'
p17021
sS'default'
p17022
S'0'
p17023
sS'name'
p17024
S'use_displaced_mesh'
p17025
sS'required'
p17026
I00
sS'group_name'
p17027
S'Advanced'
p17028
sa(dp17029
S'description'
p17030
S'Array of coupled variable names\n'
p17031
sS'cpp_type'
p17032
S'std::vector<VariableName>'
p17033
sS'default'
p17034
g3
sS'name'
p17035
S'v'
p17036
sS'required'
p17037
I01
sS'group_name'
p17038
Nsa(dp17039
S'description'
p17040
S'The name of the variable that this Kernel operates on\n'
p17041
sS'cpp_type'
p17042
S'NonlinearVariableName'
p17043
sS'default'
p17044
g3
sS'name'
p17045
S'variable'
p17046
sS'required'
p17047
I01
sS'group_name'
p17048
NsasS'name'
p17049
S'/Kernels/ACGrGrPoly'
p17050
sa(dp17051
S'description'
p17052
g3
sS'type'
p17053
NsS'subblocks'
p17054
NsS'parameters'
p17055
(lp17056
(dp17057
S'description'
p17058
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p17059
sS'cpp_type'
p17060
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p17061
sS'default'
p17062
g3
sS'name'
p17063
S'block'
p17064
sS'required'
p17065
I00
sS'group_name'
p17066
Nsa(dp17067
S'description'
p17068
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17069
sS'cpp_type'
p17070
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17071
sS'default'
p17072
g3
sS'name'
p17073
S'diag_save_in'
p17074
sS'required'
p17075
I00
sS'group_name'
p17076
S'Advanced'
p17077
sa(dp17078
S'description'
p17079
S'The kappa used with the kernel\n'
p17080
sS'cpp_type'
p17081
S'std::string'
p17082
sS'default'
p17083
S'kappa_op'
p17084
sS'name'
p17085
S'kappa_name'
p17086
sS'required'
p17087
I00
sS'group_name'
p17088
Nsa(dp17089
S'description'
p17090
S'The mobility used with the kernel\n'
p17091
sS'cpp_type'
p17092
S'std::string'
p17093
sS'default'
p17094
S'L'
p17095
sS'name'
p17096
S'mob_name'
p17097
sS'required'
p17098
I00
sS'group_name'
p17099
Nsa(dp17100
S'description'
p17101
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17102
sS'cpp_type'
p17103
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17104
sS'default'
p17105
g3
sS'name'
p17106
S'save_in'
p17107
sS'required'
p17108
I00
sS'group_name'
p17109
S'Advanced'
p17110
sa(dp17111
S'description'
p17112
S'The seed for the master random number generator\n'
p17113
sS'cpp_type'
p17114
S'unsigned int'
p17115
sS'default'
p17116
S'0'
p17117
sS'name'
p17118
S'seed'
p17119
sS'required'
p17120
I00
sS'group_name'
p17121
S'Advanced'
p17122
sa(dp17123
S'description'
p17124
g3
sS'cpp_type'
p17125
S'std::string'
p17126
sS'default'
p17127
S'ACInterface'
p17128
sS'name'
p17129
S'type'
p17130
sS'required'
p17131
I00
sS'group_name'
p17132
Nsa(dp17133
S'description'
p17134
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17135
sS'cpp_type'
p17136
S'bool'
p17137
sS'default'
p17138
S'0'
p17139
sS'name'
p17140
S'use_displaced_mesh'
p17141
sS'required'
p17142
I00
sS'group_name'
p17143
S'Advanced'
p17144
sa(dp17145
S'description'
p17146
S'The name of the variable that this Kernel operates on\n'
p17147
sS'cpp_type'
p17148
S'NonlinearVariableName'
p17149
sS'default'
p17150
g3
sS'name'
p17151
S'variable'
p17152
sS'required'
p17153
I01
sS'group_name'
p17154
NsasS'name'
p17155
S'/Kernels/ACInterface'
p17156
sa(dp17157
S'description'
p17158
g3
sS'type'
p17159
NsS'subblocks'
p17160
NsS'parameters'
p17161
(lp17162
(dp17163
S'description'
p17164
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p17165
sS'cpp_type'
p17166
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p17167
sS'default'
p17168
g3
sS'name'
p17169
S'block'
p17170
sS'required'
p17171
I00
sS'group_name'
p17172
Nsa(dp17173
S'description'
p17174
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17175
sS'cpp_type'
p17176
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17177
sS'default'
p17178
g3
sS'name'
p17179
S'diag_save_in'
p17180
sS'required'
p17181
I00
sS'group_name'
p17182
S'Advanced'
p17183
sa(dp17184
S'description'
p17185
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17186
sS'cpp_type'
p17187
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17188
sS'default'
p17189
g3
sS'name'
p17190
S'save_in'
p17191
sS'required'
p17192
I00
sS'group_name'
p17193
S'Advanced'
p17194
sa(dp17195
S'description'
p17196
S'The seed for the master random number generator\n'
p17197
sS'cpp_type'
p17198
S'unsigned int'
p17199
sS'default'
p17200
S'0'
p17201
sS'name'
p17202
S'seed'
p17203
sS'required'
p17204
I00
sS'group_name'
p17205
S'Advanced'
p17206
sa(dp17207
S'description'
p17208
S'The Tensor to multiply the Diffusion operator by\n'
p17209
sS'cpp_type'
p17210
S'libMesh::TensorValue<double>'
p17211
sS'default'
p17212
g3
sS'name'
p17213
S'tensor_coeff'
p17214
sS'required'
p17215
I01
sS'group_name'
p17216
Nsa(dp17217
S'description'
p17218
g3
sS'cpp_type'
p17219
S'std::string'
p17220
sS'default'
p17221
S'AnisotropicDiffusion'
p17222
sS'name'
p17223
S'type'
p17224
sS'required'
p17225
I00
sS'group_name'
p17226
Nsa(dp17227
S'description'
p17228
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17229
sS'cpp_type'
p17230
S'bool'
p17231
sS'default'
p17232
S'0'
p17233
sS'name'
p17234
S'use_displaced_mesh'
p17235
sS'required'
p17236
I00
sS'group_name'
p17237
S'Advanced'
p17238
sa(dp17239
S'description'
p17240
S'The name of the variable that this Kernel operates on\n'
p17241
sS'cpp_type'
p17242
S'NonlinearVariableName'
p17243
sS'default'
p17244
g3
sS'name'
p17245
S'variable'
p17246
sS'required'
p17247
I01
sS'group_name'
p17248
NsasS'name'
p17249
S'/Kernels/AnisotropicDiffusion'
p17250
sa(dp17251
S'description'
p17252
g3
sS'type'
p17253
NsS'subblocks'
p17254
NsS'parameters'
p17255
(lp17256
(dp17257
S'description'
p17258
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p17259
sS'cpp_type'
p17260
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p17261
sS'default'
p17262
g3
sS'name'
p17263
S'block'
p17264
sS'required'
p17265
I00
sS'group_name'
p17266
Nsa(dp17267
S'description'
p17268
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17269
sS'cpp_type'
p17270
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17271
sS'default'
p17272
g3
sS'name'
p17273
S'diag_save_in'
p17274
sS'required'
p17275
I00
sS'group_name'
p17276
S'Advanced'
p17277
sa(dp17278
S'description'
p17279
S'A function that describes the body force\n'
p17280
sS'cpp_type'
p17281
S'FunctionName'
p17282
sS'default'
p17283
g3
sS'name'
p17284
S'function'
p17285
sS'required'
p17286
I00
sS'group_name'
p17287
Nsa(dp17288
S'description'
p17289
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17290
sS'cpp_type'
p17291
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17292
sS'default'
p17293
g3
sS'name'
p17294
S'save_in'
p17295
sS'required'
p17296
I00
sS'group_name'
p17297
S'Advanced'
p17298
sa(dp17299
S'description'
p17300
S'The seed for the master random number generator\n'
p17301
sS'cpp_type'
p17302
S'unsigned int'
p17303
sS'default'
p17304
S'0'
p17305
sS'name'
p17306
S'seed'
p17307
sS'required'
p17308
I00
sS'group_name'
p17309
S'Advanced'
p17310
sa(dp17311
S'description'
p17312
g3
sS'cpp_type'
p17313
S'std::string'
p17314
sS'default'
p17315
S'BodyForce'
p17316
sS'name'
p17317
S'type'
p17318
sS'required'
p17319
I00
sS'group_name'
p17320
Nsa(dp17321
S'description'
p17322
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17323
sS'cpp_type'
p17324
S'bool'
p17325
sS'default'
p17326
S'0'
p17327
sS'name'
p17328
S'use_displaced_mesh'
p17329
sS'required'
p17330
I00
sS'group_name'
p17331
S'Advanced'
p17332
sa(dp17333
S'description'
p17334
g3
sS'cpp_type'
p17335
S'double'
p17336
sS'default'
p17337
S'0'
p17338
sS'name'
p17339
S'value'
p17340
sS'required'
p17341
I00
sS'group_name'
p17342
Nsa(dp17343
S'description'
p17344
S'The name of the variable that this Kernel operates on\n'
p17345
sS'cpp_type'
p17346
S'NonlinearVariableName'
p17347
sS'default'
p17348
g3
sS'name'
p17349
S'variable'
p17350
sS'required'
p17351
I01
sS'group_name'
p17352
NsasS'name'
p17353
S'/Kernels/BodyForce'
p17354
sa(dp17355
S'description'
p17356
g3
sS'type'
p17357
NsS'subblocks'
p17358
NsS'parameters'
p17359
(lp17360
(dp17361
S'description'
p17362
S'The D mobility used with the kernel\n'
p17363
sS'cpp_type'
p17364
S'std::string'
p17365
sS'default'
p17366
S'DM'
p17367
sS'name'
p17368
S'Dmob_name'
p17369
sS'required'
p17370
I00
sS'group_name'
p17371
Nsa(dp17372
S'description'
p17373
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p17374
sS'cpp_type'
p17375
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p17376
sS'default'
p17377
g3
sS'name'
p17378
S'block'
p17379
sS'required'
p17380
I00
sS'group_name'
p17381
Nsa(dp17382
S'description'
p17383
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17384
sS'cpp_type'
p17385
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17386
sS'default'
p17387
g3
sS'name'
p17388
S'diag_save_in'
p17389
sS'required'
p17390
I00
sS'group_name'
p17391
S'Advanced'
p17392
sa(dp17393
S'description'
p17394
S'The gradient of the mobility used with the kernel\n'
p17395
sS'cpp_type'
p17396
S'std::string'
p17397
sS'default'
p17398
g3
sS'name'
p17399
S'grad_mob_name'
p17400
sS'required'
p17401
I01
sS'group_name'
p17402
Nsa(dp17403
S'description'
p17404
S'Jacobian information for the mobility is defined\n'
p17405
sS'cpp_type'
p17406
S'bool'
p17407
sS'default'
p17408
S'0'
p17409
sS'name'
p17410
S'has_MJac'
p17411
sS'required'
p17412
I00
sS'group_name'
p17413
Nsa(dp17414
S'description'
p17415
S'The kappa used with the kernel\n'
p17416
sS'cpp_type'
p17417
S'std::string'
p17418
sS'default'
p17419
g3
sS'name'
p17420
S'kappa_name'
p17421
sS'required'
p17422
I01
sS'group_name'
p17423
Nsa(dp17424
S'description'
p17425
S'The mobility used with the kernel\n'
p17426
sS'cpp_type'
p17427
S'std::string'
p17428
sS'default'
p17429
g3
sS'name'
p17430
S'mob_name'
p17431
sS'required'
p17432
I01
sS'group_name'
p17433
Nsa(dp17434
S'description'
p17435
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17436
sS'cpp_type'
p17437
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17438
sS'default'
p17439
g3
sS'name'
p17440
S'save_in'
p17441
sS'required'
p17442
I00
sS'group_name'
p17443
S'Advanced'
p17444
sa(dp17445
S'description'
p17446
S'The seed for the master random number generator\n'
p17447
sS'cpp_type'
p17448
S'unsigned int'
p17449
sS'default'
p17450
S'0'
p17451
sS'name'
p17452
S'seed'
p17453
sS'required'
p17454
I00
sS'group_name'
p17455
S'Advanced'
p17456
sa(dp17457
S'description'
p17458
g3
sS'cpp_type'
p17459
S'std::string'
p17460
sS'default'
p17461
S'CHInterface'
p17462
sS'name'
p17463
S'type'
p17464
sS'required'
p17465
I00
sS'group_name'
p17466
Nsa(dp17467
S'description'
p17468
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17469
sS'cpp_type'
p17470
S'bool'
p17471
sS'default'
p17472
S'0'
p17473
sS'name'
p17474
S'use_displaced_mesh'
p17475
sS'required'
p17476
I00
sS'group_name'
p17477
S'Advanced'
p17478
sa(dp17479
S'description'
p17480
S'The name of the variable that this Kernel operates on\n'
p17481
sS'cpp_type'
p17482
S'NonlinearVariableName'
p17483
sS'default'
p17484
g3
sS'name'
p17485
S'variable'
p17486
sS'required'
p17487
I01
sS'group_name'
p17488
NsasS'name'
p17489
S'/Kernels/CHInterface'
p17490
sa(dp17491
S'description'
p17492
g3
sS'type'
p17493
NsS'subblocks'
p17494
NsS'parameters'
p17495
(lp17496
(dp17497
S'description'
p17498
S'The D mobility used with the kernel\n'
p17499
sS'cpp_type'
p17500
S'std::string'
p17501
sS'default'
p17502
S'DM'
p17503
sS'name'
p17504
S'Dmob_name'
p17505
sS'required'
p17506
I00
sS'group_name'
p17507
Nsa(dp17508
S'description'
p17509
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p17510
sS'cpp_type'
p17511
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p17512
sS'default'
p17513
g3
sS'name'
p17514
S'block'
p17515
sS'required'
p17516
I00
sS'group_name'
p17517
Nsa(dp17518
S'description'
p17519
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17520
sS'cpp_type'
p17521
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17522
sS'default'
p17523
g3
sS'name'
p17524
S'diag_save_in'
p17525
sS'required'
p17526
I00
sS'group_name'
p17527
S'Advanced'
p17528
sa(dp17529
S'description'
p17530
S'Jacobian information for the mobility is defined\n'
p17531
sS'cpp_type'
p17532
S'bool'
p17533
sS'default'
p17534
S'0'
p17535
sS'name'
p17536
S'has_MJac'
p17537
sS'required'
p17538
I00
sS'group_name'
p17539
Nsa(dp17540
S'description'
p17541
S'The mobility used with the kernel\n'
p17542
sS'cpp_type'
p17543
S'std::string'
p17544
sS'default'
p17545
S'M'
p17546
sS'name'
p17547
S'mob_name'
p17548
sS'required'
p17549
I00
sS'group_name'
p17550
Nsa(dp17551
S'description'
p17552
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17553
sS'cpp_type'
p17554
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17555
sS'default'
p17556
g3
sS'name'
p17557
S'save_in'
p17558
sS'required'
p17559
I00
sS'group_name'
p17560
S'Advanced'
p17561
sa(dp17562
S'description'
p17563
S'The seed for the master random number generator\n'
p17564
sS'cpp_type'
p17565
S'unsigned int'
p17566
sS'default'
p17567
S'0'
p17568
sS'name'
p17569
S'seed'
p17570
sS'required'
p17571
I00
sS'group_name'
p17572
S'Advanced'
p17573
sa(dp17574
S'description'
p17575
g3
sS'cpp_type'
p17576
S'std::string'
p17577
sS'default'
p17578
S'CHMath'
p17579
sS'name'
p17580
S'type'
p17581
sS'required'
p17582
I00
sS'group_name'
p17583
Nsa(dp17584
S'description'
p17585
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17586
sS'cpp_type'
p17587
S'bool'
p17588
sS'default'
p17589
S'0'
p17590
sS'name'
p17591
S'use_displaced_mesh'
p17592
sS'required'
p17593
I00
sS'group_name'
p17594
S'Advanced'
p17595
sa(dp17596
S'description'
p17597
S'The name of the variable that this Kernel operates on\n'
p17598
sS'cpp_type'
p17599
S'NonlinearVariableName'
p17600
sS'default'
p17601
g3
sS'name'
p17602
S'variable'
p17603
sS'required'
p17604
I01
sS'group_name'
p17605
NsasS'name'
p17606
S'/Kernels/CHMath'
p17607
sa(dp17608
S'description'
p17609
g3
sS'type'
p17610
NsS'subblocks'
p17611
NsS'parameters'
p17612
(lp17613
(dp17614
S'description'
p17615
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p17616
sS'cpp_type'
p17617
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p17618
sS'default'
p17619
g3
sS'name'
p17620
S'block'
p17621
sS'required'
p17622
I00
sS'group_name'
p17623
Nsa(dp17624
S'description'
p17625
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17626
sS'cpp_type'
p17627
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17628
sS'default'
p17629
g3
sS'name'
p17630
S'diag_save_in'
p17631
sS'required'
p17632
I00
sS'group_name'
p17633
S'Advanced'
p17634
sa(dp17635
S'description'
p17636
S'Field variable for gradient of convective term\n'
p17637
sS'cpp_type'
p17638
S'std::vector<VariableName>'
p17639
sS'default'
p17640
g3
sS'name'
p17641
S'grad_velocity'
p17642
sS'required'
p17643
I01
sS'group_name'
p17644
Nsa(dp17645
S'description'
p17646
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17647
sS'cpp_type'
p17648
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17649
sS'default'
p17650
g3
sS'name'
p17651
S'save_in'
p17652
sS'required'
p17653
I00
sS'group_name'
p17654
S'Advanced'
p17655
sa(dp17656
S'description'
p17657
S'The seed for the master random number generator\n'
p17658
sS'cpp_type'
p17659
S'unsigned int'
p17660
sS'default'
p17661
S'0'
p17662
sS'name'
p17663
S'seed'
p17664
sS'required'
p17665
I00
sS'group_name'
p17666
S'Advanced'
p17667
sa(dp17668
S'description'
p17669
g3
sS'cpp_type'
p17670
S'std::string'
p17671
sS'default'
p17672
S'ConvectionSK'
p17673
sS'name'
p17674
S'type'
p17675
sS'required'
p17676
I00
sS'group_name'
p17677
Nsa(dp17678
S'description'
p17679
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17680
sS'cpp_type'
p17681
S'bool'
p17682
sS'default'
p17683
S'0'
p17684
sS'name'
p17685
S'use_displaced_mesh'
p17686
sS'required'
p17687
I00
sS'group_name'
p17688
S'Advanced'
p17689
sa(dp17690
S'description'
p17691
S'The name of the variable that this Kernel operates on\n'
p17692
sS'cpp_type'
p17693
S'NonlinearVariableName'
p17694
sS'default'
p17695
g3
sS'name'
p17696
S'variable'
p17697
sS'required'
p17698
I01
sS'group_name'
p17699
NsasS'name'
p17700
S'/Kernels/ConvectionSK'
p17701
sa(dp17702
S'description'
p17703
g3
sS'type'
p17704
NsS'subblocks'
p17705
NsS'parameters'
p17706
(lp17707
(dp17708
S'description'
p17709
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p17710
sS'cpp_type'
p17711
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p17712
sS'default'
p17713
g3
sS'name'
p17714
S'block'
p17715
sS'required'
p17716
I00
sS'group_name'
p17717
Nsa(dp17718
S'description'
p17719
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17720
sS'cpp_type'
p17721
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17722
sS'default'
p17723
g3
sS'name'
p17724
S'diag_save_in'
p17725
sS'required'
p17726
I00
sS'group_name'
p17727
S'Advanced'
p17728
sa(dp17729
S'description'
p17730
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17731
sS'cpp_type'
p17732
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17733
sS'default'
p17734
g3
sS'name'
p17735
S'save_in'
p17736
sS'required'
p17737
I00
sS'group_name'
p17738
S'Advanced'
p17739
sa(dp17740
S'description'
p17741
S'The seed for the master random number generator\n'
p17742
sS'cpp_type'
p17743
S'unsigned int'
p17744
sS'default'
p17745
S'0'
p17746
sS'name'
p17747
S'seed'
p17748
sS'required'
p17749
I00
sS'group_name'
p17750
S'Advanced'
p17751
sa(dp17752
S'description'
p17753
g3
sS'cpp_type'
p17754
S'std::string'
p17755
sS'default'
p17756
S'CoupledForce'
p17757
sS'name'
p17758
S'type'
p17759
sS'required'
p17760
I00
sS'group_name'
p17761
Nsa(dp17762
S'description'
p17763
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17764
sS'cpp_type'
p17765
S'bool'
p17766
sS'default'
p17767
S'0'
p17768
sS'name'
p17769
S'use_displaced_mesh'
p17770
sS'required'
p17771
I00
sS'group_name'
p17772
S'Advanced'
p17773
sa(dp17774
S'description'
p17775
S'The coupled variable which provides the force\n'
p17776
sS'cpp_type'
p17777
S'std::vector<VariableName>'
p17778
sS'default'
p17779
g3
sS'name'
p17780
S'v'
p17781
sS'required'
p17782
I01
sS'group_name'
p17783
Nsa(dp17784
S'description'
p17785
S'The name of the variable that this Kernel operates on\n'
p17786
sS'cpp_type'
p17787
S'NonlinearVariableName'
p17788
sS'default'
p17789
g3
sS'name'
p17790
S'variable'
p17791
sS'required'
p17792
I01
sS'group_name'
p17793
NsasS'name'
p17794
S'/Kernels/CoupledForce'
p17795
sa(dp17796
S'description'
p17797
g3
sS'type'
p17798
NsS'subblocks'
p17799
NsS'parameters'
p17800
(lp17801
(dp17802
S'description'
p17803
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p17804
sS'cpp_type'
p17805
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p17806
sS'default'
p17807
g3
sS'name'
p17808
S'block'
p17809
sS'required'
p17810
I00
sS'group_name'
p17811
Nsa(dp17812
S'description'
p17813
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17814
sS'cpp_type'
p17815
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17816
sS'default'
p17817
g3
sS'name'
p17818
S'diag_save_in'
p17819
sS'required'
p17820
I00
sS'group_name'
p17821
S'Advanced'
p17822
sa(dp17823
S'description'
p17824
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17825
sS'cpp_type'
p17826
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17827
sS'default'
p17828
g3
sS'name'
p17829
S'save_in'
p17830
sS'required'
p17831
I00
sS'group_name'
p17832
S'Advanced'
p17833
sa(dp17834
S'description'
p17835
S'The seed for the master random number generator\n'
p17836
sS'cpp_type'
p17837
S'unsigned int'
p17838
sS'default'
p17839
S'0'
p17840
sS'name'
p17841
S'seed'
p17842
sS'required'
p17843
I00
sS'group_name'
p17844
S'Advanced'
p17845
sa(dp17846
S'description'
p17847
g3
sS'cpp_type'
p17848
S'std::string'
p17849
sS'default'
p17850
S'CoupledImplicitEuler'
p17851
sS'name'
p17852
S'type'
p17853
sS'required'
p17854
I00
sS'group_name'
p17855
Nsa(dp17856
S'description'
p17857
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17858
sS'cpp_type'
p17859
S'bool'
p17860
sS'default'
p17861
S'0'
p17862
sS'name'
p17863
S'use_displaced_mesh'
p17864
sS'required'
p17865
I00
sS'group_name'
p17866
S'Advanced'
p17867
sa(dp17868
S'description'
p17869
S'Coupled variable\n'
p17870
sS'cpp_type'
p17871
S'std::vector<VariableName>'
p17872
sS'default'
p17873
g3
sS'name'
p17874
S'v'
p17875
sS'required'
p17876
I01
sS'group_name'
p17877
Nsa(dp17878
S'description'
p17879
S'The name of the variable that this Kernel operates on\n'
p17880
sS'cpp_type'
p17881
S'NonlinearVariableName'
p17882
sS'default'
p17883
g3
sS'name'
p17884
S'variable'
p17885
sS'required'
p17886
I01
sS'group_name'
p17887
NsasS'name'
p17888
S'/Kernels/CoupledImplicitEuler'
p17889
sa(dp17890
S'description'
p17891
g3
sS'type'
p17892
NsS'subblocks'
p17893
NsS'parameters'
p17894
(lp17895
(dp17896
S'description'
p17897
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p17898
sS'cpp_type'
p17899
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p17900
sS'default'
p17901
g3
sS'name'
p17902
S'block'
p17903
sS'required'
p17904
I00
sS'group_name'
p17905
Nsa(dp17906
S'description'
p17907
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17908
sS'cpp_type'
p17909
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17910
sS'default'
p17911
g3
sS'name'
p17912
S'diag_save_in'
p17913
sS'required'
p17914
I00
sS'group_name'
p17915
S'Advanced'
p17916
sa(dp17917
S'description'
p17918
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17919
sS'cpp_type'
p17920
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17921
sS'default'
p17922
g3
sS'name'
p17923
S'save_in'
p17924
sS'required'
p17925
I00
sS'group_name'
p17926
S'Advanced'
p17927
sa(dp17928
S'description'
p17929
S'The seed for the master random number generator\n'
p17930
sS'cpp_type'
p17931
S'unsigned int'
p17932
sS'default'
p17933
S'0'
p17934
sS'name'
p17935
S'seed'
p17936
sS'required'
p17937
I00
sS'group_name'
p17938
S'Advanced'
p17939
sa(dp17940
S'description'
p17941
g3
sS'cpp_type'
p17942
S'std::string'
p17943
sS'default'
p17944
S'Diffusion'
p17945
sS'name'
p17946
S'type'
p17947
sS'required'
p17948
I00
sS'group_name'
p17949
Nsa(dp17950
S'description'
p17951
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17952
sS'cpp_type'
p17953
S'bool'
p17954
sS'default'
p17955
S'0'
p17956
sS'name'
p17957
S'use_displaced_mesh'
p17958
sS'required'
p17959
I00
sS'group_name'
p17960
S'Advanced'
p17961
sa(dp17962
S'description'
p17963
S'The name of the variable that this Kernel operates on\n'
p17964
sS'cpp_type'
p17965
S'NonlinearVariableName'
p17966
sS'default'
p17967
g3
sS'name'
p17968
S'variable'
p17969
sS'required'
p17970
I01
sS'group_name'
p17971
NsasS'name'
p17972
S'/Kernels/Diffusion'
p17973
sa(dp17974
S'description'
p17975
g3
sS'type'
p17976
NsS'subblocks'
p17977
NsS'parameters'
p17978
(lp17979
(dp17980
S'description'
p17981
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p17982
sS'cpp_type'
p17983
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p17984
sS'default'
p17985
g3
sS'name'
p17986
S'block'
p17987
sS'required'
p17988
I00
sS'group_name'
p17989
Nsa(dp17990
S'description'
p17991
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17992
sS'cpp_type'
p17993
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p17994
sS'default'
p17995
g3
sS'name'
p17996
S'diag_save_in'
p17997
sS'required'
p17998
I00
sS'group_name'
p17999
S'Advanced'
p18000
sa(dp18001
S'description'
p18002
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18003
sS'cpp_type'
p18004
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18005
sS'default'
p18006
g3
sS'name'
p18007
S'save_in'
p18008
sS'required'
p18009
I00
sS'group_name'
p18010
S'Advanced'
p18011
sa(dp18012
S'description'
p18013
S'The seed for the master random number generator\n'
p18014
sS'cpp_type'
p18015
S'unsigned int'
p18016
sS'default'
p18017
S'0'
p18018
sS'name'
p18019
S'seed'
p18020
sS'required'
p18021
I00
sS'group_name'
p18022
S'Advanced'
p18023
sa(dp18024
S'description'
p18025
g3
sS'cpp_type'
p18026
S'std::string'
p18027
sS'default'
p18028
S'DiffusionSK'
p18029
sS'name'
p18030
S'type'
p18031
sS'required'
p18032
I00
sS'group_name'
p18033
Nsa(dp18034
S'description'
p18035
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18036
sS'cpp_type'
p18037
S'bool'
p18038
sS'default'
p18039
S'0'
p18040
sS'name'
p18041
S'use_displaced_mesh'
p18042
sS'required'
p18043
I00
sS'group_name'
p18044
S'Advanced'
p18045
sa(dp18046
S'description'
p18047
S'The name of the variable that this Kernel operates on\n'
p18048
sS'cpp_type'
p18049
S'NonlinearVariableName'
p18050
sS'default'
p18051
g3
sS'name'
p18052
S'variable'
p18053
sS'required'
p18054
I01
sS'group_name'
p18055
NsasS'name'
p18056
S'/Kernels/DiffusionSK'
p18057
sa(dp18058
S'description'
p18059
g3
sS'type'
p18060
NsS'subblocks'
p18061
NsS'parameters'
p18062
(lp18063
(dp18064
S'description'
p18065
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p18066
sS'cpp_type'
p18067
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p18068
sS'default'
p18069
g3
sS'name'
p18070
S'block'
p18071
sS'required'
p18072
I00
sS'group_name'
p18073
Nsa(dp18074
S'description'
p18075
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18076
sS'cpp_type'
p18077
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18078
sS'default'
p18079
g3
sS'name'
p18080
S'diag_save_in'
p18081
sS'required'
p18082
I00
sS'group_name'
p18083
S'Advanced'
p18084
sa(dp18085
S'description'
p18086
S'Use for eigenvalue problem (true) or source problem (false)\n'
p18087
sS'cpp_type'
p18088
S'bool'
p18089
sS'default'
p18090
S'1'
p18091
sS'name'
p18092
S'eigen'
p18093
sS'required'
p18094
I00
sS'group_name'
p18095
Nsa(dp18096
S'description'
p18097
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18098
sS'cpp_type'
p18099
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18100
sS'default'
p18101
g3
sS'name'
p18102
S'save_in'
p18103
sS'required'
p18104
I00
sS'group_name'
p18105
S'Advanced'
p18106
sa(dp18107
S'description'
p18108
S'The seed for the master random number generator\n'
p18109
sS'cpp_type'
p18110
S'unsigned int'
p18111
sS'default'
p18112
S'0'
p18113
sS'name'
p18114
S'seed'
p18115
sS'required'
p18116
I00
sS'group_name'
p18117
S'Advanced'
p18118
sa(dp18119
S'description'
p18120
g3
sS'cpp_type'
p18121
S'std::string'
p18122
sS'default'
p18123
S'MassEigenKernel'
p18124
sS'name'
p18125
S'type'
p18126
sS'required'
p18127
I00
sS'group_name'
p18128
Nsa(dp18129
S'description'
p18130
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18131
sS'cpp_type'
p18132
S'bool'
p18133
sS'default'
p18134
S'0'
p18135
sS'name'
p18136
S'use_displaced_mesh'
p18137
sS'required'
p18138
I00
sS'group_name'
p18139
S'Advanced'
p18140
sa(dp18141
S'description'
p18142
S'The name of the variable that this Kernel operates on\n'
p18143
sS'cpp_type'
p18144
S'NonlinearVariableName'
p18145
sS'default'
p18146
g3
sS'name'
p18147
S'variable'
p18148
sS'required'
p18149
I01
sS'group_name'
p18150
NsasS'name'
p18151
S'/Kernels/MassEigenKernel'
p18152
sa(dp18153
S'description'
p18154
g3
sS'type'
p18155
NsS'subblocks'
p18156
NsS'parameters'
p18157
(lp18158
(dp18159
S'description'
p18160
S'The name of the diffusivity\n'
p18161
sS'cpp_type'
p18162
S'std::string'
p18163
sS'default'
p18164
S'D'
p18165
sS'name'
p18166
S'D_name'
p18167
sS'required'
p18168
I00
sS'group_name'
p18169
Nsa(dp18170
S'description'
p18171
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p18172
sS'cpp_type'
p18173
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p18174
sS'default'
p18175
g3
sS'name'
p18176
S'block'
p18177
sS'required'
p18178
I00
sS'group_name'
p18179
Nsa(dp18180
S'description'
p18181
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18182
sS'cpp_type'
p18183
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18184
sS'default'
p18185
g3
sS'name'
p18186
S'diag_save_in'
p18187
sS'required'
p18188
I00
sS'group_name'
p18189
S'Advanced'
p18190
sa(dp18191
S'description'
p18192
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18193
sS'cpp_type'
p18194
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18195
sS'default'
p18196
g3
sS'name'
p18197
S'save_in'
p18198
sS'required'
p18199
I00
sS'group_name'
p18200
S'Advanced'
p18201
sa(dp18202
S'description'
p18203
S'The seed for the master random number generator\n'
p18204
sS'cpp_type'
p18205
S'unsigned int'
p18206
sS'default'
p18207
S'0'
p18208
sS'name'
p18209
S'seed'
p18210
sS'required'
p18211
I00
sS'group_name'
p18212
S'Advanced'
p18213
sa(dp18214
S'description'
p18215
g3
sS'cpp_type'
p18216
S'std::string'
p18217
sS'default'
p18218
S'MatDiffusion'
p18219
sS'name'
p18220
S'type'
p18221
sS'required'
p18222
I00
sS'group_name'
p18223
Nsa(dp18224
S'description'
p18225
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18226
sS'cpp_type'
p18227
S'bool'
p18228
sS'default'
p18229
S'0'
p18230
sS'name'
p18231
S'use_displaced_mesh'
p18232
sS'required'
p18233
I00
sS'group_name'
p18234
S'Advanced'
p18235
sa(dp18236
S'description'
p18237
S'The name of the variable that this Kernel operates on\n'
p18238
sS'cpp_type'
p18239
S'NonlinearVariableName'
p18240
sS'default'
p18241
g3
sS'name'
p18242
S'variable'
p18243
sS'required'
p18244
I01
sS'group_name'
p18245
NsasS'name'
p18246
S'/Kernels/MatDiffusion'
p18247
sa(dp18248
S'description'
p18249
g3
sS'type'
p18250
NsS'subblocks'
p18251
NsS'parameters'
p18252
(lp18253
(dp18254
S'description'
p18255
S'Name of temperature variable\n'
p18256
sS'cpp_type'
p18257
S'VariableName'
p18258
sS'default'
p18259
g3
sS'name'
p18260
S'T'
p18261
sS'required'
p18262
I00
sS'group_name'
p18263
Nsa(dp18264
S'description'
p18265
S'Name of coupled concentration variable\n'
p18266
sS'cpp_type'
p18267
S'VariableName'
p18268
sS'default'
p18269
S'NONE'
p18270
sS'name'
p18271
S'c'
p18272
sS'required'
p18273
I00
sS'group_name'
p18274
Nsa(dp18275
S'description'
p18276
S'specifies the number of grains to create\n'
p18277
sS'cpp_type'
p18278
S'unsigned int'
p18279
sS'default'
p18280
g3
sS'name'
p18281
S'crys_num'
p18282
sS'required'
p18283
I01
sS'group_name'
p18284
Nsa(dp18285
S'description'
p18286
S'Ratio of surface to GB energy\n'
p18287
sS'cpp_type'
p18288
S'double'
p18289
sS'default'
p18290
S'1'
p18291
sS'name'
p18292
S'en_ratio'
p18293
sS'required'
p18294
I00
sS'group_name'
p18295
Nsa(dp18296
S'description'
p18297
S'Whether kernels are implicit or not\n'
p18298
sS'cpp_type'
p18299
S'bool'
p18300
sS'default'
p18301
S'1'
p18302
sS'name'
p18303
S'implicit'
p18304
sS'required'
p18305
I00
sS'group_name'
p18306
Nsa(dp18307
S'description'
p18308
S'specifies the base name of the variables\n'
p18309
sS'cpp_type'
p18310
S'std::string'
p18311
sS'default'
p18312
g3
sS'name'
p18313
S'var_name_base'
p18314
sS'required'
p18315
I01
sS'group_name'
p18316
NsasS'name'
p18317
S'/Kernels/PolycrystalKernel'
p18318
sa(dp18319
S'description'
p18320
g3
sS'type'
p18321
NsS'subblocks'
p18322
NsS'parameters'
p18323
(lp18324
(dp18325
S'description'
p18326
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p18327
sS'cpp_type'
p18328
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p18329
sS'default'
p18330
g3
sS'name'
p18331
S'block'
p18332
sS'required'
p18333
I00
sS'group_name'
p18334
Nsa(dp18335
S'description'
p18336
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18337
sS'cpp_type'
p18338
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18339
sS'default'
p18340
g3
sS'name'
p18341
S'diag_save_in'
p18342
sS'required'
p18343
I00
sS'group_name'
p18344
S'Advanced'
p18345
sa(dp18346
S'description'
p18347
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18348
sS'cpp_type'
p18349
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18350
sS'default'
p18351
g3
sS'name'
p18352
S'save_in'
p18353
sS'required'
p18354
I00
sS'group_name'
p18355
S'Advanced'
p18356
sa(dp18357
S'description'
p18358
S'The seed for the master random number generator\n'
p18359
sS'cpp_type'
p18360
S'unsigned int'
p18361
sS'default'
p18362
S'0'
p18363
sS'name'
p18364
S'seed'
p18365
sS'required'
p18366
I00
sS'group_name'
p18367
S'Advanced'
p18368
sa(dp18369
S'description'
p18370
g3
sS'cpp_type'
p18371
S'std::string'
p18372
sS'default'
p18373
S'Reaction'
p18374
sS'name'
p18375
S'type'
p18376
sS'required'
p18377
I00
sS'group_name'
p18378
Nsa(dp18379
S'description'
p18380
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18381
sS'cpp_type'
p18382
S'bool'
p18383
sS'default'
p18384
S'0'
p18385
sS'name'
p18386
S'use_displaced_mesh'
p18387
sS'required'
p18388
I00
sS'group_name'
p18389
S'Advanced'
p18390
sa(dp18391
S'description'
p18392
S'The name of the variable that this Kernel operates on\n'
p18393
sS'cpp_type'
p18394
S'NonlinearVariableName'
p18395
sS'default'
p18396
g3
sS'name'
p18397
S'variable'
p18398
sS'required'
p18399
I01
sS'group_name'
p18400
NsasS'name'
p18401
S'/Kernels/Reaction'
p18402
sa(dp18403
S'description'
p18404
g3
sS'type'
p18405
NsS'subblocks'
p18406
NsS'parameters'
p18407
(lp18408
(dp18409
S'description'
p18410
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p18411
sS'cpp_type'
p18412
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p18413
sS'default'
p18414
g3
sS'name'
p18415
S'block'
p18416
sS'required'
p18417
I00
sS'group_name'
p18418
Nsa(dp18419
S'description'
p18420
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18421
sS'cpp_type'
p18422
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18423
sS'default'
p18424
g3
sS'name'
p18425
S'diag_save_in'
p18426
sS'required'
p18427
I00
sS'group_name'
p18428
S'Advanced'
p18429
sa(dp18430
S'description'
p18431
S'The Real material property you would like to output\n'
p18432
sS'cpp_type'
p18433
S'std::string'
p18434
sS'default'
p18435
g3
sS'name'
p18436
S'prop_name'
p18437
sS'required'
p18438
I01
sS'group_name'
p18439
Nsa(dp18440
S'description'
p18441
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18442
sS'cpp_type'
p18443
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18444
sS'default'
p18445
g3
sS'name'
p18446
S'save_in'
p18447
sS'required'
p18448
I00
sS'group_name'
p18449
S'Advanced'
p18450
sa(dp18451
S'description'
p18452
S'The seed for the master random number generator\n'
p18453
sS'cpp_type'
p18454
S'unsigned int'
p18455
sS'default'
p18456
S'0'
p18457
sS'name'
p18458
S'seed'
p18459
sS'required'
p18460
I00
sS'group_name'
p18461
S'Advanced'
p18462
sa(dp18463
S'description'
p18464
g3
sS'cpp_type'
p18465
S'std::string'
p18466
sS'default'
p18467
S'RealPropertyOutput'
p18468
sS'name'
p18469
S'type'
p18470
sS'required'
p18471
I00
sS'group_name'
p18472
Nsa(dp18473
S'description'
p18474
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18475
sS'cpp_type'
p18476
S'bool'
p18477
sS'default'
p18478
S'0'
p18479
sS'name'
p18480
S'use_displaced_mesh'
p18481
sS'required'
p18482
I00
sS'group_name'
p18483
S'Advanced'
p18484
sa(dp18485
S'description'
p18486
S'The name of the variable that this Kernel operates on\n'
p18487
sS'cpp_type'
p18488
S'NonlinearVariableName'
p18489
sS'default'
p18490
g3
sS'name'
p18491
S'variable'
p18492
sS'required'
p18493
I01
sS'group_name'
p18494
NsasS'name'
p18495
S'/Kernels/RealPropertyOutput'
p18496
sa(dp18497
S'description'
p18498
g3
sS'type'
p18499
NsS'subblocks'
p18500
NsS'parameters'
p18501
(lp18502
(dp18503
S'description'
p18504
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p18505
sS'cpp_type'
p18506
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p18507
sS'default'
p18508
g3
sS'name'
p18509
S'block'
p18510
sS'required'
p18511
I00
sS'group_name'
p18512
Nsa(dp18513
S'description'
p18514
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18515
sS'cpp_type'
p18516
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18517
sS'default'
p18518
g3
sS'name'
p18519
S'diag_save_in'
p18520
sS'required'
p18521
I00
sS'group_name'
p18522
S'Advanced'
p18523
sa(dp18524
S'description'
p18525
S'The kappa used with the kernel\n'
p18526
sS'cpp_type'
p18527
S'std::string'
p18528
sS'default'
p18529
g3
sS'name'
p18530
S'kappa_name'
p18531
sS'required'
p18532
I01
sS'group_name'
p18533
Nsa(dp18534
S'description'
p18535
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18536
sS'cpp_type'
p18537
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18538
sS'default'
p18539
g3
sS'name'
p18540
S'save_in'
p18541
sS'required'
p18542
I00
sS'group_name'
p18543
S'Advanced'
p18544
sa(dp18545
S'description'
p18546
S'The seed for the master random number generator\n'
p18547
sS'cpp_type'
p18548
S'unsigned int'
p18549
sS'default'
p18550
S'0'
p18551
sS'name'
p18552
S'seed'
p18553
sS'required'
p18554
I00
sS'group_name'
p18555
S'Advanced'
p18556
sa(dp18557
S'description'
p18558
g3
sS'cpp_type'
p18559
S'std::string'
p18560
sS'default'
p18561
S'SplitCHMath'
p18562
sS'name'
p18563
S'type'
p18564
sS'required'
p18565
I00
sS'group_name'
p18566
Nsa(dp18567
S'description'
p18568
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18569
sS'cpp_type'
p18570
S'bool'
p18571
sS'default'
p18572
S'0'
p18573
sS'name'
p18574
S'use_displaced_mesh'
p18575
sS'required'
p18576
I00
sS'group_name'
p18577
S'Advanced'
p18578
sa(dp18579
S'description'
p18580
S'The name of the variable that this Kernel operates on\n'
p18581
sS'cpp_type'
p18582
S'NonlinearVariableName'
p18583
sS'default'
p18584
g3
sS'name'
p18585
S'variable'
p18586
sS'required'
p18587
I01
sS'group_name'
p18588
Nsa(dp18589
S'description'
p18590
S'chem poten\n'
p18591
sS'cpp_type'
p18592
S'std::vector<VariableName>'
p18593
sS'default'
p18594
g3
sS'name'
p18595
S'w'
p18596
sS'required'
p18597
I01
sS'group_name'
p18598
NsasS'name'
p18599
S'/Kernels/SplitCHMath'
p18600
sa(dp18601
S'description'
p18602
g3
sS'type'
p18603
NsS'subblocks'
p18604
NsS'parameters'
p18605
(lp18606
(dp18607
S'description'
p18608
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p18609
sS'cpp_type'
p18610
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p18611
sS'default'
p18612
g3
sS'name'
p18613
S'block'
p18614
sS'required'
p18615
I00
sS'group_name'
p18616
Nsa(dp18617
S'description'
p18618
S'intermediate parameter--concentration\n'
p18619
sS'cpp_type'
p18620
S'std::vector<VariableName>'
p18621
sS'default'
p18622
g3
sS'name'
p18623
S'c'
p18624
sS'required'
p18625
I01
sS'group_name'
p18626
Nsa(dp18627
S'description'
p18628
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18629
sS'cpp_type'
p18630
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18631
sS'default'
p18632
g3
sS'name'
p18633
S'diag_save_in'
p18634
sS'required'
p18635
I00
sS'group_name'
p18636
S'Advanced'
p18637
sa(dp18638
S'description'
p18639
S'The mobility used with the kernel\n'
p18640
sS'cpp_type'
p18641
S'std::string'
p18642
sS'default'
p18643
S'mobtemp'
p18644
sS'name'
p18645
S'mob_name'
p18646
sS'required'
p18647
I00
sS'group_name'
p18648
Nsa(dp18649
S'description'
p18650
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18651
sS'cpp_type'
p18652
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18653
sS'default'
p18654
g3
sS'name'
p18655
S'save_in'
p18656
sS'required'
p18657
I00
sS'group_name'
p18658
S'Advanced'
p18659
sa(dp18660
S'description'
p18661
S'The seed for the master random number generator\n'
p18662
sS'cpp_type'
p18663
S'unsigned int'
p18664
sS'default'
p18665
S'0'
p18666
sS'name'
p18667
S'seed'
p18668
sS'required'
p18669
I00
sS'group_name'
p18670
S'Advanced'
p18671
sa(dp18672
S'description'
p18673
g3
sS'cpp_type'
p18674
S'std::string'
p18675
sS'default'
p18676
S'SplitCHWRes'
p18677
sS'name'
p18678
S'type'
p18679
sS'required'
p18680
I00
sS'group_name'
p18681
Nsa(dp18682
S'description'
p18683
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18684
sS'cpp_type'
p18685
S'bool'
p18686
sS'default'
p18687
S'0'
p18688
sS'name'
p18689
S'use_displaced_mesh'
p18690
sS'required'
p18691
I00
sS'group_name'
p18692
S'Advanced'
p18693
sa(dp18694
S'description'
p18695
S'The name of the variable that this Kernel operates on\n'
p18696
sS'cpp_type'
p18697
S'NonlinearVariableName'
p18698
sS'default'
p18699
g3
sS'name'
p18700
S'variable'
p18701
sS'required'
p18702
I01
sS'group_name'
p18703
NsasS'name'
p18704
S'/Kernels/SplitCHWRes'
p18705
sa(dp18706
S'description'
p18707
g3
sS'type'
p18708
NsS'subblocks'
p18709
NsS'parameters'
p18710
(lp18711
(dp18712
S'description'
p18713
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p18714
sS'cpp_type'
p18715
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p18716
sS'default'
p18717
g3
sS'name'
p18718
S'block'
p18719
sS'required'
p18720
I00
sS'group_name'
p18721
Nsa(dp18722
S'description'
p18723
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18724
sS'cpp_type'
p18725
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18726
sS'default'
p18727
g3
sS'name'
p18728
S'diag_save_in'
p18729
sS'required'
p18730
I00
sS'group_name'
p18731
S'Advanced'
p18732
sa(dp18733
S'description'
p18734
S'True for mass matrix lumping, false otherwise\n'
p18735
sS'cpp_type'
p18736
S'bool'
p18737
sS'default'
p18738
S'0'
p18739
sS'name'
p18740
S'lumping'
p18741
sS'required'
p18742
I00
sS'group_name'
p18743
Nsa(dp18744
S'description'
p18745
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18746
sS'cpp_type'
p18747
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18748
sS'default'
p18749
g3
sS'name'
p18750
S'save_in'
p18751
sS'required'
p18752
I00
sS'group_name'
p18753
S'Advanced'
p18754
sa(dp18755
S'description'
p18756
S'The seed for the master random number generator\n'
p18757
sS'cpp_type'
p18758
S'unsigned int'
p18759
sS'default'
p18760
S'0'
p18761
sS'name'
p18762
S'seed'
p18763
sS'required'
p18764
I00
sS'group_name'
p18765
S'Advanced'
p18766
sa(dp18767
S'description'
p18768
g3
sS'cpp_type'
p18769
S'std::string'
p18770
sS'default'
p18771
S'TimeDerivative'
p18772
sS'name'
p18773
S'type'
p18774
sS'required'
p18775
I00
sS'group_name'
p18776
Nsa(dp18777
S'description'
p18778
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18779
sS'cpp_type'
p18780
S'bool'
p18781
sS'default'
p18782
S'0'
p18783
sS'name'
p18784
S'use_displaced_mesh'
p18785
sS'required'
p18786
I00
sS'group_name'
p18787
S'Advanced'
p18788
sa(dp18789
S'description'
p18790
S'The name of the variable that this Kernel operates on\n'
p18791
sS'cpp_type'
p18792
S'NonlinearVariableName'
p18793
sS'default'
p18794
g3
sS'name'
p18795
S'variable'
p18796
sS'required'
p18797
I01
sS'group_name'
p18798
NsasS'name'
p18799
S'/Kernels/TimeDerivative'
p18800
sa(dp18801
S'description'
p18802
g3
sS'type'
p18803
NsS'subblocks'
p18804
NsS'parameters'
p18805
(lp18806
(dp18807
S'description'
p18808
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p18809
sS'cpp_type'
p18810
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p18811
sS'default'
p18812
g3
sS'name'
p18813
S'block'
p18814
sS'required'
p18815
I00
sS'group_name'
p18816
Nsa(dp18817
S'description'
p18818
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18819
sS'cpp_type'
p18820
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18821
sS'default'
p18822
g3
sS'name'
p18823
S'diag_save_in'
p18824
sS'required'
p18825
I00
sS'group_name'
p18826
S'Advanced'
p18827
sa(dp18828
S'description'
p18829
S'The forcing function\n'
p18830
sS'cpp_type'
p18831
S'FunctionName'
p18832
sS'default'
p18833
g3
sS'name'
p18834
S'function'
p18835
sS'required'
p18836
I01
sS'group_name'
p18837
Nsa(dp18838
S'description'
p18839
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18840
sS'cpp_type'
p18841
S'std::vector<AuxVariableName, std::allocator<AuxVariableName> >'
p18842
sS'default'
p18843
g3
sS'name'
p18844
S'save_in'
p18845
sS'required'
p18846
I00
sS'group_name'
p18847
S'Advanced'
p18848
sa(dp18849
S'description'
p18850
S'The seed for the master random number generator\n'
p18851
sS'cpp_type'
p18852
S'unsigned int'
p18853
sS'default'
p18854
S'0'
p18855
sS'name'
p18856
S'seed'
p18857
sS'required'
p18858
I00
sS'group_name'
p18859
S'Advanced'
p18860
sa(dp18861
S'description'
p18862
g3
sS'cpp_type'
p18863
S'std::string'
p18864
sS'default'
p18865
S'UserForcingFunction'
p18866
sS'name'
p18867
S'type'
p18868
sS'required'
p18869
I00
sS'group_name'
p18870
Nsa(dp18871
S'description'
p18872
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18873
sS'cpp_type'
p18874
S'bool'
p18875
sS'default'
p18876
S'0'
p18877
sS'name'
p18878
S'use_displaced_mesh'
p18879
sS'required'
p18880
I00
sS'group_name'
p18881
S'Advanced'
p18882
sa(dp18883
S'description'
p18884
S'The name of the variable that this Kernel operates on\n'
p18885
sS'cpp_type'
p18886
S'NonlinearVariableName'
p18887
sS'default'
p18888
g3
sS'name'
p18889
S'variable'
p18890
sS'required'
p18891
I01
sS'group_name'
p18892
NsasS'name'
p18893
S'/Kernels/UserForcingFunction'
p18894
sasS'parameters'
p18895
NsS'name'
p18896
S'/Kernels'
p18897
sa(dp18898
S'description'
p18899
g3
sS'type'
p18900
NsS'subblocks'
p18901
(lp18902
(dp18903
S'description'
p18904
g3
sS'type'
p18905
NsS'subblocks'
p18906
NsS'parameters'
p18907
(lp18908
(dp18909
S'description'
p18910
S'A string representing the Moose Object that will be built by this Action\n'
p18911
sS'cpp_type'
p18912
S'std::string'
p18913
sS'default'
p18914
g3
sS'name'
p18915
S'type'
p18916
sS'required'
p18917
I01
sS'group_name'
p18918
NsasS'name'
p18919
S'/Materials/*'
p18920
sa(dp18921
S'description'
p18922
g3
sS'type'
p18923
NsS'subblocks'
p18924
NsS'parameters'
p18925
(lp18926
(dp18927
S'description'
p18928
S'GB mobility input in m^4/(J*s), that overrides the temperature dependent calculation\n'
p18929
sS'cpp_type'
p18930
S'double'
p18931
sS'default'
p18932
S'-1'
p18933
sS'name'
p18934
S'GBMobility'
p18935
sS'required'
p18936
I00
sS'group_name'
p18937
Nsa(dp18938
S'description'
p18939
S'Grain boundary energy in J/m^2\n'
p18940
sS'cpp_type'
p18941
S'double'
p18942
sS'default'
p18943
g3
sS'name'
p18944
S'GBenergy'
p18945
sS'required'
p18946
I01
sS'group_name'
p18947
Nsa(dp18948
S'description'
p18949
S'Grain boundary mobility prefactor in m^4/(J*s)\n'
p18950
sS'cpp_type'
p18951
S'double'
p18952
sS'default'
p18953
S'0'
p18954
sS'name'
p18955
S'GBmob0'
p18956
sS'required'
p18957
I00
sS'group_name'
p18958
Nsa(dp18959
S'description'
p18960
S'Grain boundary migration activation energy in eV\n'
p18961
sS'cpp_type'
p18962
S'double'
p18963
sS'default'
p18964
S'0'
p18965
sS'name'
p18966
S'Q'
p18967
sS'required'
p18968
I00
sS'group_name'
p18969
Nsa(dp18970
S'description'
p18971
S'Temperature in Kelvin\n'
p18972
sS'cpp_type'
p18973
S'std::vector<VariableName>'
p18974
sS'default'
p18975
g3
sS'name'
p18976
S'T'
p18977
sS'required'
p18978
I00
sS'group_name'
p18979
Nsa(dp18980
S'description'
p18981
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p18982
sS'cpp_type'
p18983
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p18984
sS'default'
p18985
g3
sS'name'
p18986
S'block'
p18987
sS'required'
p18988
I00
sS'group_name'
p18989
Nsa(dp18990
S'description'
p18991
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p18992
sS'cpp_type'
p18993
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p18994
sS'default'
p18995
g3
sS'name'
p18996
S'boundary'
p18997
sS'required'
p18998
I00
sS'group_name'
p18999
Nsa(dp19000
S'description'
p19001
S'The GB energy constant \n'
p19002
sS'cpp_type'
p19003
S'double'
p19004
sS'default'
p19005
S'0.125'
p19006
sS'name'
p19007
S'f0s'
p19008
sS'required'
p19009
I00
sS'group_name'
p19010
Nsa(dp19011
S'description'
p19012
S'Length scale in m, where default is nm\n'
p19013
sS'cpp_type'
p19014
S'double'
p19015
sS'default'
p19016
S'1e-09'
p19017
sS'name'
p19018
S'length_scale'
p19019
sS'required'
p19020
I00
sS'group_name'
p19021
Nsa(dp19022
S'description'
p19023
S'Molar volume in m^3/mol, needed for temperature gradient driving force\n'
p19024
sS'cpp_type'
p19025
S'double'
p19026
sS'default'
p19027
S'2.462e-05'
p19028
sS'name'
p19029
S'molar_volume'
p19030
sS'required'
p19031
I00
sS'group_name'
p19032
Nsa(dp19033
S'description'
p19034
S'Constant temperature in Kelvin\n'
p19035
sS'cpp_type'
p19036
S'double'
p19037
sS'default'
p19038
S'300'
p19039
sS'name'
p19040
S'temp'
p19041
sS'required'
p19042
I00
sS'group_name'
p19043
Nsa(dp19044
S'description'
p19045
S'Time scale in s, where default is ns\n'
p19046
sS'cpp_type'
p19047
S'double'
p19048
sS'default'
p19049
S'1e-09'
p19050
sS'name'
p19051
S'time_scale'
p19052
sS'required'
p19053
I00
sS'group_name'
p19054
Nsa(dp19055
S'description'
p19056
g3
sS'cpp_type'
p19057
S'std::string'
p19058
sS'default'
p19059
S'GBEvolution'
p19060
sS'name'
p19061
S'type'
p19062
sS'required'
p19063
I00
sS'group_name'
p19064
Nsa(dp19065
S'description'
p19066
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19067
sS'cpp_type'
p19068
S'bool'
p19069
sS'default'
p19070
S'0'
p19071
sS'name'
p19072
S'use_displaced_mesh'
p19073
sS'required'
p19074
I00
sS'group_name'
p19075
S'Advanced'
p19076
sa(dp19077
S'description'
p19078
S'Diffuse GB width in nm \n'
p19079
sS'cpp_type'
p19080
S'double'
p19081
sS'default'
p19082
g3
sS'name'
p19083
S'wGB'
p19084
sS'required'
p19085
I01
sS'group_name'
p19086
NsasS'name'
p19087
S'/Materials/GBEvolution'
p19088
sa(dp19089
S'description'
p19090
g3
sS'type'
p19091
NsS'subblocks'
p19092
NsS'parameters'
p19093
(lp19094
(dp19095
S'description'
p19096
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p19097
sS'cpp_type'
p19098
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p19099
sS'default'
p19100
g3
sS'name'
p19101
S'block'
p19102
sS'required'
p19103
I00
sS'group_name'
p19104
Nsa(dp19105
S'description'
p19106
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p19107
sS'cpp_type'
p19108
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p19109
sS'default'
p19110
g3
sS'name'
p19111
S'boundary'
p19112
sS'required'
p19113
I00
sS'group_name'
p19114
Nsa(dp19115
S'description'
p19116
S'The names of the properties this material will have\n'
p19117
sS'cpp_type'
p19118
S'std::vector<std::string, std::allocator<std::string> >'
p19119
sS'default'
p19120
g3
sS'name'
p19121
S'prop_names'
p19122
sS'required'
p19123
I00
sS'group_name'
p19124
Nsa(dp19125
S'description'
p19126
S'The values associated with the named properties\n'
p19127
sS'cpp_type'
p19128
S'std::vector<double, std::allocator<double> >'
p19129
sS'default'
p19130
g3
sS'name'
p19131
S'prop_values'
p19132
sS'required'
p19133
I00
sS'group_name'
p19134
Nsa(dp19135
S'description'
p19136
g3
sS'cpp_type'
p19137
S'std::string'
p19138
sS'default'
p19139
S'GenericConstantMaterial'
p19140
sS'name'
p19141
S'type'
p19142
sS'required'
p19143
I00
sS'group_name'
p19144
Nsa(dp19145
S'description'
p19146
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19147
sS'cpp_type'
p19148
S'bool'
p19149
sS'default'
p19150
S'0'
p19151
sS'name'
p19152
S'use_displaced_mesh'
p19153
sS'required'
p19154
I00
sS'group_name'
p19155
S'Advanced'
p19156
sasS'name'
p19157
S'/Materials/GenericConstantMaterial'
p19158
sa(dp19159
S'description'
p19160
g3
sS'type'
p19161
NsS'subblocks'
p19162
NsS'parameters'
p19163
(lp19164
(dp19165
S'description'
p19166
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p19167
sS'cpp_type'
p19168
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p19169
sS'default'
p19170
g3
sS'name'
p19171
S'block'
p19172
sS'required'
p19173
I00
sS'group_name'
p19174
Nsa(dp19175
S'description'
p19176
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p19177
sS'cpp_type'
p19178
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p19179
sS'default'
p19180
g3
sS'name'
p19181
S'boundary'
p19182
sS'required'
p19183
I00
sS'group_name'
p19184
Nsa(dp19185
S'description'
p19186
S'The names of the properties this material will have\n'
p19187
sS'cpp_type'
p19188
S'std::vector<std::string, std::allocator<std::string> >'
p19189
sS'default'
p19190
g3
sS'name'
p19191
S'prop_names'
p19192
sS'required'
p19193
I00
sS'group_name'
p19194
Nsa(dp19195
S'description'
p19196
S'The corresponding names of the functions that are going to provide the values for the variables\n'
p19197
sS'cpp_type'
p19198
S'std::vector<FunctionName, std::allocator<FunctionName> >'
p19199
sS'default'
p19200
g3
sS'name'
p19201
S'prop_values'
p19202
sS'required'
p19203
I00
sS'group_name'
p19204
Nsa(dp19205
S'description'
p19206
g3
sS'cpp_type'
p19207
S'std::string'
p19208
sS'default'
p19209
S'GenericFunctionMaterial'
p19210
sS'name'
p19211
S'type'
p19212
sS'required'
p19213
I00
sS'group_name'
p19214
Nsa(dp19215
S'description'
p19216
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19217
sS'cpp_type'
p19218
S'bool'
p19219
sS'default'
p19220
S'0'
p19221
sS'name'
p19222
S'use_displaced_mesh'
p19223
sS'required'
p19224
I00
sS'group_name'
p19225
S'Advanced'
p19226
sasS'name'
p19227
S'/Materials/GenericFunctionMaterial'
p19228
sa(dp19229
S'description'
p19230
g3
sS'type'
p19231
NsS'subblocks'
p19232
NsS'parameters'
p19233
(lp19234
(dp19235
S'description'
p19236
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p19237
sS'cpp_type'
p19238
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p19239
sS'default'
p19240
g3
sS'name'
p19241
S'block'
p19242
sS'required'
p19243
I00
sS'group_name'
p19244
Nsa(dp19245
S'description'
p19246
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p19247
sS'cpp_type'
p19248
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p19249
sS'default'
p19250
g3
sS'name'
p19251
S'boundary'
p19252
sS'required'
p19253
I00
sS'group_name'
p19254
Nsa(dp19255
S'description'
p19256
S'The kappa parameter for the vacancy concentration\n'
p19257
sS'cpp_type'
p19258
S'double'
p19259
sS'default'
p19260
S'1'
p19261
sS'name'
p19262
S'kappa'
p19263
sS'required'
p19264
I00
sS'group_name'
p19265
Nsa(dp19266
S'description'
p19267
S'The mobility value\n'
p19268
sS'cpp_type'
p19269
S'double'
p19270
sS'default'
p19271
g3
sS'name'
p19272
S'mob'
p19273
sS'required'
p19274
I01
sS'group_name'
p19275
Nsa(dp19276
S'description'
p19277
g3
sS'cpp_type'
p19278
S'std::string'
p19279
sS'default'
p19280
S'PFMobility'
p19281
sS'name'
p19282
S'type'
p19283
sS'required'
p19284
I00
sS'group_name'
p19285
Nsa(dp19286
S'description'
p19287
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19288
sS'cpp_type'
p19289
S'bool'
p19290
sS'default'
p19291
S'0'
p19292
sS'name'
p19293
S'use_displaced_mesh'
p19294
sS'required'
p19295
I00
sS'group_name'
p19296
S'Advanced'
p19297
sasS'name'
p19298
S'/Materials/PFMobility'
p19299
sasS'parameters'
p19300
NsS'name'
p19301
S'/Materials'
p19302
sa(dp19303
S'description'
p19304
g3
sS'type'
p19305
NsS'subblocks'
p19306
(lp19307
(dp19308
S'description'
p19309
g3
sS'type'
p19310
NsS'subblocks'
p19311
(lp19312
(dp19313
S'description'
p19314
g3
sS'type'
p19315
NsS'subblocks'
p19316
NsS'parameters'
p19317
(lp19318
(dp19319
S'name'
p19320
S'centroid_partitioner_direction'
p19321
sS'cpp_type'
p19322
S'MooseEnum'
p19323
sS'default'
p19324
g3
sS'description'
p19325
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p19326
sS'required'
p19327
I00
sS'options'
p19328
S'x y z radial'
p19329
sS'group_name'
p19330
S'Partitioning'
p19331
sa(dp19332
S'name'
p19333
S'dim'
p19334
sS'cpp_type'
p19335
S'MooseEnum'
p19336
sS'default'
p19337
S'3'
p19338
sS'description'
p19339
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected.  In particular you must supply this for GMSH meshes.  Note: This is completely ignored for ExodusII meshes!\n'
p19340
sS'required'
p19341
I00
sS'options'
p19342
S'1 2 3'
p19343
sS'group_name'
p19344
S'Advanced'
p19345
sa(dp19346
S'name'
p19347
S'distribution'
p19348
sS'cpp_type'
p19349
S'MooseEnum'
p19350
sS'default'
p19351
S'DEFAULT'
p19352
sS'description'
p19353
S'PARALLEL: Always use libMesh::ParallelMesh SERIAL: Always use libMesh::SerialMesh DEFAULT: Use libMesh::SerialMesh unless --parallel-mesh is specified on the command line\n'
p19354
sS'required'
p19355
I00
sS'options'
p19356
S'PARALLEL SERIAL DEFAULT'
p19357
sS'group_name'
p19358
Nsa(dp19359
S'description'
p19360
S'The name of the mesh file to read\n'
p19361
sS'cpp_type'
p19362
S'MeshFileName'
p19363
sS'default'
p19364
g3
sS'name'
p19365
S'file'
p19366
sS'required'
p19367
I01
sS'group_name'
p19368
Nsa(dp19369
S'description'
p19370
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p19371
sS'cpp_type'
p19372
S'bool'
p19373
sS'default'
p19374
S'0'
p19375
sS'name'
p19376
S'nemesis'
p19377
sS'required'
p19378
I00
sS'group_name'
p19379
S'Advanced'
p19380
sa(dp19381
S'name'
p19382
S'partitioner'
p19383
sS'cpp_type'
p19384
S'MooseEnum'
p19385
sS'default'
p19386
S'default'
p19387
sS'description'
p19388
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p19389
sS'required'
p19390
I00
sS'options'
p19391
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p19392
sS'group_name'
p19393
S'Partitioning'
p19394
sa(dp19395
S'description'
p19396
S"If true the mesh won't be partitioned.  Probably not a good idea to use it with a serial mesh!\n"
p19397
sS'cpp_type'
p19398
S'bool'
p19399
sS'default'
p19400
S'0'
p19401
sS'name'
p19402
S'skip_partitioning'
p19403
sS'required'
p19404
I00
sS'group_name'
p19405
S'Partitioning'
p19406
sa(dp19407
S'description'
p19408
g3
sS'cpp_type'
p19409
S'std::string'
p19410
sS'default'
p19411
S'FileMesh'
p19412
sS'name'
p19413
S'type'
p19414
sS'required'
p19415
I00
sS'group_name'
p19416
NsasS'name'
p19417
S'/Mesh/<type>/FileMesh'
p19418
sa(dp19419
S'description'
p19420
g3
sS'type'
p19421
NsS'subblocks'
p19422
NsS'parameters'
p19423
(lp19424
(dp19425
S'name'
p19426
S'centroid_partitioner_direction'
p19427
sS'cpp_type'
p19428
S'MooseEnum'
p19429
sS'default'
p19430
g3
sS'description'
p19431
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p19432
sS'required'
p19433
I00
sS'options'
p19434
S'x y z radial'
p19435
sS'group_name'
p19436
S'Partitioning'
p19437
sa(dp19438
S'name'
p19439
S'dim'
p19440
sS'cpp_type'
p19441
S'MooseEnum'
p19442
sS'default'
p19443
g3
sS'description'
p19444
S'The dimension of the mesh to be generated\n'
p19445
sS'required'
p19446
I01
sS'options'
p19447
S'1 2 3'
p19448
sS'group_name'
p19449
S'Main'
p19450
sa(dp19451
S'name'
p19452
S'distribution'
p19453
sS'cpp_type'
p19454
S'MooseEnum'
p19455
sS'default'
p19456
S'DEFAULT'
p19457
sS'description'
p19458
S'PARALLEL: Always use libMesh::ParallelMesh SERIAL: Always use libMesh::SerialMesh DEFAULT: Use libMesh::SerialMesh unless --parallel-mesh is specified on the command line\n'
p19459
sS'required'
p19460
I00
sS'options'
p19461
S'PARALLEL SERIAL DEFAULT'
p19462
sS'group_name'
p19463
Nsa(dp19464
S'name'
p19465
S'elem_type'
p19466
sS'cpp_type'
p19467
S'MooseEnum'
p19468
sS'default'
p19469
g3
sS'description'
p19470
S'The type of element from libMesh to generate (default: linear element for requested dimension)\n'
p19471
sS'required'
p19472
I00
sS'options'
p19473
S'EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18'
p19474
sS'group_name'
p19475
Nsa(dp19476
S'description'
p19477
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p19478
sS'cpp_type'
p19479
S'bool'
p19480
sS'default'
p19481
S'0'
p19482
sS'name'
p19483
S'nemesis'
p19484
sS'required'
p19485
I00
sS'group_name'
p19486
S'Advanced'
p19487
sa(dp19488
S'description'
p19489
S'Number of elements in the X direction\n'
p19490
sS'cpp_type'
p19491
S'int'
p19492
sS'default'
p19493
S'1'
p19494
sS'name'
p19495
S'nx'
p19496
sS'required'
p19497
I00
sS'group_name'
p19498
Nsa(dp19499
S'description'
p19500
S'Number of elements in the Y direction\n'
p19501
sS'cpp_type'
p19502
S'int'
p19503
sS'default'
p19504
S'1'
p19505
sS'name'
p19506
S'ny'
p19507
sS'required'
p19508
I00
sS'group_name'
p19509
Nsa(dp19510
S'description'
p19511
S'Number of elements in the Z direction\n'
p19512
sS'cpp_type'
p19513
S'int'
p19514
sS'default'
p19515
S'1'
p19516
sS'name'
p19517
S'nz'
p19518
sS'required'
p19519
I00
sS'group_name'
p19520
Nsa(dp19521
S'name'
p19522
S'partitioner'
p19523
sS'cpp_type'
p19524
S'MooseEnum'
p19525
sS'default'
p19526
S'default'
p19527
sS'description'
p19528
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p19529
sS'required'
p19530
I00
sS'options'
p19531
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p19532
sS'group_name'
p19533
S'Partitioning'
p19534
sa(dp19535
S'description'
p19536
g3
sS'cpp_type'
p19537
S'std::string'
p19538
sS'default'
p19539
S'GeneratedMesh'
p19540
sS'name'
p19541
S'type'
p19542
sS'required'
p19543
I00
sS'group_name'
p19544
Nsa(dp19545
S'description'
p19546
S'Upper X Coordinate of the generated mesh\n'
p19547
sS'cpp_type'
p19548
S'double'
p19549
sS'default'
p19550
S'1'
p19551
sS'name'
p19552
S'xmax'
p19553
sS'required'
p19554
I00
sS'group_name'
p19555
Nsa(dp19556
S'description'
p19557
S'Lower X Coordinate of the generated mesh\n'
p19558
sS'cpp_type'
p19559
S'double'
p19560
sS'default'
p19561
S'0'
p19562
sS'name'
p19563
S'xmin'
p19564
sS'required'
p19565
I00
sS'group_name'
p19566
Nsa(dp19567
S'description'
p19568
S'Upper Y Coordinate of the generated mesh\n'
p19569
sS'cpp_type'
p19570
S'double'
p19571
sS'default'
p19572
S'1'
p19573
sS'name'
p19574
S'ymax'
p19575
sS'required'
p19576
I00
sS'group_name'
p19577
Nsa(dp19578
S'description'
p19579
S'Lower Y Coordinate of the generated mesh\n'
p19580
sS'cpp_type'
p19581
S'double'
p19582
sS'default'
p19583
S'0'
p19584
sS'name'
p19585
S'ymin'
p19586
sS'required'
p19587
I00
sS'group_name'
p19588
Nsa(dp19589
S'description'
p19590
S'Upper Z Coordinate of the generated mesh\n'
p19591
sS'cpp_type'
p19592
S'double'
p19593
sS'default'
p19594
S'1'
p19595
sS'name'
p19596
S'zmax'
p19597
sS'required'
p19598
I00
sS'group_name'
p19599
Nsa(dp19600
S'description'
p19601
S'Lower Z Coordinate of the generated mesh\n'
p19602
sS'cpp_type'
p19603
S'double'
p19604
sS'default'
p19605
S'0'
p19606
sS'name'
p19607
S'zmin'
p19608
sS'required'
p19609
I00
sS'group_name'
p19610
NsasS'name'
p19611
S'/Mesh/<type>/GeneratedMesh'
p19612
sa(dp19613
S'description'
p19614
g3
sS'type'
p19615
NsS'subblocks'
p19616
NsS'parameters'
p19617
(lp19618
(dp19619
S'description'
p19620
S'name of the back (z) boundary\n'
p19621
sS'cpp_type'
p19622
S'BoundaryName'
p19623
sS'default'
p19624
S'back_boundary'
p19625
sS'name'
p19626
S'back_boundary'
p19627
sS'required'
p19628
I00
sS'group_name'
p19629
Nsa(dp19630
S'description'
p19631
S'name of the bottom (y) boundary\n'
p19632
sS'cpp_type'
p19633
S'BoundaryName'
p19634
sS'default'
p19635
S'bottom_boundary'
p19636
sS'name'
p19637
S'bottom_boundary'
p19638
sS'required'
p19639
I00
sS'group_name'
p19640
Nsa(dp19641
S'name'
p19642
S'centroid_partitioner_direction'
p19643
sS'cpp_type'
p19644
S'MooseEnum'
p19645
sS'default'
p19646
g3
sS'description'
p19647
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p19648
sS'required'
p19649
I00
sS'options'
p19650
S'x y z radial'
p19651
sS'group_name'
p19652
S'Partitioning'
p19653
sa(dp19654
S'name'
p19655
S'dim'
p19656
sS'cpp_type'
p19657
S'MooseEnum'
p19658
sS'default'
p19659
S'3'
p19660
sS'description'
p19661
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected.  In particular you must supply this for GMSH meshes.  Note: This is completely ignored for ExodusII meshes!\n'
p19662
sS'required'
p19663
I00
sS'options'
p19664
S'1 2 3'
p19665
sS'group_name'
p19666
S'Advanced'
p19667
sa(dp19668
S'name'
p19669
S'distribution'
p19670
sS'cpp_type'
p19671
S'MooseEnum'
p19672
sS'default'
p19673
S'DEFAULT'
p19674
sS'description'
p19675
S'PARALLEL: Always use libMesh::ParallelMesh SERIAL: Always use libMesh::SerialMesh DEFAULT: Use libMesh::SerialMesh unless --parallel-mesh is specified on the command line\n'
p19676
sS'required'
p19677
I00
sS'options'
p19678
S'PARALLEL SERIAL DEFAULT'
p19679
sS'group_name'
p19680
Nsa(dp19681
S'description'
p19682
S'The name of the mesh file to read\n'
p19683
sS'cpp_type'
p19684
S'MeshFileName'
p19685
sS'default'
p19686
g3
sS'name'
p19687
S'file'
p19688
sS'required'
p19689
I01
sS'group_name'
p19690
Nsa(dp19691
S'description'
p19692
S'name of the front (z) boundary\n'
p19693
sS'cpp_type'
p19694
S'BoundaryName'
p19695
sS'default'
p19696
S'front_boundary'
p19697
sS'name'
p19698
S'front_boundary'
p19699
sS'required'
p19700
I00
sS'group_name'
p19701
Nsa(dp19702
S'description'
p19703
S'name of the left (x) boundary\n'
p19704
sS'cpp_type'
p19705
S'BoundaryName'
p19706
sS'default'
p19707
S'left_boundary'
p19708
sS'name'
p19709
S'left_boundary'
p19710
sS'required'
p19711
I00
sS'group_name'
p19712
Nsa(dp19713
S'description'
p19714
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p19715
sS'cpp_type'
p19716
S'bool'
p19717
sS'default'
p19718
S'0'
p19719
sS'name'
p19720
S'nemesis'
p19721
sS'required'
p19722
I00
sS'group_name'
p19723
S'Advanced'
p19724
sa(dp19725
S'name'
p19726
S'partitioner'
p19727
sS'cpp_type'
p19728
S'MooseEnum'
p19729
sS'default'
p19730
S'default'
p19731
sS'description'
p19732
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p19733
sS'required'
p19734
I00
sS'options'
p19735
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p19736
sS'group_name'
p19737
S'Partitioning'
p19738
sa(dp19739
S'description'
p19740
S'name of the right (x) boundary\n'
p19741
sS'cpp_type'
p19742
S'BoundaryName'
p19743
sS'default'
p19744
S'right_boundary'
p19745
sS'name'
p19746
S'right_boundary'
p19747
sS'required'
p19748
I00
sS'group_name'
p19749
Nsa(dp19750
S'description'
p19751
S'name of the top (y) boundary\n'
p19752
sS'cpp_type'
p19753
S'BoundaryName'
p19754
sS'default'
p19755
S'top_boundary'
p19756
sS'name'
p19757
S'top_boundary'
p19758
sS'required'
p19759
I00
sS'group_name'
p19760
Nsa(dp19761
S'description'
p19762
g3
sS'cpp_type'
p19763
S'std::string'
p19764
sS'default'
p19765
S'TiledMesh'
p19766
sS'name'
p19767
S'type'
p19768
sS'required'
p19769
I00
sS'group_name'
p19770
Nsa(dp19771
S'description'
p19772
S'Number of tiles to stitch together (left to right) in the x-direction\n'
p19773
sS'cpp_type'
p19774
S'unsigned int'
p19775
sS'default'
p19776
S'1'
p19777
sS'name'
p19778
S'x_tiles'
p19779
sS'required'
p19780
I00
sS'group_name'
p19781
Nsa(dp19782
S'description'
p19783
S'The tile width in the x direction\n'
p19784
sS'cpp_type'
p19785
S'double'
p19786
sS'default'
p19787
S'0'
p19788
sS'name'
p19789
S'x_width'
p19790
sS'required'
p19791
I00
sS'group_name'
p19792
Nsa(dp19793
S'description'
p19794
S'Number of tiles to stitch together (top to bottom) in the y-direction\n'
p19795
sS'cpp_type'
p19796
S'unsigned int'
p19797
sS'default'
p19798
S'1'
p19799
sS'name'
p19800
S'y_tiles'
p19801
sS'required'
p19802
I00
sS'group_name'
p19803
Nsa(dp19804
S'description'
p19805
S'The tile width in the y direction\n'
p19806
sS'cpp_type'
p19807
S'double'
p19808
sS'default'
p19809
S'0'
p19810
sS'name'
p19811
S'y_width'
p19812
sS'required'
p19813
I00
sS'group_name'
p19814
Nsa(dp19815
S'description'
p19816
S'Number of tiles to stitch together (front to back) in the z-direction\n'
p19817
sS'cpp_type'
p19818
S'unsigned int'
p19819
sS'default'
p19820
S'1'
p19821
sS'name'
p19822
S'z_tiles'
p19823
sS'required'
p19824
I00
sS'group_name'
p19825
Nsa(dp19826
S'description'
p19827
S'The tile width in the z direction\n'
p19828
sS'cpp_type'
p19829
S'double'
p19830
sS'default'
p19831
S'0'
p19832
sS'name'
p19833
S'z_width'
p19834
sS'required'
p19835
I00
sS'group_name'
p19836
NsasS'name'
p19837
S'/Mesh/<type>/TiledMesh'
p19838
sasS'parameters'
p19839
NsS'name'
p19840
S'/Mesh/<type>'
p19841
sa(dp19842
S'description'
p19843
g3
sS'type'
p19844
NsS'subblocks'
p19845
(lp19846
(dp19847
S'description'
p19848
g3
sS'type'
p19849
NsS'subblocks'
p19850
NsS'parameters'
p19851
(lp19852
(dp19853
S'description'
p19854
S'Master side ID\n'
p19855
sS'cpp_type'
p19856
S'BoundaryName'
p19857
sS'default'
p19858
g3
sS'name'
p19859
S'master'
p19860
sS'required'
p19861
I01
sS'group_name'
p19862
Nsa(dp19863
S'description'
p19864
S'Slave side ID\n'
p19865
sS'cpp_type'
p19866
S'BoundaryName'
p19867
sS'default'
p19868
g3
sS'name'
p19869
S'slave'
p19870
sS'required'
p19871
I01
sS'group_name'
p19872
Nsa(dp19873
S'description'
p19874
S'Subdomain name that is the mortar interface\n'
p19875
sS'cpp_type'
p19876
S'SubdomainName'
p19877
sS'default'
p19878
g3
sS'name'
p19879
S'subdomain'
p19880
sS'required'
p19881
I01
sS'group_name'
p19882
NsasS'name'
p19883
S'/Mesh/MortarInterfaces/*'
p19884
sasS'parameters'
p19885
NsS'name'
p19886
S'/Mesh/MortarInterfaces'
p19887
sasS'parameters'
p19888
(lp19889
(dp19890
S'description'
p19891
S'The variables corresponding to the x y z displacements of the mesh.  If this is provided then the displacements will be taken into account during the computation.\n'
p19892
sS'cpp_type'
p19893
S'std::vector<std::string, std::allocator<std::string> >'
p19894
sS'default'
p19895
g3
sS'name'
p19896
S'displacements'
p19897
sS'required'
p19898
I00
sS'group_name'
p19899
Nsa(dp19900
S'description'
p19901
S'IDs of the block id/name pairs\n'
p19902
sS'cpp_type'
p19903
S'std::vector<unsigned short, std::allocator<unsigned short> >'
p19904
sS'default'
p19905
g3
sS'name'
p19906
S'block_id'
p19907
sS'required'
p19908
I00
sS'group_name'
p19909
S'Add Names'
p19910
sa(dp19911
S'description'
p19912
S'Names of the block id/name pairs (must correspond with "block_id"\n'
p19913
sS'cpp_type'
p19914
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p19915
sS'default'
p19916
g3
sS'name'
p19917
S'block_name'
p19918
sS'required'
p19919
I00
sS'group_name'
p19920
S'Add Names'
p19921
sa(dp19922
S'description'
p19923
S'IDs of the boundary id/name pairs\n'
p19924
sS'cpp_type'
p19925
S'std::vector<short, std::allocator<short> >'
p19926
sS'default'
p19927
g3
sS'name'
p19928
S'boundary_id'
p19929
sS'required'
p19930
I00
sS'group_name'
p19931
S'Add Names'
p19932
sa(dp19933
S'description'
p19934
S'Names of the boundary id/name pairs (must correspond with "boundary_id"\n'
p19935
sS'cpp_type'
p19936
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p19937
sS'default'
p19938
g3
sS'name'
p19939
S'boundary_name'
p19940
sS'required'
p19941
I00
sS'group_name'
p19942
S'Add Names'
p19943
sa(dp19944
S'description'
p19945
S'If true, construct side lists from the nodesets in the mesh (i.e. if every node on a give side is in a nodeset then add that side to a sideset\n'
p19946
sS'cpp_type'
p19947
S'bool'
p19948
sS'default'
p19949
S'0'
p19950
sS'name'
p19951
S'construct_side_list_from_node_list'
p19952
sS'required'
p19953
I00
sS'group_name'
p19954
S'Advanced'
p19955
sa(dp19956
S'description'
p19957
S'Boundaries to be ghosted if using Nemesis\n'
p19958
sS'cpp_type'
p19959
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p19960
sS'default'
p19961
g3
sS'name'
p19962
S'ghosted_boundaries'
p19963
sS'required'
p19964
I00
sS'group_name'
p19965
S'Advanced'
p19966
sa(dp19967
S'description'
p19968
S"If you are using ghosted boundaries you will want to set this value to a vector of amounts to inflate the bounding boxes by.  ie if you are running a 3D problem you might set it to '0.2 0.1 0.4'\n"
p19969
sS'cpp_type'
p19970
S'std::vector<double, std::allocator<double> >'
p19971
sS'default'
p19972
g3
sS'name'
p19973
S'ghosted_boundaries_inflation'
p19974
sS'required'
p19975
I00
sS'group_name'
p19976
S'Advanced'
p19977
sa(dp19978
S'description'
p19979
S'The number of nodes to consider in the NearestNode neighborhood.\n'
p19980
sS'cpp_type'
p19981
S'unsigned int'
p19982
sS'default'
p19983
S'40'
p19984
sS'name'
p19985
S'patch_size'
p19986
sS'required'
p19987
I00
sS'group_name'
p19988
S'Advanced'
p19989
sa(dp19990
S'description'
p19991
S'Converts a first order mesh to a second order mesh.  Note: This is NOT needed if you are reading an actual first order mesh.\n'
p19992
sS'cpp_type'
p19993
S'bool'
p19994
sS'default'
p19995
S'0'
p19996
sS'name'
p19997
S'second_order'
p19998
sS'required'
p19999
I00
sS'group_name'
p20000
S'Advanced'
p20001
sa(dp20002
S'description'
p20003
S'A string representing the Moose Object that will be built by this Action\n'
p20004
sS'cpp_type'
p20005
S'std::string'
p20006
sS'default'
p20007
S'FileMesh'
p20008
sS'name'
p20009
S'type'
p20010
sS'required'
p20011
I01
sS'group_name'
p20012
Nsa(dp20013
S'description'
p20014
S'Specify the level of uniform refinement applied to the initial mesh\n'
p20015
sS'cpp_type'
p20016
S'unsigned int'
p20017
sS'default'
p20018
S'0'
p20019
sS'name'
p20020
S'uniform_refine'
p20021
sS'required'
p20022
I00
sS'group_name'
p20023
NsasS'name'
p20024
S'/Mesh'
p20025
sa(dp20026
S'description'
p20027
g3
sS'type'
p20028
NsS'subblocks'
p20029
(lp20030
(dp20031
S'description'
p20032
g3
sS'type'
p20033
NsS'subblocks'
p20034
NsS'parameters'
p20035
(lp20036
(dp20037
S'description'
p20038
S'A string representing the Moose Object that will be built by this Action\n'
p20039
sS'cpp_type'
p20040
S'std::string'
p20041
sS'default'
p20042
g3
sS'name'
p20043
S'type'
p20044
sS'required'
p20045
I01
sS'group_name'
p20046
NsasS'name'
p20047
S'/MeshModifiers/*'
p20048
sa(dp20049
S'description'
p20050
g3
sS'type'
p20051
NsS'subblocks'
p20052
NsS'parameters'
p20053
(lp20054
(dp20055
S'description'
p20056
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p20057
sS'cpp_type'
p20058
S'bool'
p20059
sS'default'
p20060
S'0'
p20061
sS'name'
p20062
S'fixed_normal'
p20063
sS'required'
p20064
I00
sS'group_name'
p20065
Nsa(dp20066
S'description'
p20067
g3
sS'cpp_type'
p20068
S'std::string'
p20069
sS'default'
p20070
S'AddAllSideSetsByNormals'
p20071
sS'name'
p20072
S'type'
p20073
sS'required'
p20074
I00
sS'group_name'
p20075
Nsa(dp20076
S'description'
p20077
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p20078
sS'cpp_type'
p20079
S'double'
p20080
sS'default'
p20081
S'0.1'
p20082
sS'name'
p20083
S'variance'
p20084
sS'required'
p20085
I00
sS'group_name'
p20086
NsasS'name'
p20087
S'/MeshModifiers/AddAllSideSetsByNormals'
p20088
sa(dp20089
S'description'
p20090
g3
sS'type'
p20091
NsS'subblocks'
p20092
NsS'parameters'
p20093
(lp20094
(dp20095
S'description'
p20096
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20097
sS'cpp_type'
p20098
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20099
sS'default'
p20100
g3
sS'name'
p20101
S'boundary'
p20102
sS'required'
p20103
I01
sS'group_name'
p20104
Nsa(dp20105
S'description'
p20106
S'The nodes with coordinates you want to be in the nodeset (Either this parameter or "nodes" must be supplied).\n'
p20107
sS'cpp_type'
p20108
S'std::vector<double, std::allocator<double> >'
p20109
sS'default'
p20110
g3
sS'name'
p20111
S'coord'
p20112
sS'required'
p20113
I00
sS'group_name'
p20114
Nsa(dp20115
S'description'
p20116
S'The nodes you want to be in the nodeset (Either this parameter or "coord" must be supplied).\n'
p20117
sS'cpp_type'
p20118
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p20119
sS'default'
p20120
g3
sS'name'
p20121
S'nodes'
p20122
sS'required'
p20123
I00
sS'group_name'
p20124
Nsa(dp20125
S'description'
p20126
S'The tolerance in which two nodes are considered identical\n'
p20127
sS'cpp_type'
p20128
S'double'
p20129
sS'default'
p20130
S'1e-06'
p20131
sS'name'
p20132
S'tolerance'
p20133
sS'required'
p20134
I00
sS'group_name'
p20135
Nsa(dp20136
S'description'
p20137
g3
sS'cpp_type'
p20138
S'std::string'
p20139
sS'default'
p20140
S'AddExtraNodeset'
p20141
sS'name'
p20142
S'type'
p20143
sS'required'
p20144
I00
sS'group_name'
p20145
NsasS'name'
p20146
S'/MeshModifiers/AddExtraNodeset'
p20147
sa(dp20148
S'description'
p20149
g3
sS'type'
p20150
NsS'subblocks'
p20151
NsS'parameters'
p20152
(lp20153
(dp20154
S'description'
p20155
S'The boundary that will be applied to the bottom of the extruded mesh\n'
p20156
sS'cpp_type'
p20157
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20158
sS'default'
p20159
g3
sS'name'
p20160
S'bottom_sideset'
p20161
sS'required'
p20162
I00
sS'group_name'
p20163
Nsa(dp20164
S'description'
p20165
S'The direction and length of the extrusion\n'
p20166
sS'cpp_type'
p20167
S'libMesh::VectorValue<double>'
p20168
sS'default'
p20169
g3
sS'name'
p20170
S'extrusion_vector'
p20171
sS'required'
p20172
I01
sS'group_name'
p20173
Nsa(dp20174
S'description'
p20175
S'The number of layers in the extruded mesh\n'
p20176
sS'cpp_type'
p20177
S'unsigned int'
p20178
sS'default'
p20179
g3
sS'name'
p20180
S'num_layers'
p20181
sS'required'
p20182
I01
sS'group_name'
p20183
Nsa(dp20184
S'description'
p20185
S'The boundary that will be to the top of the extruded mesh\n'
p20186
sS'cpp_type'
p20187
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20188
sS'default'
p20189
g3
sS'name'
p20190
S'top_sideset'
p20191
sS'required'
p20192
I00
sS'group_name'
p20193
Nsa(dp20194
S'description'
p20195
g3
sS'cpp_type'
p20196
S'std::string'
p20197
sS'default'
p20198
S'MeshExtruder'
p20199
sS'name'
p20200
S'type'
p20201
sS'required'
p20202
I00
sS'group_name'
p20203
NsasS'name'
p20204
S'/MeshModifiers/MeshExtruder'
p20205
sa(dp20206
S'description'
p20207
g3
sS'type'
p20208
NsS'subblocks'
p20209
NsS'parameters'
p20210
(lp20211
(dp20212
S'description'
p20213
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p20214
sS'cpp_type'
p20215
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p20216
sS'default'
p20217
g3
sS'name'
p20218
S'block'
p20219
sS'required'
p20220
I00
sS'group_name'
p20221
Nsa(dp20222
S'description'
p20223
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20224
sS'cpp_type'
p20225
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20226
sS'default'
p20227
g3
sS'name'
p20228
S'boundary'
p20229
sS'required'
p20230
I01
sS'group_name'
p20231
Nsa(dp20232
S'description'
p20233
g3
sS'cpp_type'
p20234
S'std::string'
p20235
sS'default'
p20236
S'SideSetsAroundSubdomain'
p20237
sS'name'
p20238
S'type'
p20239
sS'required'
p20240
I00
sS'group_name'
p20241
NsasS'name'
p20242
S'/MeshModifiers/SideSetsAroundSubdomain'
p20243
sa(dp20244
S'description'
p20245
g3
sS'type'
p20246
NsS'subblocks'
p20247
NsS'parameters'
p20248
(lp20249
(dp20250
S'description'
p20251
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20252
sS'cpp_type'
p20253
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20254
sS'default'
p20255
g3
sS'name'
p20256
S'boundary'
p20257
sS'required'
p20258
I01
sS'group_name'
p20259
Nsa(dp20260
S'description'
p20261
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p20262
sS'cpp_type'
p20263
S'bool'
p20264
sS'default'
p20265
S'0'
p20266
sS'name'
p20267
S'fixed_normal'
p20268
sS'required'
p20269
I00
sS'group_name'
p20270
Nsa(dp20271
S'description'
p20272
S'The first block for which to draw a sideset between\n'
p20273
sS'cpp_type'
p20274
S'SubdomainName'
p20275
sS'default'
p20276
g3
sS'name'
p20277
S'master_block'
p20278
sS'required'
p20279
I01
sS'group_name'
p20280
Nsa(dp20281
S'description'
p20282
S'The second block for which to draw a sideset between\n'
p20283
sS'cpp_type'
p20284
S'SubdomainName'
p20285
sS'default'
p20286
g3
sS'name'
p20287
S'paired_block'
p20288
sS'required'
p20289
I01
sS'group_name'
p20290
Nsa(dp20291
S'description'
p20292
g3
sS'cpp_type'
p20293
S'std::string'
p20294
sS'default'
p20295
S'SideSetsBetweenSubdomains'
p20296
sS'name'
p20297
S'type'
p20298
sS'required'
p20299
I00
sS'group_name'
p20300
Nsa(dp20301
S'description'
p20302
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p20303
sS'cpp_type'
p20304
S'double'
p20305
sS'default'
p20306
S'0.1'
p20307
sS'name'
p20308
S'variance'
p20309
sS'required'
p20310
I00
sS'group_name'
p20311
NsasS'name'
p20312
S'/MeshModifiers/SideSetsBetweenSubdomains'
p20313
sa(dp20314
S'description'
p20315
g3
sS'type'
p20316
NsS'subblocks'
p20317
NsS'parameters'
p20318
(lp20319
(dp20320
S'description'
p20321
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20322
sS'cpp_type'
p20323
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20324
sS'default'
p20325
g3
sS'name'
p20326
S'boundary'
p20327
sS'required'
p20328
I01
sS'group_name'
p20329
Nsa(dp20330
S'description'
p20331
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p20332
sS'cpp_type'
p20333
S'bool'
p20334
sS'default'
p20335
S'0'
p20336
sS'name'
p20337
S'fixed_normal'
p20338
sS'required'
p20339
I00
sS'group_name'
p20340
Nsa(dp20341
S'description'
p20342
S'A list of normals for which to start painting sidesets\n'
p20343
sS'cpp_type'
p20344
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p20345
sS'default'
p20346
g3
sS'name'
p20347
S'normals'
p20348
sS'required'
p20349
I01
sS'group_name'
p20350
Nsa(dp20351
S'description'
p20352
g3
sS'cpp_type'
p20353
S'std::string'
p20354
sS'default'
p20355
S'SideSetsFromNormals'
p20356
sS'name'
p20357
S'type'
p20358
sS'required'
p20359
I00
sS'group_name'
p20360
Nsa(dp20361
S'description'
p20362
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p20363
sS'cpp_type'
p20364
S'double'
p20365
sS'default'
p20366
S'0.1'
p20367
sS'name'
p20368
S'variance'
p20369
sS'required'
p20370
I00
sS'group_name'
p20371
NsasS'name'
p20372
S'/MeshModifiers/SideSetsFromNormals'
p20373
sa(dp20374
S'description'
p20375
g3
sS'type'
p20376
NsS'subblocks'
p20377
NsS'parameters'
p20378
(lp20379
(dp20380
S'description'
p20381
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20382
sS'cpp_type'
p20383
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20384
sS'default'
p20385
g3
sS'name'
p20386
S'boundary'
p20387
sS'required'
p20388
I01
sS'group_name'
p20389
Nsa(dp20390
S'description'
p20391
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p20392
sS'cpp_type'
p20393
S'bool'
p20394
sS'default'
p20395
S'0'
p20396
sS'name'
p20397
S'fixed_normal'
p20398
sS'required'
p20399
I00
sS'group_name'
p20400
Nsa(dp20401
S'description'
p20402
S'A list of points from which to start painting sidesets\n'
p20403
sS'cpp_type'
p20404
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p20405
sS'default'
p20406
g3
sS'name'
p20407
S'points'
p20408
sS'required'
p20409
I01
sS'group_name'
p20410
Nsa(dp20411
S'description'
p20412
g3
sS'cpp_type'
p20413
S'std::string'
p20414
sS'default'
p20415
S'SideSetsFromPoints'
p20416
sS'name'
p20417
S'type'
p20418
sS'required'
p20419
I00
sS'group_name'
p20420
Nsa(dp20421
S'description'
p20422
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p20423
sS'cpp_type'
p20424
S'double'
p20425
sS'default'
p20426
S'0.1'
p20427
sS'name'
p20428
S'variance'
p20429
sS'required'
p20430
I00
sS'group_name'
p20431
NsasS'name'
p20432
S'/MeshModifiers/SideSetsFromPoints'
p20433
sa(dp20434
S'description'
p20435
g3
sS'type'
p20436
NsS'subblocks'
p20437
NsS'parameters'
p20438
(lp20439
(dp20440
S'name'
p20441
S'transform'
p20442
sS'cpp_type'
p20443
S'MooseEnum'
p20444
sS'default'
p20445
g3
sS'description'
p20446
S'The type of transformation to perform (TRANSLATE, ROTATE, SCALE)\n'
p20447
sS'required'
p20448
I01
sS'options'
p20449
S'TRANSLATE ROTATE SCALE'
p20450
sS'group_name'
p20451
Nsa(dp20452
S'description'
p20453
g3
sS'cpp_type'
p20454
S'std::string'
p20455
sS'default'
p20456
S'Transform'
p20457
sS'name'
p20458
S'type'
p20459
sS'required'
p20460
I00
sS'group_name'
p20461
Nsa(dp20462
S'description'
p20463
S'The value to use for the transformation. When using TRANSLATE or SCALE, the xyz coordinates are applied in each direction respectively. When using ROTATE, the coordinates are interpreted as phi, theta and psi.\n'
p20464
sS'cpp_type'
p20465
S'libMesh::VectorValue<double>'
p20466
sS'default'
p20467
g3
sS'name'
p20468
S'vector_value'
p20469
sS'required'
p20470
I01
sS'group_name'
p20471
NsasS'name'
p20472
S'/MeshModifiers/Transform'
p20473
sasS'parameters'
p20474
NsS'name'
p20475
S'/MeshModifiers'
p20476
sa(dp20477
S'description'
p20478
g3
sS'type'
p20479
NsS'subblocks'
p20480
(lp20481
(dp20482
S'description'
p20483
g3
sS'type'
p20484
NsS'subblocks'
p20485
NsS'parameters'
p20486
(lp20487
(dp20488
S'description'
p20489
S'A string representing the Moose Object that will be built by this Action\n'
p20490
sS'cpp_type'
p20491
S'std::string'
p20492
sS'default'
p20493
g3
sS'name'
p20494
S'type'
p20495
sS'required'
p20496
I01
sS'group_name'
p20497
NsasS'name'
p20498
S'/MultiApps/*'
p20499
sa(dp20500
S'description'
p20501
g3
sS'type'
p20502
NsS'subblocks'
p20503
NsS'parameters'
p20504
(lp20505
(dp20506
S'name'
p20507
S'app_type'
p20508
sS'cpp_type'
p20509
S'MooseEnum'
p20510
sS'default'
p20511
g3
sS'description'
p20512
S'The type of application to build.\n'
p20513
sS'required'
p20514
I01
sS'options'
p20515
S'OtterApp'
p20516
sS'group_name'
p20517
Nsa(dp20518
S'description'
p20519
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p20520
sS'cpp_type'
p20521
S'double'
p20522
sS'default'
p20523
S'0.01'
p20524
sS'name'
p20525
S'bounding_box_inflation'
p20526
sS'required'
p20527
I00
sS'group_name'
p20528
Nsa(dp20529
S'name'
p20530
S'execute_on'
p20531
sS'cpp_type'
p20532
S'MooseEnum'
p20533
sS'default'
p20534
S'timestep_begin'
p20535
sS'description'
p20536
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p20537
sS'required'
p20538
I00
sS'options'
p20539
S'initial residual jacobian timestep timestep_begin custom'
p20540
sS'group_name'
p20541
Nsa(dp20542
S'description'
p20543
S'The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.\n'
p20544
sS'cpp_type'
p20545
S'std::vector<std::string, std::allocator<std::string> >'
p20546
sS'default'
p20547
g3
sS'name'
p20548
S'input_files'
p20549
sS'required'
p20550
I01
sS'group_name'
p20551
Nsa(dp20552
S'description'
p20553
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p20554
sS'cpp_type'
p20555
S'unsigned int'
p20556
sS'default'
p20557
S'4294967295'
p20558
sS'name'
p20559
S'max_procs_per_app'
p20560
sS'required'
p20561
I00
sS'group_name'
p20562
Nsa(dp20563
S'description'
p20564
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p20565
sS'cpp_type'
p20566
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p20567
sS'default'
p20568
g3
sS'name'
p20569
S'move_apps'
p20570
sS'required'
p20571
I00
sS'group_name'
p20572
Nsa(dp20573
S'description'
p20574
S'The positions corresponding to each move_app.\n'
p20575
sS'cpp_type'
p20576
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p20577
sS'default'
p20578
g3
sS'name'
p20579
S'move_positions'
p20580
sS'required'
p20581
I00
sS'group_name'
p20582
Nsa(dp20583
S'description'
p20584
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p20585
sS'cpp_type'
p20586
S'double'
p20587
sS'default'
p20588
S'1.79769e+308'
p20589
sS'name'
p20590
S'move_time'
p20591
sS'required'
p20592
I00
sS'group_name'
p20593
Nsa(dp20594
S'description'
p20595
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p20596
sS'cpp_type'
p20597
S'bool'
p20598
sS'default'
p20599
S'0'
p20600
sS'name'
p20601
S'output_in_position'
p20602
sS'required'
p20603
I00
sS'group_name'
p20604
Nsa(dp20605
S'description'
p20606
S"The positions of the App locations.  Each set of 3 values will represent a Point.  Either this must be supplied or 'positions_file'\n"
p20607
sS'cpp_type'
p20608
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p20609
sS'default'
p20610
g3
sS'name'
p20611
S'positions'
p20612
sS'required'
p20613
I00
sS'group_name'
p20614
Nsa(dp20615
S'description'
p20616
S"A filename that should be looked in for positions. Each set of 3 values in that file will represent a Point.  Either this must be supplied or 'positions'\n"
p20617
sS'cpp_type'
p20618
S'FileName'
p20619
sS'default'
p20620
g3
sS'name'
p20621
S'positions_file'
p20622
sS'required'
p20623
I00
sS'group_name'
p20624
Nsa(dp20625
S'description'
p20626
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Reseting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p20627
sS'cpp_type'
p20628
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p20629
sS'default'
p20630
g3
sS'name'
p20631
S'reset_apps'
p20632
sS'required'
p20633
I00
sS'group_name'
p20634
Nsa(dp20635
S'description'
p20636
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Reseting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p20637
sS'cpp_type'
p20638
S'double'
p20639
sS'default'
p20640
S'1.79769e+308'
p20641
sS'name'
p20642
S'reset_time'
p20643
sS'required'
p20644
I00
sS'group_name'
p20645
Nsa(dp20646
S'description'
p20647
g3
sS'cpp_type'
p20648
S'std::string'
p20649
sS'default'
p20650
S'FullSolveMultiApp'
p20651
sS'name'
p20652
S'type'
p20653
sS'required'
p20654
I00
sS'group_name'
p20655
Nsa(dp20656
S'description'
p20657
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20658
sS'cpp_type'
p20659
S'bool'
p20660
sS'default'
p20661
S'0'
p20662
sS'name'
p20663
S'use_displaced_mesh'
p20664
sS'required'
p20665
I00
sS'group_name'
p20666
S'Advanced'
p20667
sasS'name'
p20668
S'/MultiApps/FullSolveMultiApp'
p20669
sa(dp20670
S'description'
p20671
g3
sS'type'
p20672
NsS'subblocks'
p20673
NsS'parameters'
p20674
(lp20675
(dp20676
S'name'
p20677
S'app_type'
p20678
sS'cpp_type'
p20679
S'MooseEnum'
p20680
sS'default'
p20681
g3
sS'description'
p20682
S'The type of application to build.\n'
p20683
sS'required'
p20684
I01
sS'options'
p20685
S'OtterApp'
p20686
sS'group_name'
p20687
Nsa(dp20688
S'description'
p20689
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p20690
sS'cpp_type'
p20691
S'double'
p20692
sS'default'
p20693
S'0.01'
p20694
sS'name'
p20695
S'bounding_box_inflation'
p20696
sS'required'
p20697
I00
sS'group_name'
p20698
Nsa(dp20699
S'description'
p20700
S"If true this will allow failed solves to attempt to 'catch up' using smaller timesteps.\n"
p20701
sS'cpp_type'
p20702
S'bool'
p20703
sS'default'
p20704
S'0'
p20705
sS'name'
p20706
S'catch_up'
p20707
sS'required'
p20708
I00
sS'group_name'
p20709
Nsa(dp20710
S'description'
p20711
S'If true then while sub_cycling a steady state check will be done.  In this mode output will only be done once the MultiApp reaches the target time or steady state is reached\n'
p20712
sS'cpp_type'
p20713
S'bool'
p20714
sS'default'
p20715
S'0'
p20716
sS'name'
p20717
S'detect_steady_state'
p20718
sS'required'
p20719
I00
sS'group_name'
p20720
Nsa(dp20721
S'name'
p20722
S'execute_on'
p20723
sS'cpp_type'
p20724
S'MooseEnum'
p20725
sS'default'
p20726
S'timestep_begin'
p20727
sS'description'
p20728
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p20729
sS'required'
p20730
I00
sS'options'
p20731
S'initial residual jacobian timestep timestep_begin custom'
p20732
sS'group_name'
p20733
Nsa(dp20734
S'description'
p20735
S'The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.\n'
p20736
sS'cpp_type'
p20737
S'std::vector<std::string, std::allocator<std::string> >'
p20738
sS'default'
p20739
g3
sS'name'
p20740
S'input_files'
p20741
sS'required'
p20742
I01
sS'group_name'
p20743
Nsa(dp20744
S'description'
p20745
S'Only valid when sub_cycling.  This allows transferred values to be interpolated over the time frame the MultiApp is executing over when sub_cycling\n'
p20746
sS'cpp_type'
p20747
S'bool'
p20748
sS'default'
p20749
S'0'
p20750
sS'name'
p20751
S'interpolate_transfers'
p20752
sS'required'
p20753
I00
sS'group_name'
p20754
Nsa(dp20755
S'description'
p20756
S'Maximum number of steps to allow an app to take when trying to catch back up after a failed solve.\n'
p20757
sS'cpp_type'
p20758
S'double'
p20759
sS'default'
p20760
S'2'
p20761
sS'name'
p20762
S'max_catch_up_steps'
p20763
sS'required'
p20764
I00
sS'group_name'
p20765
Nsa(dp20766
S'description'
p20767
S'Maximum number of solve failures tolerated while sub_cycling.\n'
p20768
sS'cpp_type'
p20769
S'unsigned int'
p20770
sS'default'
p20771
S'0'
p20772
sS'name'
p20773
S'max_failures'
p20774
sS'required'
p20775
I00
sS'group_name'
p20776
Nsa(dp20777
S'description'
p20778
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p20779
sS'cpp_type'
p20780
S'unsigned int'
p20781
sS'default'
p20782
S'4294967295'
p20783
sS'name'
p20784
S'max_procs_per_app'
p20785
sS'required'
p20786
I00
sS'group_name'
p20787
Nsa(dp20788
S'description'
p20789
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p20790
sS'cpp_type'
p20791
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p20792
sS'default'
p20793
g3
sS'name'
p20794
S'move_apps'
p20795
sS'required'
p20796
I00
sS'group_name'
p20797
Nsa(dp20798
S'description'
p20799
S'The positions corresponding to each move_app.\n'
p20800
sS'cpp_type'
p20801
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p20802
sS'default'
p20803
g3
sS'name'
p20804
S'move_positions'
p20805
sS'required'
p20806
I00
sS'group_name'
p20807
Nsa(dp20808
S'description'
p20809
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p20810
sS'cpp_type'
p20811
S'double'
p20812
sS'default'
p20813
S'1.79769e+308'
p20814
sS'name'
p20815
S'move_time'
p20816
sS'required'
p20817
I00
sS'group_name'
p20818
Nsa(dp20819
S'description'
p20820
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p20821
sS'cpp_type'
p20822
S'bool'
p20823
sS'default'
p20824
S'0'
p20825
sS'name'
p20826
S'output_in_position'
p20827
sS'required'
p20828
I00
sS'group_name'
p20829
Nsa(dp20830
S'description'
p20831
S'If true when sub_cycling every sub-cycle will be output.\n'
p20832
sS'cpp_type'
p20833
S'bool'
p20834
sS'default'
p20835
S'0'
p20836
sS'name'
p20837
S'output_sub_cycles'
p20838
sS'required'
p20839
I00
sS'group_name'
p20840
Nsa(dp20841
S'description'
p20842
S"The positions of the App locations.  Each set of 3 values will represent a Point.  Either this must be supplied or 'positions_file'\n"
p20843
sS'cpp_type'
p20844
S'std::vector<libMesh::Point, std::allocator<libMesh::Point> >'
p20845
sS'default'
p20846
g3
sS'name'
p20847
S'positions'
p20848
sS'required'
p20849
I00
sS'group_name'
p20850
Nsa(dp20851
S'description'
p20852
S"A filename that should be looked in for positions. Each set of 3 values in that file will represent a Point.  Either this must be supplied or 'positions'\n"
p20853
sS'cpp_type'
p20854
S'FileName'
p20855
sS'default'
p20856
g3
sS'name'
p20857
S'positions_file'
p20858
sS'required'
p20859
I00
sS'group_name'
p20860
Nsa(dp20861
S'description'
p20862
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Reseting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p20863
sS'cpp_type'
p20864
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p20865
sS'default'
p20866
g3
sS'name'
p20867
S'reset_apps'
p20868
sS'required'
p20869
I00
sS'group_name'
p20870
Nsa(dp20871
S'description'
p20872
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Reseting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p20873
sS'cpp_type'
p20874
S'double'
p20875
sS'default'
p20876
S'1.79769e+308'
p20877
sS'name'
p20878
S'reset_time'
p20879
sS'required'
p20880
I00
sS'group_name'
p20881
Nsa(dp20882
S'description'
p20883
S'The relative difference between the new solution and the old solution that will be considered to be at steady state\n'
p20884
sS'cpp_type'
p20885
S'double'
p20886
sS'default'
p20887
S'1e-08'
p20888
sS'name'
p20889
S'steady_state_tol'
p20890
sS'required'
p20891
I00
sS'group_name'
p20892
Nsa(dp20893
S'description'
p20894
S"Set to true to allow this MultiApp to take smaller timesteps than the rest of the simulation.  More than one timestep will be performed for each 'master' timestep\n"
p20895
sS'cpp_type'
p20896
S'bool'
p20897
sS'default'
p20898
S'0'
p20899
sS'name'
p20900
S'sub_cycling'
p20901
sS'required'
p20902
I00
sS'group_name'
p20903
Nsa(dp20904
S'description'
p20905
S"If true this MultiApp won't participate in dt decisions and will always be fast-forwarded to the current time.\n"
p20906
sS'cpp_type'
p20907
S'bool'
p20908
sS'default'
p20909
S'0'
p20910
sS'name'
p20911
S'tolerate_failure'
p20912
sS'required'
p20913
I00
sS'group_name'
p20914
Nsa(dp20915
S'description'
p20916
g3
sS'cpp_type'
p20917
S'std::string'
p20918
sS'default'
p20919
S'TransientMultiApp'
p20920
sS'name'
p20921
S'type'
p20922
sS'required'
p20923
I00
sS'group_name'
p20924
Nsa(dp20925
S'description'
p20926
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20927
sS'cpp_type'
p20928
S'bool'
p20929
sS'default'
p20930
S'0'
p20931
sS'name'
p20932
S'use_displaced_mesh'
p20933
sS'required'
p20934
I00
sS'group_name'
p20935
S'Advanced'
p20936
sasS'name'
p20937
S'/MultiApps/TransientMultiApp'
p20938
sasS'parameters'
p20939
NsS'name'
p20940
S'/MultiApps'
p20941
sa(dp20942
S'description'
p20943
g3
sS'type'
p20944
NsS'subblocks'
p20945
NsS'parameters'
p20946
(lp20947
(dp20948
S'description'
p20949
S'The boundary ID or name where the normals will be computed\n'
p20950
sS'cpp_type'
p20951
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p20952
sS'default'
p20953
S'ANY_BOUNDARY_ID'
p20954
sS'name'
p20955
S'boundary'
p20956
sS'required'
p20957
I00
sS'group_name'
p20958
Nsa(dp20959
S'description'
p20960
S"boundary ID or name with nodes at 'corners'\n"
p20961
sS'cpp_type'
p20962
S'BoundaryName'
p20963
sS'default'
p20964
g3
sS'name'
p20965
S'corner_boundary'
p20966
sS'required'
p20967
I00
sS'group_name'
p20968
Nsa(dp20969
S'name'
p20970
S'order'
p20971
sS'cpp_type'
p20972
S'MooseEnum'
p20973
sS'default'
p20974
S'FIRST'
p20975
sS'description'
p20976
S'Specifies the order of variables that hold the nodal normals. Needs to match the order of the mesh\n'
p20977
sS'required'
p20978
I00
sS'options'
p20979
S'FIRST SECOND'
p20980
sS'group_name'
p20981
NsasS'name'
p20982
S'/NodalNormals'
p20983
sa(dp20984
S'description'
p20985
g3
sS'type'
p20986
NsS'subblocks'
p20987
(lp20988
(dp20989
S'description'
p20990
g3
sS'type'
p20991
NsS'subblocks'
p20992
NsS'parameters'
p20993
(lp20994
(dp20995
S'description'
p20996
S'A string representing the Moose Object that will be built by this Action\n'
p20997
sS'cpp_type'
p20998
S'std::string'
p20999
sS'default'
p21000
g3
sS'name'
p21001
S'type'
p21002
sS'required'
p21003
I01
sS'group_name'
p21004
NsasS'name'
p21005
S'/Outputs/*'
p21006
sa(dp21007
S'description'
p21008
g3
sS'type'
p21009
NsS'subblocks'
p21010
NsS'parameters'
p21011
(lp21012
(dp21013
S'description'
p21014
S"Append '_displaced' to the output file base\n"
p21015
sS'cpp_type'
p21016
S'bool'
p21017
sS'default'
p21018
S'0'
p21019
sS'name'
p21020
S'append_displaced'
p21021
sS'required'
p21022
I00
sS'group_name'
p21023
S'Displaced'
p21024
sa(dp21025
S'description'
p21026
S'Time at which this outputter ends\n'
p21027
sS'cpp_type'
p21028
S'double'
p21029
sS'default'
p21030
g3
sS'name'
p21031
S'end_time'
p21032
sS'required'
p21033
I00
sS'group_name'
p21034
S'Timing'
p21035
sa(dp21036
S'description'
p21037
S"The desired solution output name without an extension (Defaults appends '_out' to the input file name)\n"
p21038
sS'cpp_type'
p21039
S'std::string'
p21040
sS'default'
p21041
g3
sS'name'
p21042
S'file_base'
p21043
sS'required'
p21044
I00
sS'group_name'
p21045
Nsa(dp21046
S'description'
p21047
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p21048
sS'cpp_type'
p21049
S'std::vector<VariableName, std::allocator<VariableName> >'
p21050
sS'default'
p21051
g3
sS'name'
p21052
S'hide'
p21053
sS'required'
p21054
I00
sS'group_name'
p21055
S'Variables'
p21056
sa(dp21057
S'description'
p21058
S'The interval at which time steps are output to the solution file\n'
p21059
sS'cpp_type'
p21060
S'unsigned int'
p21061
sS'default'
p21062
g3
sS'name'
p21063
S'interval'
p21064
sS'required'
p21065
I00
sS'group_name'
p21066
S'Timing'
p21067
sa(dp21068
S'description'
p21069
S'Number of divisions applied to time step when outtputting linear residuals\n'
p21070
sS'cpp_type'
p21071
S'double'
p21072
sS'default'
p21073
S'1000'
p21074
sS'name'
p21075
S'linear_residual_dt_divisor'
p21076
sS'required'
p21077
I00
sS'group_name'
p21078
S'PETSc'
p21079
sa(dp21080
S'description'
p21081
S'Specifies an end time to begin output on each linear residual evaluation\n'
p21082
sS'cpp_type'
p21083
S'double'
p21084
sS'default'
p21085
g3
sS'name'
p21086
S'linear_residual_end_time'
p21087
sS'required'
p21088
I00
sS'group_name'
p21089
S'PETSc'
p21090
sa(dp21091
S'description'
p21092
S'Specifies a start time to begin output on each linear residual evaluation\n'
p21093
sS'cpp_type'
p21094
S'double'
p21095
sS'default'
p21096
g3
sS'name'
p21097
S'linear_residual_start_time'
p21098
sS'required'
p21099
I00
sS'group_name'
p21100
S'PETSc'
p21101
sa(dp21102
S'description'
p21103
S'Specifies whether output occurs on each linear residual evaluation\n'
p21104
sS'cpp_type'
p21105
S'bool'
p21106
sS'default'
p21107
S'0'
p21108
sS'name'
p21109
S'linear_residuals'
p21110
sS'required'
p21111
I00
sS'group_name'
p21112
S'PETSc'
p21113
sa(dp21114
S'description'
p21115
S'Number of divisions applied to time step when outtputting non-linear residuals\n'
p21116
sS'cpp_type'
p21117
S'double'
p21118
sS'default'
p21119
S'1000'
p21120
sS'name'
p21121
S'nonlinear_residual_dt_divisor'
p21122
sS'required'
p21123
I00
sS'group_name'
p21124
S'PETSc'
p21125
sa(dp21126
S'description'
p21127
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p21128
sS'cpp_type'
p21129
S'double'
p21130
sS'default'
p21131
g3
sS'name'
p21132
S'nonlinear_residual_end_time'
p21133
sS'required'
p21134
I00
sS'group_name'
p21135
S'PETSc'
p21136
sa(dp21137
S'description'
p21138
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p21139
sS'cpp_type'
p21140
S'double'
p21141
sS'default'
p21142
g3
sS'name'
p21143
S'nonlinear_residual_start_time'
p21144
sS'required'
p21145
I00
sS'group_name'
p21146
S'PETSc'
p21147
sa(dp21148
S'description'
p21149
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p21150
sS'cpp_type'
p21151
S'bool'
p21152
sS'default'
p21153
S'0'
p21154
sS'name'
p21155
S'nonlinear_residuals'
p21156
sS'required'
p21157
I00
sS'group_name'
p21158
S'PETSc'
p21159
sa(dp21160
S'description'
p21161
S'When true all time attempted time steps are output\n'
p21162
sS'cpp_type'
p21163
S'bool'
p21164
sS'default'
p21165
S'0'
p21166
sS'name'
p21167
S'output_failed'
p21168
sS'required'
p21169
I00
sS'group_name'
p21170
Nsa(dp21171
S'description'
p21172
S'Force the final time step to be output, regardless of output interval\n'
p21173
sS'cpp_type'
p21174
S'bool'
p21175
sS'default'
p21176
g3
sS'name'
p21177
S'output_final'
p21178
sS'required'
p21179
I00
sS'group_name'
p21180
S'Timing'
p21181
sa(dp21182
S'description'
p21183
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputing only a subset of outputs when using MultiApps.\n'
p21184
sS'cpp_type'
p21185
S'std::vector<std::string, std::allocator<std::string> >'
p21186
sS'default'
p21187
g3
sS'name'
p21188
S'output_if_base_contains'
p21189
sS'required'
p21190
I00
sS'group_name'
p21191
S'Advanced'
p21192
sa(dp21193
S'description'
p21194
S'Request that the initial condition is output to the solution file\n'
p21195
sS'cpp_type'
p21196
S'bool'
p21197
sS'default'
p21198
g3
sS'name'
p21199
S'output_initial'
p21200
sS'required'
p21201
I00
sS'group_name'
p21202
S'Timing'
p21203
sa(dp21204
S'description'
p21205
S'Request that all intermediate steps (not initial or final) are output\n'
p21206
sS'cpp_type'
p21207
S'bool'
p21208
sS'default'
p21209
g3
sS'name'
p21210
S'output_intermediate'
p21211
sS'required'
p21212
I00
sS'group_name'
p21213
Nsa(dp21214
S'description'
p21215
S'Enable/disable the output of postprocessors\n'
p21216
sS'cpp_type'
p21217
S'bool'
p21218
sS'default'
p21219
S'1'
p21220
sS'name'
p21221
S'output_postprocessors'
p21222
sS'required'
p21223
I00
sS'group_name'
p21224
S'Variables'
p21225
sa(dp21226
S'description'
p21227
S'Enable/disable the output of aux scalar variables\n'
p21228
sS'cpp_type'
p21229
S'bool'
p21230
sS'default'
p21231
S'1'
p21232
sS'name'
p21233
S'output_scalar_variables'
p21234
sS'required'
p21235
I00
sS'group_name'
p21236
S'Variables'
p21237
sa(dp21238
S'description'
p21239
S'Toggles the display of the system information prior to the solve\n'
p21240
sS'cpp_type'
p21241
S'bool'
p21242
sS'default'
p21243
S'1'
p21244
sS'name'
p21245
S'output_system_information'
p21246
sS'required'
p21247
I00
sS'group_name'
p21248
Nsa(dp21249
S'description'
p21250
S"Enable/disable sequential file output (enable by default when 'use_displace = true', otherwise defaults to false\n"
p21251
sS'cpp_type'
p21252
S'bool'
p21253
sS'default'
p21254
g3
sS'name'
p21255
S'sequence'
p21256
sS'required'
p21257
I00
sS'group_name'
p21258
Nsa(dp21259
S'description'
p21260
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p21261
sS'cpp_type'
p21262
S'std::vector<VariableName, std::allocator<VariableName> >'
p21263
sS'default'
p21264
g3
sS'name'
p21265
S'show'
p21266
sS'required'
p21267
I00
sS'group_name'
p21268
S'Variables'
p21269
sa(dp21270
S'description'
p21271
S'Time at which this outputter begins\n'
p21272
sS'cpp_type'
p21273
S'double'
p21274
sS'default'
p21275
g3
sS'name'
p21276
S'start_time'
p21277
sS'required'
p21278
I00
sS'group_name'
p21279
S'Timing'
p21280
sa(dp21281
S'description'
p21282
S'Only export results at sync times\n'
p21283
sS'cpp_type'
p21284
S'bool'
p21285
sS'default'
p21286
S'0'
p21287
sS'name'
p21288
S'sync_only'
p21289
sS'required'
p21290
I00
sS'group_name'
p21291
S'Timing'
p21292
sa(dp21293
S'description'
p21294
S'Times at which the output and solution is forced to occur\n'
p21295
sS'cpp_type'
p21296
S'std::vector<double, std::allocator<double> >'
p21297
sS'default'
p21298
g3
sS'name'
p21299
S'sync_times'
p21300
sS'required'
p21301
I00
sS'group_name'
p21302
S'Timing'
p21303
sa(dp21304
S'description'
p21305
S'Time tolerance utilized checking start and end times\n'
p21306
sS'cpp_type'
p21307
S'double'
p21308
sS'default'
p21309
S'1e-14'
p21310
sS'name'
p21311
S'time_tolerance'
p21312
sS'required'
p21313
I00
sS'group_name'
p21314
S'Timing'
p21315
sa(dp21316
S'description'
p21317
g3
sS'cpp_type'
p21318
S'std::string'
p21319
sS'default'
p21320
S'CSV'
p21321
sS'name'
p21322
S'type'
p21323
sS'required'
p21324
I00
sS'group_name'
p21325
Nsa(dp21326
S'description'
p21327
S'Enable/disable the use of the displaced mesh for outputting\n'
p21328
sS'cpp_type'
p21329
S'bool'
p21330
sS'default'
p21331
S'0'
p21332
sS'name'
p21333
S'use_displaced'
p21334
sS'required'
p21335
I00
sS'group_name'
p21336
NsasS'name'
p21337
S'/Outputs/CSV'
p21338
sa(dp21339
S'description'
p21340
g3
sS'type'
p21341
NsS'subblocks'
p21342
NsS'parameters'
p21343
(lp21344
(dp21345
S'description'
p21346
S"Append '_displaced' to the output file base\n"
p21347
sS'cpp_type'
p21348
S'bool'
p21349
sS'default'
p21350
S'0'
p21351
sS'name'
p21352
S'append_displaced'
p21353
sS'required'
p21354
I00
sS'group_name'
p21355
S'Displaced'
p21356
sa(dp21357
S'description'
p21358
S'Toggle the output of binary files\n'
p21359
sS'cpp_type'
p21360
S'bool'
p21361
sS'default'
p21362
S'1'
p21363
sS'name'
p21364
S'binary'
p21365
sS'required'
p21366
I00
sS'group_name'
p21367
S'Advanced'
p21368
sa(dp21369
S'description'
p21370
S'Output elemental nonlinear variables as nodal\n'
p21371
sS'cpp_type'
p21372
S'bool'
p21373
sS'default'
p21374
S'0'
p21375
sS'name'
p21376
S'elemental_as_nodal'
p21377
sS'required'
p21378
I00
sS'group_name'
p21379
S'Variables'
p21380
sa(dp21381
S'description'
p21382
S'Time at which this outputter ends\n'
p21383
sS'cpp_type'
p21384
S'double'
p21385
sS'default'
p21386
g3
sS'name'
p21387
S'end_time'
p21388
sS'required'
p21389
I00
sS'group_name'
p21390
S'Timing'
p21391
sa(dp21392
S'description'
p21393
S"The desired solution output name without an extension (Defaults appends '_out' to the input file name)\n"
p21394
sS'cpp_type'
p21395
S'std::string'
p21396
sS'default'
p21397
g3
sS'name'
p21398
S'file_base'
p21399
sS'required'
p21400
I00
sS'group_name'
p21401
Nsa(dp21402
S'description'
p21403
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p21404
sS'cpp_type'
p21405
S'std::vector<VariableName, std::allocator<VariableName> >'
p21406
sS'default'
p21407
g3
sS'name'
p21408
S'hide'
p21409
sS'required'
p21410
I00
sS'group_name'
p21411
S'Variables'
p21412
sa(dp21413
S'description'
p21414
S'The interval at which time steps are output to the solution file\n'
p21415
sS'cpp_type'
p21416
S'unsigned int'
p21417
sS'default'
p21418
g3
sS'name'
p21419
S'interval'
p21420
sS'required'
p21421
I00
sS'group_name'
p21422
S'Timing'
p21423
sa(dp21424
S'description'
p21425
S'Number of the restart files to save\n'
p21426
sS'cpp_type'
p21427
S'unsigned int'
p21428
sS'default'
p21429
S'2'
p21430
sS'name'
p21431
S'num_files'
p21432
sS'required'
p21433
I00
sS'group_name'
p21434
Nsa(dp21435
S'description'
p21436
S'When true all time attempted time steps are output\n'
p21437
sS'cpp_type'
p21438
S'bool'
p21439
sS'default'
p21440
S'0'
p21441
sS'name'
p21442
S'output_failed'
p21443
sS'required'
p21444
I00
sS'group_name'
p21445
Nsa(dp21446
S'description'
p21447
S'Force the final time step to be output, regardless of output interval\n'
p21448
sS'cpp_type'
p21449
S'bool'
p21450
sS'default'
p21451
g3
sS'name'
p21452
S'output_final'
p21453
sS'required'
p21454
I00
sS'group_name'
p21455
S'Timing'
p21456
sa(dp21457
S'description'
p21458
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputing only a subset of outputs when using MultiApps.\n'
p21459
sS'cpp_type'
p21460
S'std::vector<std::string, std::allocator<std::string> >'
p21461
sS'default'
p21462
g3
sS'name'
p21463
S'output_if_base_contains'
p21464
sS'required'
p21465
I00
sS'group_name'
p21466
S'Advanced'
p21467
sa(dp21468
S'description'
p21469
S'Request that the initial condition is output to the solution file\n'
p21470
sS'cpp_type'
p21471
S'bool'
p21472
sS'default'
p21473
g3
sS'name'
p21474
S'output_initial'
p21475
sS'required'
p21476
I00
sS'group_name'
p21477
S'Timing'
p21478
sa(dp21479
S'description'
p21480
S'Output the input file\n'
p21481
sS'cpp_type'
p21482
S'bool'
p21483
sS'default'
p21484
S'0'
p21485
sS'name'
p21486
S'output_input'
p21487
sS'required'
p21488
I00
sS'group_name'
p21489
Nsa(dp21490
S'description'
p21491
S'Request that all intermediate steps (not initial or final) are output\n'
p21492
sS'cpp_type'
p21493
S'bool'
p21494
sS'default'
p21495
g3
sS'name'
p21496
S'output_intermediate'
p21497
sS'required'
p21498
I00
sS'group_name'
p21499
Nsa(dp21500
S'description'
p21501
S'Toggles the display of the system information prior to the solve\n'
p21502
sS'cpp_type'
p21503
S'bool'
p21504
sS'default'
p21505
S'1'
p21506
sS'name'
p21507
S'output_system_information'
p21508
sS'required'
p21509
I00
sS'group_name'
p21510
Nsa(dp21511
S'description'
p21512
S'The number of for extension suffix (e.g., out.e-s002)\n'
p21513
sS'cpp_type'
p21514
S'unsigned int'
p21515
sS'default'
p21516
S'4'
p21517
sS'name'
p21518
S'padding'
p21519
sS'required'
p21520
I00
sS'group_name'
p21521
S'Advanced'
p21522
sa(dp21523
S'description'
p21524
S'Output scalar variables as nodal\n'
p21525
sS'cpp_type'
p21526
S'bool'
p21527
sS'default'
p21528
S'0'
p21529
sS'name'
p21530
S'scalar_as_nodal'
p21531
sS'required'
p21532
I00
sS'group_name'
p21533
S'Variables'
p21534
sa(dp21535
S'description'
p21536
S"Enable/disable sequential file output (enable by default when 'use_displace = true', otherwise defaults to false\n"
p21537
sS'cpp_type'
p21538
S'bool'
p21539
sS'default'
p21540
g3
sS'name'
p21541
S'sequence'
p21542
sS'required'
p21543
I00
sS'group_name'
p21544
Nsa(dp21545
S'description'
p21546
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p21547
sS'cpp_type'
p21548
S'std::vector<VariableName, std::allocator<VariableName> >'
p21549
sS'default'
p21550
g3
sS'name'
p21551
S'show'
p21552
sS'required'
p21553
I00
sS'group_name'
p21554
S'Variables'
p21555
sa(dp21556
S'description'
p21557
S'Time at which this outputter begins\n'
p21558
sS'cpp_type'
p21559
S'double'
p21560
sS'default'
p21561
g3
sS'name'
p21562
S'start_time'
p21563
sS'required'
p21564
I00
sS'group_name'
p21565
S'Timing'
p21566
sa(dp21567
S'description'
p21568
S'This will be appended to the file_base to create the directory name for checkpoint files.\n'
p21569
sS'cpp_type'
p21570
S'std::string'
p21571
sS'default'
p21572
S'cp'
p21573
sS'name'
p21574
S'suffix'
p21575
sS'required'
p21576
I00
sS'group_name'
p21577
Nsa(dp21578
S'description'
p21579
S'Only export results at sync times\n'
p21580
sS'cpp_type'
p21581
S'bool'
p21582
sS'default'
p21583
S'0'
p21584
sS'name'
p21585
S'sync_only'
p21586
sS'required'
p21587
I00
sS'group_name'
p21588
S'Timing'
p21589
sa(dp21590
S'description'
p21591
S'Times at which the output and solution is forced to occur\n'
p21592
sS'cpp_type'
p21593
S'std::vector<double, std::allocator<double> >'
p21594
sS'default'
p21595
g3
sS'name'
p21596
S'sync_times'
p21597
sS'required'
p21598
I00
sS'group_name'
p21599
S'Timing'
p21600
sa(dp21601
S'description'
p21602
S'Time tolerance utilized checking start and end times\n'
p21603
sS'cpp_type'
p21604
S'double'
p21605
sS'default'
p21606
S'1e-14'
p21607
sS'name'
p21608
S'time_tolerance'
p21609
sS'required'
p21610
I00
sS'group_name'
p21611
S'Timing'
p21612
sa(dp21613
S'description'
p21614
g3
sS'cpp_type'
p21615
S'std::string'
p21616
sS'default'
p21617
S'Checkpoint'
p21618
sS'name'
p21619
S'type'
p21620
sS'required'
p21621
I00
sS'group_name'
p21622
Nsa(dp21623
S'description'
p21624
S'Enable/disable the use of the displaced mesh for outputting\n'
p21625
sS'cpp_type'
p21626
S'bool'
p21627
sS'default'
p21628
S'0'
p21629
sS'name'
p21630
S'use_displaced'
p21631
sS'required'
p21632
I00
sS'group_name'
p21633
NsasS'name'
p21634
S'/Outputs/Checkpoint'
p21635
sa(dp21636
S'description'
p21637
g3
sS'type'
p21638
NsS'subblocks'
p21639
NsS'parameters'
p21640
(lp21641
(dp21642
S'description'
p21643
S'If true, all variable norms will be printed after each solve\n'
p21644
sS'cpp_type'
p21645
S'bool'
p21646
sS'default'
p21647
S'0'
p21648
sS'name'
p21649
S'all_variable_norms'
p21650
sS'required'
p21651
I00
sS'group_name'
p21652
S'Norms'
p21653
sa(dp21654
S'description'
p21655
S"Append '_displaced' to the output file base\n"
p21656
sS'cpp_type'
p21657
S'bool'
p21658
sS'default'
p21659
S'0'
p21660
sS'name'
p21661
S'append_displaced'
p21662
sS'required'
p21663
I00
sS'group_name'
p21664
S'Displaced'
p21665
sa(dp21666
S'description'
p21667
S'Time at which this outputter ends\n'
p21668
sS'cpp_type'
p21669
S'double'
p21670
sS'default'
p21671
g3
sS'name'
p21672
S'end_time'
p21673
sS'required'
p21674
I00
sS'group_name'
p21675
S'Timing'
p21676
sa(dp21677
S'description'
p21678
S"The desired solution output name without an extension (Defaults appends '_out' to the input file name)\n"
p21679
sS'cpp_type'
p21680
S'std::string'
p21681
sS'default'
p21682
g3
sS'name'
p21683
S'file_base'
p21684
sS'required'
p21685
I00
sS'group_name'
p21686
Nsa(dp21687
S'name'
p21688
S'fit_mode'
p21689
sS'cpp_type'
p21690
S'MooseEnum'
p21691
sS'default'
p21692
S'ENVIRONMENT'
p21693
sS'description'
p21694
S'Specifies the wrapping mode for post-processor tables that are printed to the screen (ENVIRONMENT: Read "MOOSE_PPS_WIDTH" for desired width, AUTO: Attempt to determine width automatically (serial only), <n>: Desired width\n'
p21695
sS'required'
p21696
I00
sS'options'
p21697
S'ENVIRONMENT AUTO 80 120 160'
p21698
sS'group_name'
p21699
Nsa(dp21700
S'description'
p21701
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p21702
sS'cpp_type'
p21703
S'std::vector<VariableName, std::allocator<VariableName> >'
p21704
sS'default'
p21705
g3
sS'name'
p21706
S'hide'
p21707
sS'required'
p21708
I00
sS'group_name'
p21709
S'Variables'
p21710
sa(dp21711
S'description'
p21712
S'The interval at which time steps are output to the solution file\n'
p21713
sS'cpp_type'
p21714
S'unsigned int'
p21715
sS'default'
p21716
g3
sS'name'
p21717
S'interval'
p21718
sS'required'
p21719
I00
sS'group_name'
p21720
S'Timing'
p21721
sa(dp21722
S'description'
p21723
S'Number of divisions applied to time step when outtputting linear residuals\n'
p21724
sS'cpp_type'
p21725
S'double'
p21726
sS'default'
p21727
S'1000'
p21728
sS'name'
p21729
S'linear_residual_dt_divisor'
p21730
sS'required'
p21731
I00
sS'group_name'
p21732
S'PETSc'
p21733
sa(dp21734
S'description'
p21735
S'Specifies an end time to begin output on each linear residual evaluation\n'
p21736
sS'cpp_type'
p21737
S'double'
p21738
sS'default'
p21739
g3
sS'name'
p21740
S'linear_residual_end_time'
p21741
sS'required'
p21742
I00
sS'group_name'
p21743
S'PETSc'
p21744
sa(dp21745
S'description'
p21746
S'Specifies a start time to begin output on each linear residual evaluation\n'
p21747
sS'cpp_type'
p21748
S'double'
p21749
sS'default'
p21750
g3
sS'name'
p21751
S'linear_residual_start_time'
p21752
sS'required'
p21753
I00
sS'group_name'
p21754
S'PETSc'
p21755
sa(dp21756
S'description'
p21757
S'Specifies whether output occurs on each linear residual evaluation\n'
p21758
sS'cpp_type'
p21759
S'bool'
p21760
sS'default'
p21761
S'0'
p21762
sS'name'
p21763
S'linear_residuals'
p21764
sS'required'
p21765
I00
sS'group_name'
p21766
S'PETSc'
p21767
sa(dp21768
S'description'
p21769
S'The maximum number of postprocessor/scalar values displayed on screen during a timestep (set to 0 for unlimited)\n'
p21770
sS'cpp_type'
p21771
S'unsigned int'
p21772
sS'default'
p21773
S'15'
p21774
sS'name'
p21775
S'max_rows'
p21776
sS'required'
p21777
I00
sS'group_name'
p21778
S'Advanced'
p21779
sa(dp21780
S'description'
p21781
S'Number of divisions applied to time step when outtputting non-linear residuals\n'
p21782
sS'cpp_type'
p21783
S'double'
p21784
sS'default'
p21785
S'1000'
p21786
sS'name'
p21787
S'nonlinear_residual_dt_divisor'
p21788
sS'required'
p21789
I00
sS'group_name'
p21790
S'PETSc'
p21791
sa(dp21792
S'description'
p21793
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p21794
sS'cpp_type'
p21795
S'double'
p21796
sS'default'
p21797
g3
sS'name'
p21798
S'nonlinear_residual_end_time'
p21799
sS'required'
p21800
I00
sS'group_name'
p21801
S'PETSc'
p21802
sa(dp21803
S'description'
p21804
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p21805
sS'cpp_type'
p21806
S'double'
p21807
sS'default'
p21808
g3
sS'name'
p21809
S'nonlinear_residual_start_time'
p21810
sS'required'
p21811
I00
sS'group_name'
p21812
S'PETSc'
p21813
sa(dp21814
S'description'
p21815
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p21816
sS'cpp_type'
p21817
S'bool'
p21818
sS'default'
p21819
S'1'
p21820
sS'name'
p21821
S'nonlinear_residuals'
p21822
sS'required'
p21823
I00
sS'group_name'
p21824
S'PETSc'
p21825
sa(dp21826
S'description'
p21827
S'Multiplier utilized to determine if a residual norm is an outlier. If the variable residual is less than multiplier[0] times the total residual it is colored red. If the variable residual is less than multiplier[1] times the average residual it is colored yellow.\n'
p21828
sS'cpp_type'
p21829
S'std::vector<double, std::allocator<double> >'
p21830
sS'default'
p21831
S'0.8 2'
p21832
sS'name'
p21833
S'outlier_multiplier'
p21834
sS'required'
p21835
I00
sS'group_name'
p21836
S'Norms'
p21837
sa(dp21838
S'description'
p21839
S'If true, outlier variable norms will be printed after each solve\n'
p21840
sS'cpp_type'
p21841
S'bool'
p21842
sS'default'
p21843
S'1'
p21844
sS'name'
p21845
S'outlier_variable_norms'
p21846
sS'required'
p21847
I00
sS'group_name'
p21848
S'Norms'
p21849
sa(dp21850
S'description'
p21851
S'When true all time attempted time steps are output\n'
p21852
sS'cpp_type'
p21853
S'bool'
p21854
sS'default'
p21855
S'1'
p21856
sS'name'
p21857
S'output_failed'
p21858
sS'required'
p21859
I00
sS'group_name'
p21860
Nsa(dp21861
S'description'
p21862
S'Output to the file\n'
p21863
sS'cpp_type'
p21864
S'bool'
p21865
sS'default'
p21866
S'0'
p21867
sS'name'
p21868
S'output_file'
p21869
sS'required'
p21870
I00
sS'group_name'
p21871
Nsa(dp21872
S'description'
p21873
S'Force the final time step to be output, regardless of output interval\n'
p21874
sS'cpp_type'
p21875
S'bool'
p21876
sS'default'
p21877
g3
sS'name'
p21878
S'output_final'
p21879
sS'required'
p21880
I00
sS'group_name'
p21881
S'Timing'
p21882
sa(dp21883
S'description'
p21884
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputing only a subset of outputs when using MultiApps.\n'
p21885
sS'cpp_type'
p21886
S'std::vector<std::string, std::allocator<std::string> >'
p21887
sS'default'
p21888
g3
sS'name'
p21889
S'output_if_base_contains'
p21890
sS'required'
p21891
I00
sS'group_name'
p21892
S'Advanced'
p21893
sa(dp21894
S'description'
p21895
S'Request that the initial condition is output to the solution file\n'
p21896
sS'cpp_type'
p21897
S'bool'
p21898
sS'default'
p21899
g3
sS'name'
p21900
S'output_initial'
p21901
sS'required'
p21902
I00
sS'group_name'
p21903
S'Timing'
p21904
sa(dp21905
S'description'
p21906
S'Request that all intermediate steps (not initial or final) are output\n'
p21907
sS'cpp_type'
p21908
S'bool'
p21909
sS'default'
p21910
g3
sS'name'
p21911
S'output_intermediate'
p21912
sS'required'
p21913
I00
sS'group_name'
p21914
Nsa(dp21915
S'description'
p21916
S'Enable/disable the output of postprocessors\n'
p21917
sS'cpp_type'
p21918
S'bool'
p21919
sS'default'
p21920
S'1'
p21921
sS'name'
p21922
S'output_postprocessors'
p21923
sS'required'
p21924
I00
sS'group_name'
p21925
S'Variables'
p21926
sa(dp21927
S'description'
p21928
S'Enable/disable the output of aux scalar variables\n'
p21929
sS'cpp_type'
p21930
S'bool'
p21931
sS'default'
p21932
S'1'
p21933
sS'name'
p21934
S'output_scalar_variables'
p21935
sS'required'
p21936
I00
sS'group_name'
p21937
S'Variables'
p21938
sa(dp21939
S'description'
p21940
S'Output to the screen\n'
p21941
sS'cpp_type'
p21942
S'bool'
p21943
sS'default'
p21944
S'1'
p21945
sS'name'
p21946
S'output_screen'
p21947
sS'required'
p21948
I00
sS'group_name'
p21949
Nsa(dp21950
S'description'
p21951
S'Toggles the display of the system information prior to the solve\n'
p21952
sS'cpp_type'
p21953
S'bool'
p21954
sS'default'
p21955
S'1'
p21956
sS'name'
p21957
S'output_system_information'
p21958
sS'required'
p21959
I00
sS'group_name'
p21960
Nsa(dp21961
S'description'
p21962
S'The number of for extension suffix (e.g., out.e-s002)\n'
p21963
sS'cpp_type'
p21964
S'unsigned int'
p21965
sS'default'
p21966
S'4'
p21967
sS'name'
p21968
S'padding'
p21969
sS'required'
p21970
I00
sS'group_name'
p21971
S'Advanced'
p21972
sa(dp21973
S'description'
p21974
S"Print the libMesh performance log header (requires that 'perf_log = true')\n"
p21975
sS'cpp_type'
p21976
S'bool'
p21977
sS'default'
p21978
g3
sS'name'
p21979
S'perf_header'
p21980
sS'required'
p21981
I00
sS'group_name'
p21982
S'Perf Log'
p21983
sa(dp21984
S'description'
p21985
S'If true, all performance logs will be printed. The individual log settings will override this option.\n'
p21986
sS'cpp_type'
p21987
S'bool'
p21988
sS'default'
p21989
S'0'
p21990
sS'name'
p21991
S'perf_log'
p21992
sS'required'
p21993
I00
sS'group_name'
p21994
S'Perf Log'
p21995
sa(dp21996
S'description'
p21997
S'Control the printing of time and dt in scientific notation\n'
p21998
sS'cpp_type'
p21999
S'bool'
p22000
sS'default'
p22001
S'0'
p22002
sS'name'
p22003
S'scientific_time'
p22004
sS'required'
p22005
I00
sS'group_name'
p22006
Nsa(dp22007
S'description'
p22008
S"Enable/disable sequential file output (enable by default when 'use_displace = true', otherwise defaults to false\n"
p22009
sS'cpp_type'
p22010
S'bool'
p22011
sS'default'
p22012
g3
sS'name'
p22013
S'sequence'
p22014
sS'required'
p22015
I00
sS'group_name'
p22016
Nsa(dp22017
S'description'
p22018
S"Toggles the printing of the 'Setup Performance' log\n"
p22019
sS'cpp_type'
p22020
S'bool'
p22021
sS'default'
p22022
g3
sS'name'
p22023
S'setup_log'
p22024
sS'required'
p22025
I00
sS'group_name'
p22026
S'Perf Log'
p22027
sa(dp22028
S'description'
p22029
S'Specifies whether or not the Setup Performance log should be printed before the first time step.  It will still be printed at the end if perf_log is also enabled and likewise disabled if perf_log is false\n'
p22030
sS'cpp_type'
p22031
S'bool'
p22032
sS'default'
p22033
S'0'
p22034
sS'name'
p22035
S'setup_log_early'
p22036
sS'required'
p22037
I00
sS'group_name'
p22038
S'Perf Log'
p22039
sa(dp22040
S'description'
p22041
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p22042
sS'cpp_type'
p22043
S'std::vector<VariableName, std::allocator<VariableName> >'
p22044
sS'default'
p22045
g3
sS'name'
p22046
S'show'
p22047
sS'required'
p22048
I00
sS'group_name'
p22049
S'Variables'
p22050
sa(dp22051
S'description'
p22052
S"Toggles the printing of the 'Moose Test Performance' log\n"
p22053
sS'cpp_type'
p22054
S'bool'
p22055
sS'default'
p22056
g3
sS'name'
p22057
S'solve_log'
p22058
sS'required'
p22059
I00
sS'group_name'
p22060
S'Perf Log'
p22061
sa(dp22062
S'description'
p22063
S'Time at which this outputter begins\n'
p22064
sS'cpp_type'
p22065
S'double'
p22066
sS'default'
p22067
g3
sS'name'
p22068
S'start_time'
p22069
sS'required'
p22070
I00
sS'group_name'
p22071
S'Timing'
p22072
sa(dp22073
S'description'
p22074
S'Only export results at sync times\n'
p22075
sS'cpp_type'
p22076
S'bool'
p22077
sS'default'
p22078
S'0'
p22079
sS'name'
p22080
S'sync_only'
p22081
sS'required'
p22082
I00
sS'group_name'
p22083
S'Timing'
p22084
sa(dp22085
S'description'
p22086
S'Times at which the output and solution is forced to occur\n'
p22087
sS'cpp_type'
p22088
S'std::vector<double, std::allocator<double> >'
p22089
sS'default'
p22090
g3
sS'name'
p22091
S'sync_times'
p22092
sS'required'
p22093
I00
sS'group_name'
p22094
S'Timing'
p22095
sa(dp22096
S'description'
p22097
S'Time tolerance utilized checking start and end times\n'
p22098
sS'cpp_type'
p22099
S'double'
p22100
sS'default'
p22101
S'1e-14'
p22102
sS'name'
p22103
S'time_tolerance'
p22104
sS'required'
p22105
I00
sS'group_name'
p22106
S'Timing'
p22107
sa(dp22108
S'description'
p22109
g3
sS'cpp_type'
p22110
S'std::string'
p22111
sS'default'
p22112
S'Console'
p22113
sS'name'
p22114
S'type'
p22115
sS'required'
p22116
I00
sS'group_name'
p22117
Nsa(dp22118
S'description'
p22119
S'If true, color will be added to the output\n'
p22120
sS'cpp_type'
p22121
S'bool'
p22122
sS'default'
p22123
S'1'
p22124
sS'name'
p22125
S'use_color'
p22126
sS'required'
p22127
I00
sS'group_name'
p22128
Nsa(dp22129
S'description'
p22130
S'Enable/disable the use of the displaced mesh for outputting\n'
p22131
sS'cpp_type'
p22132
S'bool'
p22133
sS'default'
p22134
S'0'
p22135
sS'name'
p22136
S'use_displaced'
p22137
sS'required'
p22138
I00
sS'group_name'
p22139
Nsa(dp22140
S'description'
p22141
S'Print detailed diagnostics on timestep calculation\n'
p22142
sS'cpp_type'
p22143
S'bool'
p22144
sS'default'
p22145
S'0'
p22146
sS'name'
p22147
S'verbose'
p22148
sS'required'
p22149
I00
sS'group_name'
p22150
S'Advanced'
p22151
sasS'name'
p22152
S'/Outputs/Console'
p22153
sa(dp22154
S'description'
p22155
g3
sS'type'
p22156
NsS'subblocks'
p22157
NsS'parameters'
p22158
(lp22159
(dp22160
S'description'
p22161
S"Append '_displaced' to the output file base\n"
p22162
sS'cpp_type'
p22163
S'bool'
p22164
sS'default'
p22165
S'0'
p22166
sS'name'
p22167
S'append_displaced'
p22168
sS'required'
p22169
I00
sS'group_name'
p22170
S'Displaced'
p22171
sa(dp22172
S'description'
p22173
S"Append '_oversample' to the output file base\n"
p22174
sS'cpp_type'
p22175
S'bool'
p22176
sS'default'
p22177
S'0'
p22178
sS'name'
p22179
S'append_oversample'
p22180
sS'required'
p22181
I00
sS'group_name'
p22182
S'Oversampling'
p22183
sa(dp22184
S'description'
p22185
S'Output elemental nonlinear variables as nodal\n'
p22186
sS'cpp_type'
p22187
S'bool'
p22188
sS'default'
p22189
S'0'
p22190
sS'name'
p22191
S'elemental_as_nodal'
p22192
sS'required'
p22193
I00
sS'group_name'
p22194
S'Variables'
p22195
sa(dp22196
S'description'
p22197
S'Time at which this outputter ends\n'
p22198
sS'cpp_type'
p22199
S'double'
p22200
sS'default'
p22201
g3
sS'name'
p22202
S'end_time'
p22203
sS'required'
p22204
I00
sS'group_name'
p22205
S'Timing'
p22206
sa(dp22207
S'description'
p22208
S'The name of the mesh file to read, for oversampling\n'
p22209
sS'cpp_type'
p22210
S'MeshFileName'
p22211
sS'default'
p22212
g3
sS'name'
p22213
S'file'
p22214
sS'required'
p22215
I00
sS'group_name'
p22216
S'Oversampling'
p22217
sa(dp22218
S'description'
p22219
S"The desired solution output name without an extension (Defaults appends '_out' to the input file name)\n"
p22220
sS'cpp_type'
p22221
S'std::string'
p22222
sS'default'
p22223
g3
sS'name'
p22224
S'file_base'
p22225
sS'required'
p22226
I00
sS'group_name'
p22227
Nsa(dp22228
S'description'
p22229
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p22230
sS'cpp_type'
p22231
S'std::vector<VariableName, std::allocator<VariableName> >'
p22232
sS'default'
p22233
g3
sS'name'
p22234
S'hide'
p22235
sS'required'
p22236
I00
sS'group_name'
p22237
S'Variables'
p22238
sa(dp22239
S'description'
p22240
S'The interval at which time steps are output to the solution file\n'
p22241
sS'cpp_type'
p22242
S'unsigned int'
p22243
sS'default'
p22244
g3
sS'name'
p22245
S'interval'
p22246
sS'required'
p22247
I00
sS'group_name'
p22248
S'Timing'
p22249
sa(dp22250
S'description'
p22251
S'Number of divisions applied to time step when outtputting linear residuals\n'
p22252
sS'cpp_type'
p22253
S'double'
p22254
sS'default'
p22255
S'1000'
p22256
sS'name'
p22257
S'linear_residual_dt_divisor'
p22258
sS'required'
p22259
I00
sS'group_name'
p22260
S'PETSc'
p22261
sa(dp22262
S'description'
p22263
S'Specifies an end time to begin output on each linear residual evaluation\n'
p22264
sS'cpp_type'
p22265
S'double'
p22266
sS'default'
p22267
g3
sS'name'
p22268
S'linear_residual_end_time'
p22269
sS'required'
p22270
I00
sS'group_name'
p22271
S'PETSc'
p22272
sa(dp22273
S'description'
p22274
S'Specifies a start time to begin output on each linear residual evaluation\n'
p22275
sS'cpp_type'
p22276
S'double'
p22277
sS'default'
p22278
g3
sS'name'
p22279
S'linear_residual_start_time'
p22280
sS'required'
p22281
I00
sS'group_name'
p22282
S'PETSc'
p22283
sa(dp22284
S'description'
p22285
S'Specifies whether output occurs on each linear residual evaluation\n'
p22286
sS'cpp_type'
p22287
S'bool'
p22288
sS'default'
p22289
S'0'
p22290
sS'name'
p22291
S'linear_residuals'
p22292
sS'required'
p22293
I00
sS'group_name'
p22294
S'PETSc'
p22295
sa(dp22296
S'description'
p22297
S'Number of divisions applied to time step when outtputting non-linear residuals\n'
p22298
sS'cpp_type'
p22299
S'double'
p22300
sS'default'
p22301
S'1000'
p22302
sS'name'
p22303
S'nonlinear_residual_dt_divisor'
p22304
sS'required'
p22305
I00
sS'group_name'
p22306
S'PETSc'
p22307
sa(dp22308
S'description'
p22309
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p22310
sS'cpp_type'
p22311
S'double'
p22312
sS'default'
p22313
g3
sS'name'
p22314
S'nonlinear_residual_end_time'
p22315
sS'required'
p22316
I00
sS'group_name'
p22317
S'PETSc'
p22318
sa(dp22319
S'description'
p22320
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p22321
sS'cpp_type'
p22322
S'double'
p22323
sS'default'
p22324
g3
sS'name'
p22325
S'nonlinear_residual_start_time'
p22326
sS'required'
p22327
I00
sS'group_name'
p22328
S'PETSc'
p22329
sa(dp22330
S'description'
p22331
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p22332
sS'cpp_type'
p22333
S'bool'
p22334
sS'default'
p22335
S'0'
p22336
sS'name'
p22337
S'nonlinear_residuals'
p22338
sS'required'
p22339
I00
sS'group_name'
p22340
S'PETSc'
p22341
sa(dp22342
S'description'
p22343
S'Enable/disable the output of elemental nonlinear variables\n'
p22344
sS'cpp_type'
p22345
S'bool'
p22346
sS'default'
p22347
S'1'
p22348
sS'name'
p22349
S'output_elemental_variables'
p22350
sS'required'
p22351
I00
sS'group_name'
p22352
S'Variables'
p22353
sa(dp22354
S'description'
p22355
S'When true all time attempted time steps are output\n'
p22356
sS'cpp_type'
p22357
S'bool'
p22358
sS'default'
p22359
S'0'
p22360
sS'name'
p22361
S'output_failed'
p22362
sS'required'
p22363
I00
sS'group_name'
p22364
Nsa(dp22365
S'description'
p22366
S'Force the final time step to be output, regardless of output interval\n'
p22367
sS'cpp_type'
p22368
S'bool'
p22369
sS'default'
p22370
g3
sS'name'
p22371
S'output_final'
p22372
sS'required'
p22373
I00
sS'group_name'
p22374
S'Timing'
p22375
sa(dp22376
S'description'
p22377
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputing only a subset of outputs when using MultiApps.\n'
p22378
sS'cpp_type'
p22379
S'std::vector<std::string, std::allocator<std::string> >'
p22380
sS'default'
p22381
g3
sS'name'
p22382
S'output_if_base_contains'
p22383
sS'required'
p22384
I00
sS'group_name'
p22385
S'Advanced'
p22386
sa(dp22387
S'description'
p22388
S'Request that the initial condition is output to the solution file\n'
p22389
sS'cpp_type'
p22390
S'bool'
p22391
sS'default'
p22392
g3
sS'name'
p22393
S'output_initial'
p22394
sS'required'
p22395
I00
sS'group_name'
p22396
S'Timing'
p22397
sa(dp22398
S'description'
p22399
S'Output the input file\n'
p22400
sS'cpp_type'
p22401
S'bool'
p22402
sS'default'
p22403
S'0'
p22404
sS'name'
p22405
S'output_input'
p22406
sS'required'
p22407
I00
sS'group_name'
p22408
Nsa(dp22409
S'description'
p22410
S'Request that all intermediate steps (not initial or final) are output\n'
p22411
sS'cpp_type'
p22412
S'bool'
p22413
sS'default'
p22414
g3
sS'name'
p22415
S'output_intermediate'
p22416
sS'required'
p22417
I00
sS'group_name'
p22418
Nsa(dp22419
S'description'
p22420
S'Enable/disable the output of nodal nonlinear variables\n'
p22421
sS'cpp_type'
p22422
S'bool'
p22423
sS'default'
p22424
S'1'
p22425
sS'name'
p22426
S'output_nodal_variables'
p22427
sS'required'
p22428
I00
sS'group_name'
p22429
S'Variables'
p22430
sa(dp22431
S'description'
p22432
S'Enable/disable the output of postprocessors\n'
p22433
sS'cpp_type'
p22434
S'bool'
p22435
sS'default'
p22436
S'1'
p22437
sS'name'
p22438
S'output_postprocessors'
p22439
sS'required'
p22440
I00
sS'group_name'
p22441
S'Variables'
p22442
sa(dp22443
S'description'
p22444
S'Enable/disable the output of aux scalar variables\n'
p22445
sS'cpp_type'
p22446
S'bool'
p22447
sS'default'
p22448
S'1'
p22449
sS'name'
p22450
S'output_scalar_variables'
p22451
sS'required'
p22452
I00
sS'group_name'
p22453
S'Variables'
p22454
sa(dp22455
S'description'
p22456
S'Toggles the display of the system information prior to the solve\n'
p22457
sS'cpp_type'
p22458
S'bool'
p22459
sS'default'
p22460
S'1'
p22461
sS'name'
p22462
S'output_system_information'
p22463
sS'required'
p22464
I00
sS'group_name'
p22465
Nsa(dp22466
S'description'
p22467
S'Set to true to enable oversampling\n'
p22468
sS'cpp_type'
p22469
S'bool'
p22470
sS'default'
p22471
S'0'
p22472
sS'name'
p22473
S'oversample'
p22474
sS'required'
p22475
I00
sS'group_name'
p22476
S'Oversampling'
p22477
sa(dp22478
S'description'
p22479
S'The number of for extension suffix (e.g., out.e-s002)\n'
p22480
sS'cpp_type'
p22481
S'unsigned int'
p22482
sS'default'
p22483
S'3'
p22484
sS'name'
p22485
S'padding'
p22486
sS'required'
p22487
I00
sS'group_name'
p22488
S'Advanced'
p22489
sa(dp22490
S'description'
p22491
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p22492
sS'cpp_type'
p22493
S'libMesh::Point'
p22494
sS'default'
p22495
g3
sS'name'
p22496
S'position'
p22497
sS'required'
p22498
I00
sS'group_name'
p22499
S'Oversampling'
p22500
sa(dp22501
S'description'
p22502
S'Number of uniform refinements for oversampling\n'
p22503
sS'cpp_type'
p22504
S'unsigned int'
p22505
sS'default'
p22506
S'0'
p22507
sS'name'
p22508
S'refinements'
p22509
sS'required'
p22510
I00
sS'group_name'
p22511
S'Oversampling'
p22512
sa(dp22513
S'description'
p22514
S'Output scalar variables as nodal\n'
p22515
sS'cpp_type'
p22516
S'bool'
p22517
sS'default'
p22518
S'0'
p22519
sS'name'
p22520
S'scalar_as_nodal'
p22521
sS'required'
p22522
I00
sS'group_name'
p22523
S'Variables'
p22524
sa(dp22525
S'description'
p22526
S"Enable/disable sequential file output (enable by default when 'use_displace = true', otherwise defaults to false\n"
p22527
sS'cpp_type'
p22528
S'bool'
p22529
sS'default'
p22530
g3
sS'name'
p22531
S'sequence'
p22532
sS'required'
p22533
I00
sS'group_name'
p22534
Nsa(dp22535
S'description'
p22536
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p22537
sS'cpp_type'
p22538
S'std::vector<VariableName, std::allocator<VariableName> >'
p22539
sS'default'
p22540
g3
sS'name'
p22541
S'show'
p22542
sS'required'
p22543
I00
sS'group_name'
p22544
S'Variables'
p22545
sa(dp22546
S'description'
p22547
S'Time at which this outputter begins\n'
p22548
sS'cpp_type'
p22549
S'double'
p22550
sS'default'
p22551
g3
sS'name'
p22552
S'start_time'
p22553
sS'required'
p22554
I00
sS'group_name'
p22555
S'Timing'
p22556
sa(dp22557
S'description'
p22558
S'Only export results at sync times\n'
p22559
sS'cpp_type'
p22560
S'bool'
p22561
sS'default'
p22562
S'0'
p22563
sS'name'
p22564
S'sync_only'
p22565
sS'required'
p22566
I00
sS'group_name'
p22567
S'Timing'
p22568
sa(dp22569
S'description'
p22570
S'Times at which the output and solution is forced to occur\n'
p22571
sS'cpp_type'
p22572
S'std::vector<double, std::allocator<double> >'
p22573
sS'default'
p22574
g3
sS'name'
p22575
S'sync_times'
p22576
sS'required'
p22577
I00
sS'group_name'
p22578
S'Timing'
p22579
sa(dp22580
S'description'
p22581
S'Time tolerance utilized checking start and end times\n'
p22582
sS'cpp_type'
p22583
S'double'
p22584
sS'default'
p22585
S'1e-14'
p22586
sS'name'
p22587
S'time_tolerance'
p22588
sS'required'
p22589
I00
sS'group_name'
p22590
S'Timing'
p22591
sa(dp22592
S'description'
p22593
g3
sS'cpp_type'
p22594
S'std::string'
p22595
sS'default'
p22596
S'Exodus'
p22597
sS'name'
p22598
S'type'
p22599
sS'required'
p22600
I00
sS'group_name'
p22601
Nsa(dp22602
S'description'
p22603
S'Enable/disable the use of the displaced mesh for outputting\n'
p22604
sS'cpp_type'
p22605
S'bool'
p22606
sS'default'
p22607
S'0'
p22608
sS'name'
p22609
S'use_displaced'
p22610
sS'required'
p22611
I00
sS'group_name'
p22612
NsasS'name'
p22613
S'/Outputs/Exodus'
p22614
sa(dp22615
S'description'
p22616
g3
sS'type'
p22617
NsS'subblocks'
p22618
NsS'parameters'
p22619
(lp22620
(dp22621
S'description'
p22622
S"Append '_displaced' to the output file base\n"
p22623
sS'cpp_type'
p22624
S'bool'
p22625
sS'default'
p22626
S'0'
p22627
sS'name'
p22628
S'append_displaced'
p22629
sS'required'
p22630
I00
sS'group_name'
p22631
S'Displaced'
p22632
sa(dp22633
S'description'
p22634
S"Append '_oversample' to the output file base\n"
p22635
sS'cpp_type'
p22636
S'bool'
p22637
sS'default'
p22638
S'0'
p22639
sS'name'
p22640
S'append_oversample'
p22641
sS'required'
p22642
I00
sS'group_name'
p22643
S'Oversampling'
p22644
sa(dp22645
S'description'
p22646
S'Output the file in binary format\n'
p22647
sS'cpp_type'
p22648
S'bool'
p22649
sS'default'
p22650
S'1'
p22651
sS'name'
p22652
S'binary'
p22653
sS'required'
p22654
I00
sS'group_name'
p22655
S'Advanced'
p22656
sa(dp22657
S'description'
p22658
S'Output elemental nonlinear variables as nodal\n'
p22659
sS'cpp_type'
p22660
S'bool'
p22661
sS'default'
p22662
S'0'
p22663
sS'name'
p22664
S'elemental_as_nodal'
p22665
sS'required'
p22666
I00
sS'group_name'
p22667
S'Variables'
p22668
sa(dp22669
S'description'
p22670
S'Time at which this outputter ends\n'
p22671
sS'cpp_type'
p22672
S'double'
p22673
sS'default'
p22674
g3
sS'name'
p22675
S'end_time'
p22676
sS'required'
p22677
I00
sS'group_name'
p22678
S'Timing'
p22679
sa(dp22680
S'description'
p22681
S'The name of the mesh file to read, for oversampling\n'
p22682
sS'cpp_type'
p22683
S'MeshFileName'
p22684
sS'default'
p22685
g3
sS'name'
p22686
S'file'
p22687
sS'required'
p22688
I00
sS'group_name'
p22689
S'Oversampling'
p22690
sa(dp22691
S'description'
p22692
S"The desired solution output name without an extension (Defaults appends '_out' to the input file name)\n"
p22693
sS'cpp_type'
p22694
S'std::string'
p22695
sS'default'
p22696
g3
sS'name'
p22697
S'file_base'
p22698
sS'required'
p22699
I00
sS'group_name'
p22700
Nsa(dp22701
S'description'
p22702
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p22703
sS'cpp_type'
p22704
S'std::vector<VariableName, std::allocator<VariableName> >'
p22705
sS'default'
p22706
g3
sS'name'
p22707
S'hide'
p22708
sS'required'
p22709
I00
sS'group_name'
p22710
S'Variables'
p22711
sa(dp22712
S'description'
p22713
S'The interval at which time steps are output to the solution file\n'
p22714
sS'cpp_type'
p22715
S'unsigned int'
p22716
sS'default'
p22717
g3
sS'name'
p22718
S'interval'
p22719
sS'required'
p22720
I00
sS'group_name'
p22721
S'Timing'
p22722
sa(dp22723
S'description'
p22724
S'Number of divisions applied to time step when outtputting linear residuals\n'
p22725
sS'cpp_type'
p22726
S'double'
p22727
sS'default'
p22728
S'1000'
p22729
sS'name'
p22730
S'linear_residual_dt_divisor'
p22731
sS'required'
p22732
I00
sS'group_name'
p22733
S'PETSc'
p22734
sa(dp22735
S'description'
p22736
S'Specifies an end time to begin output on each linear residual evaluation\n'
p22737
sS'cpp_type'
p22738
S'double'
p22739
sS'default'
p22740
g3
sS'name'
p22741
S'linear_residual_end_time'
p22742
sS'required'
p22743
I00
sS'group_name'
p22744
S'PETSc'
p22745
sa(dp22746
S'description'
p22747
S'Specifies a start time to begin output on each linear residual evaluation\n'
p22748
sS'cpp_type'
p22749
S'double'
p22750
sS'default'
p22751
g3
sS'name'
p22752
S'linear_residual_start_time'
p22753
sS'required'
p22754
I00
sS'group_name'
p22755
S'PETSc'
p22756
sa(dp22757
S'description'
p22758
S'Specifies whether output occurs on each linear residual evaluation\n'
p22759
sS'cpp_type'
p22760
S'bool'
p22761
sS'default'
p22762
S'0'
p22763
sS'name'
p22764
S'linear_residuals'
p22765
sS'required'
p22766
I00
sS'group_name'
p22767
S'PETSc'
p22768
sa(dp22769
S'description'
p22770
S'Number of divisions applied to time step when outtputting non-linear residuals\n'
p22771
sS'cpp_type'
p22772
S'double'
p22773
sS'default'
p22774
S'1000'
p22775
sS'name'
p22776
S'nonlinear_residual_dt_divisor'
p22777
sS'required'
p22778
I00
sS'group_name'
p22779
S'PETSc'
p22780
sa(dp22781
S'description'
p22782
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p22783
sS'cpp_type'
p22784
S'double'
p22785
sS'default'
p22786
g3
sS'name'
p22787
S'nonlinear_residual_end_time'
p22788
sS'required'
p22789
I00
sS'group_name'
p22790
S'PETSc'
p22791
sa(dp22792
S'description'
p22793
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p22794
sS'cpp_type'
p22795
S'double'
p22796
sS'default'
p22797
g3
sS'name'
p22798
S'nonlinear_residual_start_time'
p22799
sS'required'
p22800
I00
sS'group_name'
p22801
S'PETSc'
p22802
sa(dp22803
S'description'
p22804
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p22805
sS'cpp_type'
p22806
S'bool'
p22807
sS'default'
p22808
S'0'
p22809
sS'name'
p22810
S'nonlinear_residuals'
p22811
sS'required'
p22812
I00
sS'group_name'
p22813
S'PETSc'
p22814
sa(dp22815
S'description'
p22816
S'Enable/disable the output of elemental nonlinear variables\n'
p22817
sS'cpp_type'
p22818
S'bool'
p22819
sS'default'
p22820
S'1'
p22821
sS'name'
p22822
S'output_elemental_variables'
p22823
sS'required'
p22824
I00
sS'group_name'
p22825
S'Variables'
p22826
sa(dp22827
S'description'
p22828
S'When true all time attempted time steps are output\n'
p22829
sS'cpp_type'
p22830
S'bool'
p22831
sS'default'
p22832
S'0'
p22833
sS'name'
p22834
S'output_failed'
p22835
sS'required'
p22836
I00
sS'group_name'
p22837
Nsa(dp22838
S'description'
p22839
S'Force the final time step to be output, regardless of output interval\n'
p22840
sS'cpp_type'
p22841
S'bool'
p22842
sS'default'
p22843
g3
sS'name'
p22844
S'output_final'
p22845
sS'required'
p22846
I00
sS'group_name'
p22847
S'Timing'
p22848
sa(dp22849
S'description'
p22850
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputing only a subset of outputs when using MultiApps.\n'
p22851
sS'cpp_type'
p22852
S'std::vector<std::string, std::allocator<std::string> >'
p22853
sS'default'
p22854
g3
sS'name'
p22855
S'output_if_base_contains'
p22856
sS'required'
p22857
I00
sS'group_name'
p22858
S'Advanced'
p22859
sa(dp22860
S'description'
p22861
S'Request that the initial condition is output to the solution file\n'
p22862
sS'cpp_type'
p22863
S'bool'
p22864
sS'default'
p22865
g3
sS'name'
p22866
S'output_initial'
p22867
sS'required'
p22868
I00
sS'group_name'
p22869
S'Timing'
p22870
sa(dp22871
S'description'
p22872
S'Output the input file\n'
p22873
sS'cpp_type'
p22874
S'bool'
p22875
sS'default'
p22876
S'0'
p22877
sS'name'
p22878
S'output_input'
p22879
sS'required'
p22880
I00
sS'group_name'
p22881
Nsa(dp22882
S'description'
p22883
S'Request that all intermediate steps (not initial or final) are output\n'
p22884
sS'cpp_type'
p22885
S'bool'
p22886
sS'default'
p22887
g3
sS'name'
p22888
S'output_intermediate'
p22889
sS'required'
p22890
I00
sS'group_name'
p22891
Nsa(dp22892
S'description'
p22893
S'Enable/disable the output of nodal nonlinear variables\n'
p22894
sS'cpp_type'
p22895
S'bool'
p22896
sS'default'
p22897
S'1'
p22898
sS'name'
p22899
S'output_nodal_variables'
p22900
sS'required'
p22901
I00
sS'group_name'
p22902
S'Variables'
p22903
sa(dp22904
S'description'
p22905
S'Toggles the display of the system information prior to the solve\n'
p22906
sS'cpp_type'
p22907
S'bool'
p22908
sS'default'
p22909
S'1'
p22910
sS'name'
p22911
S'output_system_information'
p22912
sS'required'
p22913
I00
sS'group_name'
p22914
Nsa(dp22915
S'description'
p22916
S'Set to true to enable oversampling\n'
p22917
sS'cpp_type'
p22918
S'bool'
p22919
sS'default'
p22920
S'0'
p22921
sS'name'
p22922
S'oversample'
p22923
sS'required'
p22924
I00
sS'group_name'
p22925
S'Oversampling'
p22926
sa(dp22927
S'description'
p22928
S'The number of for extension suffix (e.g., out.e-s002)\n'
p22929
sS'cpp_type'
p22930
S'unsigned int'
p22931
sS'default'
p22932
S'4'
p22933
sS'name'
p22934
S'padding'
p22935
sS'required'
p22936
I00
sS'group_name'
p22937
S'Advanced'
p22938
sa(dp22939
S'description'
p22940
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p22941
sS'cpp_type'
p22942
S'libMesh::Point'
p22943
sS'default'
p22944
g3
sS'name'
p22945
S'position'
p22946
sS'required'
p22947
I00
sS'group_name'
p22948
S'Oversampling'
p22949
sa(dp22950
S'description'
p22951
S'Number of uniform refinements for oversampling\n'
p22952
sS'cpp_type'
p22953
S'unsigned int'
p22954
sS'default'
p22955
S'0'
p22956
sS'name'
p22957
S'refinements'
p22958
sS'required'
p22959
I00
sS'group_name'
p22960
S'Oversampling'
p22961
sa(dp22962
S'description'
p22963
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p22964
sS'cpp_type'
p22965
S'std::vector<VariableName, std::allocator<VariableName> >'
p22966
sS'default'
p22967
g3
sS'name'
p22968
S'show'
p22969
sS'required'
p22970
I00
sS'group_name'
p22971
S'Variables'
p22972
sa(dp22973
S'description'
p22974
S'Time at which this outputter begins\n'
p22975
sS'cpp_type'
p22976
S'double'
p22977
sS'default'
p22978
g3
sS'name'
p22979
S'start_time'
p22980
sS'required'
p22981
I00
sS'group_name'
p22982
S'Timing'
p22983
sa(dp22984
S'description'
p22985
S'Only export results at sync times\n'
p22986
sS'cpp_type'
p22987
S'bool'
p22988
sS'default'
p22989
S'0'
p22990
sS'name'
p22991
S'sync_only'
p22992
sS'required'
p22993
I00
sS'group_name'
p22994
S'Timing'
p22995
sa(dp22996
S'description'
p22997
S'Times at which the output and solution is forced to occur\n'
p22998
sS'cpp_type'
p22999
S'std::vector<double, std::allocator<double> >'
p23000
sS'default'
p23001
g3
sS'name'
p23002
S'sync_times'
p23003
sS'required'
p23004
I00
sS'group_name'
p23005
S'Timing'
p23006
sa(dp23007
S'description'
p23008
S'Time tolerance utilized checking start and end times\n'
p23009
sS'cpp_type'
p23010
S'double'
p23011
sS'default'
p23012
S'1e-14'
p23013
sS'name'
p23014
S'time_tolerance'
p23015
sS'required'
p23016
I00
sS'group_name'
p23017
S'Timing'
p23018
sa(dp23019
S'description'
p23020
g3
sS'cpp_type'
p23021
S'std::string'
p23022
sS'default'
p23023
S'GMV'
p23024
sS'name'
p23025
S'type'
p23026
sS'required'
p23027
I00
sS'group_name'
p23028
Nsa(dp23029
S'description'
p23030
S'Enable/disable the use of the displaced mesh for outputting\n'
p23031
sS'cpp_type'
p23032
S'bool'
p23033
sS'default'
p23034
S'0'
p23035
sS'name'
p23036
S'use_displaced'
p23037
sS'required'
p23038
I00
sS'group_name'
p23039
NsasS'name'
p23040
S'/Outputs/GMV'
p23041
sa(dp23042
S'description'
p23043
g3
sS'type'
p23044
NsS'subblocks'
p23045
NsS'parameters'
p23046
(lp23047
(dp23048
S'description'
p23049
S"Append '_displaced' to the output file base\n"
p23050
sS'cpp_type'
p23051
S'bool'
p23052
sS'default'
p23053
S'0'
p23054
sS'name'
p23055
S'append_displaced'
p23056
sS'required'
p23057
I00
sS'group_name'
p23058
S'Displaced'
p23059
sa(dp23060
S'description'
p23061
S'Time at which this outputter ends\n'
p23062
sS'cpp_type'
p23063
S'double'
p23064
sS'default'
p23065
g3
sS'name'
p23066
S'end_time'
p23067
sS'required'
p23068
I00
sS'group_name'
p23069
S'Timing'
p23070
sa(dp23071
S'name'
p23072
S'extension'
p23073
sS'cpp_type'
p23074
S'MooseEnum'
p23075
sS'default'
p23076
S'png'
p23077
sS'description'
p23078
S'GUN plot file extension\n'
p23079
sS'required'
p23080
I00
sS'options'
p23081
S'png ps gif'
p23082
sS'group_name'
p23083
Nsa(dp23084
S'description'
p23085
S"The desired solution output name without an extension (Defaults appends '_out' to the input file name)\n"
p23086
sS'cpp_type'
p23087
S'std::string'
p23088
sS'default'
p23089
g3
sS'name'
p23090
S'file_base'
p23091
sS'required'
p23092
I00
sS'group_name'
p23093
Nsa(dp23094
S'description'
p23095
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p23096
sS'cpp_type'
p23097
S'std::vector<VariableName, std::allocator<VariableName> >'
p23098
sS'default'
p23099
g3
sS'name'
p23100
S'hide'
p23101
sS'required'
p23102
I00
sS'group_name'
p23103
S'Variables'
p23104
sa(dp23105
S'description'
p23106
S'The interval at which time steps are output to the solution file\n'
p23107
sS'cpp_type'
p23108
S'unsigned int'
p23109
sS'default'
p23110
g3
sS'name'
p23111
S'interval'
p23112
sS'required'
p23113
I00
sS'group_name'
p23114
S'Timing'
p23115
sa(dp23116
S'description'
p23117
S'Number of divisions applied to time step when outtputting linear residuals\n'
p23118
sS'cpp_type'
p23119
S'double'
p23120
sS'default'
p23121
S'1000'
p23122
sS'name'
p23123
S'linear_residual_dt_divisor'
p23124
sS'required'
p23125
I00
sS'group_name'
p23126
S'PETSc'
p23127
sa(dp23128
S'description'
p23129
S'Specifies an end time to begin output on each linear residual evaluation\n'
p23130
sS'cpp_type'
p23131
S'double'
p23132
sS'default'
p23133
g3
sS'name'
p23134
S'linear_residual_end_time'
p23135
sS'required'
p23136
I00
sS'group_name'
p23137
S'PETSc'
p23138
sa(dp23139
S'description'
p23140
S'Specifies a start time to begin output on each linear residual evaluation\n'
p23141
sS'cpp_type'
p23142
S'double'
p23143
sS'default'
p23144
g3
sS'name'
p23145
S'linear_residual_start_time'
p23146
sS'required'
p23147
I00
sS'group_name'
p23148
S'PETSc'
p23149
sa(dp23150
S'description'
p23151
S'Specifies whether output occurs on each linear residual evaluation\n'
p23152
sS'cpp_type'
p23153
S'bool'
p23154
sS'default'
p23155
S'0'
p23156
sS'name'
p23157
S'linear_residuals'
p23158
sS'required'
p23159
I00
sS'group_name'
p23160
S'PETSc'
p23161
sa(dp23162
S'description'
p23163
S'Number of divisions applied to time step when outtputting non-linear residuals\n'
p23164
sS'cpp_type'
p23165
S'double'
p23166
sS'default'
p23167
S'1000'
p23168
sS'name'
p23169
S'nonlinear_residual_dt_divisor'
p23170
sS'required'
p23171
I00
sS'group_name'
p23172
S'PETSc'
p23173
sa(dp23174
S'description'
p23175
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p23176
sS'cpp_type'
p23177
S'double'
p23178
sS'default'
p23179
g3
sS'name'
p23180
S'nonlinear_residual_end_time'
p23181
sS'required'
p23182
I00
sS'group_name'
p23183
S'PETSc'
p23184
sa(dp23185
S'description'
p23186
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p23187
sS'cpp_type'
p23188
S'double'
p23189
sS'default'
p23190
g3
sS'name'
p23191
S'nonlinear_residual_start_time'
p23192
sS'required'
p23193
I00
sS'group_name'
p23194
S'PETSc'
p23195
sa(dp23196
S'description'
p23197
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p23198
sS'cpp_type'
p23199
S'bool'
p23200
sS'default'
p23201
S'0'
p23202
sS'name'
p23203
S'nonlinear_residuals'
p23204
sS'required'
p23205
I00
sS'group_name'
p23206
S'PETSc'
p23207
sa(dp23208
S'description'
p23209
S'When true all time attempted time steps are output\n'
p23210
sS'cpp_type'
p23211
S'bool'
p23212
sS'default'
p23213
S'0'
p23214
sS'name'
p23215
S'output_failed'
p23216
sS'required'
p23217
I00
sS'group_name'
p23218
Nsa(dp23219
S'description'
p23220
S'Force the final time step to be output, regardless of output interval\n'
p23221
sS'cpp_type'
p23222
S'bool'
p23223
sS'default'
p23224
g3
sS'name'
p23225
S'output_final'
p23226
sS'required'
p23227
I00
sS'group_name'
p23228
S'Timing'
p23229
sa(dp23230
S'description'
p23231
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputing only a subset of outputs when using MultiApps.\n'
p23232
sS'cpp_type'
p23233
S'std::vector<std::string, std::allocator<std::string> >'
p23234
sS'default'
p23235
g3
sS'name'
p23236
S'output_if_base_contains'
p23237
sS'required'
p23238
I00
sS'group_name'
p23239
S'Advanced'
p23240
sa(dp23241
S'description'
p23242
S'Request that the initial condition is output to the solution file\n'
p23243
sS'cpp_type'
p23244
S'bool'
p23245
sS'default'
p23246
g3
sS'name'
p23247
S'output_initial'
p23248
sS'required'
p23249
I00
sS'group_name'
p23250
S'Timing'
p23251
sa(dp23252
S'description'
p23253
S'Request that all intermediate steps (not initial or final) are output\n'
p23254
sS'cpp_type'
p23255
S'bool'
p23256
sS'default'
p23257
g3
sS'name'
p23258
S'output_intermediate'
p23259
sS'required'
p23260
I00
sS'group_name'
p23261
Nsa(dp23262
S'description'
p23263
S'Enable/disable the output of postprocessors\n'
p23264
sS'cpp_type'
p23265
S'bool'
p23266
sS'default'
p23267
S'1'
p23268
sS'name'
p23269
S'output_postprocessors'
p23270
sS'required'
p23271
I00
sS'group_name'
p23272
S'Variables'
p23273
sa(dp23274
S'description'
p23275
S'Enable/disable the output of aux scalar variables\n'
p23276
sS'cpp_type'
p23277
S'bool'
p23278
sS'default'
p23279
S'1'
p23280
sS'name'
p23281
S'output_scalar_variables'
p23282
sS'required'
p23283
I00
sS'group_name'
p23284
S'Variables'
p23285
sa(dp23286
S'description'
p23287
S'Toggles the display of the system information prior to the solve\n'
p23288
sS'cpp_type'
p23289
S'bool'
p23290
sS'default'
p23291
S'1'
p23292
sS'name'
p23293
S'output_system_information'
p23294
sS'required'
p23295
I00
sS'group_name'
p23296
Nsa(dp23297
S'description'
p23298
S"Enable/disable sequential file output (enable by default when 'use_displace = true', otherwise defaults to false\n"
p23299
sS'cpp_type'
p23300
S'bool'
p23301
sS'default'
p23302
g3
sS'name'
p23303
S'sequence'
p23304
sS'required'
p23305
I00
sS'group_name'
p23306
Nsa(dp23307
S'description'
p23308
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p23309
sS'cpp_type'
p23310
S'std::vector<VariableName, std::allocator<VariableName> >'
p23311
sS'default'
p23312
g3
sS'name'
p23313
S'show'
p23314
sS'required'
p23315
I00
sS'group_name'
p23316
S'Variables'
p23317
sa(dp23318
S'description'
p23319
S'Time at which this outputter begins\n'
p23320
sS'cpp_type'
p23321
S'double'
p23322
sS'default'
p23323
g3
sS'name'
p23324
S'start_time'
p23325
sS'required'
p23326
I00
sS'group_name'
p23327
S'Timing'
p23328
sa(dp23329
S'description'
p23330
S'Only export results at sync times\n'
p23331
sS'cpp_type'
p23332
S'bool'
p23333
sS'default'
p23334
S'0'
p23335
sS'name'
p23336
S'sync_only'
p23337
sS'required'
p23338
I00
sS'group_name'
p23339
S'Timing'
p23340
sa(dp23341
S'description'
p23342
S'Times at which the output and solution is forced to occur\n'
p23343
sS'cpp_type'
p23344
S'std::vector<double, std::allocator<double> >'
p23345
sS'default'
p23346
g3
sS'name'
p23347
S'sync_times'
p23348
sS'required'
p23349
I00
sS'group_name'
p23350
S'Timing'
p23351
sa(dp23352
S'description'
p23353
S'Time tolerance utilized checking start and end times\n'
p23354
sS'cpp_type'
p23355
S'double'
p23356
sS'default'
p23357
S'1e-14'
p23358
sS'name'
p23359
S'time_tolerance'
p23360
sS'required'
p23361
I00
sS'group_name'
p23362
S'Timing'
p23363
sa(dp23364
S'description'
p23365
g3
sS'cpp_type'
p23366
S'std::string'
p23367
sS'default'
p23368
S'GNUPlot'
p23369
sS'name'
p23370
S'type'
p23371
sS'required'
p23372
I00
sS'group_name'
p23373
Nsa(dp23374
S'description'
p23375
S'Enable/disable the use of the displaced mesh for outputting\n'
p23376
sS'cpp_type'
p23377
S'bool'
p23378
sS'default'
p23379
S'0'
p23380
sS'name'
p23381
S'use_displaced'
p23382
sS'required'
p23383
I00
sS'group_name'
p23384
NsasS'name'
p23385
S'/Outputs/GNUPlot'
p23386
sa(dp23387
S'description'
p23388
g3
sS'type'
p23389
NsS'subblocks'
p23390
NsS'parameters'
p23391
(lp23392
(dp23393
S'description'
p23394
S"Append '_displaced' to the output file base\n"
p23395
sS'cpp_type'
p23396
S'bool'
p23397
sS'default'
p23398
S'0'
p23399
sS'name'
p23400
S'append_displaced'
p23401
sS'required'
p23402
I00
sS'group_name'
p23403
S'Displaced'
p23404
sa(dp23405
S'description'
p23406
S"Append '_oversample' to the output file base\n"
p23407
sS'cpp_type'
p23408
S'bool'
p23409
sS'default'
p23410
S'0'
p23411
sS'name'
p23412
S'append_oversample'
p23413
sS'required'
p23414
I00
sS'group_name'
p23415
S'Oversampling'
p23416
sa(dp23417
S'description'
p23418
S'Output elemental nonlinear variables as nodal\n'
p23419
sS'cpp_type'
p23420
S'bool'
p23421
sS'default'
p23422
S'0'
p23423
sS'name'
p23424
S'elemental_as_nodal'
p23425
sS'required'
p23426
I00
sS'group_name'
p23427
S'Variables'
p23428
sa(dp23429
S'description'
p23430
S'Time at which this outputter ends\n'
p23431
sS'cpp_type'
p23432
S'double'
p23433
sS'default'
p23434
g3
sS'name'
p23435
S'end_time'
p23436
sS'required'
p23437
I00
sS'group_name'
p23438
S'Timing'
p23439
sa(dp23440
S'description'
p23441
S'The name of the mesh file to read, for oversampling\n'
p23442
sS'cpp_type'
p23443
S'MeshFileName'
p23444
sS'default'
p23445
g3
sS'name'
p23446
S'file'
p23447
sS'required'
p23448
I00
sS'group_name'
p23449
S'Oversampling'
p23450
sa(dp23451
S'description'
p23452
S"The desired solution output name without an extension (Defaults appends '_out' to the input file name)\n"
p23453
sS'cpp_type'
p23454
S'std::string'
p23455
sS'default'
p23456
g3
sS'name'
p23457
S'file_base'
p23458
sS'required'
p23459
I00
sS'group_name'
p23460
Nsa(dp23461
S'description'
p23462
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p23463
sS'cpp_type'
p23464
S'std::vector<VariableName, std::allocator<VariableName> >'
p23465
sS'default'
p23466
g3
sS'name'
p23467
S'hide'
p23468
sS'required'
p23469
I00
sS'group_name'
p23470
S'Variables'
p23471
sa(dp23472
S'description'
p23473
S'The interval at which time steps are output to the solution file\n'
p23474
sS'cpp_type'
p23475
S'unsigned int'
p23476
sS'default'
p23477
g3
sS'name'
p23478
S'interval'
p23479
sS'required'
p23480
I00
sS'group_name'
p23481
S'Timing'
p23482
sa(dp23483
S'description'
p23484
S'Number of divisions applied to time step when outtputting linear residuals\n'
p23485
sS'cpp_type'
p23486
S'double'
p23487
sS'default'
p23488
S'1000'
p23489
sS'name'
p23490
S'linear_residual_dt_divisor'
p23491
sS'required'
p23492
I00
sS'group_name'
p23493
S'PETSc'
p23494
sa(dp23495
S'description'
p23496
S'Specifies an end time to begin output on each linear residual evaluation\n'
p23497
sS'cpp_type'
p23498
S'double'
p23499
sS'default'
p23500
g3
sS'name'
p23501
S'linear_residual_end_time'
p23502
sS'required'
p23503
I00
sS'group_name'
p23504
S'PETSc'
p23505
sa(dp23506
S'description'
p23507
S'Specifies a start time to begin output on each linear residual evaluation\n'
p23508
sS'cpp_type'
p23509
S'double'
p23510
sS'default'
p23511
g3
sS'name'
p23512
S'linear_residual_start_time'
p23513
sS'required'
p23514
I00
sS'group_name'
p23515
S'PETSc'
p23516
sa(dp23517
S'description'
p23518
S'Specifies whether output occurs on each linear residual evaluation\n'
p23519
sS'cpp_type'
p23520
S'bool'
p23521
sS'default'
p23522
S'0'
p23523
sS'name'
p23524
S'linear_residuals'
p23525
sS'required'
p23526
I00
sS'group_name'
p23527
S'PETSc'
p23528
sa(dp23529
S'description'
p23530
S'Number of divisions applied to time step when outtputting non-linear residuals\n'
p23531
sS'cpp_type'
p23532
S'double'
p23533
sS'default'
p23534
S'1000'
p23535
sS'name'
p23536
S'nonlinear_residual_dt_divisor'
p23537
sS'required'
p23538
I00
sS'group_name'
p23539
S'PETSc'
p23540
sa(dp23541
S'description'
p23542
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p23543
sS'cpp_type'
p23544
S'double'
p23545
sS'default'
p23546
g3
sS'name'
p23547
S'nonlinear_residual_end_time'
p23548
sS'required'
p23549
I00
sS'group_name'
p23550
S'PETSc'
p23551
sa(dp23552
S'description'
p23553
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p23554
sS'cpp_type'
p23555
S'double'
p23556
sS'default'
p23557
g3
sS'name'
p23558
S'nonlinear_residual_start_time'
p23559
sS'required'
p23560
I00
sS'group_name'
p23561
S'PETSc'
p23562
sa(dp23563
S'description'
p23564
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p23565
sS'cpp_type'
p23566
S'bool'
p23567
sS'default'
p23568
S'0'
p23569
sS'name'
p23570
S'nonlinear_residuals'
p23571
sS'required'
p23572
I00
sS'group_name'
p23573
S'PETSc'
p23574
sa(dp23575
S'description'
p23576
S'Enable/disable the output of elemental nonlinear variables\n'
p23577
sS'cpp_type'
p23578
S'bool'
p23579
sS'default'
p23580
S'1'
p23581
sS'name'
p23582
S'output_elemental_variables'
p23583
sS'required'
p23584
I00
sS'group_name'
p23585
S'Variables'
p23586
sa(dp23587
S'description'
p23588
S'When true all time attempted time steps are output\n'
p23589
sS'cpp_type'
p23590
S'bool'
p23591
sS'default'
p23592
S'0'
p23593
sS'name'
p23594
S'output_failed'
p23595
sS'required'
p23596
I00
sS'group_name'
p23597
Nsa(dp23598
S'description'
p23599
S'Force the final time step to be output, regardless of output interval\n'
p23600
sS'cpp_type'
p23601
S'bool'
p23602
sS'default'
p23603
g3
sS'name'
p23604
S'output_final'
p23605
sS'required'
p23606
I00
sS'group_name'
p23607
S'Timing'
p23608
sa(dp23609
S'description'
p23610
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputing only a subset of outputs when using MultiApps.\n'
p23611
sS'cpp_type'
p23612
S'std::vector<std::string, std::allocator<std::string> >'
p23613
sS'default'
p23614
g3
sS'name'
p23615
S'output_if_base_contains'
p23616
sS'required'
p23617
I00
sS'group_name'
p23618
S'Advanced'
p23619
sa(dp23620
S'description'
p23621
S'Request that the initial condition is output to the solution file\n'
p23622
sS'cpp_type'
p23623
S'bool'
p23624
sS'default'
p23625
g3
sS'name'
p23626
S'output_initial'
p23627
sS'required'
p23628
I00
sS'group_name'
p23629
S'Timing'
p23630
sa(dp23631
S'description'
p23632
S'Output the input file\n'
p23633
sS'cpp_type'
p23634
S'bool'
p23635
sS'default'
p23636
S'0'
p23637
sS'name'
p23638
S'output_input'
p23639
sS'required'
p23640
I00
sS'group_name'
p23641
Nsa(dp23642
S'description'
p23643
S'Request that all intermediate steps (not initial or final) are output\n'
p23644
sS'cpp_type'
p23645
S'bool'
p23646
sS'default'
p23647
g3
sS'name'
p23648
S'output_intermediate'
p23649
sS'required'
p23650
I00
sS'group_name'
p23651
Nsa(dp23652
S'description'
p23653
S'Enable/disable the output of nodal nonlinear variables\n'
p23654
sS'cpp_type'
p23655
S'bool'
p23656
sS'default'
p23657
S'1'
p23658
sS'name'
p23659
S'output_nodal_variables'
p23660
sS'required'
p23661
I00
sS'group_name'
p23662
S'Variables'
p23663
sa(dp23664
S'description'
p23665
S'Enable/disable the output of postprocessors\n'
p23666
sS'cpp_type'
p23667
S'bool'
p23668
sS'default'
p23669
S'1'
p23670
sS'name'
p23671
S'output_postprocessors'
p23672
sS'required'
p23673
I00
sS'group_name'
p23674
S'Variables'
p23675
sa(dp23676
S'description'
p23677
S'Enable/disable the output of aux scalar variables\n'
p23678
sS'cpp_type'
p23679
S'bool'
p23680
sS'default'
p23681
S'1'
p23682
sS'name'
p23683
S'output_scalar_variables'
p23684
sS'required'
p23685
I00
sS'group_name'
p23686
S'Variables'
p23687
sa(dp23688
S'description'
p23689
S'Toggles the display of the system information prior to the solve\n'
p23690
sS'cpp_type'
p23691
S'bool'
p23692
sS'default'
p23693
S'1'
p23694
sS'name'
p23695
S'output_system_information'
p23696
sS'required'
p23697
I00
sS'group_name'
p23698
Nsa(dp23699
S'description'
p23700
S'Set to true to enable oversampling\n'
p23701
sS'cpp_type'
p23702
S'bool'
p23703
sS'default'
p23704
S'0'
p23705
sS'name'
p23706
S'oversample'
p23707
sS'required'
p23708
I00
sS'group_name'
p23709
S'Oversampling'
p23710
sa(dp23711
S'description'
p23712
S'The number of for extension suffix (e.g., out.e-s002)\n'
p23713
sS'cpp_type'
p23714
S'unsigned int'
p23715
sS'default'
p23716
S'4'
p23717
sS'name'
p23718
S'padding'
p23719
sS'required'
p23720
I00
sS'group_name'
p23721
S'Advanced'
p23722
sa(dp23723
S'description'
p23724
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p23725
sS'cpp_type'
p23726
S'libMesh::Point'
p23727
sS'default'
p23728
g3
sS'name'
p23729
S'position'
p23730
sS'required'
p23731
I00
sS'group_name'
p23732
S'Oversampling'
p23733
sa(dp23734
S'description'
p23735
S'Number of uniform refinements for oversampling\n'
p23736
sS'cpp_type'
p23737
S'unsigned int'
p23738
sS'default'
p23739
S'0'
p23740
sS'name'
p23741
S'refinements'
p23742
sS'required'
p23743
I00
sS'group_name'
p23744
S'Oversampling'
p23745
sa(dp23746
S'description'
p23747
S'Output scalar variables as nodal\n'
p23748
sS'cpp_type'
p23749
S'bool'
p23750
sS'default'
p23751
S'0'
p23752
sS'name'
p23753
S'scalar_as_nodal'
p23754
sS'required'
p23755
I00
sS'group_name'
p23756
S'Variables'
p23757
sa(dp23758
S'description'
p23759
S"Enable/disable sequential file output (enable by default when 'use_displace = true', otherwise defaults to false\n"
p23760
sS'cpp_type'
p23761
S'bool'
p23762
sS'default'
p23763
g3
sS'name'
p23764
S'sequence'
p23765
sS'required'
p23766
I00
sS'group_name'
p23767
Nsa(dp23768
S'description'
p23769
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p23770
sS'cpp_type'
p23771
S'std::vector<VariableName, std::allocator<VariableName> >'
p23772
sS'default'
p23773
g3
sS'name'
p23774
S'show'
p23775
sS'required'
p23776
I00
sS'group_name'
p23777
S'Variables'
p23778
sa(dp23779
S'description'
p23780
S'Time at which this outputter begins\n'
p23781
sS'cpp_type'
p23782
S'double'
p23783
sS'default'
p23784
g3
sS'name'
p23785
S'start_time'
p23786
sS'required'
p23787
I00
sS'group_name'
p23788
S'Timing'
p23789
sa(dp23790
S'description'
p23791
S'Only export results at sync times\n'
p23792
sS'cpp_type'
p23793
S'bool'
p23794
sS'default'
p23795
S'0'
p23796
sS'name'
p23797
S'sync_only'
p23798
sS'required'
p23799
I00
sS'group_name'
p23800
S'Timing'
p23801
sa(dp23802
S'description'
p23803
S'Times at which the output and solution is forced to occur\n'
p23804
sS'cpp_type'
p23805
S'std::vector<double, std::allocator<double> >'
p23806
sS'default'
p23807
g3
sS'name'
p23808
S'sync_times'
p23809
sS'required'
p23810
I00
sS'group_name'
p23811
S'Timing'
p23812
sa(dp23813
S'description'
p23814
S'Time tolerance utilized checking start and end times\n'
p23815
sS'cpp_type'
p23816
S'double'
p23817
sS'default'
p23818
S'1e-14'
p23819
sS'name'
p23820
S'time_tolerance'
p23821
sS'required'
p23822
I00
sS'group_name'
p23823
S'Timing'
p23824
sa(dp23825
S'description'
p23826
g3
sS'cpp_type'
p23827
S'std::string'
p23828
sS'default'
p23829
S'Nemesis'
p23830
sS'name'
p23831
S'type'
p23832
sS'required'
p23833
I00
sS'group_name'
p23834
Nsa(dp23835
S'description'
p23836
S'Enable/disable the use of the displaced mesh for outputting\n'
p23837
sS'cpp_type'
p23838
S'bool'
p23839
sS'default'
p23840
S'0'
p23841
sS'name'
p23842
S'use_displaced'
p23843
sS'required'
p23844
I00
sS'group_name'
p23845
NsasS'name'
p23846
S'/Outputs/Nemesis'
p23847
sa(dp23848
S'description'
p23849
g3
sS'type'
p23850
NsS'subblocks'
p23851
NsS'parameters'
p23852
(lp23853
(dp23854
S'description'
p23855
S"Append '_displaced' to the output file base\n"
p23856
sS'cpp_type'
p23857
S'bool'
p23858
sS'default'
p23859
S'0'
p23860
sS'name'
p23861
S'append_displaced'
p23862
sS'required'
p23863
I00
sS'group_name'
p23864
S'Displaced'
p23865
sa(dp23866
S'description'
p23867
S'Output elemental nonlinear variables as nodal\n'
p23868
sS'cpp_type'
p23869
S'bool'
p23870
sS'default'
p23871
S'0'
p23872
sS'name'
p23873
S'elemental_as_nodal'
p23874
sS'required'
p23875
I00
sS'group_name'
p23876
S'Variables'
p23877
sa(dp23878
S'description'
p23879
S'Time at which this outputter ends\n'
p23880
sS'cpp_type'
p23881
S'double'
p23882
sS'default'
p23883
g3
sS'name'
p23884
S'end_time'
p23885
sS'required'
p23886
I00
sS'group_name'
p23887
S'Timing'
p23888
sa(dp23889
S'description'
p23890
S"The desired solution output name without an extension (Defaults appends '_out' to the input file name)\n"
p23891
sS'cpp_type'
p23892
S'std::string'
p23893
sS'default'
p23894
g3
sS'name'
p23895
S'file_base'
p23896
sS'required'
p23897
I00
sS'group_name'
p23898
Nsa(dp23899
S'description'
p23900
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p23901
sS'cpp_type'
p23902
S'std::vector<VariableName, std::allocator<VariableName> >'
p23903
sS'default'
p23904
g3
sS'name'
p23905
S'hide'
p23906
sS'required'
p23907
I00
sS'group_name'
p23908
S'Variables'
p23909
sa(dp23910
S'description'
p23911
S'The interval at which time steps are output to the solution file\n'
p23912
sS'cpp_type'
p23913
S'unsigned int'
p23914
sS'default'
p23915
g3
sS'name'
p23916
S'interval'
p23917
sS'required'
p23918
I00
sS'group_name'
p23919
S'Timing'
p23920
sa(dp23921
S'description'
p23922
S'When true all time attempted time steps are output\n'
p23923
sS'cpp_type'
p23924
S'bool'
p23925
sS'default'
p23926
S'0'
p23927
sS'name'
p23928
S'output_failed'
p23929
sS'required'
p23930
I00
sS'group_name'
p23931
Nsa(dp23932
S'description'
p23933
S'Force the final time step to be output, regardless of output interval\n'
p23934
sS'cpp_type'
p23935
S'bool'
p23936
sS'default'
p23937
g3
sS'name'
p23938
S'output_final'
p23939
sS'required'
p23940
I00
sS'group_name'
p23941
S'Timing'
p23942
sa(dp23943
S'description'
p23944
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputing only a subset of outputs when using MultiApps.\n'
p23945
sS'cpp_type'
p23946
S'std::vector<std::string, std::allocator<std::string> >'
p23947
sS'default'
p23948
g3
sS'name'
p23949
S'output_if_base_contains'
p23950
sS'required'
p23951
I00
sS'group_name'
p23952
S'Advanced'
p23953
sa(dp23954
S'description'
p23955
S'Request that the initial condition is output to the solution file\n'
p23956
sS'cpp_type'
p23957
S'bool'
p23958
sS'default'
p23959
g3
sS'name'
p23960
S'output_initial'
p23961
sS'required'
p23962
I00
sS'group_name'
p23963
S'Timing'
p23964
sa(dp23965
S'description'
p23966
S'Output the input file\n'
p23967
sS'cpp_type'
p23968
S'bool'
p23969
sS'default'
p23970
S'0'
p23971
sS'name'
p23972
S'output_input'
p23973
sS'required'
p23974
I00
sS'group_name'
p23975
Nsa(dp23976
S'description'
p23977
S'Request that all intermediate steps (not initial or final) are output\n'
p23978
sS'cpp_type'
p23979
S'bool'
p23980
sS'default'
p23981
g3
sS'name'
p23982
S'output_intermediate'
p23983
sS'required'
p23984
I00
sS'group_name'
p23985
Nsa(dp23986
S'description'
p23987
S'Toggles the display of the system information prior to the solve\n'
p23988
sS'cpp_type'
p23989
S'bool'
p23990
sS'default'
p23991
S'1'
p23992
sS'name'
p23993
S'output_system_information'
p23994
sS'required'
p23995
I00
sS'group_name'
p23996
Nsa(dp23997
S'description'
p23998
S'Output scalar variables as nodal\n'
p23999
sS'cpp_type'
p24000
S'bool'
p24001
sS'default'
p24002
S'0'
p24003
sS'name'
p24004
S'scalar_as_nodal'
p24005
sS'required'
p24006
I00
sS'group_name'
p24007
S'Variables'
p24008
sa(dp24009
S'description'
p24010
S"Enable/disable sequential file output (enable by default when 'use_displace = true', otherwise defaults to false\n"
p24011
sS'cpp_type'
p24012
S'bool'
p24013
sS'default'
p24014
g3
sS'name'
p24015
S'sequence'
p24016
sS'required'
p24017
I00
sS'group_name'
p24018
Nsa(dp24019
S'description'
p24020
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p24021
sS'cpp_type'
p24022
S'std::vector<VariableName, std::allocator<VariableName> >'
p24023
sS'default'
p24024
g3
sS'name'
p24025
S'show'
p24026
sS'required'
p24027
I00
sS'group_name'
p24028
S'Variables'
p24029
sa(dp24030
S'description'
p24031
S'Time at which this outputter begins\n'
p24032
sS'cpp_type'
p24033
S'double'
p24034
sS'default'
p24035
g3
sS'name'
p24036
S'start_time'
p24037
sS'required'
p24038
I00
sS'group_name'
p24039
S'Timing'
p24040
sa(dp24041
S'description'
p24042
S'Only export results at sync times\n'
p24043
sS'cpp_type'
p24044
S'bool'
p24045
sS'default'
p24046
S'0'
p24047
sS'name'
p24048
S'sync_only'
p24049
sS'required'
p24050
I00
sS'group_name'
p24051
S'Timing'
p24052
sa(dp24053
S'description'
p24054
S'Times at which the output and solution is forced to occur\n'
p24055
sS'cpp_type'
p24056
S'std::vector<double, std::allocator<double> >'
p24057
sS'default'
p24058
g3
sS'name'
p24059
S'sync_times'
p24060
sS'required'
p24061
I00
sS'group_name'
p24062
S'Timing'
p24063
sa(dp24064
S'description'
p24065
S'Time tolerance utilized checking start and end times\n'
p24066
sS'cpp_type'
p24067
S'double'
p24068
sS'default'
p24069
S'1e-14'
p24070
sS'name'
p24071
S'time_tolerance'
p24072
sS'required'
p24073
I00
sS'group_name'
p24074
S'Timing'
p24075
sa(dp24076
S'description'
p24077
g3
sS'cpp_type'
p24078
S'std::string'
p24079
sS'default'
p24080
S'SolutionHistory'
p24081
sS'name'
p24082
S'type'
p24083
sS'required'
p24084
I00
sS'group_name'
p24085
Nsa(dp24086
S'description'
p24087
S'Enable/disable the use of the displaced mesh for outputting\n'
p24088
sS'cpp_type'
p24089
S'bool'
p24090
sS'default'
p24091
S'0'
p24092
sS'name'
p24093
S'use_displaced'
p24094
sS'required'
p24095
I00
sS'group_name'
p24096
NsasS'name'
p24097
S'/Outputs/SolutionHistory'
p24098
sa(dp24099
S'description'
p24100
g3
sS'type'
p24101
NsS'subblocks'
p24102
NsS'parameters'
p24103
(lp24104
(dp24105
S'description'
p24106
S"Append '_displaced' to the output file base\n"
p24107
sS'cpp_type'
p24108
S'bool'
p24109
sS'default'
p24110
S'0'
p24111
sS'name'
p24112
S'append_displaced'
p24113
sS'required'
p24114
I00
sS'group_name'
p24115
S'Displaced'
p24116
sa(dp24117
S'description'
p24118
S"Append '_oversample' to the output file base\n"
p24119
sS'cpp_type'
p24120
S'bool'
p24121
sS'default'
p24122
S'0'
p24123
sS'name'
p24124
S'append_oversample'
p24125
sS'required'
p24126
I00
sS'group_name'
p24127
S'Oversampling'
p24128
sa(dp24129
S'description'
p24130
S'If true, append to an existing ASCII file rather than creating a new file each time\n'
p24131
sS'cpp_type'
p24132
S'bool'
p24133
sS'default'
p24134
S'0'
p24135
sS'name'
p24136
S'ascii_append'
p24137
sS'required'
p24138
I00
sS'group_name'
p24139
Nsa(dp24140
S'description'
p24141
S'Set Tecplot files to output in binary format\n'
p24142
sS'cpp_type'
p24143
S'bool'
p24144
sS'default'
p24145
S'0'
p24146
sS'name'
p24147
S'binary'
p24148
sS'required'
p24149
I00
sS'group_name'
p24150
S'Advanced'
p24151
sa(dp24152
S'description'
p24153
S'Output elemental nonlinear variables as nodal\n'
p24154
sS'cpp_type'
p24155
S'bool'
p24156
sS'default'
p24157
S'0'
p24158
sS'name'
p24159
S'elemental_as_nodal'
p24160
sS'required'
p24161
I00
sS'group_name'
p24162
S'Variables'
p24163
sa(dp24164
S'description'
p24165
S'Time at which this outputter ends\n'
p24166
sS'cpp_type'
p24167
S'double'
p24168
sS'default'
p24169
g3
sS'name'
p24170
S'end_time'
p24171
sS'required'
p24172
I00
sS'group_name'
p24173
S'Timing'
p24174
sa(dp24175
S'description'
p24176
S'The name of the mesh file to read, for oversampling\n'
p24177
sS'cpp_type'
p24178
S'MeshFileName'
p24179
sS'default'
p24180
g3
sS'name'
p24181
S'file'
p24182
sS'required'
p24183
I00
sS'group_name'
p24184
S'Oversampling'
p24185
sa(dp24186
S'description'
p24187
S"The desired solution output name without an extension (Defaults appends '_out' to the input file name)\n"
p24188
sS'cpp_type'
p24189
S'std::string'
p24190
sS'default'
p24191
g3
sS'name'
p24192
S'file_base'
p24193
sS'required'
p24194
I00
sS'group_name'
p24195
Nsa(dp24196
S'description'
p24197
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p24198
sS'cpp_type'
p24199
S'std::vector<VariableName, std::allocator<VariableName> >'
p24200
sS'default'
p24201
g3
sS'name'
p24202
S'hide'
p24203
sS'required'
p24204
I00
sS'group_name'
p24205
S'Variables'
p24206
sa(dp24207
S'description'
p24208
S'The interval at which time steps are output to the solution file\n'
p24209
sS'cpp_type'
p24210
S'unsigned int'
p24211
sS'default'
p24212
g3
sS'name'
p24213
S'interval'
p24214
sS'required'
p24215
I00
sS'group_name'
p24216
S'Timing'
p24217
sa(dp24218
S'description'
p24219
S'Number of divisions applied to time step when outtputting linear residuals\n'
p24220
sS'cpp_type'
p24221
S'double'
p24222
sS'default'
p24223
S'1000'
p24224
sS'name'
p24225
S'linear_residual_dt_divisor'
p24226
sS'required'
p24227
I00
sS'group_name'
p24228
S'PETSc'
p24229
sa(dp24230
S'description'
p24231
S'Specifies an end time to begin output on each linear residual evaluation\n'
p24232
sS'cpp_type'
p24233
S'double'
p24234
sS'default'
p24235
g3
sS'name'
p24236
S'linear_residual_end_time'
p24237
sS'required'
p24238
I00
sS'group_name'
p24239
S'PETSc'
p24240
sa(dp24241
S'description'
p24242
S'Specifies a start time to begin output on each linear residual evaluation\n'
p24243
sS'cpp_type'
p24244
S'double'
p24245
sS'default'
p24246
g3
sS'name'
p24247
S'linear_residual_start_time'
p24248
sS'required'
p24249
I00
sS'group_name'
p24250
S'PETSc'
p24251
sa(dp24252
S'description'
p24253
S'Specifies whether output occurs on each linear residual evaluation\n'
p24254
sS'cpp_type'
p24255
S'bool'
p24256
sS'default'
p24257
S'0'
p24258
sS'name'
p24259
S'linear_residuals'
p24260
sS'required'
p24261
I00
sS'group_name'
p24262
S'PETSc'
p24263
sa(dp24264
S'description'
p24265
S'Number of divisions applied to time step when outtputting non-linear residuals\n'
p24266
sS'cpp_type'
p24267
S'double'
p24268
sS'default'
p24269
S'1000'
p24270
sS'name'
p24271
S'nonlinear_residual_dt_divisor'
p24272
sS'required'
p24273
I00
sS'group_name'
p24274
S'PETSc'
p24275
sa(dp24276
S'description'
p24277
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p24278
sS'cpp_type'
p24279
S'double'
p24280
sS'default'
p24281
g3
sS'name'
p24282
S'nonlinear_residual_end_time'
p24283
sS'required'
p24284
I00
sS'group_name'
p24285
S'PETSc'
p24286
sa(dp24287
S'description'
p24288
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p24289
sS'cpp_type'
p24290
S'double'
p24291
sS'default'
p24292
g3
sS'name'
p24293
S'nonlinear_residual_start_time'
p24294
sS'required'
p24295
I00
sS'group_name'
p24296
S'PETSc'
p24297
sa(dp24298
S'description'
p24299
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p24300
sS'cpp_type'
p24301
S'bool'
p24302
sS'default'
p24303
S'0'
p24304
sS'name'
p24305
S'nonlinear_residuals'
p24306
sS'required'
p24307
I00
sS'group_name'
p24308
S'PETSc'
p24309
sa(dp24310
S'description'
p24311
S'When true all time attempted time steps are output\n'
p24312
sS'cpp_type'
p24313
S'bool'
p24314
sS'default'
p24315
S'0'
p24316
sS'name'
p24317
S'output_failed'
p24318
sS'required'
p24319
I00
sS'group_name'
p24320
Nsa(dp24321
S'description'
p24322
S'Force the final time step to be output, regardless of output interval\n'
p24323
sS'cpp_type'
p24324
S'bool'
p24325
sS'default'
p24326
g3
sS'name'
p24327
S'output_final'
p24328
sS'required'
p24329
I00
sS'group_name'
p24330
S'Timing'
p24331
sa(dp24332
S'description'
p24333
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputing only a subset of outputs when using MultiApps.\n'
p24334
sS'cpp_type'
p24335
S'std::vector<std::string, std::allocator<std::string> >'
p24336
sS'default'
p24337
g3
sS'name'
p24338
S'output_if_base_contains'
p24339
sS'required'
p24340
I00
sS'group_name'
p24341
S'Advanced'
p24342
sa(dp24343
S'description'
p24344
S'Request that the initial condition is output to the solution file\n'
p24345
sS'cpp_type'
p24346
S'bool'
p24347
sS'default'
p24348
g3
sS'name'
p24349
S'output_initial'
p24350
sS'required'
p24351
I00
sS'group_name'
p24352
S'Timing'
p24353
sa(dp24354
S'description'
p24355
S'Output the input file\n'
p24356
sS'cpp_type'
p24357
S'bool'
p24358
sS'default'
p24359
S'0'
p24360
sS'name'
p24361
S'output_input'
p24362
sS'required'
p24363
I00
sS'group_name'
p24364
Nsa(dp24365
S'description'
p24366
S'Request that all intermediate steps (not initial or final) are output\n'
p24367
sS'cpp_type'
p24368
S'bool'
p24369
sS'default'
p24370
g3
sS'name'
p24371
S'output_intermediate'
p24372
sS'required'
p24373
I00
sS'group_name'
p24374
Nsa(dp24375
S'description'
p24376
S'Toggles the display of the system information prior to the solve\n'
p24377
sS'cpp_type'
p24378
S'bool'
p24379
sS'default'
p24380
S'1'
p24381
sS'name'
p24382
S'output_system_information'
p24383
sS'required'
p24384
I00
sS'group_name'
p24385
Nsa(dp24386
S'description'
p24387
S'Set to true to enable oversampling\n'
p24388
sS'cpp_type'
p24389
S'bool'
p24390
sS'default'
p24391
S'0'
p24392
sS'name'
p24393
S'oversample'
p24394
sS'required'
p24395
I00
sS'group_name'
p24396
S'Oversampling'
p24397
sa(dp24398
S'description'
p24399
S'The number of for extension suffix (e.g., out.e-s002)\n'
p24400
sS'cpp_type'
p24401
S'unsigned int'
p24402
sS'default'
p24403
S'4'
p24404
sS'name'
p24405
S'padding'
p24406
sS'required'
p24407
I00
sS'group_name'
p24408
S'Advanced'
p24409
sa(dp24410
S'description'
p24411
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p24412
sS'cpp_type'
p24413
S'libMesh::Point'
p24414
sS'default'
p24415
g3
sS'name'
p24416
S'position'
p24417
sS'required'
p24418
I00
sS'group_name'
p24419
S'Oversampling'
p24420
sa(dp24421
S'description'
p24422
S'Number of uniform refinements for oversampling\n'
p24423
sS'cpp_type'
p24424
S'unsigned int'
p24425
sS'default'
p24426
S'0'
p24427
sS'name'
p24428
S'refinements'
p24429
sS'required'
p24430
I00
sS'group_name'
p24431
S'Oversampling'
p24432
sa(dp24433
S'description'
p24434
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p24435
sS'cpp_type'
p24436
S'std::vector<VariableName, std::allocator<VariableName> >'
p24437
sS'default'
p24438
g3
sS'name'
p24439
S'show'
p24440
sS'required'
p24441
I00
sS'group_name'
p24442
S'Variables'
p24443
sa(dp24444
S'description'
p24445
S'Time at which this outputter begins\n'
p24446
sS'cpp_type'
p24447
S'double'
p24448
sS'default'
p24449
g3
sS'name'
p24450
S'start_time'
p24451
sS'required'
p24452
I00
sS'group_name'
p24453
S'Timing'
p24454
sa(dp24455
S'description'
p24456
S'Only export results at sync times\n'
p24457
sS'cpp_type'
p24458
S'bool'
p24459
sS'default'
p24460
S'0'
p24461
sS'name'
p24462
S'sync_only'
p24463
sS'required'
p24464
I00
sS'group_name'
p24465
S'Timing'
p24466
sa(dp24467
S'description'
p24468
S'Times at which the output and solution is forced to occur\n'
p24469
sS'cpp_type'
p24470
S'std::vector<double, std::allocator<double> >'
p24471
sS'default'
p24472
g3
sS'name'
p24473
S'sync_times'
p24474
sS'required'
p24475
I00
sS'group_name'
p24476
S'Timing'
p24477
sa(dp24478
S'description'
p24479
S'Time tolerance utilized checking start and end times\n'
p24480
sS'cpp_type'
p24481
S'double'
p24482
sS'default'
p24483
S'1e-14'
p24484
sS'name'
p24485
S'time_tolerance'
p24486
sS'required'
p24487
I00
sS'group_name'
p24488
S'Timing'
p24489
sa(dp24490
S'description'
p24491
g3
sS'cpp_type'
p24492
S'std::string'
p24493
sS'default'
p24494
S'Tecplot'
p24495
sS'name'
p24496
S'type'
p24497
sS'required'
p24498
I00
sS'group_name'
p24499
Nsa(dp24500
S'description'
p24501
S'Enable/disable the use of the displaced mesh for outputting\n'
p24502
sS'cpp_type'
p24503
S'bool'
p24504
sS'default'
p24505
S'0'
p24506
sS'name'
p24507
S'use_displaced'
p24508
sS'required'
p24509
I00
sS'group_name'
p24510
NsasS'name'
p24511
S'/Outputs/Tecplot'
p24512
sa(dp24513
S'description'
p24514
g3
sS'type'
p24515
NsS'subblocks'
p24516
NsS'parameters'
p24517
(lp24518
(dp24519
S'description'
p24520
S"Append '_displaced' to the output file base\n"
p24521
sS'cpp_type'
p24522
S'bool'
p24523
sS'default'
p24524
S'0'
p24525
sS'name'
p24526
S'append_displaced'
p24527
sS'required'
p24528
I00
sS'group_name'
p24529
S'Displaced'
p24530
sa(dp24531
S'description'
p24532
S"Append '_oversample' to the output file base\n"
p24533
sS'cpp_type'
p24534
S'bool'
p24535
sS'default'
p24536
S'0'
p24537
sS'name'
p24538
S'append_oversample'
p24539
sS'required'
p24540
I00
sS'group_name'
p24541
S'Oversampling'
p24542
sa(dp24543
S'description'
p24544
S'Set VTK files to output in binary format\n'
p24545
sS'cpp_type'
p24546
S'bool'
p24547
sS'default'
p24548
S'0'
p24549
sS'name'
p24550
S'binary'
p24551
sS'required'
p24552
I00
sS'group_name'
p24553
S'Advanced'
p24554
sa(dp24555
S'description'
p24556
S'Output elemental nonlinear variables as nodal\n'
p24557
sS'cpp_type'
p24558
S'bool'
p24559
sS'default'
p24560
S'0'
p24561
sS'name'
p24562
S'elemental_as_nodal'
p24563
sS'required'
p24564
I00
sS'group_name'
p24565
S'Variables'
p24566
sa(dp24567
S'description'
p24568
S'Time at which this outputter ends\n'
p24569
sS'cpp_type'
p24570
S'double'
p24571
sS'default'
p24572
g3
sS'name'
p24573
S'end_time'
p24574
sS'required'
p24575
I00
sS'group_name'
p24576
S'Timing'
p24577
sa(dp24578
S'description'
p24579
S'The name of the mesh file to read, for oversampling\n'
p24580
sS'cpp_type'
p24581
S'MeshFileName'
p24582
sS'default'
p24583
g3
sS'name'
p24584
S'file'
p24585
sS'required'
p24586
I00
sS'group_name'
p24587
S'Oversampling'
p24588
sa(dp24589
S'description'
p24590
S"The desired solution output name without an extension (Defaults appends '_out' to the input file name)\n"
p24591
sS'cpp_type'
p24592
S'std::string'
p24593
sS'default'
p24594
g3
sS'name'
p24595
S'file_base'
p24596
sS'required'
p24597
I00
sS'group_name'
p24598
Nsa(dp24599
S'description'
p24600
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p24601
sS'cpp_type'
p24602
S'std::vector<VariableName, std::allocator<VariableName> >'
p24603
sS'default'
p24604
g3
sS'name'
p24605
S'hide'
p24606
sS'required'
p24607
I00
sS'group_name'
p24608
S'Variables'
p24609
sa(dp24610
S'description'
p24611
S'The interval at which time steps are output to the solution file\n'
p24612
sS'cpp_type'
p24613
S'unsigned int'
p24614
sS'default'
p24615
g3
sS'name'
p24616
S'interval'
p24617
sS'required'
p24618
I00
sS'group_name'
p24619
S'Timing'
p24620
sa(dp24621
S'description'
p24622
S'Number of divisions applied to time step when outtputting linear residuals\n'
p24623
sS'cpp_type'
p24624
S'double'
p24625
sS'default'
p24626
S'1000'
p24627
sS'name'
p24628
S'linear_residual_dt_divisor'
p24629
sS'required'
p24630
I00
sS'group_name'
p24631
S'PETSc'
p24632
sa(dp24633
S'description'
p24634
S'Specifies an end time to begin output on each linear residual evaluation\n'
p24635
sS'cpp_type'
p24636
S'double'
p24637
sS'default'
p24638
g3
sS'name'
p24639
S'linear_residual_end_time'
p24640
sS'required'
p24641
I00
sS'group_name'
p24642
S'PETSc'
p24643
sa(dp24644
S'description'
p24645
S'Specifies a start time to begin output on each linear residual evaluation\n'
p24646
sS'cpp_type'
p24647
S'double'
p24648
sS'default'
p24649
g3
sS'name'
p24650
S'linear_residual_start_time'
p24651
sS'required'
p24652
I00
sS'group_name'
p24653
S'PETSc'
p24654
sa(dp24655
S'description'
p24656
S'Specifies whether output occurs on each linear residual evaluation\n'
p24657
sS'cpp_type'
p24658
S'bool'
p24659
sS'default'
p24660
S'0'
p24661
sS'name'
p24662
S'linear_residuals'
p24663
sS'required'
p24664
I00
sS'group_name'
p24665
S'PETSc'
p24666
sa(dp24667
S'description'
p24668
S'Number of divisions applied to time step when outtputting non-linear residuals\n'
p24669
sS'cpp_type'
p24670
S'double'
p24671
sS'default'
p24672
S'1000'
p24673
sS'name'
p24674
S'nonlinear_residual_dt_divisor'
p24675
sS'required'
p24676
I00
sS'group_name'
p24677
S'PETSc'
p24678
sa(dp24679
S'description'
p24680
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p24681
sS'cpp_type'
p24682
S'double'
p24683
sS'default'
p24684
g3
sS'name'
p24685
S'nonlinear_residual_end_time'
p24686
sS'required'
p24687
I00
sS'group_name'
p24688
S'PETSc'
p24689
sa(dp24690
S'description'
p24691
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p24692
sS'cpp_type'
p24693
S'double'
p24694
sS'default'
p24695
g3
sS'name'
p24696
S'nonlinear_residual_start_time'
p24697
sS'required'
p24698
I00
sS'group_name'
p24699
S'PETSc'
p24700
sa(dp24701
S'description'
p24702
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p24703
sS'cpp_type'
p24704
S'bool'
p24705
sS'default'
p24706
S'0'
p24707
sS'name'
p24708
S'nonlinear_residuals'
p24709
sS'required'
p24710
I00
sS'group_name'
p24711
S'PETSc'
p24712
sa(dp24713
S'description'
p24714
S'Enable/disable the output of elemental nonlinear variables\n'
p24715
sS'cpp_type'
p24716
S'bool'
p24717
sS'default'
p24718
S'1'
p24719
sS'name'
p24720
S'output_elemental_variables'
p24721
sS'required'
p24722
I00
sS'group_name'
p24723
S'Variables'
p24724
sa(dp24725
S'description'
p24726
S'When true all time attempted time steps are output\n'
p24727
sS'cpp_type'
p24728
S'bool'
p24729
sS'default'
p24730
S'0'
p24731
sS'name'
p24732
S'output_failed'
p24733
sS'required'
p24734
I00
sS'group_name'
p24735
Nsa(dp24736
S'description'
p24737
S'Force the final time step to be output, regardless of output interval\n'
p24738
sS'cpp_type'
p24739
S'bool'
p24740
sS'default'
p24741
g3
sS'name'
p24742
S'output_final'
p24743
sS'required'
p24744
I00
sS'group_name'
p24745
S'Timing'
p24746
sa(dp24747
S'description'
p24748
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputing only a subset of outputs when using MultiApps.\n'
p24749
sS'cpp_type'
p24750
S'std::vector<std::string, std::allocator<std::string> >'
p24751
sS'default'
p24752
g3
sS'name'
p24753
S'output_if_base_contains'
p24754
sS'required'
p24755
I00
sS'group_name'
p24756
S'Advanced'
p24757
sa(dp24758
S'description'
p24759
S'Request that the initial condition is output to the solution file\n'
p24760
sS'cpp_type'
p24761
S'bool'
p24762
sS'default'
p24763
g3
sS'name'
p24764
S'output_initial'
p24765
sS'required'
p24766
I00
sS'group_name'
p24767
S'Timing'
p24768
sa(dp24769
S'description'
p24770
S'Output the input file\n'
p24771
sS'cpp_type'
p24772
S'bool'
p24773
sS'default'
p24774
S'0'
p24775
sS'name'
p24776
S'output_input'
p24777
sS'required'
p24778
I00
sS'group_name'
p24779
Nsa(dp24780
S'description'
p24781
S'Request that all intermediate steps (not initial or final) are output\n'
p24782
sS'cpp_type'
p24783
S'bool'
p24784
sS'default'
p24785
g3
sS'name'
p24786
S'output_intermediate'
p24787
sS'required'
p24788
I00
sS'group_name'
p24789
Nsa(dp24790
S'description'
p24791
S'Enable/disable the output of nodal nonlinear variables\n'
p24792
sS'cpp_type'
p24793
S'bool'
p24794
sS'default'
p24795
S'1'
p24796
sS'name'
p24797
S'output_nodal_variables'
p24798
sS'required'
p24799
I00
sS'group_name'
p24800
S'Variables'
p24801
sa(dp24802
S'description'
p24803
S'Toggles the display of the system information prior to the solve\n'
p24804
sS'cpp_type'
p24805
S'bool'
p24806
sS'default'
p24807
S'1'
p24808
sS'name'
p24809
S'output_system_information'
p24810
sS'required'
p24811
I00
sS'group_name'
p24812
Nsa(dp24813
S'description'
p24814
S'Set to true to enable oversampling\n'
p24815
sS'cpp_type'
p24816
S'bool'
p24817
sS'default'
p24818
S'0'
p24819
sS'name'
p24820
S'oversample'
p24821
sS'required'
p24822
I00
sS'group_name'
p24823
S'Oversampling'
p24824
sa(dp24825
S'description'
p24826
S'The number of for extension suffix (e.g., out.e-s002)\n'
p24827
sS'cpp_type'
p24828
S'unsigned int'
p24829
sS'default'
p24830
S'3'
p24831
sS'name'
p24832
S'padding'
p24833
sS'required'
p24834
I00
sS'group_name'
p24835
S'Advanced'
p24836
sa(dp24837
S'description'
p24838
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p24839
sS'cpp_type'
p24840
S'libMesh::Point'
p24841
sS'default'
p24842
g3
sS'name'
p24843
S'position'
p24844
sS'required'
p24845
I00
sS'group_name'
p24846
S'Oversampling'
p24847
sa(dp24848
S'description'
p24849
S'Number of uniform refinements for oversampling\n'
p24850
sS'cpp_type'
p24851
S'unsigned int'
p24852
sS'default'
p24853
S'0'
p24854
sS'name'
p24855
S'refinements'
p24856
sS'required'
p24857
I00
sS'group_name'
p24858
S'Oversampling'
p24859
sa(dp24860
S'description'
p24861
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p24862
sS'cpp_type'
p24863
S'std::vector<VariableName, std::allocator<VariableName> >'
p24864
sS'default'
p24865
g3
sS'name'
p24866
S'show'
p24867
sS'required'
p24868
I00
sS'group_name'
p24869
S'Variables'
p24870
sa(dp24871
S'description'
p24872
S'Time at which this outputter begins\n'
p24873
sS'cpp_type'
p24874
S'double'
p24875
sS'default'
p24876
g3
sS'name'
p24877
S'start_time'
p24878
sS'required'
p24879
I00
sS'group_name'
p24880
S'Timing'
p24881
sa(dp24882
S'description'
p24883
S'Only export results at sync times\n'
p24884
sS'cpp_type'
p24885
S'bool'
p24886
sS'default'
p24887
S'0'
p24888
sS'name'
p24889
S'sync_only'
p24890
sS'required'
p24891
I00
sS'group_name'
p24892
S'Timing'
p24893
sa(dp24894
S'description'
p24895
S'Times at which the output and solution is forced to occur\n'
p24896
sS'cpp_type'
p24897
S'std::vector<double, std::allocator<double> >'
p24898
sS'default'
p24899
g3
sS'name'
p24900
S'sync_times'
p24901
sS'required'
p24902
I00
sS'group_name'
p24903
S'Timing'
p24904
sa(dp24905
S'description'
p24906
S'Time tolerance utilized checking start and end times\n'
p24907
sS'cpp_type'
p24908
S'double'
p24909
sS'default'
p24910
S'1e-14'
p24911
sS'name'
p24912
S'time_tolerance'
p24913
sS'required'
p24914
I00
sS'group_name'
p24915
S'Timing'
p24916
sa(dp24917
S'description'
p24918
g3
sS'cpp_type'
p24919
S'std::string'
p24920
sS'default'
p24921
S'VTK'
p24922
sS'name'
p24923
S'type'
p24924
sS'required'
p24925
I00
sS'group_name'
p24926
Nsa(dp24927
S'description'
p24928
S'Enable/disable the use of the displaced mesh for outputting\n'
p24929
sS'cpp_type'
p24930
S'bool'
p24931
sS'default'
p24932
S'0'
p24933
sS'name'
p24934
S'use_displaced'
p24935
sS'required'
p24936
I00
sS'group_name'
p24937
NsasS'name'
p24938
S'/Outputs/VTK'
p24939
sa(dp24940
S'description'
p24941
g3
sS'type'
p24942
NsS'subblocks'
p24943
NsS'parameters'
p24944
(lp24945
(dp24946
S'description'
p24947
S"Append '_displaced' to the output file base\n"
p24948
sS'cpp_type'
p24949
S'bool'
p24950
sS'default'
p24951
S'0'
p24952
sS'name'
p24953
S'append_displaced'
p24954
sS'required'
p24955
I00
sS'group_name'
p24956
S'Displaced'
p24957
sa(dp24958
S'description'
p24959
S"Append '_oversample' to the output file base\n"
p24960
sS'cpp_type'
p24961
S'bool'
p24962
sS'default'
p24963
S'0'
p24964
sS'name'
p24965
S'append_oversample'
p24966
sS'required'
p24967
I00
sS'group_name'
p24968
S'Oversampling'
p24969
sa(dp24970
S'description'
p24971
S'Output elemental nonlinear variables as nodal\n'
p24972
sS'cpp_type'
p24973
S'bool'
p24974
sS'default'
p24975
S'0'
p24976
sS'name'
p24977
S'elemental_as_nodal'
p24978
sS'required'
p24979
I00
sS'group_name'
p24980
S'Variables'
p24981
sa(dp24982
S'description'
p24983
S'Time at which this outputter ends\n'
p24984
sS'cpp_type'
p24985
S'double'
p24986
sS'default'
p24987
g3
sS'name'
p24988
S'end_time'
p24989
sS'required'
p24990
I00
sS'group_name'
p24991
S'Timing'
p24992
sa(dp24993
S'description'
p24994
S'The name of the mesh file to read, for oversampling\n'
p24995
sS'cpp_type'
p24996
S'MeshFileName'
p24997
sS'default'
p24998
g3
sS'name'
p24999
S'file'
p25000
sS'required'
p25001
I00
sS'group_name'
p25002
S'Oversampling'
p25003
sa(dp25004
S'description'
p25005
S"The desired solution output name without an extension (Defaults appends '_out' to the input file name)\n"
p25006
sS'cpp_type'
p25007
S'std::string'
p25008
sS'default'
p25009
g3
sS'name'
p25010
S'file_base'
p25011
sS'required'
p25012
I00
sS'group_name'
p25013
Nsa(dp25014
S'description'
p25015
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p25016
sS'cpp_type'
p25017
S'std::vector<VariableName, std::allocator<VariableName> >'
p25018
sS'default'
p25019
g3
sS'name'
p25020
S'hide'
p25021
sS'required'
p25022
I00
sS'group_name'
p25023
S'Variables'
p25024
sa(dp25025
S'description'
p25026
S'The interval at which time steps are output to the solution file\n'
p25027
sS'cpp_type'
p25028
S'unsigned int'
p25029
sS'default'
p25030
g3
sS'name'
p25031
S'interval'
p25032
sS'required'
p25033
I00
sS'group_name'
p25034
S'Timing'
p25035
sa(dp25036
S'description'
p25037
S'Number of divisions applied to time step when outtputting linear residuals\n'
p25038
sS'cpp_type'
p25039
S'double'
p25040
sS'default'
p25041
S'1000'
p25042
sS'name'
p25043
S'linear_residual_dt_divisor'
p25044
sS'required'
p25045
I00
sS'group_name'
p25046
S'PETSc'
p25047
sa(dp25048
S'description'
p25049
S'Specifies an end time to begin output on each linear residual evaluation\n'
p25050
sS'cpp_type'
p25051
S'double'
p25052
sS'default'
p25053
g3
sS'name'
p25054
S'linear_residual_end_time'
p25055
sS'required'
p25056
I00
sS'group_name'
p25057
S'PETSc'
p25058
sa(dp25059
S'description'
p25060
S'Specifies a start time to begin output on each linear residual evaluation\n'
p25061
sS'cpp_type'
p25062
S'double'
p25063
sS'default'
p25064
g3
sS'name'
p25065
S'linear_residual_start_time'
p25066
sS'required'
p25067
I00
sS'group_name'
p25068
S'PETSc'
p25069
sa(dp25070
S'description'
p25071
S'Specifies whether output occurs on each linear residual evaluation\n'
p25072
sS'cpp_type'
p25073
S'bool'
p25074
sS'default'
p25075
S'0'
p25076
sS'name'
p25077
S'linear_residuals'
p25078
sS'required'
p25079
I00
sS'group_name'
p25080
S'PETSc'
p25081
sa(dp25082
S'description'
p25083
S'Number of divisions applied to time step when outtputting non-linear residuals\n'
p25084
sS'cpp_type'
p25085
S'double'
p25086
sS'default'
p25087
S'1000'
p25088
sS'name'
p25089
S'nonlinear_residual_dt_divisor'
p25090
sS'required'
p25091
I00
sS'group_name'
p25092
S'PETSc'
p25093
sa(dp25094
S'description'
p25095
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p25096
sS'cpp_type'
p25097
S'double'
p25098
sS'default'
p25099
g3
sS'name'
p25100
S'nonlinear_residual_end_time'
p25101
sS'required'
p25102
I00
sS'group_name'
p25103
S'PETSc'
p25104
sa(dp25105
S'description'
p25106
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p25107
sS'cpp_type'
p25108
S'double'
p25109
sS'default'
p25110
g3
sS'name'
p25111
S'nonlinear_residual_start_time'
p25112
sS'required'
p25113
I00
sS'group_name'
p25114
S'PETSc'
p25115
sa(dp25116
S'description'
p25117
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p25118
sS'cpp_type'
p25119
S'bool'
p25120
sS'default'
p25121
S'0'
p25122
sS'name'
p25123
S'nonlinear_residuals'
p25124
sS'required'
p25125
I00
sS'group_name'
p25126
S'PETSc'
p25127
sa(dp25128
S'description'
p25129
S'When true all time attempted time steps are output\n'
p25130
sS'cpp_type'
p25131
S'bool'
p25132
sS'default'
p25133
S'0'
p25134
sS'name'
p25135
S'output_failed'
p25136
sS'required'
p25137
I00
sS'group_name'
p25138
Nsa(dp25139
S'description'
p25140
S'Force the final time step to be output, regardless of output interval\n'
p25141
sS'cpp_type'
p25142
S'bool'
p25143
sS'default'
p25144
g3
sS'name'
p25145
S'output_final'
p25146
sS'required'
p25147
I00
sS'group_name'
p25148
S'Timing'
p25149
sa(dp25150
S'description'
p25151
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputing only a subset of outputs when using MultiApps.\n'
p25152
sS'cpp_type'
p25153
S'std::vector<std::string, std::allocator<std::string> >'
p25154
sS'default'
p25155
g3
sS'name'
p25156
S'output_if_base_contains'
p25157
sS'required'
p25158
I00
sS'group_name'
p25159
S'Advanced'
p25160
sa(dp25161
S'description'
p25162
S'Request that the initial condition is output to the solution file\n'
p25163
sS'cpp_type'
p25164
S'bool'
p25165
sS'default'
p25166
g3
sS'name'
p25167
S'output_initial'
p25168
sS'required'
p25169
I00
sS'group_name'
p25170
S'Timing'
p25171
sa(dp25172
S'description'
p25173
S'Output the input file\n'
p25174
sS'cpp_type'
p25175
S'bool'
p25176
sS'default'
p25177
S'0'
p25178
sS'name'
p25179
S'output_input'
p25180
sS'required'
p25181
I00
sS'group_name'
p25182
Nsa(dp25183
S'description'
p25184
S'Request that all intermediate steps (not initial or final) are output\n'
p25185
sS'cpp_type'
p25186
S'bool'
p25187
sS'default'
p25188
g3
sS'name'
p25189
S'output_intermediate'
p25190
sS'required'
p25191
I00
sS'group_name'
p25192
Nsa(dp25193
S'description'
p25194
S'Toggles the display of the system information prior to the solve\n'
p25195
sS'cpp_type'
p25196
S'bool'
p25197
sS'default'
p25198
S'1'
p25199
sS'name'
p25200
S'output_system_information'
p25201
sS'required'
p25202
I00
sS'group_name'
p25203
Nsa(dp25204
S'description'
p25205
S'Set to true to enable oversampling\n'
p25206
sS'cpp_type'
p25207
S'bool'
p25208
sS'default'
p25209
S'0'
p25210
sS'name'
p25211
S'oversample'
p25212
sS'required'
p25213
I00
sS'group_name'
p25214
S'Oversampling'
p25215
sa(dp25216
S'description'
p25217
S'The number of for extension suffix (e.g., out.e-s002)\n'
p25218
sS'cpp_type'
p25219
S'unsigned int'
p25220
sS'default'
p25221
S'4'
p25222
sS'name'
p25223
S'padding'
p25224
sS'required'
p25225
I00
sS'group_name'
p25226
S'Advanced'
p25227
sa(dp25228
S'description'
p25229
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p25230
sS'cpp_type'
p25231
S'libMesh::Point'
p25232
sS'default'
p25233
g3
sS'name'
p25234
S'position'
p25235
sS'required'
p25236
I00
sS'group_name'
p25237
S'Oversampling'
p25238
sa(dp25239
S'description'
p25240
S'Number of uniform refinements for oversampling\n'
p25241
sS'cpp_type'
p25242
S'unsigned int'
p25243
sS'default'
p25244
S'0'
p25245
sS'name'
p25246
S'refinements'
p25247
sS'required'
p25248
I00
sS'group_name'
p25249
S'Oversampling'
p25250
sa(dp25251
S'description'
p25252
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p25253
sS'cpp_type'
p25254
S'std::vector<VariableName, std::allocator<VariableName> >'
p25255
sS'default'
p25256
g3
sS'name'
p25257
S'show'
p25258
sS'required'
p25259
I00
sS'group_name'
p25260
S'Variables'
p25261
sa(dp25262
S'description'
p25263
S'Time at which this outputter begins\n'
p25264
sS'cpp_type'
p25265
S'double'
p25266
sS'default'
p25267
g3
sS'name'
p25268
S'start_time'
p25269
sS'required'
p25270
I00
sS'group_name'
p25271
S'Timing'
p25272
sa(dp25273
S'description'
p25274
S'Only export results at sync times\n'
p25275
sS'cpp_type'
p25276
S'bool'
p25277
sS'default'
p25278
S'0'
p25279
sS'name'
p25280
S'sync_only'
p25281
sS'required'
p25282
I00
sS'group_name'
p25283
S'Timing'
p25284
sa(dp25285
S'description'
p25286
S'Times at which the output and solution is forced to occur\n'
p25287
sS'cpp_type'
p25288
S'std::vector<double, std::allocator<double> >'
p25289
sS'default'
p25290
g3
sS'name'
p25291
S'sync_times'
p25292
sS'required'
p25293
I00
sS'group_name'
p25294
S'Timing'
p25295
sa(dp25296
S'description'
p25297
S'Time tolerance utilized checking start and end times\n'
p25298
sS'cpp_type'
p25299
S'double'
p25300
sS'default'
p25301
S'1e-14'
p25302
sS'name'
p25303
S'time_tolerance'
p25304
sS'required'
p25305
I00
sS'group_name'
p25306
S'Timing'
p25307
sa(dp25308
S'description'
p25309
g3
sS'cpp_type'
p25310
S'std::string'
p25311
sS'default'
p25312
S'XDA'
p25313
sS'name'
p25314
S'type'
p25315
sS'required'
p25316
I00
sS'group_name'
p25317
Nsa(dp25318
S'description'
p25319
S'Enable/disable the use of the displaced mesh for outputting\n'
p25320
sS'cpp_type'
p25321
S'bool'
p25322
sS'default'
p25323
S'0'
p25324
sS'name'
p25325
S'use_displaced'
p25326
sS'required'
p25327
I00
sS'group_name'
p25328
NsasS'name'
p25329
S'/Outputs/XDA'
p25330
sa(dp25331
S'description'
p25332
g3
sS'type'
p25333
NsS'subblocks'
p25334
NsS'parameters'
p25335
(lp25336
(dp25337
S'description'
p25338
S"Append '_displaced' to the output file base\n"
p25339
sS'cpp_type'
p25340
S'bool'
p25341
sS'default'
p25342
S'0'
p25343
sS'name'
p25344
S'append_displaced'
p25345
sS'required'
p25346
I00
sS'group_name'
p25347
S'Displaced'
p25348
sa(dp25349
S'description'
p25350
S"Append '_oversample' to the output file base\n"
p25351
sS'cpp_type'
p25352
S'bool'
p25353
sS'default'
p25354
S'0'
p25355
sS'name'
p25356
S'append_oversample'
p25357
sS'required'
p25358
I00
sS'group_name'
p25359
S'Oversampling'
p25360
sa(dp25361
S'description'
p25362
S'Output elemental nonlinear variables as nodal\n'
p25363
sS'cpp_type'
p25364
S'bool'
p25365
sS'default'
p25366
S'0'
p25367
sS'name'
p25368
S'elemental_as_nodal'
p25369
sS'required'
p25370
I00
sS'group_name'
p25371
S'Variables'
p25372
sa(dp25373
S'description'
p25374
S'Time at which this outputter ends\n'
p25375
sS'cpp_type'
p25376
S'double'
p25377
sS'default'
p25378
g3
sS'name'
p25379
S'end_time'
p25380
sS'required'
p25381
I00
sS'group_name'
p25382
S'Timing'
p25383
sa(dp25384
S'description'
p25385
S'The name of the mesh file to read, for oversampling\n'
p25386
sS'cpp_type'
p25387
S'MeshFileName'
p25388
sS'default'
p25389
g3
sS'name'
p25390
S'file'
p25391
sS'required'
p25392
I00
sS'group_name'
p25393
S'Oversampling'
p25394
sa(dp25395
S'description'
p25396
S"The desired solution output name without an extension (Defaults appends '_out' to the input file name)\n"
p25397
sS'cpp_type'
p25398
S'std::string'
p25399
sS'default'
p25400
g3
sS'name'
p25401
S'file_base'
p25402
sS'required'
p25403
I00
sS'group_name'
p25404
Nsa(dp25405
S'description'
p25406
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p25407
sS'cpp_type'
p25408
S'std::vector<VariableName, std::allocator<VariableName> >'
p25409
sS'default'
p25410
g3
sS'name'
p25411
S'hide'
p25412
sS'required'
p25413
I00
sS'group_name'
p25414
S'Variables'
p25415
sa(dp25416
S'description'
p25417
S'The interval at which time steps are output to the solution file\n'
p25418
sS'cpp_type'
p25419
S'unsigned int'
p25420
sS'default'
p25421
g3
sS'name'
p25422
S'interval'
p25423
sS'required'
p25424
I00
sS'group_name'
p25425
S'Timing'
p25426
sa(dp25427
S'description'
p25428
S'Number of divisions applied to time step when outtputting linear residuals\n'
p25429
sS'cpp_type'
p25430
S'double'
p25431
sS'default'
p25432
S'1000'
p25433
sS'name'
p25434
S'linear_residual_dt_divisor'
p25435
sS'required'
p25436
I00
sS'group_name'
p25437
S'PETSc'
p25438
sa(dp25439
S'description'
p25440
S'Specifies an end time to begin output on each linear residual evaluation\n'
p25441
sS'cpp_type'
p25442
S'double'
p25443
sS'default'
p25444
g3
sS'name'
p25445
S'linear_residual_end_time'
p25446
sS'required'
p25447
I00
sS'group_name'
p25448
S'PETSc'
p25449
sa(dp25450
S'description'
p25451
S'Specifies a start time to begin output on each linear residual evaluation\n'
p25452
sS'cpp_type'
p25453
S'double'
p25454
sS'default'
p25455
g3
sS'name'
p25456
S'linear_residual_start_time'
p25457
sS'required'
p25458
I00
sS'group_name'
p25459
S'PETSc'
p25460
sa(dp25461
S'description'
p25462
S'Specifies whether output occurs on each linear residual evaluation\n'
p25463
sS'cpp_type'
p25464
S'bool'
p25465
sS'default'
p25466
S'0'
p25467
sS'name'
p25468
S'linear_residuals'
p25469
sS'required'
p25470
I00
sS'group_name'
p25471
S'PETSc'
p25472
sa(dp25473
S'description'
p25474
S'Number of divisions applied to time step when outtputting non-linear residuals\n'
p25475
sS'cpp_type'
p25476
S'double'
p25477
sS'default'
p25478
S'1000'
p25479
sS'name'
p25480
S'nonlinear_residual_dt_divisor'
p25481
sS'required'
p25482
I00
sS'group_name'
p25483
S'PETSc'
p25484
sa(dp25485
S'description'
p25486
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p25487
sS'cpp_type'
p25488
S'double'
p25489
sS'default'
p25490
g3
sS'name'
p25491
S'nonlinear_residual_end_time'
p25492
sS'required'
p25493
I00
sS'group_name'
p25494
S'PETSc'
p25495
sa(dp25496
S'description'
p25497
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p25498
sS'cpp_type'
p25499
S'double'
p25500
sS'default'
p25501
g3
sS'name'
p25502
S'nonlinear_residual_start_time'
p25503
sS'required'
p25504
I00
sS'group_name'
p25505
S'PETSc'
p25506
sa(dp25507
S'description'
p25508
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p25509
sS'cpp_type'
p25510
S'bool'
p25511
sS'default'
p25512
S'0'
p25513
sS'name'
p25514
S'nonlinear_residuals'
p25515
sS'required'
p25516
I00
sS'group_name'
p25517
S'PETSc'
p25518
sa(dp25519
S'description'
p25520
S'When true all time attempted time steps are output\n'
p25521
sS'cpp_type'
p25522
S'bool'
p25523
sS'default'
p25524
S'0'
p25525
sS'name'
p25526
S'output_failed'
p25527
sS'required'
p25528
I00
sS'group_name'
p25529
Nsa(dp25530
S'description'
p25531
S'Force the final time step to be output, regardless of output interval\n'
p25532
sS'cpp_type'
p25533
S'bool'
p25534
sS'default'
p25535
g3
sS'name'
p25536
S'output_final'
p25537
sS'required'
p25538
I00
sS'group_name'
p25539
S'Timing'
p25540
sa(dp25541
S'description'
p25542
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputing only a subset of outputs when using MultiApps.\n'
p25543
sS'cpp_type'
p25544
S'std::vector<std::string, std::allocator<std::string> >'
p25545
sS'default'
p25546
g3
sS'name'
p25547
S'output_if_base_contains'
p25548
sS'required'
p25549
I00
sS'group_name'
p25550
S'Advanced'
p25551
sa(dp25552
S'description'
p25553
S'Request that the initial condition is output to the solution file\n'
p25554
sS'cpp_type'
p25555
S'bool'
p25556
sS'default'
p25557
g3
sS'name'
p25558
S'output_initial'
p25559
sS'required'
p25560
I00
sS'group_name'
p25561
S'Timing'
p25562
sa(dp25563
S'description'
p25564
S'Output the input file\n'
p25565
sS'cpp_type'
p25566
S'bool'
p25567
sS'default'
p25568
S'0'
p25569
sS'name'
p25570
S'output_input'
p25571
sS'required'
p25572
I00
sS'group_name'
p25573
Nsa(dp25574
S'description'
p25575
S'Request that all intermediate steps (not initial or final) are output\n'
p25576
sS'cpp_type'
p25577
S'bool'
p25578
sS'default'
p25579
g3
sS'name'
p25580
S'output_intermediate'
p25581
sS'required'
p25582
I00
sS'group_name'
p25583
Nsa(dp25584
S'description'
p25585
S'Toggles the display of the system information prior to the solve\n'
p25586
sS'cpp_type'
p25587
S'bool'
p25588
sS'default'
p25589
S'1'
p25590
sS'name'
p25591
S'output_system_information'
p25592
sS'required'
p25593
I00
sS'group_name'
p25594
Nsa(dp25595
S'description'
p25596
S'Set to true to enable oversampling\n'
p25597
sS'cpp_type'
p25598
S'bool'
p25599
sS'default'
p25600
S'0'
p25601
sS'name'
p25602
S'oversample'
p25603
sS'required'
p25604
I00
sS'group_name'
p25605
S'Oversampling'
p25606
sa(dp25607
S'description'
p25608
S'The number of for extension suffix (e.g., out.e-s002)\n'
p25609
sS'cpp_type'
p25610
S'unsigned int'
p25611
sS'default'
p25612
S'4'
p25613
sS'name'
p25614
S'padding'
p25615
sS'required'
p25616
I00
sS'group_name'
p25617
S'Advanced'
p25618
sa(dp25619
S'description'
p25620
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p25621
sS'cpp_type'
p25622
S'libMesh::Point'
p25623
sS'default'
p25624
g3
sS'name'
p25625
S'position'
p25626
sS'required'
p25627
I00
sS'group_name'
p25628
S'Oversampling'
p25629
sa(dp25630
S'description'
p25631
S'Number of uniform refinements for oversampling\n'
p25632
sS'cpp_type'
p25633
S'unsigned int'
p25634
sS'default'
p25635
S'0'
p25636
sS'name'
p25637
S'refinements'
p25638
sS'required'
p25639
I00
sS'group_name'
p25640
S'Oversampling'
p25641
sa(dp25642
S'description'
p25643
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p25644
sS'cpp_type'
p25645
S'std::vector<VariableName, std::allocator<VariableName> >'
p25646
sS'default'
p25647
g3
sS'name'
p25648
S'show'
p25649
sS'required'
p25650
I00
sS'group_name'
p25651
S'Variables'
p25652
sa(dp25653
S'description'
p25654
S'Time at which this outputter begins\n'
p25655
sS'cpp_type'
p25656
S'double'
p25657
sS'default'
p25658
g3
sS'name'
p25659
S'start_time'
p25660
sS'required'
p25661
I00
sS'group_name'
p25662
S'Timing'
p25663
sa(dp25664
S'description'
p25665
S'Only export results at sync times\n'
p25666
sS'cpp_type'
p25667
S'bool'
p25668
sS'default'
p25669
S'0'
p25670
sS'name'
p25671
S'sync_only'
p25672
sS'required'
p25673
I00
sS'group_name'
p25674
S'Timing'
p25675
sa(dp25676
S'description'
p25677
S'Times at which the output and solution is forced to occur\n'
p25678
sS'cpp_type'
p25679
S'std::vector<double, std::allocator<double> >'
p25680
sS'default'
p25681
g3
sS'name'
p25682
S'sync_times'
p25683
sS'required'
p25684
I00
sS'group_name'
p25685
S'Timing'
p25686
sa(dp25687
S'description'
p25688
S'Time tolerance utilized checking start and end times\n'
p25689
sS'cpp_type'
p25690
S'double'
p25691
sS'default'
p25692
S'1e-14'
p25693
sS'name'
p25694
S'time_tolerance'
p25695
sS'required'
p25696
I00
sS'group_name'
p25697
S'Timing'
p25698
sa(dp25699
S'description'
p25700
g3
sS'cpp_type'
p25701
S'std::string'
p25702
sS'default'
p25703
S'XDR'
p25704
sS'name'
p25705
S'type'
p25706
sS'required'
p25707
I00
sS'group_name'
p25708
Nsa(dp25709
S'description'
p25710
S'Enable/disable the use of the displaced mesh for outputting\n'
p25711
sS'cpp_type'
p25712
S'bool'
p25713
sS'default'
p25714
S'0'
p25715
sS'name'
p25716
S'use_displaced'
p25717
sS'required'
p25718
I00
sS'group_name'
p25719
NsasS'name'
p25720
S'/Outputs/XDR'
p25721
sasS'parameters'
p25722
(lp25723
(dp25724
S'description'
p25725
S'Create checkpoint files using the default options.\n'
p25726
sS'cpp_type'
p25727
S'bool'
p25728
sS'default'
p25729
S'0'
p25730
sS'name'
p25731
S'checkpoint'
p25732
sS'required'
p25733
I00
sS'group_name'
p25734
Nsa(dp25735
S'description'
p25736
S'Output the results using the default settings for Console output\n'
p25737
sS'cpp_type'
p25738
S'bool'
p25739
sS'default'
p25740
S'0'
p25741
sS'name'
p25742
S'console'
p25743
sS'required'
p25744
I00
sS'group_name'
p25745
Nsa(dp25746
S'description'
p25747
S'Output the scalar variable and postprocessors to a *.csv file using the default CSV output.\n'
p25748
sS'cpp_type'
p25749
S'bool'
p25750
sS'default'
p25751
S'0'
p25752
sS'name'
p25753
S'csv'
p25754
sS'required'
p25755
I00
sS'group_name'
p25756
Nsa(dp25757
S'description'
p25758
S'Output the results using the default settings for Exodus output\n'
p25759
sS'cpp_type'
p25760
S'bool'
p25761
sS'default'
p25762
S'0'
p25763
sS'name'
p25764
S'exodus'
p25765
sS'required'
p25766
I00
sS'group_name'
p25767
Nsa(dp25768
S'description'
p25769
S'Common file base name to be utilized with all output objects\n'
p25770
sS'cpp_type'
p25771
S'std::string'
p25772
sS'default'
p25773
g3
sS'name'
p25774
S'file_base'
p25775
sS'required'
p25776
I00
sS'group_name'
p25777
Nsa(dp25778
S'description'
p25779
S'Output the results using the default settings for GMV output\n'
p25780
sS'cpp_type'
p25781
S'bool'
p25782
sS'default'
p25783
S'0'
p25784
sS'name'
p25785
S'gmv'
p25786
sS'required'
p25787
I00
sS'group_name'
p25788
Nsa(dp25789
S'description'
p25790
S'Output the scalar and postprocessor results using the default settings for GNUPlot output\n'
p25791
sS'cpp_type'
p25792
S'bool'
p25793
sS'default'
p25794
S'0'
p25795
sS'name'
p25796
S'gnuplot'
p25797
sS'required'
p25798
I00
sS'group_name'
p25799
Nsa(dp25800
S'description'
p25801
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p25802
sS'cpp_type'
p25803
S'std::vector<VariableName, std::allocator<VariableName> >'
p25804
sS'default'
p25805
g3
sS'name'
p25806
S'hide'
p25807
sS'required'
p25808
I00
sS'group_name'
p25809
Nsa(dp25810
S'description'
p25811
S'The interval at which timesteps are output to the solution file\n'
p25812
sS'cpp_type'
p25813
S'unsigned int'
p25814
sS'default'
p25815
S'1'
p25816
sS'name'
p25817
S'interval'
p25818
sS'required'
p25819
I00
sS'group_name'
p25820
Nsa(dp25821
S'description'
p25822
S'Output the results using the default settings for Nemesis output\n'
p25823
sS'cpp_type'
p25824
S'bool'
p25825
sS'default'
p25826
S'0'
p25827
sS'name'
p25828
S'nemesis'
p25829
sS'required'
p25830
I00
sS'group_name'
p25831
Nsa(dp25832
S'description'
p25833
S'Force the final timestep to be output, regardless of output interval\n'
p25834
sS'cpp_type'
p25835
S'bool'
p25836
sS'default'
p25837
S'0'
p25838
sS'name'
p25839
S'output_final'
p25840
sS'required'
p25841
I00
sS'group_name'
p25842
Nsa(dp25843
S'description'
p25844
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputing only a subset of outputs when using MultiApps.\n'
p25845
sS'cpp_type'
p25846
S'std::vector<std::string, std::allocator<std::string> >'
p25847
sS'default'
p25848
g3
sS'name'
p25849
S'output_if_base_contains'
p25850
sS'required'
p25851
I00
sS'group_name'
p25852
Nsa(dp25853
S'description'
p25854
S'Request that the initial condition is output to the solution file\n'
p25855
sS'cpp_type'
p25856
S'bool'
p25857
sS'default'
p25858
S'0'
p25859
sS'name'
p25860
S'output_initial'
p25861
sS'required'
p25862
I00
sS'group_name'
p25863
Nsa(dp25864
S'description'
p25865
S'Request that all intermediate steps (not initial or final) are output\n'
p25866
sS'cpp_type'
p25867
S'bool'
p25868
sS'default'
p25869
S'1'
p25870
sS'name'
p25871
S'output_intermediate'
p25872
sS'required'
p25873
I00
sS'group_name'
p25874
Nsa(dp25875
S'description'
p25876
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p25877
sS'cpp_type'
p25878
S'std::vector<VariableName, std::allocator<VariableName> >'
p25879
sS'default'
p25880
g3
sS'name'
p25881
S'show'
p25882
sS'required'
p25883
I00
sS'group_name'
p25884
Nsa(dp25885
S'description'
p25886
S'Print a solution history file (.slh) using the default settings\n'
p25887
sS'cpp_type'
p25888
S'bool'
p25889
sS'default'
p25890
S'0'
p25891
sS'name'
p25892
S'solution_history'
p25893
sS'required'
p25894
I00
sS'group_name'
p25895
Nsa(dp25896
S'description'
p25897
S'Times at which the output and solution is forced to occur\n'
p25898
sS'cpp_type'
p25899
S'std::vector<double, std::allocator<double> >'
p25900
sS'default'
p25901
g3
sS'name'
p25902
S'sync_times'
p25903
sS'required'
p25904
I00
sS'group_name'
p25905
Nsa(dp25906
S'description'
p25907
S'Output the results using the default settings for Tecplot output\n'
p25908
sS'cpp_type'
p25909
S'bool'
p25910
sS'default'
p25911
S'0'
p25912
sS'name'
p25913
S'tecplot'
p25914
sS'required'
p25915
I00
sS'group_name'
p25916
Nsa(dp25917
S'description'
p25918
S'Output the results using the default settings for VTK output\n'
p25919
sS'cpp_type'
p25920
S'bool'
p25921
sS'default'
p25922
S'0'
p25923
sS'name'
p25924
S'vtk'
p25925
sS'required'
p25926
I00
sS'group_name'
p25927
Nsa(dp25928
S'description'
p25929
S'Output the results using the default settings for XDA/XDR output (ascii)\n'
p25930
sS'cpp_type'
p25931
S'bool'
p25932
sS'default'
p25933
S'0'
p25934
sS'name'
p25935
S'xda'
p25936
sS'required'
p25937
I00
sS'group_name'
p25938
Nsa(dp25939
S'description'
p25940
S'Output the results using the default settings for XDA/XDR output (binary)\n'
p25941
sS'cpp_type'
p25942
S'bool'
p25943
sS'default'
p25944
S'0'
p25945
sS'name'
p25946
S'xdr'
p25947
sS'required'
p25948
I00
sS'group_name'
p25949
NsasS'name'
p25950
S'/Outputs'
p25951
sa(dp25952
S'description'
p25953
g3
sS'type'
p25954
NsS'subblocks'
p25955
(lp25956
(dp25957
S'description'
p25958
g3
sS'type'
p25959
NsS'subblocks'
p25960
NsS'parameters'
p25961
(lp25962
(dp25963
S'description'
p25964
S'A string representing the Moose Object that will be built by this Action\n'
p25965
sS'cpp_type'
p25966
S'std::string'
p25967
sS'default'
p25968
g3
sS'name'
p25969
S'type'
p25970
sS'required'
p25971
I01
sS'group_name'
p25972
NsasS'name'
p25973
S'/Postprocessors/*'
p25974
sa(dp25975
S'description'
p25976
g3
sS'type'
p25977
NsS'subblocks'
p25978
NsS'parameters'
p25979
(lp25980
(dp25981
S'description'
p25982
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p25983
sS'cpp_type'
p25984
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p25985
sS'default'
p25986
g3
sS'name'
p25987
S'boundary'
p25988
sS'required'
p25989
I00
sS'group_name'
p25990
Nsa(dp25991
S'name'
p25992
S'execute_on'
p25993
sS'cpp_type'
p25994
S'MooseEnum'
p25995
sS'default'
p25996
S'timestep'
p25997
sS'description'
p25998
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p25999
sS'required'
p26000
I00
sS'options'
p26001
S'initial residual jacobian timestep timestep_begin custom'
p26002
sS'group_name'
p26003
Nsa(dp26004
S'name'
p26005
S'output'
p26006
sS'cpp_type'
p26007
S'MooseEnum'
p26008
sS'default'
p26009
S'auto'
p26010
sS'description'
p26011
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p26012
sS'required'
p26013
I00
sS'options'
p26014
S'none auto screen file both'
p26015
sS'group_name'
p26016
S'Advanced'
p26017
sa(dp26018
S'description'
p26019
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p26020
sS'cpp_type'
p26021
S'std::vector<OutputName, std::allocator<OutputName> >'
p26022
sS'default'
p26023
g3
sS'name'
p26024
S'outputs'
p26025
sS'required'
p26026
I00
sS'group_name'
p26027
S'Advanced'
p26028
sa(dp26029
S'description'
p26030
g3
sS'cpp_type'
p26031
S'std::string'
p26032
sS'default'
p26033
S'AreaPostprocessor'
p26034
sS'name'
p26035
S'type'
p26036
sS'required'
p26037
I00
sS'group_name'
p26038
Nsa(dp26039
S'description'
p26040
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26041
sS'cpp_type'
p26042
S'bool'
p26043
sS'default'
p26044
S'0'
p26045
sS'name'
p26046
S'use_displaced_mesh'
p26047
sS'required'
p26048
I00
sS'group_name'
p26049
S'Advanced'
p26050
sasS'name'
p26051
S'/Postprocessors/AreaPostprocessor'
p26052
sa(dp26053
S'description'
p26054
g3
sS'type'
p26055
NsS'subblocks'
p26056
NsS'parameters'
p26057
(lp26058
(dp26059
S'description'
p26060
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p26061
sS'cpp_type'
p26062
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26063
sS'default'
p26064
g3
sS'name'
p26065
S'block'
p26066
sS'required'
p26067
I00
sS'group_name'
p26068
Nsa(dp26069
S'name'
p26070
S'execute_on'
p26071
sS'cpp_type'
p26072
S'MooseEnum'
p26073
sS'default'
p26074
S'timestep'
p26075
sS'description'
p26076
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p26077
sS'required'
p26078
I00
sS'options'
p26079
S'initial residual jacobian timestep timestep_begin custom'
p26080
sS'group_name'
p26081
Nsa(dp26082
S'name'
p26083
S'output'
p26084
sS'cpp_type'
p26085
S'MooseEnum'
p26086
sS'default'
p26087
S'auto'
p26088
sS'description'
p26089
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p26090
sS'required'
p26091
I00
sS'options'
p26092
S'none auto screen file both'
p26093
sS'group_name'
p26094
S'Advanced'
p26095
sa(dp26096
S'description'
p26097
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p26098
sS'cpp_type'
p26099
S'std::vector<OutputName, std::allocator<OutputName> >'
p26100
sS'default'
p26101
g3
sS'name'
p26102
S'outputs'
p26103
sS'required'
p26104
I00
sS'group_name'
p26105
S'Advanced'
p26106
sa(dp26107
S'description'
p26108
S'The seed for the master random number generator\n'
p26109
sS'cpp_type'
p26110
S'unsigned int'
p26111
sS'default'
p26112
S'0'
p26113
sS'name'
p26114
S'seed'
p26115
sS'required'
p26116
I00
sS'group_name'
p26117
S'Advanced'
p26118
sa(dp26119
S'description'
p26120
g3
sS'cpp_type'
p26121
S'std::string'
p26122
sS'default'
p26123
S'AverageElementSize'
p26124
sS'name'
p26125
S'type'
p26126
sS'required'
p26127
I00
sS'group_name'
p26128
Nsa(dp26129
S'description'
p26130
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26131
sS'cpp_type'
p26132
S'bool'
p26133
sS'default'
p26134
S'0'
p26135
sS'name'
p26136
S'use_displaced_mesh'
p26137
sS'required'
p26138
I00
sS'group_name'
p26139
S'Advanced'
p26140
sa(dp26141
S'description'
p26142
S'The name of the variable that this object operates on\n'
p26143
sS'cpp_type'
p26144
S'VariableName'
p26145
sS'default'
p26146
g3
sS'name'
p26147
S'variable'
p26148
sS'required'
p26149
I01
sS'group_name'
p26150
NsasS'name'
p26151
S'/Postprocessors/AverageElementSize'
p26152
sa(dp26153
S'description'
p26154
g3
sS'type'
p26155
NsS'subblocks'
p26156
NsS'parameters'
p26157
(lp26158
(dp26159
S'description'
p26160
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p26161
sS'cpp_type'
p26162
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26163
sS'default'
p26164
g3
sS'name'
p26165
S'block'
p26166
sS'required'
p26167
I00
sS'group_name'
p26168
Nsa(dp26169
S'description'
p26170
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p26171
sS'cpp_type'
p26172
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p26173
sS'default'
p26174
g3
sS'name'
p26175
S'boundary'
p26176
sS'required'
p26177
I00
sS'group_name'
p26178
Nsa(dp26179
S'name'
p26180
S'execute_on'
p26181
sS'cpp_type'
p26182
S'MooseEnum'
p26183
sS'default'
p26184
S'timestep'
p26185
sS'description'
p26186
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p26187
sS'required'
p26188
I00
sS'options'
p26189
S'initial residual jacobian timestep timestep_begin custom'
p26190
sS'group_name'
p26191
Nsa(dp26192
S'name'
p26193
S'output'
p26194
sS'cpp_type'
p26195
S'MooseEnum'
p26196
sS'default'
p26197
S'auto'
p26198
sS'description'
p26199
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p26200
sS'required'
p26201
I00
sS'options'
p26202
S'none auto screen file both'
p26203
sS'group_name'
p26204
S'Advanced'
p26205
sa(dp26206
S'description'
p26207
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p26208
sS'cpp_type'
p26209
S'std::vector<OutputName, std::allocator<OutputName> >'
p26210
sS'default'
p26211
g3
sS'name'
p26212
S'outputs'
p26213
sS'required'
p26214
I00
sS'group_name'
p26215
S'Advanced'
p26216
sa(dp26217
S'description'
p26218
S'The seed for the master random number generator\n'
p26219
sS'cpp_type'
p26220
S'unsigned int'
p26221
sS'default'
p26222
S'0'
p26223
sS'name'
p26224
S'seed'
p26225
sS'required'
p26226
I00
sS'group_name'
p26227
S'Advanced'
p26228
sa(dp26229
S'description'
p26230
g3
sS'cpp_type'
p26231
S'std::string'
p26232
sS'default'
p26233
S'AverageNodalVariableValue'
p26234
sS'name'
p26235
S'type'
p26236
sS'required'
p26237
I00
sS'group_name'
p26238
Nsa(dp26239
S'description'
p26240
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26241
sS'cpp_type'
p26242
S'bool'
p26243
sS'default'
p26244
S'0'
p26245
sS'name'
p26246
S'use_displaced_mesh'
p26247
sS'required'
p26248
I00
sS'group_name'
p26249
S'Advanced'
p26250
sa(dp26251
S'description'
p26252
S'The name of the variable that this postprocessor operates on\n'
p26253
sS'cpp_type'
p26254
S'VariableName'
p26255
sS'default'
p26256
g3
sS'name'
p26257
S'variable'
p26258
sS'required'
p26259
I01
sS'group_name'
p26260
NsasS'name'
p26261
S'/Postprocessors/AverageNodalVariableValue'
p26262
sa(dp26263
S'description'
p26264
g3
sS'type'
p26265
NsS'subblocks'
p26266
NsS'parameters'
p26267
(lp26268
(dp26269
S'description'
p26270
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p26271
sS'cpp_type'
p26272
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26273
sS'default'
p26274
g3
sS'name'
p26275
S'block'
p26276
sS'required'
p26277
I00
sS'group_name'
p26278
Nsa(dp26279
S'name'
p26280
S'execute_on'
p26281
sS'cpp_type'
p26282
S'MooseEnum'
p26283
sS'default'
p26284
S'timestep'
p26285
sS'description'
p26286
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p26287
sS'required'
p26288
I00
sS'options'
p26289
S'initial residual jacobian timestep timestep_begin custom'
p26290
sS'group_name'
p26291
Nsa(dp26292
S'name'
p26293
S'output'
p26294
sS'cpp_type'
p26295
S'MooseEnum'
p26296
sS'default'
p26297
S'auto'
p26298
sS'description'
p26299
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p26300
sS'required'
p26301
I00
sS'options'
p26302
S'none auto screen file both'
p26303
sS'group_name'
p26304
S'Advanced'
p26305
sa(dp26306
S'description'
p26307
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p26308
sS'cpp_type'
p26309
S'std::vector<OutputName, std::allocator<OutputName> >'
p26310
sS'default'
p26311
g3
sS'name'
p26312
S'outputs'
p26313
sS'required'
p26314
I00
sS'group_name'
p26315
S'Advanced'
p26316
sa(dp26317
S'description'
p26318
S'The seed for the master random number generator\n'
p26319
sS'cpp_type'
p26320
S'unsigned int'
p26321
sS'default'
p26322
S'0'
p26323
sS'name'
p26324
S'seed'
p26325
sS'required'
p26326
I00
sS'group_name'
p26327
S'Advanced'
p26328
sa(dp26329
S'description'
p26330
g3
sS'cpp_type'
p26331
S'std::string'
p26332
sS'default'
p26333
S'ElementAverageTimeDerivative'
p26334
sS'name'
p26335
S'type'
p26336
sS'required'
p26337
I00
sS'group_name'
p26338
Nsa(dp26339
S'description'
p26340
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26341
sS'cpp_type'
p26342
S'bool'
p26343
sS'default'
p26344
S'0'
p26345
sS'name'
p26346
S'use_displaced_mesh'
p26347
sS'required'
p26348
I00
sS'group_name'
p26349
S'Advanced'
p26350
sa(dp26351
S'description'
p26352
S'The name of the variable that this object operates on\n'
p26353
sS'cpp_type'
p26354
S'VariableName'
p26355
sS'default'
p26356
g3
sS'name'
p26357
S'variable'
p26358
sS'required'
p26359
I01
sS'group_name'
p26360
NsasS'name'
p26361
S'/Postprocessors/ElementAverageTimeDerivative'
p26362
sa(dp26363
S'description'
p26364
g3
sS'type'
p26365
NsS'subblocks'
p26366
NsS'parameters'
p26367
(lp26368
(dp26369
S'description'
p26370
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p26371
sS'cpp_type'
p26372
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26373
sS'default'
p26374
g3
sS'name'
p26375
S'block'
p26376
sS'required'
p26377
I00
sS'group_name'
p26378
Nsa(dp26379
S'name'
p26380
S'execute_on'
p26381
sS'cpp_type'
p26382
S'MooseEnum'
p26383
sS'default'
p26384
S'timestep'
p26385
sS'description'
p26386
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p26387
sS'required'
p26388
I00
sS'options'
p26389
S'initial residual jacobian timestep timestep_begin custom'
p26390
sS'group_name'
p26391
Nsa(dp26392
S'name'
p26393
S'output'
p26394
sS'cpp_type'
p26395
S'MooseEnum'
p26396
sS'default'
p26397
S'auto'
p26398
sS'description'
p26399
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p26400
sS'required'
p26401
I00
sS'options'
p26402
S'none auto screen file both'
p26403
sS'group_name'
p26404
S'Advanced'
p26405
sa(dp26406
S'description'
p26407
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p26408
sS'cpp_type'
p26409
S'std::vector<OutputName, std::allocator<OutputName> >'
p26410
sS'default'
p26411
g3
sS'name'
p26412
S'outputs'
p26413
sS'required'
p26414
I00
sS'group_name'
p26415
S'Advanced'
p26416
sa(dp26417
S'description'
p26418
S'The seed for the master random number generator\n'
p26419
sS'cpp_type'
p26420
S'unsigned int'
p26421
sS'default'
p26422
S'0'
p26423
sS'name'
p26424
S'seed'
p26425
sS'required'
p26426
I00
sS'group_name'
p26427
S'Advanced'
p26428
sa(dp26429
S'description'
p26430
g3
sS'cpp_type'
p26431
S'std::string'
p26432
sS'default'
p26433
S'ElementAverageValue'
p26434
sS'name'
p26435
S'type'
p26436
sS'required'
p26437
I00
sS'group_name'
p26438
Nsa(dp26439
S'description'
p26440
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26441
sS'cpp_type'
p26442
S'bool'
p26443
sS'default'
p26444
S'0'
p26445
sS'name'
p26446
S'use_displaced_mesh'
p26447
sS'required'
p26448
I00
sS'group_name'
p26449
S'Advanced'
p26450
sa(dp26451
S'description'
p26452
S'The name of the variable that this object operates on\n'
p26453
sS'cpp_type'
p26454
S'VariableName'
p26455
sS'default'
p26456
g3
sS'name'
p26457
S'variable'
p26458
sS'required'
p26459
I01
sS'group_name'
p26460
NsasS'name'
p26461
S'/Postprocessors/ElementAverageValue'
p26462
sa(dp26463
S'description'
p26464
g3
sS'type'
p26465
NsS'subblocks'
p26466
NsS'parameters'
p26467
(lp26468
(dp26469
S'description'
p26470
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p26471
sS'cpp_type'
p26472
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26473
sS'default'
p26474
g3
sS'name'
p26475
S'block'
p26476
sS'required'
p26477
I00
sS'group_name'
p26478
Nsa(dp26479
S'name'
p26480
S'execute_on'
p26481
sS'cpp_type'
p26482
S'MooseEnum'
p26483
sS'default'
p26484
S'timestep'
p26485
sS'description'
p26486
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p26487
sS'required'
p26488
I00
sS'options'
p26489
S'initial residual jacobian timestep timestep_begin custom'
p26490
sS'group_name'
p26491
Nsa(dp26492
S'description'
p26493
S'The analytic solution to compare against\n'
p26494
sS'cpp_type'
p26495
S'FunctionName'
p26496
sS'default'
p26497
g3
sS'name'
p26498
S'function'
p26499
sS'required'
p26500
I01
sS'group_name'
p26501
Nsa(dp26502
S'name'
p26503
S'output'
p26504
sS'cpp_type'
p26505
S'MooseEnum'
p26506
sS'default'
p26507
S'auto'
p26508
sS'description'
p26509
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p26510
sS'required'
p26511
I00
sS'options'
p26512
S'none auto screen file both'
p26513
sS'group_name'
p26514
S'Advanced'
p26515
sa(dp26516
S'description'
p26517
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p26518
sS'cpp_type'
p26519
S'std::vector<OutputName, std::allocator<OutputName> >'
p26520
sS'default'
p26521
g3
sS'name'
p26522
S'outputs'
p26523
sS'required'
p26524
I00
sS'group_name'
p26525
S'Advanced'
p26526
sa(dp26527
S'description'
p26528
S'The seed for the master random number generator\n'
p26529
sS'cpp_type'
p26530
S'unsigned int'
p26531
sS'default'
p26532
S'0'
p26533
sS'name'
p26534
S'seed'
p26535
sS'required'
p26536
I00
sS'group_name'
p26537
S'Advanced'
p26538
sa(dp26539
S'description'
p26540
g3
sS'cpp_type'
p26541
S'std::string'
p26542
sS'default'
p26543
S'ElementH1Error'
p26544
sS'name'
p26545
S'type'
p26546
sS'required'
p26547
I00
sS'group_name'
p26548
Nsa(dp26549
S'description'
p26550
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26551
sS'cpp_type'
p26552
S'bool'
p26553
sS'default'
p26554
S'0'
p26555
sS'name'
p26556
S'use_displaced_mesh'
p26557
sS'required'
p26558
I00
sS'group_name'
p26559
S'Advanced'
p26560
sa(dp26561
S'description'
p26562
S'The name of the variable that this object operates on\n'
p26563
sS'cpp_type'
p26564
S'VariableName'
p26565
sS'default'
p26566
g3
sS'name'
p26567
S'variable'
p26568
sS'required'
p26569
I01
sS'group_name'
p26570
NsasS'name'
p26571
S'/Postprocessors/ElementH1Error'
p26572
sa(dp26573
S'description'
p26574
g3
sS'type'
p26575
NsS'subblocks'
p26576
NsS'parameters'
p26577
(lp26578
(dp26579
S'description'
p26580
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p26581
sS'cpp_type'
p26582
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26583
sS'default'
p26584
g3
sS'name'
p26585
S'block'
p26586
sS'required'
p26587
I00
sS'group_name'
p26588
Nsa(dp26589
S'name'
p26590
S'execute_on'
p26591
sS'cpp_type'
p26592
S'MooseEnum'
p26593
sS'default'
p26594
S'timestep'
p26595
sS'description'
p26596
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p26597
sS'required'
p26598
I00
sS'options'
p26599
S'initial residual jacobian timestep timestep_begin custom'
p26600
sS'group_name'
p26601
Nsa(dp26602
S'description'
p26603
S'The analytic solution to compare against\n'
p26604
sS'cpp_type'
p26605
S'FunctionName'
p26606
sS'default'
p26607
g3
sS'name'
p26608
S'function'
p26609
sS'required'
p26610
I01
sS'group_name'
p26611
Nsa(dp26612
S'name'
p26613
S'output'
p26614
sS'cpp_type'
p26615
S'MooseEnum'
p26616
sS'default'
p26617
S'auto'
p26618
sS'description'
p26619
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p26620
sS'required'
p26621
I00
sS'options'
p26622
S'none auto screen file both'
p26623
sS'group_name'
p26624
S'Advanced'
p26625
sa(dp26626
S'description'
p26627
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p26628
sS'cpp_type'
p26629
S'std::vector<OutputName, std::allocator<OutputName> >'
p26630
sS'default'
p26631
g3
sS'name'
p26632
S'outputs'
p26633
sS'required'
p26634
I00
sS'group_name'
p26635
S'Advanced'
p26636
sa(dp26637
S'description'
p26638
S'The seed for the master random number generator\n'
p26639
sS'cpp_type'
p26640
S'unsigned int'
p26641
sS'default'
p26642
S'0'
p26643
sS'name'
p26644
S'seed'
p26645
sS'required'
p26646
I00
sS'group_name'
p26647
S'Advanced'
p26648
sa(dp26649
S'description'
p26650
g3
sS'cpp_type'
p26651
S'std::string'
p26652
sS'default'
p26653
S'ElementH1SemiError'
p26654
sS'name'
p26655
S'type'
p26656
sS'required'
p26657
I00
sS'group_name'
p26658
Nsa(dp26659
S'description'
p26660
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26661
sS'cpp_type'
p26662
S'bool'
p26663
sS'default'
p26664
S'0'
p26665
sS'name'
p26666
S'use_displaced_mesh'
p26667
sS'required'
p26668
I00
sS'group_name'
p26669
S'Advanced'
p26670
sa(dp26671
S'description'
p26672
S'The name of the variable that this object operates on\n'
p26673
sS'cpp_type'
p26674
S'VariableName'
p26675
sS'default'
p26676
g3
sS'name'
p26677
S'variable'
p26678
sS'required'
p26679
I01
sS'group_name'
p26680
NsasS'name'
p26681
S'/Postprocessors/ElementH1SemiError'
p26682
sa(dp26683
S'description'
p26684
g3
sS'type'
p26685
NsS'subblocks'
p26686
NsS'parameters'
p26687
(lp26688
(dp26689
S'description'
p26690
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p26691
sS'cpp_type'
p26692
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26693
sS'default'
p26694
g3
sS'name'
p26695
S'block'
p26696
sS'required'
p26697
I00
sS'group_name'
p26698
Nsa(dp26699
S'name'
p26700
S'execute_on'
p26701
sS'cpp_type'
p26702
S'MooseEnum'
p26703
sS'default'
p26704
S'timestep'
p26705
sS'description'
p26706
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p26707
sS'required'
p26708
I00
sS'options'
p26709
S'initial residual jacobian timestep timestep_begin custom'
p26710
sS'group_name'
p26711
Nsa(dp26712
S'description'
p26713
S'The name of the material property\n'
p26714
sS'cpp_type'
p26715
S'std::string'
p26716
sS'default'
p26717
g3
sS'name'
p26718
S'mat_prop'
p26719
sS'required'
p26720
I01
sS'group_name'
p26721
Nsa(dp26722
S'name'
p26723
S'output'
p26724
sS'cpp_type'
p26725
S'MooseEnum'
p26726
sS'default'
p26727
S'auto'
p26728
sS'description'
p26729
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p26730
sS'required'
p26731
I00
sS'options'
p26732
S'none auto screen file both'
p26733
sS'group_name'
p26734
S'Advanced'
p26735
sa(dp26736
S'description'
p26737
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p26738
sS'cpp_type'
p26739
S'std::vector<OutputName, std::allocator<OutputName> >'
p26740
sS'default'
p26741
g3
sS'name'
p26742
S'outputs'
p26743
sS'required'
p26744
I00
sS'group_name'
p26745
S'Advanced'
p26746
sa(dp26747
S'description'
p26748
S'The seed for the master random number generator\n'
p26749
sS'cpp_type'
p26750
S'unsigned int'
p26751
sS'default'
p26752
S'0'
p26753
sS'name'
p26754
S'seed'
p26755
sS'required'
p26756
I00
sS'group_name'
p26757
S'Advanced'
p26758
sa(dp26759
S'description'
p26760
g3
sS'cpp_type'
p26761
S'std::string'
p26762
sS'default'
p26763
S'ElementIntegralMaterialProperty'
p26764
sS'name'
p26765
S'type'
p26766
sS'required'
p26767
I00
sS'group_name'
p26768
Nsa(dp26769
S'description'
p26770
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26771
sS'cpp_type'
p26772
S'bool'
p26773
sS'default'
p26774
S'0'
p26775
sS'name'
p26776
S'use_displaced_mesh'
p26777
sS'required'
p26778
I00
sS'group_name'
p26779
S'Advanced'
p26780
sasS'name'
p26781
S'/Postprocessors/ElementIntegralMaterialProperty'
p26782
sa(dp26783
S'description'
p26784
g3
sS'type'
p26785
NsS'subblocks'
p26786
NsS'parameters'
p26787
(lp26788
(dp26789
S'description'
p26790
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p26791
sS'cpp_type'
p26792
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26793
sS'default'
p26794
g3
sS'name'
p26795
S'block'
p26796
sS'required'
p26797
I00
sS'group_name'
p26798
Nsa(dp26799
S'name'
p26800
S'execute_on'
p26801
sS'cpp_type'
p26802
S'MooseEnum'
p26803
sS'default'
p26804
S'timestep'
p26805
sS'description'
p26806
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p26807
sS'required'
p26808
I00
sS'options'
p26809
S'initial residual jacobian timestep timestep_begin custom'
p26810
sS'group_name'
p26811
Nsa(dp26812
S'name'
p26813
S'output'
p26814
sS'cpp_type'
p26815
S'MooseEnum'
p26816
sS'default'
p26817
S'auto'
p26818
sS'description'
p26819
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p26820
sS'required'
p26821
I00
sS'options'
p26822
S'none auto screen file both'
p26823
sS'group_name'
p26824
S'Advanced'
p26825
sa(dp26826
S'description'
p26827
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p26828
sS'cpp_type'
p26829
S'std::vector<OutputName, std::allocator<OutputName> >'
p26830
sS'default'
p26831
g3
sS'name'
p26832
S'outputs'
p26833
sS'required'
p26834
I00
sS'group_name'
p26835
S'Advanced'
p26836
sa(dp26837
S'description'
p26838
S'The seed for the master random number generator\n'
p26839
sS'cpp_type'
p26840
S'unsigned int'
p26841
sS'default'
p26842
S'0'
p26843
sS'name'
p26844
S'seed'
p26845
sS'required'
p26846
I00
sS'group_name'
p26847
S'Advanced'
p26848
sa(dp26849
S'description'
p26850
g3
sS'cpp_type'
p26851
S'std::string'
p26852
sS'default'
p26853
S'ElementIntegralVariablePostprocessor'
p26854
sS'name'
p26855
S'type'
p26856
sS'required'
p26857
I00
sS'group_name'
p26858
Nsa(dp26859
S'description'
p26860
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26861
sS'cpp_type'
p26862
S'bool'
p26863
sS'default'
p26864
S'0'
p26865
sS'name'
p26866
S'use_displaced_mesh'
p26867
sS'required'
p26868
I00
sS'group_name'
p26869
S'Advanced'
p26870
sa(dp26871
S'description'
p26872
S'The name of the variable that this object operates on\n'
p26873
sS'cpp_type'
p26874
S'VariableName'
p26875
sS'default'
p26876
g3
sS'name'
p26877
S'variable'
p26878
sS'required'
p26879
I01
sS'group_name'
p26880
NsasS'name'
p26881
S'/Postprocessors/ElementIntegralVariablePostprocessor'
p26882
sa(dp26883
S'description'
p26884
g3
sS'type'
p26885
NsS'subblocks'
p26886
NsS'parameters'
p26887
(lp26888
(dp26889
S'description'
p26890
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p26891
sS'cpp_type'
p26892
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p26893
sS'default'
p26894
g3
sS'name'
p26895
S'block'
p26896
sS'required'
p26897
I00
sS'group_name'
p26898
Nsa(dp26899
S'name'
p26900
S'execute_on'
p26901
sS'cpp_type'
p26902
S'MooseEnum'
p26903
sS'default'
p26904
S'timestep'
p26905
sS'description'
p26906
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p26907
sS'required'
p26908
I00
sS'options'
p26909
S'initial residual jacobian timestep timestep_begin custom'
p26910
sS'group_name'
p26911
Nsa(dp26912
S'description'
p26913
S'The analytic solution to compare against\n'
p26914
sS'cpp_type'
p26915
S'FunctionName'
p26916
sS'default'
p26917
g3
sS'name'
p26918
S'function'
p26919
sS'required'
p26920
I01
sS'group_name'
p26921
Nsa(dp26922
S'name'
p26923
S'output'
p26924
sS'cpp_type'
p26925
S'MooseEnum'
p26926
sS'default'
p26927
S'auto'
p26928
sS'description'
p26929
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p26930
sS'required'
p26931
I00
sS'options'
p26932
S'none auto screen file both'
p26933
sS'group_name'
p26934
S'Advanced'
p26935
sa(dp26936
S'description'
p26937
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p26938
sS'cpp_type'
p26939
S'std::vector<OutputName, std::allocator<OutputName> >'
p26940
sS'default'
p26941
g3
sS'name'
p26942
S'outputs'
p26943
sS'required'
p26944
I00
sS'group_name'
p26945
S'Advanced'
p26946
sa(dp26947
S'description'
p26948
S'The seed for the master random number generator\n'
p26949
sS'cpp_type'
p26950
S'unsigned int'
p26951
sS'default'
p26952
S'0'
p26953
sS'name'
p26954
S'seed'
p26955
sS'required'
p26956
I00
sS'group_name'
p26957
S'Advanced'
p26958
sa(dp26959
S'description'
p26960
g3
sS'cpp_type'
p26961
S'std::string'
p26962
sS'default'
p26963
S'ElementL2Error'
p26964
sS'name'
p26965
S'type'
p26966
sS'required'
p26967
I00
sS'group_name'
p26968
Nsa(dp26969
S'description'
p26970
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p26971
sS'cpp_type'
p26972
S'bool'
p26973
sS'default'
p26974
S'0'
p26975
sS'name'
p26976
S'use_displaced_mesh'
p26977
sS'required'
p26978
I00
sS'group_name'
p26979
S'Advanced'
p26980
sa(dp26981
S'description'
p26982
S'The name of the variable that this object operates on\n'
p26983
sS'cpp_type'
p26984
S'VariableName'
p26985
sS'default'
p26986
g3
sS'name'
p26987
S'variable'
p26988
sS'required'
p26989
I01
sS'group_name'
p26990
NsasS'name'
p26991
S'/Postprocessors/ElementL2Error'
p26992
sa(dp26993
S'description'
p26994
g3
sS'type'
p26995
NsS'subblocks'
p26996
NsS'parameters'
p26997
(lp26998
(dp26999
S'description'
p27000
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p27001
sS'cpp_type'
p27002
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p27003
sS'default'
p27004
g3
sS'name'
p27005
S'block'
p27006
sS'required'
p27007
I00
sS'group_name'
p27008
Nsa(dp27009
S'name'
p27010
S'execute_on'
p27011
sS'cpp_type'
p27012
S'MooseEnum'
p27013
sS'default'
p27014
S'timestep'
p27015
sS'description'
p27016
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p27017
sS'required'
p27018
I00
sS'options'
p27019
S'initial residual jacobian timestep timestep_begin custom'
p27020
sS'group_name'
p27021
Nsa(dp27022
S'name'
p27023
S'output'
p27024
sS'cpp_type'
p27025
S'MooseEnum'
p27026
sS'default'
p27027
S'auto'
p27028
sS'description'
p27029
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p27030
sS'required'
p27031
I00
sS'options'
p27032
S'none auto screen file both'
p27033
sS'group_name'
p27034
S'Advanced'
p27035
sa(dp27036
S'description'
p27037
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p27038
sS'cpp_type'
p27039
S'std::vector<OutputName, std::allocator<OutputName> >'
p27040
sS'default'
p27041
g3
sS'name'
p27042
S'outputs'
p27043
sS'required'
p27044
I00
sS'group_name'
p27045
S'Advanced'
p27046
sa(dp27047
S'description'
p27048
S'The seed for the master random number generator\n'
p27049
sS'cpp_type'
p27050
S'unsigned int'
p27051
sS'default'
p27052
S'0'
p27053
sS'name'
p27054
S'seed'
p27055
sS'required'
p27056
I00
sS'group_name'
p27057
S'Advanced'
p27058
sa(dp27059
S'description'
p27060
g3
sS'cpp_type'
p27061
S'std::string'
p27062
sS'default'
p27063
S'ElementL2Norm'
p27064
sS'name'
p27065
S'type'
p27066
sS'required'
p27067
I00
sS'group_name'
p27068
Nsa(dp27069
S'description'
p27070
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27071
sS'cpp_type'
p27072
S'bool'
p27073
sS'default'
p27074
S'0'
p27075
sS'name'
p27076
S'use_displaced_mesh'
p27077
sS'required'
p27078
I00
sS'group_name'
p27079
S'Advanced'
p27080
sa(dp27081
S'description'
p27082
S'The name of the variable that this object operates on\n'
p27083
sS'cpp_type'
p27084
S'VariableName'
p27085
sS'default'
p27086
g3
sS'name'
p27087
S'variable'
p27088
sS'required'
p27089
I01
sS'group_name'
p27090
NsasS'name'
p27091
S'/Postprocessors/ElementL2Norm'
p27092
sa(dp27093
S'description'
p27094
g3
sS'type'
p27095
NsS'subblocks'
p27096
NsS'parameters'
p27097
(lp27098
(dp27099
S'description'
p27100
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p27101
sS'cpp_type'
p27102
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p27103
sS'default'
p27104
g3
sS'name'
p27105
S'block'
p27106
sS'required'
p27107
I00
sS'group_name'
p27108
Nsa(dp27109
S'name'
p27110
S'execute_on'
p27111
sS'cpp_type'
p27112
S'MooseEnum'
p27113
sS'default'
p27114
S'timestep'
p27115
sS'description'
p27116
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p27117
sS'required'
p27118
I00
sS'options'
p27119
S'initial residual jacobian timestep timestep_begin custom'
p27120
sS'group_name'
p27121
Nsa(dp27122
S'description'
p27123
S'The analytic solution to compare against\n'
p27124
sS'cpp_type'
p27125
S'FunctionName'
p27126
sS'default'
p27127
g3
sS'name'
p27128
S'function_x'
p27129
sS'required'
p27130
I01
sS'group_name'
p27131
Nsa(dp27132
S'description'
p27133
S'The analytic solution to compare against\n'
p27134
sS'cpp_type'
p27135
S'FunctionName'
p27136
sS'default'
p27137
g3
sS'name'
p27138
S'function_y'
p27139
sS'required'
p27140
I00
sS'group_name'
p27141
Nsa(dp27142
S'description'
p27143
S'The analytic solution to compare against\n'
p27144
sS'cpp_type'
p27145
S'FunctionName'
p27146
sS'default'
p27147
g3
sS'name'
p27148
S'function_z'
p27149
sS'required'
p27150
I00
sS'group_name'
p27151
Nsa(dp27152
S'name'
p27153
S'output'
p27154
sS'cpp_type'
p27155
S'MooseEnum'
p27156
sS'default'
p27157
S'auto'
p27158
sS'description'
p27159
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p27160
sS'required'
p27161
I00
sS'options'
p27162
S'none auto screen file both'
p27163
sS'group_name'
p27164
S'Advanced'
p27165
sa(dp27166
S'description'
p27167
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p27168
sS'cpp_type'
p27169
S'std::vector<OutputName, std::allocator<OutputName> >'
p27170
sS'default'
p27171
g3
sS'name'
p27172
S'outputs'
p27173
sS'required'
p27174
I00
sS'group_name'
p27175
S'Advanced'
p27176
sa(dp27177
S'description'
p27178
S'The seed for the master random number generator\n'
p27179
sS'cpp_type'
p27180
S'unsigned int'
p27181
sS'default'
p27182
S'0'
p27183
sS'name'
p27184
S'seed'
p27185
sS'required'
p27186
I00
sS'group_name'
p27187
S'Advanced'
p27188
sa(dp27189
S'description'
p27190
g3
sS'cpp_type'
p27191
S'std::string'
p27192
sS'default'
p27193
S'ElementVectorL2Error'
p27194
sS'name'
p27195
S'type'
p27196
sS'required'
p27197
I00
sS'group_name'
p27198
Nsa(dp27199
S'description'
p27200
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27201
sS'cpp_type'
p27202
S'bool'
p27203
sS'default'
p27204
S'0'
p27205
sS'name'
p27206
S'use_displaced_mesh'
p27207
sS'required'
p27208
I00
sS'group_name'
p27209
S'Advanced'
p27210
sa(dp27211
S'description'
p27212
S'The FE solution in x direction\n'
p27213
sS'cpp_type'
p27214
S'std::vector<VariableName>'
p27215
sS'default'
p27216
g3
sS'name'
p27217
S'var_x'
p27218
sS'required'
p27219
I01
sS'group_name'
p27220
Nsa(dp27221
S'description'
p27222
S'The FE solution in y direction\n'
p27223
sS'cpp_type'
p27224
S'std::vector<VariableName>'
p27225
sS'default'
p27226
g3
sS'name'
p27227
S'var_y'
p27228
sS'required'
p27229
I00
sS'group_name'
p27230
Nsa(dp27231
S'description'
p27232
S'The FE solution in z direction\n'
p27233
sS'cpp_type'
p27234
S'std::vector<VariableName>'
p27235
sS'default'
p27236
g3
sS'name'
p27237
S'var_z'
p27238
sS'required'
p27239
I00
sS'group_name'
p27240
NsasS'name'
p27241
S'/Postprocessors/ElementVectorL2Error'
p27242
sa(dp27243
S'description'
p27244
g3
sS'type'
p27245
NsS'subblocks'
p27246
NsS'parameters'
p27247
(lp27248
(dp27249
S'description'
p27250
S'The ID of the element where we monitor\n'
p27251
sS'cpp_type'
p27252
S'unsigned int'
p27253
sS'default'
p27254
g3
sS'name'
p27255
S'elementid'
p27256
sS'required'
p27257
I01
sS'group_name'
p27258
Nsa(dp27259
S'name'
p27260
S'execute_on'
p27261
sS'cpp_type'
p27262
S'MooseEnum'
p27263
sS'default'
p27264
S'timestep'
p27265
sS'description'
p27266
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p27267
sS'required'
p27268
I00
sS'options'
p27269
S'initial residual jacobian timestep timestep_begin custom'
p27270
sS'group_name'
p27271
Nsa(dp27272
S'name'
p27273
S'output'
p27274
sS'cpp_type'
p27275
S'MooseEnum'
p27276
sS'default'
p27277
S'auto'
p27278
sS'description'
p27279
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p27280
sS'required'
p27281
I00
sS'options'
p27282
S'none auto screen file both'
p27283
sS'group_name'
p27284
S'Advanced'
p27285
sa(dp27286
S'description'
p27287
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p27288
sS'cpp_type'
p27289
S'std::vector<OutputName, std::allocator<OutputName> >'
p27290
sS'default'
p27291
g3
sS'name'
p27292
S'outputs'
p27293
sS'required'
p27294
I00
sS'group_name'
p27295
S'Advanced'
p27296
sa(dp27297
S'description'
p27298
g3
sS'cpp_type'
p27299
S'std::string'
p27300
sS'default'
p27301
S'ElementalVariableValue'
p27302
sS'name'
p27303
S'type'
p27304
sS'required'
p27305
I00
sS'group_name'
p27306
Nsa(dp27307
S'description'
p27308
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27309
sS'cpp_type'
p27310
S'bool'
p27311
sS'default'
p27312
S'0'
p27313
sS'name'
p27314
S'use_displaced_mesh'
p27315
sS'required'
p27316
I00
sS'group_name'
p27317
S'Advanced'
p27318
sa(dp27319
S'description'
p27320
S'The variable to be monitored\n'
p27321
sS'cpp_type'
p27322
S'VariableName'
p27323
sS'default'
p27324
g3
sS'name'
p27325
S'variable'
p27326
sS'required'
p27327
I01
sS'group_name'
p27328
NsasS'name'
p27329
S'/Postprocessors/ElementalVariableValue'
p27330
sa(dp27331
S'description'
p27332
g3
sS'type'
p27333
NsS'subblocks'
p27334
NsS'parameters'
p27335
(lp27336
(dp27337
S'name'
p27338
S'execute_on'
p27339
sS'cpp_type'
p27340
S'MooseEnum'
p27341
sS'default'
p27342
S'timestep'
p27343
sS'description'
p27344
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p27345
sS'required'
p27346
I00
sS'options'
p27347
S'initial residual jacobian timestep timestep_begin custom'
p27348
sS'group_name'
p27349
Nsa(dp27350
S'name'
p27351
S'output'
p27352
sS'cpp_type'
p27353
S'MooseEnum'
p27354
sS'default'
p27355
S'auto'
p27356
sS'description'
p27357
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p27358
sS'required'
p27359
I00
sS'options'
p27360
S'none auto screen file both'
p27361
sS'group_name'
p27362
S'Advanced'
p27363
sa(dp27364
S'description'
p27365
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p27366
sS'cpp_type'
p27367
S'std::vector<OutputName, std::allocator<OutputName> >'
p27368
sS'default'
p27369
g3
sS'name'
p27370
S'outputs'
p27371
sS'required'
p27372
I00
sS'group_name'
p27373
S'Advanced'
p27374
sa(dp27375
S'description'
p27376
g3
sS'cpp_type'
p27377
S'std::string'
p27378
sS'default'
p27379
S'EmptyPostprocessor'
p27380
sS'name'
p27381
S'type'
p27382
sS'required'
p27383
I00
sS'group_name'
p27384
Nsa(dp27385
S'description'
p27386
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27387
sS'cpp_type'
p27388
S'bool'
p27389
sS'default'
p27390
S'0'
p27391
sS'name'
p27392
S'use_displaced_mesh'
p27393
sS'required'
p27394
I00
sS'group_name'
p27395
S'Advanced'
p27396
sasS'name'
p27397
S'/Postprocessors/EmptyPostprocessor'
p27398
sa(dp27399
S'description'
p27400
g3
sS'type'
p27401
NsS'subblocks'
p27402
NsS'parameters'
p27403
(lp27404
(dp27405
S'description'
p27406
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p27407
sS'cpp_type'
p27408
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p27409
sS'default'
p27410
g3
sS'name'
p27411
S'block'
p27412
sS'required'
p27413
I00
sS'group_name'
p27414
Nsa(dp27415
S'description'
p27416
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p27417
sS'cpp_type'
p27418
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p27419
sS'default'
p27420
g3
sS'name'
p27421
S'boundary'
p27422
sS'required'
p27423
I00
sS'group_name'
p27424
Nsa(dp27425
S'name'
p27426
S'execute_on'
p27427
sS'cpp_type'
p27428
S'MooseEnum'
p27429
sS'default'
p27430
S'timestep'
p27431
sS'description'
p27432
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p27433
sS'required'
p27434
I00
sS'options'
p27435
S'initial residual jacobian timestep timestep_begin custom'
p27436
sS'group_name'
p27437
Nsa(dp27438
S'name'
p27439
S'output'
p27440
sS'cpp_type'
p27441
S'MooseEnum'
p27442
sS'default'
p27443
S'auto'
p27444
sS'description'
p27445
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p27446
sS'required'
p27447
I00
sS'options'
p27448
S'none auto screen file both'
p27449
sS'group_name'
p27450
S'Advanced'
p27451
sa(dp27452
S'description'
p27453
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p27454
sS'cpp_type'
p27455
S'std::vector<OutputName, std::allocator<OutputName> >'
p27456
sS'default'
p27457
g3
sS'name'
p27458
S'outputs'
p27459
sS'required'
p27460
I00
sS'group_name'
p27461
S'Advanced'
p27462
sa(dp27463
S'description'
p27464
S'The seed for the master random number generator\n'
p27465
sS'cpp_type'
p27466
S'unsigned int'
p27467
sS'default'
p27468
S'0'
p27469
sS'name'
p27470
S'seed'
p27471
sS'required'
p27472
I00
sS'group_name'
p27473
S'Advanced'
p27474
sa(dp27475
S'description'
p27476
g3
sS'cpp_type'
p27477
S'std::string'
p27478
sS'default'
p27479
S'NodalExtremeValue'
p27480
sS'name'
p27481
S'type'
p27482
sS'required'
p27483
I00
sS'group_name'
p27484
Nsa(dp27485
S'description'
p27486
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27487
sS'cpp_type'
p27488
S'bool'
p27489
sS'default'
p27490
S'0'
p27491
sS'name'
p27492
S'use_displaced_mesh'
p27493
sS'required'
p27494
I00
sS'group_name'
p27495
S'Advanced'
p27496
sa(dp27497
S'name'
p27498
S'value_type'
p27499
sS'cpp_type'
p27500
S'MooseEnum'
p27501
sS'default'
p27502
S'max'
p27503
sS'description'
p27504
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimu value.\n"
p27505
sS'required'
p27506
I00
sS'options'
p27507
S'max min'
p27508
sS'group_name'
p27509
Nsa(dp27510
S'description'
p27511
S'The name of the variable that this postprocessor operates on\n'
p27512
sS'cpp_type'
p27513
S'VariableName'
p27514
sS'default'
p27515
g3
sS'name'
p27516
S'variable'
p27517
sS'required'
p27518
I01
sS'group_name'
p27519
NsasS'name'
p27520
S'/Postprocessors/NodalExtremeValue'
p27521
sa(dp27522
S'description'
p27523
g3
sS'type'
p27524
NsS'subblocks'
p27525
NsS'parameters'
p27526
(lp27527
(dp27528
S'description'
p27529
S'An optional file name where bubble volumes can be output.\n'
p27530
sS'cpp_type'
p27531
S'FileName'
p27532
sS'default'
p27533
g3
sS'name'
p27534
S'bubble_volume_file'
p27535
sS'required'
p27536
I00
sS'group_name'
p27537
Nsa(dp27538
S'description'
p27539
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p27540
sS'cpp_type'
p27541
S'bool'
p27542
sS'default'
p27543
S'0'
p27544
sS'name'
p27545
S'condense_map_info'
p27546
sS'required'
p27547
I00
sS'group_name'
p27548
Nsa(dp27549
S'description'
p27550
S'The threshold for which an existing bubble may be extended (defaults to "threshold")\n'
p27551
sS'cpp_type'
p27552
S'double'
p27553
sS'default'
p27554
g3
sS'name'
p27555
S'connecting_threshold'
p27556
sS'required'
p27557
I00
sS'group_name'
p27558
Nsa(dp27559
S'description'
p27560
S'If supplied, will be used to find the scaled threshold of the bubble edges\n'
p27561
sS'cpp_type'
p27562
S'PostprocessorName'
p27563
sS'default'
p27564
g3
sS'name'
p27565
S'elem_avg_value'
p27566
sS'required'
p27567
I00
sS'group_name'
p27568
Nsa(dp27569
S'description'
p27570
S'Instruct the UO to populate the variable index map.\n'
p27571
sS'cpp_type'
p27572
S'bool'
p27573
sS'default'
p27574
S'0'
p27575
sS'name'
p27576
S'enable_var_coloring'
p27577
sS'required'
p27578
I00
sS'group_name'
p27579
Nsa(dp27580
S'name'
p27581
S'execute_on'
p27582
sS'cpp_type'
p27583
S'MooseEnum'
p27584
sS'default'
p27585
S'timestep'
p27586
sS'description'
p27587
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p27588
sS'required'
p27589
I00
sS'options'
p27590
S'initial residual jacobian timestep timestep_begin custom'
p27591
sS'group_name'
p27592
Nsa(dp27593
S'name'
p27594
S'output'
p27595
sS'cpp_type'
p27596
S'MooseEnum'
p27597
sS'default'
p27598
S'auto'
p27599
sS'description'
p27600
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p27601
sS'required'
p27602
I00
sS'options'
p27603
S'none auto screen file both'
p27604
sS'group_name'
p27605
S'Advanced'
p27606
sa(dp27607
S'description'
p27608
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p27609
sS'cpp_type'
p27610
S'std::vector<OutputName, std::allocator<OutputName> >'
p27611
sS'default'
p27612
g3
sS'name'
p27613
S'outputs'
p27614
sS'required'
p27615
I00
sS'group_name'
p27616
S'Advanced'
p27617
sa(dp27618
S'description'
p27619
S'The threshold value for which a new bubble may be started\n'
p27620
sS'cpp_type'
p27621
S'double'
p27622
sS'default'
p27623
S'0.5'
p27624
sS'name'
p27625
S'threshold'
p27626
sS'required'
p27627
I00
sS'group_name'
p27628
Nsa(dp27629
S'description'
p27630
S'Calculate memory usage\n'
p27631
sS'cpp_type'
p27632
S'bool'
p27633
sS'default'
p27634
S'0'
p27635
sS'name'
p27636
S'track_memory_usage'
p27637
sS'required'
p27638
I00
sS'group_name'
p27639
Nsa(dp27640
S'description'
p27641
g3
sS'cpp_type'
p27642
S'std::string'
p27643
sS'default'
p27644
S'NodalFloodCount'
p27645
sS'name'
p27646
S'type'
p27647
sS'required'
p27648
I00
sS'group_name'
p27649
Nsa(dp27650
S'description'
p27651
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27652
sS'cpp_type'
p27653
S'bool'
p27654
sS'default'
p27655
S'0'
p27656
sS'name'
p27657
S'use_displaced_mesh'
p27658
sS'required'
p27659
I00
sS'group_name'
p27660
S'Advanced'
p27661
sa(dp27662
S'description'
p27663
S'Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n'
p27664
sS'cpp_type'
p27665
S'bool'
p27666
sS'default'
p27667
S'0'
p27668
sS'name'
p27669
S'use_global_numbering'
p27670
sS'required'
p27671
I00
sS'group_name'
p27672
Nsa(dp27673
S'description'
p27674
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p27675
sS'cpp_type'
p27676
S'bool'
p27677
sS'default'
p27678
S'1'
p27679
sS'name'
p27680
S'use_single_map'
p27681
sS'required'
p27682
I00
sS'group_name'
p27683
Nsa(dp27684
S'description'
p27685
S'Ths variable(s) for which to find connected regions of interests, i.e. "bubbles".\n'
p27686
sS'cpp_type'
p27687
S'std::vector<VariableName>'
p27688
sS'default'
p27689
g3
sS'name'
p27690
S'variable'
p27691
sS'required'
p27692
I01
sS'group_name'
p27693
NsasS'name'
p27694
S'/Postprocessors/NodalFloodCount'
p27695
sa(dp27696
S'description'
p27697
g3
sS'type'
p27698
NsS'subblocks'
p27699
NsS'parameters'
p27700
(lp27701
(dp27702
S'description'
p27703
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p27704
sS'cpp_type'
p27705
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p27706
sS'default'
p27707
g3
sS'name'
p27708
S'block'
p27709
sS'required'
p27710
I00
sS'group_name'
p27711
Nsa(dp27712
S'description'
p27713
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p27714
sS'cpp_type'
p27715
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p27716
sS'default'
p27717
g3
sS'name'
p27718
S'boundary'
p27719
sS'required'
p27720
I00
sS'group_name'
p27721
Nsa(dp27722
S'name'
p27723
S'execute_on'
p27724
sS'cpp_type'
p27725
S'MooseEnum'
p27726
sS'default'
p27727
S'timestep'
p27728
sS'description'
p27729
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p27730
sS'required'
p27731
I00
sS'options'
p27732
S'initial residual jacobian timestep timestep_begin custom'
p27733
sS'group_name'
p27734
Nsa(dp27735
S'description'
p27736
S'The analytic solution to compare against\n'
p27737
sS'cpp_type'
p27738
S'FunctionName'
p27739
sS'default'
p27740
g3
sS'name'
p27741
S'function'
p27742
sS'required'
p27743
I01
sS'group_name'
p27744
Nsa(dp27745
S'name'
p27746
S'output'
p27747
sS'cpp_type'
p27748
S'MooseEnum'
p27749
sS'default'
p27750
S'auto'
p27751
sS'description'
p27752
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p27753
sS'required'
p27754
I00
sS'options'
p27755
S'none auto screen file both'
p27756
sS'group_name'
p27757
S'Advanced'
p27758
sa(dp27759
S'description'
p27760
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p27761
sS'cpp_type'
p27762
S'std::vector<OutputName, std::allocator<OutputName> >'
p27763
sS'default'
p27764
g3
sS'name'
p27765
S'outputs'
p27766
sS'required'
p27767
I00
sS'group_name'
p27768
S'Advanced'
p27769
sa(dp27770
S'description'
p27771
S'The seed for the master random number generator\n'
p27772
sS'cpp_type'
p27773
S'unsigned int'
p27774
sS'default'
p27775
S'0'
p27776
sS'name'
p27777
S'seed'
p27778
sS'required'
p27779
I00
sS'group_name'
p27780
S'Advanced'
p27781
sa(dp27782
S'description'
p27783
g3
sS'cpp_type'
p27784
S'std::string'
p27785
sS'default'
p27786
S'NodalL2Error'
p27787
sS'name'
p27788
S'type'
p27789
sS'required'
p27790
I00
sS'group_name'
p27791
Nsa(dp27792
S'description'
p27793
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27794
sS'cpp_type'
p27795
S'bool'
p27796
sS'default'
p27797
S'0'
p27798
sS'name'
p27799
S'use_displaced_mesh'
p27800
sS'required'
p27801
I00
sS'group_name'
p27802
S'Advanced'
p27803
sa(dp27804
S'description'
p27805
S'The name of the variable that this postprocessor operates on\n'
p27806
sS'cpp_type'
p27807
S'VariableName'
p27808
sS'default'
p27809
g3
sS'name'
p27810
S'variable'
p27811
sS'required'
p27812
I01
sS'group_name'
p27813
NsasS'name'
p27814
S'/Postprocessors/NodalL2Error'
p27815
sa(dp27816
S'description'
p27817
g3
sS'type'
p27818
NsS'subblocks'
p27819
NsS'parameters'
p27820
(lp27821
(dp27822
S'description'
p27823
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p27824
sS'cpp_type'
p27825
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p27826
sS'default'
p27827
g3
sS'name'
p27828
S'block'
p27829
sS'required'
p27830
I00
sS'group_name'
p27831
Nsa(dp27832
S'description'
p27833
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p27834
sS'cpp_type'
p27835
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p27836
sS'default'
p27837
g3
sS'name'
p27838
S'boundary'
p27839
sS'required'
p27840
I00
sS'group_name'
p27841
Nsa(dp27842
S'name'
p27843
S'execute_on'
p27844
sS'cpp_type'
p27845
S'MooseEnum'
p27846
sS'default'
p27847
S'timestep'
p27848
sS'description'
p27849
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p27850
sS'required'
p27851
I00
sS'options'
p27852
S'initial residual jacobian timestep timestep_begin custom'
p27853
sS'group_name'
p27854
Nsa(dp27855
S'name'
p27856
S'output'
p27857
sS'cpp_type'
p27858
S'MooseEnum'
p27859
sS'default'
p27860
S'auto'
p27861
sS'description'
p27862
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p27863
sS'required'
p27864
I00
sS'options'
p27865
S'none auto screen file both'
p27866
sS'group_name'
p27867
S'Advanced'
p27868
sa(dp27869
S'description'
p27870
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p27871
sS'cpp_type'
p27872
S'std::vector<OutputName, std::allocator<OutputName> >'
p27873
sS'default'
p27874
g3
sS'name'
p27875
S'outputs'
p27876
sS'required'
p27877
I00
sS'group_name'
p27878
S'Advanced'
p27879
sa(dp27880
S'description'
p27881
S'The seed for the master random number generator\n'
p27882
sS'cpp_type'
p27883
S'unsigned int'
p27884
sS'default'
p27885
S'0'
p27886
sS'name'
p27887
S'seed'
p27888
sS'required'
p27889
I00
sS'group_name'
p27890
S'Advanced'
p27891
sa(dp27892
S'description'
p27893
g3
sS'cpp_type'
p27894
S'std::string'
p27895
sS'default'
p27896
S'NodalL2Norm'
p27897
sS'name'
p27898
S'type'
p27899
sS'required'
p27900
I00
sS'group_name'
p27901
Nsa(dp27902
S'description'
p27903
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27904
sS'cpp_type'
p27905
S'bool'
p27906
sS'default'
p27907
S'0'
p27908
sS'name'
p27909
S'use_displaced_mesh'
p27910
sS'required'
p27911
I00
sS'group_name'
p27912
S'Advanced'
p27913
sa(dp27914
S'description'
p27915
S'The name of the variable that this postprocessor operates on\n'
p27916
sS'cpp_type'
p27917
S'VariableName'
p27918
sS'default'
p27919
g3
sS'name'
p27920
S'variable'
p27921
sS'required'
p27922
I01
sS'group_name'
p27923
NsasS'name'
p27924
S'/Postprocessors/NodalL2Norm'
p27925
sa(dp27926
S'description'
p27927
g3
sS'type'
p27928
NsS'subblocks'
p27929
NsS'parameters'
p27930
(lp27931
(dp27932
S'description'
p27933
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p27934
sS'cpp_type'
p27935
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p27936
sS'default'
p27937
g3
sS'name'
p27938
S'block'
p27939
sS'required'
p27940
I00
sS'group_name'
p27941
Nsa(dp27942
S'description'
p27943
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p27944
sS'cpp_type'
p27945
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p27946
sS'default'
p27947
g3
sS'name'
p27948
S'boundary'
p27949
sS'required'
p27950
I00
sS'group_name'
p27951
Nsa(dp27952
S'name'
p27953
S'execute_on'
p27954
sS'cpp_type'
p27955
S'MooseEnum'
p27956
sS'default'
p27957
S'timestep'
p27958
sS'description'
p27959
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p27960
sS'required'
p27961
I00
sS'options'
p27962
S'initial residual jacobian timestep timestep_begin custom'
p27963
sS'group_name'
p27964
Nsa(dp27965
S'name'
p27966
S'output'
p27967
sS'cpp_type'
p27968
S'MooseEnum'
p27969
sS'default'
p27970
S'auto'
p27971
sS'description'
p27972
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p27973
sS'required'
p27974
I00
sS'options'
p27975
S'none auto screen file both'
p27976
sS'group_name'
p27977
S'Advanced'
p27978
sa(dp27979
S'description'
p27980
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p27981
sS'cpp_type'
p27982
S'std::vector<OutputName, std::allocator<OutputName> >'
p27983
sS'default'
p27984
g3
sS'name'
p27985
S'outputs'
p27986
sS'required'
p27987
I00
sS'group_name'
p27988
S'Advanced'
p27989
sa(dp27990
S'description'
p27991
S'The seed for the master random number generator\n'
p27992
sS'cpp_type'
p27993
S'unsigned int'
p27994
sS'default'
p27995
S'0'
p27996
sS'name'
p27997
S'seed'
p27998
sS'required'
p27999
I00
sS'group_name'
p28000
S'Advanced'
p28001
sa(dp28002
S'description'
p28003
g3
sS'cpp_type'
p28004
S'std::string'
p28005
sS'default'
p28006
S'NodalMaxValue'
p28007
sS'name'
p28008
S'type'
p28009
sS'required'
p28010
I00
sS'group_name'
p28011
Nsa(dp28012
S'description'
p28013
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28014
sS'cpp_type'
p28015
S'bool'
p28016
sS'default'
p28017
S'0'
p28018
sS'name'
p28019
S'use_displaced_mesh'
p28020
sS'required'
p28021
I00
sS'group_name'
p28022
S'Advanced'
p28023
sa(dp28024
S'description'
p28025
S'The name of the variable that this postprocessor operates on\n'
p28026
sS'cpp_type'
p28027
S'VariableName'
p28028
sS'default'
p28029
g3
sS'name'
p28030
S'variable'
p28031
sS'required'
p28032
I01
sS'group_name'
p28033
NsasS'name'
p28034
S'/Postprocessors/NodalMaxValue'
p28035
sa(dp28036
S'description'
p28037
g3
sS'type'
p28038
NsS'subblocks'
p28039
NsS'parameters'
p28040
(lp28041
(dp28042
S'description'
p28043
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p28044
sS'cpp_type'
p28045
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p28046
sS'default'
p28047
g3
sS'name'
p28048
S'block'
p28049
sS'required'
p28050
I00
sS'group_name'
p28051
Nsa(dp28052
S'description'
p28053
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28054
sS'cpp_type'
p28055
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p28056
sS'default'
p28057
g3
sS'name'
p28058
S'boundary'
p28059
sS'required'
p28060
I00
sS'group_name'
p28061
Nsa(dp28062
S'name'
p28063
S'execute_on'
p28064
sS'cpp_type'
p28065
S'MooseEnum'
p28066
sS'default'
p28067
S'timestep'
p28068
sS'description'
p28069
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p28070
sS'required'
p28071
I00
sS'options'
p28072
S'initial residual jacobian timestep timestep_begin custom'
p28073
sS'group_name'
p28074
Nsa(dp28075
S'name'
p28076
S'output'
p28077
sS'cpp_type'
p28078
S'MooseEnum'
p28079
sS'default'
p28080
S'auto'
p28081
sS'description'
p28082
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p28083
sS'required'
p28084
I00
sS'options'
p28085
S'none auto screen file both'
p28086
sS'group_name'
p28087
S'Advanced'
p28088
sa(dp28089
S'description'
p28090
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p28091
sS'cpp_type'
p28092
S'std::vector<OutputName, std::allocator<OutputName> >'
p28093
sS'default'
p28094
g3
sS'name'
p28095
S'outputs'
p28096
sS'required'
p28097
I00
sS'group_name'
p28098
S'Advanced'
p28099
sa(dp28100
S'description'
p28101
S'The seed for the master random number generator\n'
p28102
sS'cpp_type'
p28103
S'unsigned int'
p28104
sS'default'
p28105
S'0'
p28106
sS'name'
p28107
S'seed'
p28108
sS'required'
p28109
I00
sS'group_name'
p28110
S'Advanced'
p28111
sa(dp28112
S'description'
p28113
g3
sS'cpp_type'
p28114
S'std::string'
p28115
sS'default'
p28116
S'NodalProxyMaxValue'
p28117
sS'name'
p28118
S'type'
p28119
sS'required'
p28120
I00
sS'group_name'
p28121
Nsa(dp28122
S'description'
p28123
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28124
sS'cpp_type'
p28125
S'bool'
p28126
sS'default'
p28127
S'0'
p28128
sS'name'
p28129
S'use_displaced_mesh'
p28130
sS'required'
p28131
I00
sS'group_name'
p28132
S'Advanced'
p28133
sa(dp28134
S'description'
p28135
S'The name of the variable that this postprocessor operates on\n'
p28136
sS'cpp_type'
p28137
S'VariableName'
p28138
sS'default'
p28139
g3
sS'name'
p28140
S'variable'
p28141
sS'required'
p28142
I01
sS'group_name'
p28143
NsasS'name'
p28144
S'/Postprocessors/NodalProxyMaxValue'
p28145
sa(dp28146
S'description'
p28147
g3
sS'type'
p28148
NsS'subblocks'
p28149
NsS'parameters'
p28150
(lp28151
(dp28152
S'description'
p28153
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p28154
sS'cpp_type'
p28155
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p28156
sS'default'
p28157
g3
sS'name'
p28158
S'block'
p28159
sS'required'
p28160
I00
sS'group_name'
p28161
Nsa(dp28162
S'description'
p28163
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28164
sS'cpp_type'
p28165
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p28166
sS'default'
p28167
g3
sS'name'
p28168
S'boundary'
p28169
sS'required'
p28170
I00
sS'group_name'
p28171
Nsa(dp28172
S'name'
p28173
S'execute_on'
p28174
sS'cpp_type'
p28175
S'MooseEnum'
p28176
sS'default'
p28177
S'timestep'
p28178
sS'description'
p28179
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p28180
sS'required'
p28181
I00
sS'options'
p28182
S'initial residual jacobian timestep timestep_begin custom'
p28183
sS'group_name'
p28184
Nsa(dp28185
S'name'
p28186
S'output'
p28187
sS'cpp_type'
p28188
S'MooseEnum'
p28189
sS'default'
p28190
S'auto'
p28191
sS'description'
p28192
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p28193
sS'required'
p28194
I00
sS'options'
p28195
S'none auto screen file both'
p28196
sS'group_name'
p28197
S'Advanced'
p28198
sa(dp28199
S'description'
p28200
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p28201
sS'cpp_type'
p28202
S'std::vector<OutputName, std::allocator<OutputName> >'
p28203
sS'default'
p28204
g3
sS'name'
p28205
S'outputs'
p28206
sS'required'
p28207
I00
sS'group_name'
p28208
S'Advanced'
p28209
sa(dp28210
S'description'
p28211
S'The seed for the master random number generator\n'
p28212
sS'cpp_type'
p28213
S'unsigned int'
p28214
sS'default'
p28215
S'0'
p28216
sS'name'
p28217
S'seed'
p28218
sS'required'
p28219
I00
sS'group_name'
p28220
S'Advanced'
p28221
sa(dp28222
S'description'
p28223
g3
sS'cpp_type'
p28224
S'std::string'
p28225
sS'default'
p28226
S'NodalSum'
p28227
sS'name'
p28228
S'type'
p28229
sS'required'
p28230
I00
sS'group_name'
p28231
Nsa(dp28232
S'description'
p28233
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28234
sS'cpp_type'
p28235
S'bool'
p28236
sS'default'
p28237
S'0'
p28238
sS'name'
p28239
S'use_displaced_mesh'
p28240
sS'required'
p28241
I00
sS'group_name'
p28242
S'Advanced'
p28243
sa(dp28244
S'description'
p28245
S'The name of the variable that this postprocessor operates on\n'
p28246
sS'cpp_type'
p28247
S'VariableName'
p28248
sS'default'
p28249
g3
sS'name'
p28250
S'variable'
p28251
sS'required'
p28252
I01
sS'group_name'
p28253
NsasS'name'
p28254
S'/Postprocessors/NodalSum'
p28255
sa(dp28256
S'description'
p28257
g3
sS'type'
p28258
NsS'subblocks'
p28259
NsS'parameters'
p28260
(lp28261
(dp28262
S'name'
p28263
S'execute_on'
p28264
sS'cpp_type'
p28265
S'MooseEnum'
p28266
sS'default'
p28267
S'timestep'
p28268
sS'description'
p28269
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p28270
sS'required'
p28271
I00
sS'options'
p28272
S'initial residual jacobian timestep timestep_begin custom'
p28273
sS'group_name'
p28274
Nsa(dp28275
S'description'
p28276
S'The ID of the node where we monitor\n'
p28277
sS'cpp_type'
p28278
S'unsigned int'
p28279
sS'default'
p28280
g3
sS'name'
p28281
S'nodeid'
p28282
sS'required'
p28283
I01
sS'group_name'
p28284
Nsa(dp28285
S'name'
p28286
S'output'
p28287
sS'cpp_type'
p28288
S'MooseEnum'
p28289
sS'default'
p28290
S'auto'
p28291
sS'description'
p28292
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p28293
sS'required'
p28294
I00
sS'options'
p28295
S'none auto screen file both'
p28296
sS'group_name'
p28297
S'Advanced'
p28298
sa(dp28299
S'description'
p28300
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p28301
sS'cpp_type'
p28302
S'std::vector<OutputName, std::allocator<OutputName> >'
p28303
sS'default'
p28304
g3
sS'name'
p28305
S'outputs'
p28306
sS'required'
p28307
I00
sS'group_name'
p28308
S'Advanced'
p28309
sa(dp28310
S'description'
p28311
g3
sS'cpp_type'
p28312
S'std::string'
p28313
sS'default'
p28314
S'NodalVariableValue'
p28315
sS'name'
p28316
S'type'
p28317
sS'required'
p28318
I00
sS'group_name'
p28319
Nsa(dp28320
S'description'
p28321
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28322
sS'cpp_type'
p28323
S'bool'
p28324
sS'default'
p28325
S'0'
p28326
sS'name'
p28327
S'use_displaced_mesh'
p28328
sS'required'
p28329
I00
sS'group_name'
p28330
S'Advanced'
p28331
sa(dp28332
S'description'
p28333
S'The variable to be monitored\n'
p28334
sS'cpp_type'
p28335
S'VariableName'
p28336
sS'default'
p28337
g3
sS'name'
p28338
S'variable'
p28339
sS'required'
p28340
I01
sS'group_name'
p28341
NsasS'name'
p28342
S'/Postprocessors/NodalVariableValue'
p28343
sa(dp28344
S'description'
p28345
g3
sS'type'
p28346
NsS'subblocks'
p28347
NsS'parameters'
p28348
(lp28349
(dp28350
S'description'
p28351
S'filename for Avrami analysis info (ln time and Avrami)\n'
p28352
sS'cpp_type'
p28353
S'FileName'
p28354
sS'default'
p28355
g3
sS'name'
p28356
S'Avrami_file'
p28357
sS'required'
p28358
I00
sS'group_name'
p28359
Nsa(dp28360
S'description'
p28361
S'An optional file name where bubble volumes can be output.\n'
p28362
sS'cpp_type'
p28363
S'FileName'
p28364
sS'default'
p28365
g3
sS'name'
p28366
S'bubble_volume_file'
p28367
sS'required'
p28368
I00
sS'group_name'
p28369
Nsa(dp28370
S'description'
p28371
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p28372
sS'cpp_type'
p28373
S'bool'
p28374
sS'default'
p28375
S'0'
p28376
sS'name'
p28377
S'condense_map_info'
p28378
sS'required'
p28379
I00
sS'group_name'
p28380
Nsa(dp28381
S'description'
p28382
S'The threshold for which an existing bubble may be extended (defaults to "threshold")\n'
p28383
sS'cpp_type'
p28384
S'double'
p28385
sS'default'
p28386
g3
sS'name'
p28387
S'connecting_threshold'
p28388
sS'required'
p28389
I00
sS'group_name'
p28390
Nsa(dp28391
S'description'
p28392
S'If supplied, will be used to find the scaled threshold of the bubble edges\n'
p28393
sS'cpp_type'
p28394
S'PostprocessorName'
p28395
sS'default'
p28396
g3
sS'name'
p28397
S'elem_avg_value'
p28398
sS'required'
p28399
I00
sS'group_name'
p28400
Nsa(dp28401
S'description'
p28402
S'Instruct the UO to populate the variable index map.\n'
p28403
sS'cpp_type'
p28404
S'bool'
p28405
sS'default'
p28406
S'0'
p28407
sS'name'
p28408
S'enable_var_coloring'
p28409
sS'required'
p28410
I00
sS'group_name'
p28411
Nsa(dp28412
S'description'
p28413
S'Equilibrium volume fraction of 2nd phase for Avrami analysis\n'
p28414
sS'cpp_type'
p28415
S'double'
p28416
sS'default'
p28417
S'-1'
p28418
sS'name'
p28419
S'equil_fraction'
p28420
sS'required'
p28421
I00
sS'group_name'
p28422
Nsa(dp28423
S'name'
p28424
S'execute_on'
p28425
sS'cpp_type'
p28426
S'MooseEnum'
p28427
sS'default'
p28428
S'timestep'
p28429
sS'description'
p28430
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p28431
sS'required'
p28432
I00
sS'options'
p28433
S'initial residual jacobian timestep timestep_begin custom'
p28434
sS'group_name'
p28435
Nsa(dp28436
S'description'
p28437
S'Postprocessor from which to get mesh volume\n'
p28438
sS'cpp_type'
p28439
S'PostprocessorName'
p28440
sS'default'
p28441
g3
sS'name'
p28442
S'mesh_volume'
p28443
sS'required'
p28444
I01
sS'group_name'
p28445
Nsa(dp28446
S'name'
p28447
S'output'
p28448
sS'cpp_type'
p28449
S'MooseEnum'
p28450
sS'default'
p28451
S'auto'
p28452
sS'description'
p28453
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p28454
sS'required'
p28455
I00
sS'options'
p28456
S'none auto screen file both'
p28457
sS'group_name'
p28458
S'Advanced'
p28459
sa(dp28460
S'description'
p28461
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p28462
sS'cpp_type'
p28463
S'std::vector<OutputName, std::allocator<OutputName> >'
p28464
sS'default'
p28465
g3
sS'name'
p28466
S'outputs'
p28467
sS'required'
p28468
I00
sS'group_name'
p28469
S'Advanced'
p28470
sa(dp28471
S'description'
p28472
S'The threshold value for which a new bubble may be started\n'
p28473
sS'cpp_type'
p28474
S'double'
p28475
sS'default'
p28476
S'0.5'
p28477
sS'name'
p28478
S'threshold'
p28479
sS'required'
p28480
I00
sS'group_name'
p28481
Nsa(dp28482
S'description'
p28483
S'Calculate memory usage\n'
p28484
sS'cpp_type'
p28485
S'bool'
p28486
sS'default'
p28487
S'0'
p28488
sS'name'
p28489
S'track_memory_usage'
p28490
sS'required'
p28491
I00
sS'group_name'
p28492
Nsa(dp28493
S'description'
p28494
g3
sS'cpp_type'
p28495
S'std::string'
p28496
sS'default'
p28497
S'NodalVolumeFraction'
p28498
sS'name'
p28499
S'type'
p28500
sS'required'
p28501
I00
sS'group_name'
p28502
Nsa(dp28503
S'description'
p28504
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28505
sS'cpp_type'
p28506
S'bool'
p28507
sS'default'
p28508
S'0'
p28509
sS'name'
p28510
S'use_displaced_mesh'
p28511
sS'required'
p28512
I00
sS'group_name'
p28513
S'Advanced'
p28514
sa(dp28515
S'description'
p28516
S'Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n'
p28517
sS'cpp_type'
p28518
S'bool'
p28519
sS'default'
p28520
S'0'
p28521
sS'name'
p28522
S'use_global_numbering'
p28523
sS'required'
p28524
I00
sS'group_name'
p28525
Nsa(dp28526
S'description'
p28527
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p28528
sS'cpp_type'
p28529
S'bool'
p28530
sS'default'
p28531
S'1'
p28532
sS'name'
p28533
S'use_single_map'
p28534
sS'required'
p28535
I00
sS'group_name'
p28536
Nsa(dp28537
S'description'
p28538
S'Ths variable(s) for which to find connected regions of interests, i.e. "bubbles".\n'
p28539
sS'cpp_type'
p28540
S'std::vector<VariableName>'
p28541
sS'default'
p28542
g3
sS'name'
p28543
S'variable'
p28544
sS'required'
p28545
I01
sS'group_name'
p28546
NsasS'name'
p28547
S'/Postprocessors/NodalVolumeFraction'
p28548
sa(dp28549
S'description'
p28550
g3
sS'type'
p28551
NsS'subblocks'
p28552
NsS'parameters'
p28553
(lp28554
(dp28555
S'name'
p28556
S'execute_on'
p28557
sS'cpp_type'
p28558
S'MooseEnum'
p28559
sS'default'
p28560
S'timestep'
p28561
sS'description'
p28562
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p28563
sS'required'
p28564
I00
sS'options'
p28565
S'initial residual jacobian timestep timestep_begin custom'
p28566
sS'group_name'
p28567
Nsa(dp28568
S'name'
p28569
S'output'
p28570
sS'cpp_type'
p28571
S'MooseEnum'
p28572
sS'default'
p28573
S'auto'
p28574
sS'description'
p28575
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p28576
sS'required'
p28577
I00
sS'options'
p28578
S'none auto screen file both'
p28579
sS'group_name'
p28580
S'Advanced'
p28581
sa(dp28582
S'description'
p28583
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p28584
sS'cpp_type'
p28585
S'std::vector<OutputName, std::allocator<OutputName> >'
p28586
sS'default'
p28587
g3
sS'name'
p28588
S'outputs'
p28589
sS'required'
p28590
I00
sS'group_name'
p28591
S'Advanced'
p28592
sa(dp28593
S'description'
p28594
g3
sS'cpp_type'
p28595
S'std::string'
p28596
sS'default'
p28597
S'NumDOFs'
p28598
sS'name'
p28599
S'type'
p28600
sS'required'
p28601
I00
sS'group_name'
p28602
Nsa(dp28603
S'description'
p28604
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28605
sS'cpp_type'
p28606
S'bool'
p28607
sS'default'
p28608
S'0'
p28609
sS'name'
p28610
S'use_displaced_mesh'
p28611
sS'required'
p28612
I00
sS'group_name'
p28613
S'Advanced'
p28614
sasS'name'
p28615
S'/Postprocessors/NumDOFs'
p28616
sa(dp28617
S'description'
p28618
g3
sS'type'
p28619
NsS'subblocks'
p28620
NsS'parameters'
p28621
(lp28622
(dp28623
S'name'
p28624
S'execute_on'
p28625
sS'cpp_type'
p28626
S'MooseEnum'
p28627
sS'default'
p28628
S'timestep'
p28629
sS'description'
p28630
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p28631
sS'required'
p28632
I00
sS'options'
p28633
S'initial residual jacobian timestep timestep_begin custom'
p28634
sS'group_name'
p28635
Nsa(dp28636
S'name'
p28637
S'output'
p28638
sS'cpp_type'
p28639
S'MooseEnum'
p28640
sS'default'
p28641
S'auto'
p28642
sS'description'
p28643
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p28644
sS'required'
p28645
I00
sS'options'
p28646
S'none auto screen file both'
p28647
sS'group_name'
p28648
S'Advanced'
p28649
sa(dp28650
S'description'
p28651
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p28652
sS'cpp_type'
p28653
S'std::vector<OutputName, std::allocator<OutputName> >'
p28654
sS'default'
p28655
g3
sS'name'
p28656
S'outputs'
p28657
sS'required'
p28658
I00
sS'group_name'
p28659
S'Advanced'
p28660
sa(dp28661
S'description'
p28662
g3
sS'cpp_type'
p28663
S'std::string'
p28664
sS'default'
p28665
S'NumElems'
p28666
sS'name'
p28667
S'type'
p28668
sS'required'
p28669
I00
sS'group_name'
p28670
Nsa(dp28671
S'description'
p28672
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28673
sS'cpp_type'
p28674
S'bool'
p28675
sS'default'
p28676
S'0'
p28677
sS'name'
p28678
S'use_displaced_mesh'
p28679
sS'required'
p28680
I00
sS'group_name'
p28681
S'Advanced'
p28682
sasS'name'
p28683
S'/Postprocessors/NumElems'
p28684
sa(dp28685
S'description'
p28686
g3
sS'type'
p28687
NsS'subblocks'
p28688
NsS'parameters'
p28689
(lp28690
(dp28691
S'name'
p28692
S'execute_on'
p28693
sS'cpp_type'
p28694
S'MooseEnum'
p28695
sS'default'
p28696
S'timestep'
p28697
sS'description'
p28698
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p28699
sS'required'
p28700
I00
sS'options'
p28701
S'initial residual jacobian timestep timestep_begin custom'
p28702
sS'group_name'
p28703
Nsa(dp28704
S'name'
p28705
S'output'
p28706
sS'cpp_type'
p28707
S'MooseEnum'
p28708
sS'default'
p28709
S'auto'
p28710
sS'description'
p28711
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p28712
sS'required'
p28713
I00
sS'options'
p28714
S'none auto screen file both'
p28715
sS'group_name'
p28716
S'Advanced'
p28717
sa(dp28718
S'description'
p28719
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p28720
sS'cpp_type'
p28721
S'std::vector<OutputName, std::allocator<OutputName> >'
p28722
sS'default'
p28723
g3
sS'name'
p28724
S'outputs'
p28725
sS'required'
p28726
I00
sS'group_name'
p28727
S'Advanced'
p28728
sa(dp28729
S'description'
p28730
g3
sS'cpp_type'
p28731
S'std::string'
p28732
sS'default'
p28733
S'NumLinearIterations'
p28734
sS'name'
p28735
S'type'
p28736
sS'required'
p28737
I00
sS'group_name'
p28738
Nsa(dp28739
S'description'
p28740
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28741
sS'cpp_type'
p28742
S'bool'
p28743
sS'default'
p28744
S'0'
p28745
sS'name'
p28746
S'use_displaced_mesh'
p28747
sS'required'
p28748
I00
sS'group_name'
p28749
S'Advanced'
p28750
sasS'name'
p28751
S'/Postprocessors/NumLinearIterations'
p28752
sa(dp28753
S'description'
p28754
g3
sS'type'
p28755
NsS'subblocks'
p28756
NsS'parameters'
p28757
(lp28758
(dp28759
S'name'
p28760
S'execute_on'
p28761
sS'cpp_type'
p28762
S'MooseEnum'
p28763
sS'default'
p28764
S'timestep'
p28765
sS'description'
p28766
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p28767
sS'required'
p28768
I00
sS'options'
p28769
S'initial residual jacobian timestep timestep_begin custom'
p28770
sS'group_name'
p28771
Nsa(dp28772
S'name'
p28773
S'output'
p28774
sS'cpp_type'
p28775
S'MooseEnum'
p28776
sS'default'
p28777
S'auto'
p28778
sS'description'
p28779
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p28780
sS'required'
p28781
I00
sS'options'
p28782
S'none auto screen file both'
p28783
sS'group_name'
p28784
S'Advanced'
p28785
sa(dp28786
S'description'
p28787
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p28788
sS'cpp_type'
p28789
S'std::vector<OutputName, std::allocator<OutputName> >'
p28790
sS'default'
p28791
g3
sS'name'
p28792
S'outputs'
p28793
sS'required'
p28794
I00
sS'group_name'
p28795
S'Advanced'
p28796
sa(dp28797
S'description'
p28798
g3
sS'cpp_type'
p28799
S'std::string'
p28800
sS'default'
p28801
S'NumNodes'
p28802
sS'name'
p28803
S'type'
p28804
sS'required'
p28805
I00
sS'group_name'
p28806
Nsa(dp28807
S'description'
p28808
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28809
sS'cpp_type'
p28810
S'bool'
p28811
sS'default'
p28812
S'0'
p28813
sS'name'
p28814
S'use_displaced_mesh'
p28815
sS'required'
p28816
I00
sS'group_name'
p28817
S'Advanced'
p28818
sasS'name'
p28819
S'/Postprocessors/NumNodes'
p28820
sa(dp28821
S'description'
p28822
g3
sS'type'
p28823
NsS'subblocks'
p28824
NsS'parameters'
p28825
(lp28826
(dp28827
S'name'
p28828
S'execute_on'
p28829
sS'cpp_type'
p28830
S'MooseEnum'
p28831
sS'default'
p28832
S'timestep'
p28833
sS'description'
p28834
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p28835
sS'required'
p28836
I00
sS'options'
p28837
S'initial residual jacobian timestep timestep_begin custom'
p28838
sS'group_name'
p28839
Nsa(dp28840
S'name'
p28841
S'output'
p28842
sS'cpp_type'
p28843
S'MooseEnum'
p28844
sS'default'
p28845
S'auto'
p28846
sS'description'
p28847
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p28848
sS'required'
p28849
I00
sS'options'
p28850
S'none auto screen file both'
p28851
sS'group_name'
p28852
S'Advanced'
p28853
sa(dp28854
S'description'
p28855
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p28856
sS'cpp_type'
p28857
S'std::vector<OutputName, std::allocator<OutputName> >'
p28858
sS'default'
p28859
g3
sS'name'
p28860
S'outputs'
p28861
sS'required'
p28862
I00
sS'group_name'
p28863
S'Advanced'
p28864
sa(dp28865
S'description'
p28866
g3
sS'cpp_type'
p28867
S'std::string'
p28868
sS'default'
p28869
S'NumNonlinearIterations'
p28870
sS'name'
p28871
S'type'
p28872
sS'required'
p28873
I00
sS'group_name'
p28874
Nsa(dp28875
S'description'
p28876
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28877
sS'cpp_type'
p28878
S'bool'
p28879
sS'default'
p28880
S'0'
p28881
sS'name'
p28882
S'use_displaced_mesh'
p28883
sS'required'
p28884
I00
sS'group_name'
p28885
S'Advanced'
p28886
sasS'name'
p28887
S'/Postprocessors/NumNonlinearIterations'
p28888
sa(dp28889
S'description'
p28890
g3
sS'type'
p28891
NsS'subblocks'
p28892
NsS'parameters'
p28893
(lp28894
(dp28895
S'name'
p28896
S'execute_on'
p28897
sS'cpp_type'
p28898
S'MooseEnum'
p28899
sS'default'
p28900
S'timestep'
p28901
sS'description'
p28902
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p28903
sS'required'
p28904
I00
sS'options'
p28905
S'initial residual jacobian timestep timestep_begin custom'
p28906
sS'group_name'
p28907
Nsa(dp28908
S'name'
p28909
S'output'
p28910
sS'cpp_type'
p28911
S'MooseEnum'
p28912
sS'default'
p28913
S'auto'
p28914
sS'description'
p28915
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p28916
sS'required'
p28917
I00
sS'options'
p28918
S'none auto screen file both'
p28919
sS'group_name'
p28920
S'Advanced'
p28921
sa(dp28922
S'description'
p28923
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p28924
sS'cpp_type'
p28925
S'std::vector<OutputName, std::allocator<OutputName> >'
p28926
sS'default'
p28927
g3
sS'name'
p28928
S'outputs'
p28929
sS'required'
p28930
I00
sS'group_name'
p28931
S'Advanced'
p28932
sa(dp28933
S'description'
p28934
g3
sS'cpp_type'
p28935
S'std::string'
p28936
sS'default'
p28937
S'NumResidualEvaluations'
p28938
sS'name'
p28939
S'type'
p28940
sS'required'
p28941
I00
sS'group_name'
p28942
Nsa(dp28943
S'description'
p28944
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28945
sS'cpp_type'
p28946
S'bool'
p28947
sS'default'
p28948
S'0'
p28949
sS'name'
p28950
S'use_displaced_mesh'
p28951
sS'required'
p28952
I00
sS'group_name'
p28953
S'Advanced'
p28954
sasS'name'
p28955
S'/Postprocessors/NumResidualEvaluations'
p28956
sa(dp28957
S'description'
p28958
g3
sS'type'
p28959
NsS'subblocks'
p28960
NsS'parameters'
p28961
(lp28962
(dp28963
S'name'
p28964
S'execute_on'
p28965
sS'cpp_type'
p28966
S'MooseEnum'
p28967
sS'default'
p28968
S'timestep'
p28969
sS'description'
p28970
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p28971
sS'required'
p28972
I00
sS'options'
p28973
S'initial residual jacobian timestep timestep_begin custom'
p28974
sS'group_name'
p28975
Nsa(dp28976
S'name'
p28977
S'output'
p28978
sS'cpp_type'
p28979
S'MooseEnum'
p28980
sS'default'
p28981
S'auto'
p28982
sS'description'
p28983
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p28984
sS'required'
p28985
I00
sS'options'
p28986
S'none auto screen file both'
p28987
sS'group_name'
p28988
S'Advanced'
p28989
sa(dp28990
S'description'
p28991
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p28992
sS'cpp_type'
p28993
S'std::vector<OutputName, std::allocator<OutputName> >'
p28994
sS'default'
p28995
g3
sS'name'
p28996
S'outputs'
p28997
sS'required'
p28998
I00
sS'group_name'
p28999
S'Advanced'
p29000
sa(dp29001
S'name'
p29002
S'system'
p29003
sS'cpp_type'
p29004
S'MooseEnum'
p29005
sS'default'
p29006
S'nonlinear'
p29007
sS'description'
p29008
S'The system for which you want to print the number of variables.\n'
p29009
sS'required'
p29010
I00
sS'options'
p29011
S'nonlinear auxiliary'
p29012
sS'group_name'
p29013
Nsa(dp29014
S'description'
p29015
g3
sS'cpp_type'
p29016
S'std::string'
p29017
sS'default'
p29018
S'NumVars'
p29019
sS'name'
p29020
S'type'
p29021
sS'required'
p29022
I00
sS'group_name'
p29023
Nsa(dp29024
S'description'
p29025
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29026
sS'cpp_type'
p29027
S'bool'
p29028
sS'default'
p29029
S'0'
p29030
sS'name'
p29031
S'use_displaced_mesh'
p29032
sS'required'
p29033
I00
sS'group_name'
p29034
S'Advanced'
p29035
sasS'name'
p29036
S'/Postprocessors/NumVars'
p29037
sa(dp29038
S'description'
p29039
g3
sS'type'
p29040
NsS'subblocks'
p29041
NsS'parameters'
p29042
(lp29043
(dp29044
S'name'
p29045
S'column'
p29046
sS'cpp_type'
p29047
S'MooseEnum'
p29048
sS'default'
p29049
g3
sS'description'
p29050
S'The column you want the value of.\n'
p29051
sS'required'
p29052
I01
sS'options'
p29053
S'n_calls total_time average_time total_time_with_sub average_time_with_sub percent_of_active_time percent_of_active_time_with_sub'
p29054
sS'group_name'
p29055
Nsa(dp29056
S'description'
p29057
S'The name of the event.\n'
p29058
sS'cpp_type'
p29059
S'std::string'
p29060
sS'default'
p29061
g3
sS'name'
p29062
S'event'
p29063
sS'required'
p29064
I01
sS'group_name'
p29065
Nsa(dp29066
S'name'
p29067
S'execute_on'
p29068
sS'cpp_type'
p29069
S'MooseEnum'
p29070
sS'default'
p29071
S'timestep'
p29072
sS'description'
p29073
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p29074
sS'required'
p29075
I00
sS'options'
p29076
S'initial residual jacobian timestep timestep_begin custom'
p29077
sS'group_name'
p29078
Nsa(dp29079
S'name'
p29080
S'output'
p29081
sS'cpp_type'
p29082
S'MooseEnum'
p29083
sS'default'
p29084
S'auto'
p29085
sS'description'
p29086
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p29087
sS'required'
p29088
I00
sS'options'
p29089
S'none auto screen file both'
p29090
sS'group_name'
p29091
S'Advanced'
p29092
sa(dp29093
S'description'
p29094
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p29095
sS'cpp_type'
p29096
S'std::vector<OutputName, std::allocator<OutputName> >'
p29097
sS'default'
p29098
g3
sS'name'
p29099
S'outputs'
p29100
sS'required'
p29101
I00
sS'group_name'
p29102
S'Advanced'
p29103
sa(dp29104
S'description'
p29105
g3
sS'cpp_type'
p29106
S'std::string'
p29107
sS'default'
p29108
S'PerformanceData'
p29109
sS'name'
p29110
S'type'
p29111
sS'required'
p29112
I00
sS'group_name'
p29113
Nsa(dp29114
S'description'
p29115
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29116
sS'cpp_type'
p29117
S'bool'
p29118
sS'default'
p29119
S'0'
p29120
sS'name'
p29121
S'use_displaced_mesh'
p29122
sS'required'
p29123
I00
sS'group_name'
p29124
S'Advanced'
p29125
sasS'name'
p29126
S'/Postprocessors/PerformanceData'
p29127
sa(dp29128
S'description'
p29129
g3
sS'type'
p29130
NsS'subblocks'
p29131
NsS'parameters'
p29132
(lp29133
(dp29134
S'name'
p29135
S'execute_on'
p29136
sS'cpp_type'
p29137
S'MooseEnum'
p29138
sS'default'
p29139
S'timestep'
p29140
sS'description'
p29141
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p29142
sS'required'
p29143
I00
sS'options'
p29144
S'initial residual jacobian timestep timestep_begin custom'
p29145
sS'group_name'
p29146
Nsa(dp29147
S'description'
p29148
S'Name of the function to plot (i.e. sample)\n'
p29149
sS'cpp_type'
p29150
S'FunctionName'
p29151
sS'default'
p29152
g3
sS'name'
p29153
S'function'
p29154
sS'required'
p29155
I01
sS'group_name'
p29156
Nsa(dp29157
S'name'
p29158
S'output'
p29159
sS'cpp_type'
p29160
S'MooseEnum'
p29161
sS'default'
p29162
S'auto'
p29163
sS'description'
p29164
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p29165
sS'required'
p29166
I00
sS'options'
p29167
S'none auto screen file both'
p29168
sS'group_name'
p29169
S'Advanced'
p29170
sa(dp29171
S'description'
p29172
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p29173
sS'cpp_type'
p29174
S'std::vector<OutputName, std::allocator<OutputName> >'
p29175
sS'default'
p29176
g3
sS'name'
p29177
S'outputs'
p29178
sS'required'
p29179
I00
sS'group_name'
p29180
S'Advanced'
p29181
sa(dp29182
S'description'
p29183
S'A point in space to be given to the function\n'
p29184
sS'cpp_type'
p29185
S'libMesh::Point'
p29186
sS'default'
p29187
g3
sS'name'
p29188
S'point'
p29189
sS'required'
p29190
I00
sS'group_name'
p29191
Nsa(dp29192
S'description'
p29193
S'A scale factor to be applied to the function\n'
p29194
sS'cpp_type'
p29195
S'double'
p29196
sS'default'
p29197
S'1'
p29198
sS'name'
p29199
S'scale_factor'
p29200
sS'required'
p29201
I00
sS'group_name'
p29202
Nsa(dp29203
S'description'
p29204
g3
sS'cpp_type'
p29205
S'std::string'
p29206
sS'default'
p29207
S'PlotFunction'
p29208
sS'name'
p29209
S'type'
p29210
sS'required'
p29211
I00
sS'group_name'
p29212
Nsa(dp29213
S'description'
p29214
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29215
sS'cpp_type'
p29216
S'bool'
p29217
sS'default'
p29218
S'0'
p29219
sS'name'
p29220
S'use_displaced_mesh'
p29221
sS'required'
p29222
I00
sS'group_name'
p29223
S'Advanced'
p29224
sasS'name'
p29225
S'/Postprocessors/PlotFunction'
p29226
sa(dp29227
S'description'
p29228
g3
sS'type'
p29229
NsS'subblocks'
p29230
NsS'parameters'
p29231
(lp29232
(dp29233
S'name'
p29234
S'execute_on'
p29235
sS'cpp_type'
p29236
S'MooseEnum'
p29237
sS'default'
p29238
S'timestep'
p29239
sS'description'
p29240
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p29241
sS'required'
p29242
I00
sS'options'
p29243
S'initial residual jacobian timestep timestep_begin custom'
p29244
sS'group_name'
p29245
Nsa(dp29246
S'name'
p29247
S'output'
p29248
sS'cpp_type'
p29249
S'MooseEnum'
p29250
sS'default'
p29251
S'auto'
p29252
sS'description'
p29253
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p29254
sS'required'
p29255
I00
sS'options'
p29256
S'none auto screen file both'
p29257
sS'group_name'
p29258
S'Advanced'
p29259
sa(dp29260
S'description'
p29261
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p29262
sS'cpp_type'
p29263
S'std::vector<OutputName, std::allocator<OutputName> >'
p29264
sS'default'
p29265
g3
sS'name'
p29266
S'outputs'
p29267
sS'required'
p29268
I00
sS'group_name'
p29269
S'Advanced'
p29270
sa(dp29271
S'description'
p29272
S'The physical point where the solution will be evaluated.\n'
p29273
sS'cpp_type'
p29274
S'libMesh::Point'
p29275
sS'default'
p29276
g3
sS'name'
p29277
S'point'
p29278
sS'required'
p29279
I01
sS'group_name'
p29280
Nsa(dp29281
S'description'
p29282
g3
sS'cpp_type'
p29283
S'std::string'
p29284
sS'default'
p29285
S'PointValue'
p29286
sS'name'
p29287
S'type'
p29288
sS'required'
p29289
I00
sS'group_name'
p29290
Nsa(dp29291
S'description'
p29292
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29293
sS'cpp_type'
p29294
S'bool'
p29295
sS'default'
p29296
S'0'
p29297
sS'name'
p29298
S'use_displaced_mesh'
p29299
sS'required'
p29300
I00
sS'group_name'
p29301
S'Advanced'
p29302
sa(dp29303
S'description'
p29304
S'The name of the variable that this postprocessor operates on.\n'
p29305
sS'cpp_type'
p29306
S'VariableName'
p29307
sS'default'
p29308
g3
sS'name'
p29309
S'variable'
p29310
sS'required'
p29311
I01
sS'group_name'
p29312
NsasS'name'
p29313
S'/Postprocessors/PointValue'
p29314
sa(dp29315
S'description'
p29316
g3
sS'type'
p29317
NsS'subblocks'
p29318
NsS'parameters'
p29319
(lp29320
(dp29321
S'name'
p29322
S'execute_on'
p29323
sS'cpp_type'
p29324
S'MooseEnum'
p29325
sS'default'
p29326
S'timestep'
p29327
sS'description'
p29328
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p29329
sS'required'
p29330
I00
sS'options'
p29331
S'initial residual jacobian timestep timestep_begin custom'
p29332
sS'group_name'
p29333
Nsa(dp29334
S'name'
p29335
S'output'
p29336
sS'cpp_type'
p29337
S'MooseEnum'
p29338
sS'default'
p29339
S'auto'
p29340
sS'description'
p29341
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p29342
sS'required'
p29343
I00
sS'options'
p29344
S'none auto screen file both'
p29345
sS'group_name'
p29346
S'Advanced'
p29347
sa(dp29348
S'description'
p29349
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p29350
sS'cpp_type'
p29351
S'std::vector<OutputName, std::allocator<OutputName> >'
p29352
sS'default'
p29353
g3
sS'name'
p29354
S'outputs'
p29355
sS'required'
p29356
I00
sS'group_name'
p29357
S'Advanced'
p29358
sa(dp29359
S'description'
p29360
S'Name of the parameter to be exposed\n'
p29361
sS'cpp_type'
p29362
S'std::string'
p29363
sS'default'
p29364
g3
sS'name'
p29365
S'param_name'
p29366
sS'required'
p29367
I01
sS'group_name'
p29368
Nsa(dp29369
S'description'
p29370
g3
sS'cpp_type'
p29371
S'std::string'
p29372
sS'default'
p29373
S'ProblemRealParameter'
p29374
sS'name'
p29375
S'type'
p29376
sS'required'
p29377
I00
sS'group_name'
p29378
Nsa(dp29379
S'description'
p29380
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29381
sS'cpp_type'
p29382
S'bool'
p29383
sS'default'
p29384
S'0'
p29385
sS'name'
p29386
S'use_displaced_mesh'
p29387
sS'required'
p29388
I00
sS'group_name'
p29389
S'Advanced'
p29390
sasS'name'
p29391
S'/Postprocessors/ProblemRealParameter'
p29392
sa(dp29393
S'description'
p29394
g3
sS'type'
p29395
NsS'subblocks'
p29396
NsS'parameters'
p29397
(lp29398
(dp29399
S'description'
p29400
S'The default value\n'
p29401
sS'cpp_type'
p29402
S'double'
p29403
sS'default'
p29404
g3
sS'name'
p29405
S'default'
p29406
sS'required'
p29407
I00
sS'group_name'
p29408
Nsa(dp29409
S'name'
p29410
S'execute_on'
p29411
sS'cpp_type'
p29412
S'MooseEnum'
p29413
sS'default'
p29414
S'timestep'
p29415
sS'description'
p29416
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p29417
sS'required'
p29418
I00
sS'options'
p29419
S'initial residual jacobian timestep timestep_begin custom'
p29420
sS'group_name'
p29421
Nsa(dp29422
S'name'
p29423
S'output'
p29424
sS'cpp_type'
p29425
S'MooseEnum'
p29426
sS'default'
p29427
S'auto'
p29428
sS'description'
p29429
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p29430
sS'required'
p29431
I00
sS'options'
p29432
S'none auto screen file both'
p29433
sS'group_name'
p29434
S'Advanced'
p29435
sa(dp29436
S'description'
p29437
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p29438
sS'cpp_type'
p29439
S'std::vector<OutputName, std::allocator<OutputName> >'
p29440
sS'default'
p29441
g3
sS'name'
p29442
S'outputs'
p29443
sS'required'
p29444
I00
sS'group_name'
p29445
S'Advanced'
p29446
sa(dp29447
S'description'
p29448
g3
sS'cpp_type'
p29449
S'std::string'
p29450
sS'default'
p29451
S'Receiver'
p29452
sS'name'
p29453
S'type'
p29454
sS'required'
p29455
I00
sS'group_name'
p29456
Nsa(dp29457
S'description'
p29458
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29459
sS'cpp_type'
p29460
S'bool'
p29461
sS'default'
p29462
S'0'
p29463
sS'name'
p29464
S'use_displaced_mesh'
p29465
sS'required'
p29466
I00
sS'group_name'
p29467
S'Advanced'
p29468
sasS'name'
p29469
S'/Postprocessors/Receiver'
p29470
sa(dp29471
S'description'
p29472
g3
sS'type'
p29473
NsS'subblocks'
p29474
NsS'parameters'
p29475
(lp29476
(dp29477
S'name'
p29478
S'execute_on'
p29479
sS'cpp_type'
p29480
S'MooseEnum'
p29481
sS'default'
p29482
S'timestep'
p29483
sS'description'
p29484
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p29485
sS'required'
p29486
I00
sS'options'
p29487
S'initial residual jacobian timestep timestep_begin custom'
p29488
sS'group_name'
p29489
Nsa(dp29490
S'name'
p29491
S'output'
p29492
sS'cpp_type'
p29493
S'MooseEnum'
p29494
sS'default'
p29495
S'auto'
p29496
sS'description'
p29497
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p29498
sS'required'
p29499
I00
sS'options'
p29500
S'none auto screen file both'
p29501
sS'group_name'
p29502
S'Advanced'
p29503
sa(dp29504
S'description'
p29505
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p29506
sS'cpp_type'
p29507
S'std::vector<OutputName, std::allocator<OutputName> >'
p29508
sS'default'
p29509
g3
sS'name'
p29510
S'outputs'
p29511
sS'required'
p29512
I00
sS'group_name'
p29513
S'Advanced'
p29514
sa(dp29515
S'description'
p29516
g3
sS'cpp_type'
p29517
S'std::string'
p29518
sS'default'
p29519
S'Residual'
p29520
sS'name'
p29521
S'type'
p29522
sS'required'
p29523
I00
sS'group_name'
p29524
Nsa(dp29525
S'description'
p29526
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29527
sS'cpp_type'
p29528
S'bool'
p29529
sS'default'
p29530
S'0'
p29531
sS'name'
p29532
S'use_displaced_mesh'
p29533
sS'required'
p29534
I00
sS'group_name'
p29535
S'Advanced'
p29536
sasS'name'
p29537
S'/Postprocessors/Residual'
p29538
sa(dp29539
S'description'
p29540
g3
sS'type'
p29541
NsS'subblocks'
p29542
NsS'parameters'
p29543
(lp29544
(dp29545
S'name'
p29546
S'execute_on'
p29547
sS'cpp_type'
p29548
S'MooseEnum'
p29549
sS'default'
p29550
S'timestep'
p29551
sS'description'
p29552
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p29553
sS'required'
p29554
I00
sS'options'
p29555
S'initial residual jacobian timestep timestep_begin custom'
p29556
sS'group_name'
p29557
Nsa(dp29558
S'name'
p29559
S'output'
p29560
sS'cpp_type'
p29561
S'MooseEnum'
p29562
sS'default'
p29563
S'auto'
p29564
sS'description'
p29565
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p29566
sS'required'
p29567
I00
sS'options'
p29568
S'none auto screen file both'
p29569
sS'group_name'
p29570
S'Advanced'
p29571
sa(dp29572
S'description'
p29573
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p29574
sS'cpp_type'
p29575
S'std::vector<OutputName, std::allocator<OutputName> >'
p29576
sS'default'
p29577
g3
sS'name'
p29578
S'outputs'
p29579
sS'required'
p29580
I00
sS'group_name'
p29581
S'Advanced'
p29582
sa(dp29583
S'name'
p29584
S'time_type'
p29585
sS'cpp_type'
p29586
S'MooseEnum'
p29587
sS'default'
p29588
g3
sS'description'
p29589
S'Whether to output the total elapsed or just the active time\n'
p29590
sS'required'
p29591
I01
sS'options'
p29592
S'alive active'
p29593
sS'group_name'
p29594
Nsa(dp29595
S'description'
p29596
g3
sS'cpp_type'
p29597
S'std::string'
p29598
sS'default'
p29599
S'RunTime'
p29600
sS'name'
p29601
S'type'
p29602
sS'required'
p29603
I00
sS'group_name'
p29604
Nsa(dp29605
S'description'
p29606
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29607
sS'cpp_type'
p29608
S'bool'
p29609
sS'default'
p29610
S'0'
p29611
sS'name'
p29612
S'use_displaced_mesh'
p29613
sS'required'
p29614
I00
sS'group_name'
p29615
S'Advanced'
p29616
sasS'name'
p29617
S'/Postprocessors/RunTime'
p29618
sa(dp29619
S'description'
p29620
g3
sS'type'
p29621
NsS'subblocks'
p29622
NsS'parameters'
p29623
(lp29624
(dp29625
S'name'
p29626
S'execute_on'
p29627
sS'cpp_type'
p29628
S'MooseEnum'
p29629
sS'default'
p29630
S'timestep'
p29631
sS'description'
p29632
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p29633
sS'required'
p29634
I00
sS'options'
p29635
S'initial residual jacobian timestep timestep_begin custom'
p29636
sS'group_name'
p29637
Nsa(dp29638
S'description'
p29639
S'The analytic solution to compare against\n'
p29640
sS'cpp_type'
p29641
S'FunctionName'
p29642
sS'default'
p29643
g3
sS'name'
p29644
S'function'
p29645
sS'required'
p29646
I01
sS'group_name'
p29647
Nsa(dp29648
S'name'
p29649
S'output'
p29650
sS'cpp_type'
p29651
S'MooseEnum'
p29652
sS'default'
p29653
S'auto'
p29654
sS'description'
p29655
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p29656
sS'required'
p29657
I00
sS'options'
p29658
S'none auto screen file both'
p29659
sS'group_name'
p29660
S'Advanced'
p29661
sa(dp29662
S'description'
p29663
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p29664
sS'cpp_type'
p29665
S'std::vector<OutputName, std::allocator<OutputName> >'
p29666
sS'default'
p29667
g3
sS'name'
p29668
S'outputs'
p29669
sS'required'
p29670
I00
sS'group_name'
p29671
S'Advanced'
p29672
sa(dp29673
S'description'
p29674
g3
sS'cpp_type'
p29675
S'std::string'
p29676
sS'default'
p29677
S'ScalarL2Error'
p29678
sS'name'
p29679
S'type'
p29680
sS'required'
p29681
I00
sS'group_name'
p29682
Nsa(dp29683
S'description'
p29684
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29685
sS'cpp_type'
p29686
S'bool'
p29687
sS'default'
p29688
S'0'
p29689
sS'name'
p29690
S'use_displaced_mesh'
p29691
sS'required'
p29692
I00
sS'group_name'
p29693
S'Advanced'
p29694
sa(dp29695
S'description'
p29696
S'The name of the scalar variable\n'
p29697
sS'cpp_type'
p29698
S'VariableName'
p29699
sS'default'
p29700
g3
sS'name'
p29701
S'variable'
p29702
sS'required'
p29703
I01
sS'group_name'
p29704
NsasS'name'
p29705
S'/Postprocessors/ScalarL2Error'
p29706
sa(dp29707
S'description'
p29708
g3
sS'type'
p29709
NsS'subblocks'
p29710
NsS'parameters'
p29711
(lp29712
(dp29713
S'description'
p29714
S'Component to output for this variable\n'
p29715
sS'cpp_type'
p29716
S'unsigned int'
p29717
sS'default'
p29718
S'0'
p29719
sS'name'
p29720
S'component'
p29721
sS'required'
p29722
I00
sS'group_name'
p29723
Nsa(dp29724
S'name'
p29725
S'execute_on'
p29726
sS'cpp_type'
p29727
S'MooseEnum'
p29728
sS'default'
p29729
S'timestep'
p29730
sS'description'
p29731
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p29732
sS'required'
p29733
I00
sS'options'
p29734
S'initial residual jacobian timestep timestep_begin custom'
p29735
sS'group_name'
p29736
Nsa(dp29737
S'name'
p29738
S'output'
p29739
sS'cpp_type'
p29740
S'MooseEnum'
p29741
sS'default'
p29742
S'auto'
p29743
sS'description'
p29744
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p29745
sS'required'
p29746
I00
sS'options'
p29747
S'none auto screen file both'
p29748
sS'group_name'
p29749
S'Advanced'
p29750
sa(dp29751
S'description'
p29752
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p29753
sS'cpp_type'
p29754
S'std::vector<OutputName, std::allocator<OutputName> >'
p29755
sS'default'
p29756
g3
sS'name'
p29757
S'outputs'
p29758
sS'required'
p29759
I00
sS'group_name'
p29760
S'Advanced'
p29761
sa(dp29762
S'description'
p29763
g3
sS'cpp_type'
p29764
S'std::string'
p29765
sS'default'
p29766
S'ScalarVariable'
p29767
sS'name'
p29768
S'type'
p29769
sS'required'
p29770
I00
sS'group_name'
p29771
Nsa(dp29772
S'description'
p29773
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29774
sS'cpp_type'
p29775
S'bool'
p29776
sS'default'
p29777
S'0'
p29778
sS'name'
p29779
S'use_displaced_mesh'
p29780
sS'required'
p29781
I00
sS'group_name'
p29782
S'Advanced'
p29783
sa(dp29784
S'description'
p29785
S'Name of the variable\n'
p29786
sS'cpp_type'
p29787
S'VariableName'
p29788
sS'default'
p29789
g3
sS'name'
p29790
S'variable'
p29791
sS'required'
p29792
I01
sS'group_name'
p29793
NsasS'name'
p29794
S'/Postprocessors/ScalarVariable'
p29795
sa(dp29796
S'description'
p29797
g3
sS'type'
p29798
NsS'subblocks'
p29799
NsS'parameters'
p29800
(lp29801
(dp29802
S'description'
p29803
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p29804
sS'cpp_type'
p29805
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p29806
sS'default'
p29807
g3
sS'name'
p29808
S'boundary'
p29809
sS'required'
p29810
I00
sS'group_name'
p29811
Nsa(dp29812
S'name'
p29813
S'execute_on'
p29814
sS'cpp_type'
p29815
S'MooseEnum'
p29816
sS'default'
p29817
S'timestep'
p29818
sS'description'
p29819
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p29820
sS'required'
p29821
I00
sS'options'
p29822
S'initial residual jacobian timestep timestep_begin custom'
p29823
sS'group_name'
p29824
Nsa(dp29825
S'name'
p29826
S'output'
p29827
sS'cpp_type'
p29828
S'MooseEnum'
p29829
sS'default'
p29830
S'auto'
p29831
sS'description'
p29832
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p29833
sS'required'
p29834
I00
sS'options'
p29835
S'none auto screen file both'
p29836
sS'group_name'
p29837
S'Advanced'
p29838
sa(dp29839
S'description'
p29840
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p29841
sS'cpp_type'
p29842
S'std::vector<OutputName, std::allocator<OutputName> >'
p29843
sS'default'
p29844
g3
sS'name'
p29845
S'outputs'
p29846
sS'required'
p29847
I00
sS'group_name'
p29848
S'Advanced'
p29849
sa(dp29850
S'description'
p29851
g3
sS'cpp_type'
p29852
S'std::string'
p29853
sS'default'
p29854
S'SideAverageValue'
p29855
sS'name'
p29856
S'type'
p29857
sS'required'
p29858
I00
sS'group_name'
p29859
Nsa(dp29860
S'description'
p29861
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29862
sS'cpp_type'
p29863
S'bool'
p29864
sS'default'
p29865
S'0'
p29866
sS'name'
p29867
S'use_displaced_mesh'
p29868
sS'required'
p29869
I00
sS'group_name'
p29870
S'Advanced'
p29871
sa(dp29872
S'description'
p29873
S'The name of the variable that this boundary condition applies to\n'
p29874
sS'cpp_type'
p29875
S'VariableName'
p29876
sS'default'
p29877
g3
sS'name'
p29878
S'variable'
p29879
sS'required'
p29880
I01
sS'group_name'
p29881
NsasS'name'
p29882
S'/Postprocessors/SideAverageValue'
p29883
sa(dp29884
S'description'
p29885
g3
sS'type'
p29886
NsS'subblocks'
p29887
NsS'parameters'
p29888
(lp29889
(dp29890
S'description'
p29891
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p29892
sS'cpp_type'
p29893
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p29894
sS'default'
p29895
g3
sS'name'
p29896
S'boundary'
p29897
sS'required'
p29898
I00
sS'group_name'
p29899
Nsa(dp29900
S'description'
p29901
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p29902
sS'cpp_type'
p29903
S'std::string'
p29904
sS'default'
p29905
g3
sS'name'
p29906
S'diffusivity'
p29907
sS'required'
p29908
I01
sS'group_name'
p29909
Nsa(dp29910
S'name'
p29911
S'execute_on'
p29912
sS'cpp_type'
p29913
S'MooseEnum'
p29914
sS'default'
p29915
S'timestep'
p29916
sS'description'
p29917
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p29918
sS'required'
p29919
I00
sS'options'
p29920
S'initial residual jacobian timestep timestep_begin custom'
p29921
sS'group_name'
p29922
Nsa(dp29923
S'name'
p29924
S'output'
p29925
sS'cpp_type'
p29926
S'MooseEnum'
p29927
sS'default'
p29928
S'auto'
p29929
sS'description'
p29930
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p29931
sS'required'
p29932
I00
sS'options'
p29933
S'none auto screen file both'
p29934
sS'group_name'
p29935
S'Advanced'
p29936
sa(dp29937
S'description'
p29938
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p29939
sS'cpp_type'
p29940
S'std::vector<OutputName, std::allocator<OutputName> >'
p29941
sS'default'
p29942
g3
sS'name'
p29943
S'outputs'
p29944
sS'required'
p29945
I00
sS'group_name'
p29946
S'Advanced'
p29947
sa(dp29948
S'description'
p29949
g3
sS'cpp_type'
p29950
S'std::string'
p29951
sS'default'
p29952
S'SideFluxAverage'
p29953
sS'name'
p29954
S'type'
p29955
sS'required'
p29956
I00
sS'group_name'
p29957
Nsa(dp29958
S'description'
p29959
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p29960
sS'cpp_type'
p29961
S'bool'
p29962
sS'default'
p29963
S'0'
p29964
sS'name'
p29965
S'use_displaced_mesh'
p29966
sS'required'
p29967
I00
sS'group_name'
p29968
S'Advanced'
p29969
sa(dp29970
S'description'
p29971
S'The name of the variable that this boundary condition applies to\n'
p29972
sS'cpp_type'
p29973
S'VariableName'
p29974
sS'default'
p29975
g3
sS'name'
p29976
S'variable'
p29977
sS'required'
p29978
I01
sS'group_name'
p29979
NsasS'name'
p29980
S'/Postprocessors/SideFluxAverage'
p29981
sa(dp29982
S'description'
p29983
g3
sS'type'
p29984
NsS'subblocks'
p29985
NsS'parameters'
p29986
(lp29987
(dp29988
S'description'
p29989
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p29990
sS'cpp_type'
p29991
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p29992
sS'default'
p29993
g3
sS'name'
p29994
S'boundary'
p29995
sS'required'
p29996
I00
sS'group_name'
p29997
Nsa(dp29998
S'description'
p29999
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p30000
sS'cpp_type'
p30001
S'std::string'
p30002
sS'default'
p30003
g3
sS'name'
p30004
S'diffusivity'
p30005
sS'required'
p30006
I01
sS'group_name'
p30007
Nsa(dp30008
S'name'
p30009
S'execute_on'
p30010
sS'cpp_type'
p30011
S'MooseEnum'
p30012
sS'default'
p30013
S'timestep'
p30014
sS'description'
p30015
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p30016
sS'required'
p30017
I00
sS'options'
p30018
S'initial residual jacobian timestep timestep_begin custom'
p30019
sS'group_name'
p30020
Nsa(dp30021
S'name'
p30022
S'output'
p30023
sS'cpp_type'
p30024
S'MooseEnum'
p30025
sS'default'
p30026
S'auto'
p30027
sS'description'
p30028
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p30029
sS'required'
p30030
I00
sS'options'
p30031
S'none auto screen file both'
p30032
sS'group_name'
p30033
S'Advanced'
p30034
sa(dp30035
S'description'
p30036
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p30037
sS'cpp_type'
p30038
S'std::vector<OutputName, std::allocator<OutputName> >'
p30039
sS'default'
p30040
g3
sS'name'
p30041
S'outputs'
p30042
sS'required'
p30043
I00
sS'group_name'
p30044
S'Advanced'
p30045
sa(dp30046
S'description'
p30047
g3
sS'cpp_type'
p30048
S'std::string'
p30049
sS'default'
p30050
S'SideFluxIntegral'
p30051
sS'name'
p30052
S'type'
p30053
sS'required'
p30054
I00
sS'group_name'
p30055
Nsa(dp30056
S'description'
p30057
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30058
sS'cpp_type'
p30059
S'bool'
p30060
sS'default'
p30061
S'0'
p30062
sS'name'
p30063
S'use_displaced_mesh'
p30064
sS'required'
p30065
I00
sS'group_name'
p30066
S'Advanced'
p30067
sa(dp30068
S'description'
p30069
S'The name of the variable that this boundary condition applies to\n'
p30070
sS'cpp_type'
p30071
S'VariableName'
p30072
sS'default'
p30073
g3
sS'name'
p30074
S'variable'
p30075
sS'required'
p30076
I01
sS'group_name'
p30077
NsasS'name'
p30078
S'/Postprocessors/SideFluxIntegral'
p30079
sa(dp30080
S'description'
p30081
g3
sS'type'
p30082
NsS'subblocks'
p30083
NsS'parameters'
p30084
(lp30085
(dp30086
S'description'
p30087
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p30088
sS'cpp_type'
p30089
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p30090
sS'default'
p30091
g3
sS'name'
p30092
S'boundary'
p30093
sS'required'
p30094
I00
sS'group_name'
p30095
Nsa(dp30096
S'name'
p30097
S'execute_on'
p30098
sS'cpp_type'
p30099
S'MooseEnum'
p30100
sS'default'
p30101
S'timestep'
p30102
sS'description'
p30103
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p30104
sS'required'
p30105
I00
sS'options'
p30106
S'initial residual jacobian timestep timestep_begin custom'
p30107
sS'group_name'
p30108
Nsa(dp30109
S'name'
p30110
S'output'
p30111
sS'cpp_type'
p30112
S'MooseEnum'
p30113
sS'default'
p30114
S'auto'
p30115
sS'description'
p30116
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p30117
sS'required'
p30118
I00
sS'options'
p30119
S'none auto screen file both'
p30120
sS'group_name'
p30121
S'Advanced'
p30122
sa(dp30123
S'description'
p30124
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p30125
sS'cpp_type'
p30126
S'std::vector<OutputName, std::allocator<OutputName> >'
p30127
sS'default'
p30128
g3
sS'name'
p30129
S'outputs'
p30130
sS'required'
p30131
I00
sS'group_name'
p30132
S'Advanced'
p30133
sa(dp30134
S'description'
p30135
g3
sS'cpp_type'
p30136
S'std::string'
p30137
sS'default'
p30138
S'SideIntegralVariablePostprocessor'
p30139
sS'name'
p30140
S'type'
p30141
sS'required'
p30142
I00
sS'group_name'
p30143
Nsa(dp30144
S'description'
p30145
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30146
sS'cpp_type'
p30147
S'bool'
p30148
sS'default'
p30149
S'0'
p30150
sS'name'
p30151
S'use_displaced_mesh'
p30152
sS'required'
p30153
I00
sS'group_name'
p30154
S'Advanced'
p30155
sa(dp30156
S'description'
p30157
S'The name of the variable that this boundary condition applies to\n'
p30158
sS'cpp_type'
p30159
S'VariableName'
p30160
sS'default'
p30161
g3
sS'name'
p30162
S'variable'
p30163
sS'required'
p30164
I01
sS'group_name'
p30165
NsasS'name'
p30166
S'/Postprocessors/SideIntegralVariablePostprocessor'
p30167
sa(dp30168
S'description'
p30169
g3
sS'type'
p30170
NsS'subblocks'
p30171
NsS'parameters'
p30172
(lp30173
(dp30174
S'name'
p30175
S'execute_on'
p30176
sS'cpp_type'
p30177
S'MooseEnum'
p30178
sS'default'
p30179
S'timestep'
p30180
sS'description'
p30181
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p30182
sS'required'
p30183
I00
sS'options'
p30184
S'initial residual jacobian timestep timestep_begin custom'
p30185
sS'group_name'
p30186
Nsa(dp30187
S'name'
p30188
S'output'
p30189
sS'cpp_type'
p30190
S'MooseEnum'
p30191
sS'default'
p30192
S'auto'
p30193
sS'description'
p30194
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p30195
sS'required'
p30196
I00
sS'options'
p30197
S'none auto screen file both'
p30198
sS'group_name'
p30199
S'Advanced'
p30200
sa(dp30201
S'description'
p30202
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p30203
sS'cpp_type'
p30204
S'std::vector<OutputName, std::allocator<OutputName> >'
p30205
sS'default'
p30206
g3
sS'name'
p30207
S'outputs'
p30208
sS'required'
p30209
I00
sS'group_name'
p30210
S'Advanced'
p30211
sa(dp30212
S'description'
p30213
g3
sS'cpp_type'
p30214
S'std::string'
p30215
sS'default'
p30216
S'TimestepSize'
p30217
sS'name'
p30218
S'type'
p30219
sS'required'
p30220
I00
sS'group_name'
p30221
Nsa(dp30222
S'description'
p30223
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30224
sS'cpp_type'
p30225
S'bool'
p30226
sS'default'
p30227
S'0'
p30228
sS'name'
p30229
S'use_displaced_mesh'
p30230
sS'required'
p30231
I00
sS'group_name'
p30232
S'Advanced'
p30233
sasS'name'
p30234
S'/Postprocessors/TimestepSize'
p30235
sa(dp30236
S'description'
p30237
g3
sS'type'
p30238
NsS'subblocks'
p30239
NsS'parameters'
p30240
(lp30241
(dp30242
S'name'
p30243
S'execute_on'
p30244
sS'cpp_type'
p30245
S'MooseEnum'
p30246
sS'default'
p30247
S'timestep'
p30248
sS'description'
p30249
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p30250
sS'required'
p30251
I00
sS'options'
p30252
S'initial residual jacobian timestep timestep_begin custom'
p30253
sS'group_name'
p30254
Nsa(dp30255
S'name'
p30256
S'output'
p30257
sS'cpp_type'
p30258
S'MooseEnum'
p30259
sS'default'
p30260
S'auto'
p30261
sS'description'
p30262
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p30263
sS'required'
p30264
I00
sS'options'
p30265
S'none auto screen file both'
p30266
sS'group_name'
p30267
S'Advanced'
p30268
sa(dp30269
S'description'
p30270
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p30271
sS'cpp_type'
p30272
S'std::vector<OutputName, std::allocator<OutputName> >'
p30273
sS'default'
p30274
g3
sS'name'
p30275
S'outputs'
p30276
sS'required'
p30277
I00
sS'group_name'
p30278
S'Advanced'
p30279
sa(dp30280
S'description'
p30281
g3
sS'cpp_type'
p30282
S'std::string'
p30283
sS'default'
p30284
S'TotalVariableValue'
p30285
sS'name'
p30286
S'type'
p30287
sS'required'
p30288
I00
sS'group_name'
p30289
Nsa(dp30290
S'description'
p30291
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30292
sS'cpp_type'
p30293
S'bool'
p30294
sS'default'
p30295
S'0'
p30296
sS'name'
p30297
S'use_displaced_mesh'
p30298
sS'required'
p30299
I00
sS'group_name'
p30300
S'Advanced'
p30301
sa(dp30302
S'description'
p30303
S'The name of the postprocessor\n'
p30304
sS'cpp_type'
p30305
S'PostprocessorName'
p30306
sS'default'
p30307
g3
sS'name'
p30308
S'value'
p30309
sS'required'
p30310
I00
sS'group_name'
p30311
NsasS'name'
p30312
S'/Postprocessors/TotalVariableValue'
p30313
sa(dp30314
S'description'
p30315
g3
sS'type'
p30316
NsS'subblocks'
p30317
NsS'parameters'
p30318
(lp30319
(dp30320
S'description'
p30321
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p30322
sS'cpp_type'
p30323
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p30324
sS'default'
p30325
g3
sS'name'
p30326
S'block'
p30327
sS'required'
p30328
I00
sS'group_name'
p30329
Nsa(dp30330
S'name'
p30331
S'execute_on'
p30332
sS'cpp_type'
p30333
S'MooseEnum'
p30334
sS'default'
p30335
S'timestep'
p30336
sS'description'
p30337
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p30338
sS'required'
p30339
I00
sS'options'
p30340
S'initial residual jacobian timestep timestep_begin custom'
p30341
sS'group_name'
p30342
Nsa(dp30343
S'name'
p30344
S'output'
p30345
sS'cpp_type'
p30346
S'MooseEnum'
p30347
sS'default'
p30348
S'auto'
p30349
sS'description'
p30350
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p30351
sS'required'
p30352
I00
sS'options'
p30353
S'none auto screen file both'
p30354
sS'group_name'
p30355
S'Advanced'
p30356
sa(dp30357
S'description'
p30358
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p30359
sS'cpp_type'
p30360
S'std::vector<OutputName, std::allocator<OutputName> >'
p30361
sS'default'
p30362
g3
sS'name'
p30363
S'outputs'
p30364
sS'required'
p30365
I00
sS'group_name'
p30366
S'Advanced'
p30367
sa(dp30368
S'description'
p30369
S'The seed for the master random number generator\n'
p30370
sS'cpp_type'
p30371
S'unsigned int'
p30372
sS'default'
p30373
S'0'
p30374
sS'name'
p30375
S'seed'
p30376
sS'required'
p30377
I00
sS'group_name'
p30378
S'Advanced'
p30379
sa(dp30380
S'description'
p30381
g3
sS'cpp_type'
p30382
S'std::string'
p30383
sS'default'
p30384
S'VolumePostprocessor'
p30385
sS'name'
p30386
S'type'
p30387
sS'required'
p30388
I00
sS'group_name'
p30389
Nsa(dp30390
S'description'
p30391
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30392
sS'cpp_type'
p30393
S'bool'
p30394
sS'default'
p30395
S'0'
p30396
sS'name'
p30397
S'use_displaced_mesh'
p30398
sS'required'
p30399
I00
sS'group_name'
p30400
S'Advanced'
p30401
sasS'name'
p30402
S'/Postprocessors/VolumePostprocessor'
p30403
sasS'parameters'
p30404
NsS'name'
p30405
S'/Postprocessors'
p30406
sa(dp30407
S'description'
p30408
g3
sS'type'
p30409
NsS'subblocks'
p30410
(lp30411
(dp30412
S'description'
p30413
g3
sS'type'
p30414
NsS'subblocks'
p30415
NsS'parameters'
p30416
(lp30417
(dp30418
S'name'
p30419
S'line_search'
p30420
sS'cpp_type'
p30421
S'MooseEnum'
p30422
sS'default'
p30423
S'default'
p30424
sS'description'
p30425
S'Specifies the line search type (Note: none = basic)\n'
p30426
sS'required'
p30427
I00
sS'options'
p30428
S'default shell none basic l2 bt cp'
p30429
sS'group_name'
p30430
Nsa(dp30431
S'name'
p30432
S'petsc_options'
p30433
sS'cpp_type'
p30434
S'std::vector<MooseEnum, std::allocator<MooseEnum> >'
p30435
sS'default'
p30436
g3
sS'description'
p30437
S'Singleton PETSc options\n'
p30438
sS'required'
p30439
I00
sS'options'
p30440
NsS'group_name'
p30441
Nsa(dp30442
S'description'
p30443
S'Names of PETSc name/value pairs\n'
p30444
sS'cpp_type'
p30445
S'std::vector<std::string, std::allocator<std::string> >'
p30446
sS'default'
p30447
g3
sS'name'
p30448
S'petsc_options_iname'
p30449
sS'required'
p30450
I00
sS'group_name'
p30451
Nsa(dp30452
S'description'
p30453
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p30454
sS'cpp_type'
p30455
S'std::vector<std::string, std::allocator<std::string> >'
p30456
sS'default'
p30457
g3
sS'name'
p30458
S'petsc_options_value'
p30459
sS'required'
p30460
I00
sS'group_name'
p30461
Nsa(dp30462
S'name'
p30463
S'solve_type'
p30464
sS'cpp_type'
p30465
S'MooseEnum'
p30466
sS'default'
p30467
g3
sS'description'
p30468
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p30469
sS'required'
p30470
I00
sS'options'
p30471
S'PJFNK JFNK NEWTON FD LINEAR'
p30472
sS'group_name'
p30473
Nsa(dp30474
S'description'
p30475
S'A string representing the Moose Object that will be built by this Action\n'
p30476
sS'cpp_type'
p30477
S'std::string'
p30478
sS'default'
p30479
g3
sS'name'
p30480
S'type'
p30481
sS'required'
p30482
I01
sS'group_name'
p30483
NsasS'name'
p30484
S'/Preconditioning/*'
p30485
sa(dp30486
S'description'
p30487
g3
sS'type'
p30488
NsS'subblocks'
p30489
NsS'parameters'
p30490
(lp30491
(dp30492
S'description'
p30493
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p30494
sS'cpp_type'
p30495
S'bool'
p30496
sS'default'
p30497
S'0'
p30498
sS'name'
p30499
S'full'
p30500
sS'required'
p30501
I00
sS'group_name'
p30502
Nsa(dp30503
S'description'
p30504
S'Set to true if you want to add entries into the matrix for degrees of freedom that might be coupled by inspection of the geometric search objects.\n'
p30505
sS'cpp_type'
p30506
S'bool'
p30507
sS'default'
p30508
S'0'
p30509
sS'name'
p30510
S'implicit_geometric_coupling'
p30511
sS'required'
p30512
I00
sS'group_name'
p30513
Nsa(dp30514
S'description'
p30515
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p30516
sS'cpp_type'
p30517
S'std::vector<std::string, std::allocator<std::string> >'
p30518
sS'default'
p30519
g3
sS'name'
p30520
S'off_diag_column'
p30521
sS'required'
p30522
I00
sS'group_name'
p30523
Nsa(dp30524
S'description'
p30525
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p30526
sS'cpp_type'
p30527
S'std::vector<std::string, std::allocator<std::string> >'
p30528
sS'default'
p30529
g3
sS'name'
p30530
S'off_diag_row'
p30531
sS'required'
p30532
I00
sS'group_name'
p30533
Nsa(dp30534
S'name'
p30535
S'pc_side'
p30536
sS'cpp_type'
p30537
S'MooseEnum'
p30538
sS'default'
p30539
S'right'
p30540
sS'description'
p30541
S'Preconditioning side\n'
p30542
sS'required'
p30543
I00
sS'options'
p30544
S'left right symmetric'
p30545
sS'group_name'
p30546
Nsa(dp30547
S'description'
p30548
g3
sS'cpp_type'
p30549
S'std::string'
p30550
sS'default'
p30551
S'FDP'
p30552
sS'name'
p30553
S'type'
p30554
sS'required'
p30555
I00
sS'group_name'
p30556
NsasS'name'
p30557
S'/Preconditioning/FDP'
p30558
sa(dp30559
S'description'
p30560
g3
sS'type'
p30561
NsS'subblocks'
p30562
NsS'parameters'
p30563
(lp30564
(dp30565
S'description'
p30566
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p30567
sS'cpp_type'
p30568
S'std::vector<std::string, std::allocator<std::string> >'
p30569
sS'default'
p30570
g3
sS'name'
p30571
S'off_diag_column'
p30572
sS'required'
p30573
I00
sS'group_name'
p30574
Nsa(dp30575
S'description'
p30576
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p30577
sS'cpp_type'
p30578
S'std::vector<std::string, std::allocator<std::string> >'
p30579
sS'default'
p30580
g3
sS'name'
p30581
S'off_diag_row'
p30582
sS'required'
p30583
I00
sS'group_name'
p30584
Nsa(dp30585
S'name'
p30586
S'pc_side'
p30587
sS'cpp_type'
p30588
S'MooseEnum'
p30589
sS'default'
p30590
S'right'
p30591
sS'description'
p30592
S'Preconditioning side\n'
p30593
sS'required'
p30594
I00
sS'options'
p30595
S'left right symmetric'
p30596
sS'group_name'
p30597
Nsa(dp30598
S'description'
p30599
S'TODO: docstring\n'
p30600
sS'cpp_type'
p30601
S'std::vector<std::string, std::allocator<std::string> >'
p30602
sS'default'
p30603
g3
sS'name'
p30604
S'preconditioner'
p30605
sS'required'
p30606
I01
sS'group_name'
p30607
Nsa(dp30608
S'description'
p30609
S"The order the block rows will be solved in.  Put the name of variables here to stand for solving that variable's block row.  A variable may appear more than once (to create cylces if you like).\n"
p30610
sS'cpp_type'
p30611
S'std::vector<std::string, std::allocator<std::string> >'
p30612
sS'default'
p30613
g3
sS'name'
p30614
S'solve_order'
p30615
sS'required'
p30616
I01
sS'group_name'
p30617
Nsa(dp30618
S'description'
p30619
g3
sS'cpp_type'
p30620
S'std::string'
p30621
sS'default'
p30622
S'PBP'
p30623
sS'name'
p30624
S'type'
p30625
sS'required'
p30626
I00
sS'group_name'
p30627
NsasS'name'
p30628
S'/Preconditioning/PBP'
p30629
sa(dp30630
S'description'
p30631
g3
sS'type'
p30632
NsS'subblocks'
p30633
NsS'parameters'
p30634
(lp30635
(dp30636
S'description'
p30637
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p30638
sS'cpp_type'
p30639
S'bool'
p30640
sS'default'
p30641
S'0'
p30642
sS'name'
p30643
S'full'
p30644
sS'required'
p30645
I00
sS'group_name'
p30646
Nsa(dp30647
S'description'
p30648
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p30649
sS'cpp_type'
p30650
S'std::vector<std::string, std::allocator<std::string> >'
p30651
sS'default'
p30652
g3
sS'name'
p30653
S'off_diag_column'
p30654
sS'required'
p30655
I00
sS'group_name'
p30656
Nsa(dp30657
S'description'
p30658
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p30659
sS'cpp_type'
p30660
S'std::vector<std::string, std::allocator<std::string> >'
p30661
sS'default'
p30662
g3
sS'name'
p30663
S'off_diag_row'
p30664
sS'required'
p30665
I00
sS'group_name'
p30666
Nsa(dp30667
S'name'
p30668
S'pc_side'
p30669
sS'cpp_type'
p30670
S'MooseEnum'
p30671
sS'default'
p30672
S'right'
p30673
sS'description'
p30674
S'Preconditioning side\n'
p30675
sS'required'
p30676
I00
sS'options'
p30677
S'left right symmetric'
p30678
sS'group_name'
p30679
Nsa(dp30680
S'description'
p30681
g3
sS'cpp_type'
p30682
S'std::string'
p30683
sS'default'
p30684
S'SBP'
p30685
sS'name'
p30686
S'type'
p30687
sS'required'
p30688
I00
sS'group_name'
p30689
NsasS'name'
p30690
S'/Preconditioning/SBP'
p30691
sa(dp30692
S'description'
p30693
g3
sS'type'
p30694
NsS'subblocks'
p30695
NsS'parameters'
p30696
(lp30697
(dp30698
S'description'
p30699
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p30700
sS'cpp_type'
p30701
S'bool'
p30702
sS'default'
p30703
S'0'
p30704
sS'name'
p30705
S'full'
p30706
sS'required'
p30707
I00
sS'group_name'
p30708
Nsa(dp30709
S'description'
p30710
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p30711
sS'cpp_type'
p30712
S'std::vector<std::string, std::allocator<std::string> >'
p30713
sS'default'
p30714
g3
sS'name'
p30715
S'off_diag_column'
p30716
sS'required'
p30717
I00
sS'group_name'
p30718
Nsa(dp30719
S'description'
p30720
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p30721
sS'cpp_type'
p30722
S'std::vector<std::string, std::allocator<std::string> >'
p30723
sS'default'
p30724
g3
sS'name'
p30725
S'off_diag_row'
p30726
sS'required'
p30727
I00
sS'group_name'
p30728
Nsa(dp30729
S'name'
p30730
S'pc_side'
p30731
sS'cpp_type'
p30732
S'MooseEnum'
p30733
sS'default'
p30734
S'right'
p30735
sS'description'
p30736
S'Preconditioning side\n'
p30737
sS'required'
p30738
I00
sS'options'
p30739
S'left right symmetric'
p30740
sS'group_name'
p30741
Nsa(dp30742
S'description'
p30743
g3
sS'cpp_type'
p30744
S'std::string'
p30745
sS'default'
p30746
S'SMP'
p30747
sS'name'
p30748
S'type'
p30749
sS'required'
p30750
I00
sS'group_name'
p30751
NsasS'name'
p30752
S'/Preconditioning/SMP'
p30753
sasS'parameters'
p30754
NsS'name'
p30755
S'/Preconditioning'
p30756
sa(dp30757
S'description'
p30758
g3
sS'type'
p30759
NsS'subblocks'
p30760
(lp30761
(dp30762
S'description'
p30763
g3
sS'type'
p30764
NsS'subblocks'
p30765
(lp30766
(dp30767
S'description'
p30768
g3
sS'type'
p30769
NsS'subblocks'
p30770
NsS'parameters'
p30771
(lp30772
(dp30773
S'description'
p30774
g3
sS'cpp_type'
p30775
S'std::string'
p30776
sS'default'
p30777
S'CoupledProblem'
p30778
sS'name'
p30779
S'type'
p30780
sS'required'
p30781
I00
sS'group_name'
p30782
NsasS'name'
p30783
S'/Problem/<type>/CoupledProblem'
p30784
sa(dp30785
S'description'
p30786
g3
sS'type'
p30787
NsS'subblocks'
p30788
NsS'parameters'
p30789
(lp30790
(dp30791
S'description'
p30792
S'The dimension of the near nullspace\n'
p30793
sS'cpp_type'
p30794
S'unsigned int'
p30795
sS'default'
p30796
S'0'
p30797
sS'name'
p30798
S'dimNearNullSpace'
p30799
sS'required'
p30800
I00
sS'group_name'
p30801
Nsa(dp30802
S'description'
p30803
S'The dimension of the nullspace\n'
p30804
sS'cpp_type'
p30805
S'unsigned int'
p30806
sS'default'
p30807
S'0'
p30808
sS'name'
p30809
S'dimNullSpace'
p30810
sS'required'
p30811
I00
sS'group_name'
p30812
Nsa(dp30813
S'description'
p30814
S'Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything\n'
p30815
sS'cpp_type'
p30816
S'bool'
p30817
sS'default'
p30818
S'1'
p30819
sS'name'
p30820
S'solve'
p30821
sS'required'
p30822
I00
sS'group_name'
p30823
Nsa(dp30824
S'description'
p30825
g3
sS'cpp_type'
p30826
S'std::string'
p30827
sS'default'
p30828
S'FEProblem'
p30829
sS'name'
p30830
S'type'
p30831
sS'required'
p30832
I00
sS'group_name'
p30833
Nsa(dp30834
S'description'
p30835
S'Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)\n'
p30836
sS'cpp_type'
p30837
S'bool'
p30838
sS'default'
p30839
S'1'
p30840
sS'name'
p30841
S'use_nonlinear'
p30842
sS'required'
p30843
I00
sS'group_name'
p30844
NsasS'name'
p30845
S'/Problem/<type>/FEProblem'
p30846
sa(dp30847
S'description'
p30848
g3
sS'type'
p30849
NsS'subblocks'
p30850
NsS'parameters'
p30851
(lp30852
(dp30853
S'description'
p30854
S'The FE problem containing this OutputProblem\n'
p30855
sS'cpp_type'
p30856
S'FEProblem*'
p30857
sS'default'
p30858
g3
sS'name'
p30859
S'mproblem'
p30860
sS'required'
p30861
I01
sS'group_name'
p30862
Nsa(dp30863
S'description'
p30864
S'Set a positional offset.  This vector will get added to the nodal cooardinates to move the domain.\n'
p30865
sS'cpp_type'
p30866
S'libMesh::Point'
p30867
sS'default'
p30868
g3
sS'name'
p30869
S'position'
p30870
sS'required'
p30871
I00
sS'group_name'
p30872
Nsa(dp30873
S'description'
p30874
S'The number of refinements to use in the oversampled mesh\n'
p30875
sS'cpp_type'
p30876
S'unsigned int'
p30877
sS'default'
p30878
g3
sS'name'
p30879
S'refinements'
p30880
sS'required'
p30881
I01
sS'group_name'
p30882
Nsa(dp30883
S'description'
p30884
g3
sS'cpp_type'
p30885
S'std::string'
p30886
sS'default'
p30887
S'OutputProblem'
p30888
sS'name'
p30889
S'type'
p30890
sS'required'
p30891
I00
sS'group_name'
p30892
NsasS'name'
p30893
S'/Problem/<type>/OutputProblem'
p30894
sasS'parameters'
p30895
NsS'name'
p30896
S'/Problem/<type>'
p30897
sasS'parameters'
p30898
(lp30899
(dp30900
S'description'
p30901
S'Block IDs for the coordinate systems\n'
p30902
sS'cpp_type'
p30903
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p30904
sS'default'
p30905
g3
sS'name'
p30906
S'block'
p30907
sS'required'
p30908
I00
sS'group_name'
p30909
Nsa(dp30910
S'name'
p30911
S'coord_type'
p30912
sS'cpp_type'
p30913
S'std::vector<MooseEnum, std::allocator<MooseEnum> >'
p30914
sS'default'
p30915
S'XYZ'
p30916
sS'description'
p30917
S'Type of the coordinate system per block param\n'
p30918
sS'required'
p30919
I00
sS'options'
p30920
S'XYZ RZ RSPHERICAL'
p30921
sS'group_name'
p30922
Nsa(dp30923
S'description'
p30924
S'Whether or not to turn on the finite element shape function caching system.  This can increase speed with an associated memory cost.\n'
p30925
sS'cpp_type'
p30926
S'bool'
p30927
sS'default'
p30928
S'0'
p30929
sS'name'
p30930
S'fe_cache'
p30931
sS'required'
p30932
I00
sS'group_name'
p30933
Nsa(dp30934
S'description'
p30935
S'Set to false to disable kernel->subdomain kernel coverage check\n'
p30936
sS'cpp_type'
p30937
S'bool'
p30938
sS'default'
p30939
S'1'
p30940
sS'name'
p30941
S'kernel_coverage_check'
p30942
sS'required'
p30943
I00
sS'group_name'
p30944
Nsa(dp30945
S'description'
p30946
S'The name the problem\n'
p30947
sS'cpp_type'
p30948
S'std::string'
p30949
sS'default'
p30950
S'MOOSE Problem'
p30951
sS'name'
p30952
S'name'
p30953
sS'required'
p30954
I00
sS'group_name'
p30955
Nsa(dp30956
S'description'
p30957
S'A string representing the Moose Object that will be built by this Action\n'
p30958
sS'cpp_type'
p30959
S'std::string'
p30960
sS'default'
p30961
S'FEProblem'
p30962
sS'name'
p30963
S'type'
p30964
sS'required'
p30965
I01
sS'group_name'
p30966
NsasS'name'
p30967
S'/Problem'
p30968
sa(dp30969
S'description'
p30970
g3
sS'type'
p30971
NsS'subblocks'
p30972
(lp30973
(dp30974
S'description'
p30975
g3
sS'type'
p30976
NsS'subblocks'
p30977
NsS'parameters'
p30978
(lp30979
(dp30980
S'description'
p30981
S'A string representing the Moose Object that will be built by this Action\n'
p30982
sS'cpp_type'
p30983
S'std::string'
p30984
sS'default'
p30985
g3
sS'name'
p30986
S'type'
p30987
sS'required'
p30988
I01
sS'group_name'
p30989
NsasS'name'
p30990
S'/ScalarKernels/*'
p30991
sa(dp30992
S'description'
p30993
g3
sS'type'
p30994
NsS'subblocks'
p30995
NsS'parameters'
p30996
(lp30997
(dp30998
S'description'
p30999
g3
sS'cpp_type'
p31000
S'std::string'
p31001
sS'default'
p31002
S'ODETimeDerivative'
p31003
sS'name'
p31004
S'type'
p31005
sS'required'
p31006
I00
sS'group_name'
p31007
Nsa(dp31008
S'description'
p31009
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31010
sS'cpp_type'
p31011
S'bool'
p31012
sS'default'
p31013
S'0'
p31014
sS'name'
p31015
S'use_displaced_mesh'
p31016
sS'required'
p31017
I00
sS'group_name'
p31018
S'Advanced'
p31019
sa(dp31020
S'description'
p31021
S'The name of the variable that this kernel operates on\n'
p31022
sS'cpp_type'
p31023
S'NonlinearVariableName'
p31024
sS'default'
p31025
g3
sS'name'
p31026
S'variable'
p31027
sS'required'
p31028
I01
sS'group_name'
p31029
NsasS'name'
p31030
S'/ScalarKernels/ODETimeDerivative'
p31031
sasS'parameters'
p31032
NsS'name'
p31033
S'/ScalarKernels'
p31034
sa(dp31035
S'description'
p31036
g3
sS'type'
p31037
NsS'subblocks'
p31038
(lp31039
(dp31040
S'description'
p31041
g3
sS'type'
p31042
NsS'subblocks'
p31043
NsS'parameters'
p31044
(lp31045
(dp31046
S'description'
p31047
S'Classname of the split object\n'
p31048
sS'cpp_type'
p31049
S'std::string'
p31050
sS'default'
p31051
S'Split'
p31052
sS'name'
p31053
S'type'
p31054
sS'required'
p31055
I01
sS'group_name'
p31056
NsasS'name'
p31057
S'/Splits/*'
p31058
sa(dp31059
S'description'
p31060
g3
sS'type'
p31061
NsS'subblocks'
p31062
NsS'parameters'
p31063
(lp31064
(dp31065
S'description'
p31066
S'Mesh blocks Split operates on (omitting this implies "all blocks"\n'
p31067
sS'cpp_type'
p31068
S'std::vector<std::string, std::allocator<std::string> >'
p31069
sS'default'
p31070
g3
sS'name'
p31071
S'blocks'
p31072
sS'required'
p31073
I00
sS'group_name'
p31074
Nsa(dp31075
S'description'
p31076
S'List of indicators whether displaced mesh is used to define included contact\n'
p31077
sS'cpp_type'
p31078
S'std::vector<bool, std::allocator<bool> >'
p31079
sS'default'
p31080
g3
sS'name'
p31081
S'contact_displaced'
p31082
sS'required'
p31083
I00
sS'group_name'
p31084
Nsa(dp31085
S'description'
p31086
S'Master surface list for included contacts\n'
p31087
sS'cpp_type'
p31088
S'std::vector<std::string, std::allocator<std::string> >'
p31089
sS'default'
p31090
g3
sS'name'
p31091
S'contact_master'
p31092
sS'required'
p31093
I00
sS'group_name'
p31094
Nsa(dp31095
S'description'
p31096
S'Slave surface list for included contacts\n'
p31097
sS'cpp_type'
p31098
S'std::vector<std::string, std::allocator<std::string> >'
p31099
sS'default'
p31100
g3
sS'name'
p31101
S'contact_slave'
p31102
sS'required'
p31103
I00
sS'group_name'
p31104
Nsa(dp31105
S'description'
p31106
S'PETSc flags for the FieldSplit solver\n'
p31107
sS'cpp_type'
p31108
S'std::vector<std::string, std::allocator<std::string> >'
p31109
sS'default'
p31110
g3
sS'name'
p31111
S'petsc_options'
p31112
sS'required'
p31113
I00
sS'group_name'
p31114
Nsa(dp31115
S'description'
p31116
S'PETSc option names for the FieldSplit solver\n'
p31117
sS'cpp_type'
p31118
S'std::vector<std::string, std::allocator<std::string> >'
p31119
sS'default'
p31120
g3
sS'name'
p31121
S'petsc_options_iname'
p31122
sS'required'
p31123
I00
sS'group_name'
p31124
Nsa(dp31125
S'description'
p31126
S'PETSc option values for the FieldSplit solver\n'
p31127
sS'cpp_type'
p31128
S'std::vector<std::string, std::allocator<std::string> >'
p31129
sS'default'
p31130
g3
sS'name'
p31131
S'petsc_options_value'
p31132
sS'required'
p31133
I00
sS'group_name'
p31134
Nsa(dp31135
S'description'
p31136
S'Type of approximation to inv(A) used when forming S = D - C inv(A) B: diag|lump\n'
p31137
sS'cpp_type'
p31138
S'std::string'
p31139
sS'default'
p31140
S'diag'
p31141
sS'name'
p31142
S'schur_ainv'
p31143
sS'required'
p31144
I00
sS'group_name'
p31145
Nsa(dp31146
S'description'
p31147
S'Type of Schur complement preconditioner matrix: S|Sp|A11\n'
p31148
sS'cpp_type'
p31149
S'std::string'
p31150
sS'default'
p31151
S'S'
p31152
sS'name'
p31153
S'schur_pre'
p31154
sS'required'
p31155
I00
sS'group_name'
p31156
Nsa(dp31157
S'description'
p31158
S'Type of Schur complement: full|upper|lower\n'
p31159
sS'cpp_type'
p31160
S'std::string'
p31161
sS'default'
p31162
S'full'
p31163
sS'name'
p31164
S'schur_type'
p31165
sS'required'
p31166
I00
sS'group_name'
p31167
Nsa(dp31168
S'description'
p31169
S'Sidesets Split operates on (omitting this implies "no sidesets"\n'
p31170
sS'cpp_type'
p31171
S'std::vector<std::string, std::allocator<std::string> >'
p31172
sS'default'
p31173
g3
sS'name'
p31174
S'sides'
p31175
sS'required'
p31176
I00
sS'group_name'
p31177
Nsa(dp31178
S'description'
p31179
S'The names of the splits (subsystems) in the decomposition of this split\n'
p31180
sS'cpp_type'
p31181
S'std::vector<std::string, std::allocator<std::string> >'
p31182
sS'default'
p31183
g3
sS'name'
p31184
S'splitting'
p31185
sS'required'
p31186
I00
sS'group_name'
p31187
Nsa(dp31188
S'description'
p31189
S'Split decomposition type: additive|multiplicative|symmetric_multiplicative|schur\n'
p31190
sS'cpp_type'
p31191
S'std::string'
p31192
sS'default'
p31193
S'additive'
p31194
sS'name'
p31195
S'splitting_type'
p31196
sS'required'
p31197
I00
sS'group_name'
p31198
Nsa(dp31199
S'description'
p31200
g3
sS'cpp_type'
p31201
S'std::string'
p31202
sS'default'
p31203
S'ContactSplit'
p31204
sS'name'
p31205
S'type'
p31206
sS'required'
p31207
I00
sS'group_name'
p31208
Nsa(dp31209
S'description'
p31210
S'List of indicators whether displaced mesh is used to define excluded contact\n'
p31211
sS'cpp_type'
p31212
S'std::vector<bool, std::allocator<bool> >'
p31213
sS'default'
p31214
g3
sS'name'
p31215
S'uncontact_displaced'
p31216
sS'required'
p31217
I00
sS'group_name'
p31218
Nsa(dp31219
S'description'
p31220
S'Master surface list for excluded contacts\n'
p31221
sS'cpp_type'
p31222
S'std::vector<std::string, std::allocator<std::string> >'
p31223
sS'default'
p31224
g3
sS'name'
p31225
S'uncontact_master'
p31226
sS'required'
p31227
I00
sS'group_name'
p31228
Nsa(dp31229
S'description'
p31230
S'Slave surface list for excluded contacts\n'
p31231
sS'cpp_type'
p31232
S'std::vector<std::string, std::allocator<std::string> >'
p31233
sS'default'
p31234
g3
sS'name'
p31235
S'uncontact_slave'
p31236
sS'required'
p31237
I00
sS'group_name'
p31238
Nsa(dp31239
S'description'
p31240
S'Sidesets Split excludes (omitting this implies "do not exclude any sidesets"\n'
p31241
sS'cpp_type'
p31242
S'std::vector<std::string, std::allocator<std::string> >'
p31243
sS'default'
p31244
g3
sS'name'
p31245
S'unsides'
p31246
sS'required'
p31247
I00
sS'group_name'
p31248
Nsa(dp31249
S'description'
p31250
S'Variables Split operates on (omitting this implies "all variables"\n'
p31251
sS'cpp_type'
p31252
S'std::vector<std::string, std::allocator<std::string> >'
p31253
sS'default'
p31254
g3
sS'name'
p31255
S'vars'
p31256
sS'required'
p31257
I00
sS'group_name'
p31258
NsasS'name'
p31259
S'/Splits/ContactSplit'
p31260
sa(dp31261
S'description'
p31262
g3
sS'type'
p31263
NsS'subblocks'
p31264
NsS'parameters'
p31265
(lp31266
(dp31267
S'description'
p31268
S'Mesh blocks Split operates on (omitting this implies "all blocks"\n'
p31269
sS'cpp_type'
p31270
S'std::vector<std::string, std::allocator<std::string> >'
p31271
sS'default'
p31272
g3
sS'name'
p31273
S'blocks'
p31274
sS'required'
p31275
I00
sS'group_name'
p31276
Nsa(dp31277
S'description'
p31278
S'PETSc flags for the FieldSplit solver\n'
p31279
sS'cpp_type'
p31280
S'std::vector<std::string, std::allocator<std::string> >'
p31281
sS'default'
p31282
g3
sS'name'
p31283
S'petsc_options'
p31284
sS'required'
p31285
I00
sS'group_name'
p31286
Nsa(dp31287
S'description'
p31288
S'PETSc option names for the FieldSplit solver\n'
p31289
sS'cpp_type'
p31290
S'std::vector<std::string, std::allocator<std::string> >'
p31291
sS'default'
p31292
g3
sS'name'
p31293
S'petsc_options_iname'
p31294
sS'required'
p31295
I00
sS'group_name'
p31296
Nsa(dp31297
S'description'
p31298
S'PETSc option values for the FieldSplit solver\n'
p31299
sS'cpp_type'
p31300
S'std::vector<std::string, std::allocator<std::string> >'
p31301
sS'default'
p31302
g3
sS'name'
p31303
S'petsc_options_value'
p31304
sS'required'
p31305
I00
sS'group_name'
p31306
Nsa(dp31307
S'description'
p31308
S'Type of approximation to inv(A) used when forming S = D - C inv(A) B: diag|lump\n'
p31309
sS'cpp_type'
p31310
S'std::string'
p31311
sS'default'
p31312
S'diag'
p31313
sS'name'
p31314
S'schur_ainv'
p31315
sS'required'
p31316
I00
sS'group_name'
p31317
Nsa(dp31318
S'description'
p31319
S'Type of Schur complement preconditioner matrix: S|Sp|A11\n'
p31320
sS'cpp_type'
p31321
S'std::string'
p31322
sS'default'
p31323
S'S'
p31324
sS'name'
p31325
S'schur_pre'
p31326
sS'required'
p31327
I00
sS'group_name'
p31328
Nsa(dp31329
S'description'
p31330
S'Type of Schur complement: full|upper|lower\n'
p31331
sS'cpp_type'
p31332
S'std::string'
p31333
sS'default'
p31334
S'full'
p31335
sS'name'
p31336
S'schur_type'
p31337
sS'required'
p31338
I00
sS'group_name'
p31339
Nsa(dp31340
S'description'
p31341
S'Sidesets Split operates on (omitting this implies "no sidesets"\n'
p31342
sS'cpp_type'
p31343
S'std::vector<std::string, std::allocator<std::string> >'
p31344
sS'default'
p31345
g3
sS'name'
p31346
S'sides'
p31347
sS'required'
p31348
I00
sS'group_name'
p31349
Nsa(dp31350
S'description'
p31351
S'The names of the splits (subsystems) in the decomposition of this split\n'
p31352
sS'cpp_type'
p31353
S'std::vector<std::string, std::allocator<std::string> >'
p31354
sS'default'
p31355
g3
sS'name'
p31356
S'splitting'
p31357
sS'required'
p31358
I00
sS'group_name'
p31359
Nsa(dp31360
S'description'
p31361
S'Split decomposition type: additive|multiplicative|symmetric_multiplicative|schur\n'
p31362
sS'cpp_type'
p31363
S'std::string'
p31364
sS'default'
p31365
S'additive'
p31366
sS'name'
p31367
S'splitting_type'
p31368
sS'required'
p31369
I00
sS'group_name'
p31370
Nsa(dp31371
S'description'
p31372
g3
sS'cpp_type'
p31373
S'std::string'
p31374
sS'default'
p31375
S'Split'
p31376
sS'name'
p31377
S'type'
p31378
sS'required'
p31379
I00
sS'group_name'
p31380
Nsa(dp31381
S'description'
p31382
S'Sidesets Split excludes (omitting this implies "do not exclude any sidesets"\n'
p31383
sS'cpp_type'
p31384
S'std::vector<std::string, std::allocator<std::string> >'
p31385
sS'default'
p31386
g3
sS'name'
p31387
S'unsides'
p31388
sS'required'
p31389
I00
sS'group_name'
p31390
Nsa(dp31391
S'description'
p31392
S'Variables Split operates on (omitting this implies "all variables"\n'
p31393
sS'cpp_type'
p31394
S'std::vector<std::string, std::allocator<std::string> >'
p31395
sS'default'
p31396
g3
sS'name'
p31397
S'vars'
p31398
sS'required'
p31399
I00
sS'group_name'
p31400
NsasS'name'
p31401
S'/Splits/Split'
p31402
sasS'parameters'
p31403
NsS'name'
p31404
S'/Splits'
p31405
sa(dp31406
S'description'
p31407
g3
sS'type'
p31408
NsS'subblocks'
p31409
(lp31410
(dp31411
S'description'
p31412
g3
sS'type'
p31413
NsS'subblocks'
p31414
NsS'parameters'
p31415
(lp31416
(dp31417
S'description'
p31418
S'A string representing the Moose Object that will be built by this Action\n'
p31419
sS'cpp_type'
p31420
S'std::string'
p31421
sS'default'
p31422
g3
sS'name'
p31423
S'type'
p31424
sS'required'
p31425
I01
sS'group_name'
p31426
NsasS'name'
p31427
S'/Transfers/*'
p31428
sa(dp31429
S'description'
p31430
g3
sS'type'
p31431
NsS'subblocks'
p31432
NsS'parameters'
p31433
(lp31434
(dp31435
S'name'
p31436
S'direction'
p31437
sS'cpp_type'
p31438
S'MooseEnum'
p31439
sS'default'
p31440
g3
sS'description'
p31441
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p31442
sS'required'
p31443
I01
sS'options'
p31444
S'to_multiapp from_multiapp'
p31445
sS'group_name'
p31446
Nsa(dp31447
S'description'
p31448
S'Whether or not to use the displaced mesh for the source mesh.\n'
p31449
sS'cpp_type'
p31450
S'bool'
p31451
sS'default'
p31452
S'0'
p31453
sS'name'
p31454
S'displaced_source_mesh'
p31455
sS'required'
p31456
I00
sS'group_name'
p31457
Nsa(dp31458
S'description'
p31459
S'Whether or not to use the displaced mesh for the target mesh.\n'
p31460
sS'cpp_type'
p31461
S'bool'
p31462
sS'default'
p31463
S'0'
p31464
sS'name'
p31465
S'displaced_target_mesh'
p31466
sS'required'
p31467
I00
sS'group_name'
p31468
Nsa(dp31469
S'name'
p31470
S'execute_on'
p31471
sS'cpp_type'
p31472
S'MooseEnum'
p31473
sS'default'
p31474
S'timestep_begin'
p31475
sS'description'
p31476
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p31477
sS'required'
p31478
I00
sS'options'
p31479
S'initial residual jacobian timestep timestep_begin custom'
p31480
sS'group_name'
p31481
Nsa(dp31482
S'name'
p31483
S'interp_type'
p31484
sS'cpp_type'
p31485
S'MooseEnum'
p31486
sS'default'
p31487
S'inverse_distance'
p31488
sS'description'
p31489
S'The algorithm to use for interpolation.\n'
p31490
sS'required'
p31491
I00
sS'options'
p31492
S'inverse_distance radial_basis'
p31493
sS'group_name'
p31494
Nsa(dp31495
S'description'
p31496
S'The name of the MultiApp to use.\n'
p31497
sS'cpp_type'
p31498
S'MultiAppName'
p31499
sS'default'
p31500
g3
sS'name'
p31501
S'multi_app'
p31502
sS'required'
p31503
I01
sS'group_name'
p31504
Nsa(dp31505
S'description'
p31506
S'The number of nearest points to use for interpolation.\n'
p31507
sS'cpp_type'
p31508
S'unsigned int'
p31509
sS'default'
p31510
S'3'
p31511
sS'name'
p31512
S'num_points'
p31513
sS'required'
p31514
I00
sS'group_name'
p31515
Nsa(dp31516
S'description'
p31517
S'The polynomial power to use for calculation of the decay in the interpolation.\n'
p31518
sS'cpp_type'
p31519
S'double'
p31520
sS'default'
p31521
S'2'
p31522
sS'name'
p31523
S'power'
p31524
sS'required'
p31525
I00
sS'group_name'
p31526
Nsa(dp31527
S'description'
p31528
S'Radius to use for radial_basis interpolation.  If negative then the radius is taken as the max distance between points.\n'
p31529
sS'cpp_type'
p31530
S'double'
p31531
sS'default'
p31532
S'-1'
p31533
sS'name'
p31534
S'radius'
p31535
sS'required'
p31536
I00
sS'group_name'
p31537
Nsa(dp31538
S'description'
p31539
S'The variable to transfer from.\n'
p31540
sS'cpp_type'
p31541
S'VariableName'
p31542
sS'default'
p31543
g3
sS'name'
p31544
S'source_variable'
p31545
sS'required'
p31546
I01
sS'group_name'
p31547
Nsa(dp31548
S'description'
p31549
g3
sS'cpp_type'
p31550
S'std::string'
p31551
sS'default'
p31552
S'MultiAppInterpolationTransfer'
p31553
sS'name'
p31554
S'type'
p31555
sS'required'
p31556
I00
sS'group_name'
p31557
Nsa(dp31558
S'description'
p31559
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31560
sS'cpp_type'
p31561
S'bool'
p31562
sS'default'
p31563
S'0'
p31564
sS'name'
p31565
S'use_displaced_mesh'
p31566
sS'required'
p31567
I00
sS'group_name'
p31568
S'Advanced'
p31569
sa(dp31570
S'description'
p31571
S'The auxiliary variable to store the transferred values in.\n'
p31572
sS'cpp_type'
p31573
S'AuxVariableName'
p31574
sS'default'
p31575
g3
sS'name'
p31576
S'variable'
p31577
sS'required'
p31578
I01
sS'group_name'
p31579
NsasS'name'
p31580
S'/Transfers/MultiAppInterpolationTransfer'
p31581
sa(dp31582
S'description'
p31583
g3
sS'type'
p31584
NsS'subblocks'
p31585
NsS'parameters'
p31586
(lp31587
(dp31588
S'name'
p31589
S'direction'
p31590
sS'cpp_type'
p31591
S'MooseEnum'
p31592
sS'default'
p31593
g3
sS'description'
p31594
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p31595
sS'required'
p31596
I01
sS'options'
p31597
S'to_multiapp from_multiapp'
p31598
sS'group_name'
p31599
Nsa(dp31600
S'description'
p31601
S'Whether or not to error in the case that a target point is not found in the source domain.\n'
p31602
sS'cpp_type'
p31603
S'bool'
p31604
sS'default'
p31605
S'0'
p31606
sS'name'
p31607
S'error_on_miss'
p31608
sS'required'
p31609
I00
sS'group_name'
p31610
Nsa(dp31611
S'name'
p31612
S'execute_on'
p31613
sS'cpp_type'
p31614
S'MooseEnum'
p31615
sS'default'
p31616
S'timestep_begin'
p31617
sS'description'
p31618
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p31619
sS'required'
p31620
I00
sS'options'
p31621
S'initial residual jacobian timestep timestep_begin custom'
p31622
sS'group_name'
p31623
Nsa(dp31624
S'description'
p31625
S'The name of the MultiApp to use.\n'
p31626
sS'cpp_type'
p31627
S'MultiAppName'
p31628
sS'default'
p31629
g3
sS'name'
p31630
S'multi_app'
p31631
sS'required'
p31632
I01
sS'group_name'
p31633
Nsa(dp31634
S'description'
p31635
S'The variable to transfer from.\n'
p31636
sS'cpp_type'
p31637
S'VariableName'
p31638
sS'default'
p31639
g3
sS'name'
p31640
S'source_variable'
p31641
sS'required'
p31642
I01
sS'group_name'
p31643
Nsa(dp31644
S'description'
p31645
g3
sS'cpp_type'
p31646
S'std::string'
p31647
sS'default'
p31648
S'MultiAppMeshFunctionTransfer'
p31649
sS'name'
p31650
S'type'
p31651
sS'required'
p31652
I00
sS'group_name'
p31653
Nsa(dp31654
S'description'
p31655
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31656
sS'cpp_type'
p31657
S'bool'
p31658
sS'default'
p31659
S'0'
p31660
sS'name'
p31661
S'use_displaced_mesh'
p31662
sS'required'
p31663
I00
sS'group_name'
p31664
S'Advanced'
p31665
sa(dp31666
S'description'
p31667
S'The auxiliary variable to store the transferred values in.\n'
p31668
sS'cpp_type'
p31669
S'AuxVariableName'
p31670
sS'default'
p31671
g3
sS'name'
p31672
S'variable'
p31673
sS'required'
p31674
I01
sS'group_name'
p31675
NsasS'name'
p31676
S'/Transfers/MultiAppMeshFunctionTransfer'
p31677
sa(dp31678
S'description'
p31679
g3
sS'type'
p31680
NsS'subblocks'
p31681
NsS'parameters'
p31682
(lp31683
(dp31684
S'name'
p31685
S'direction'
p31686
sS'cpp_type'
p31687
S'MooseEnum'
p31688
sS'default'
p31689
g3
sS'description'
p31690
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p31691
sS'required'
p31692
I01
sS'options'
p31693
S'to_multiapp from_multiapp'
p31694
sS'group_name'
p31695
Nsa(dp31696
S'description'
p31697
S'Whether or not to use the displaced mesh for the source mesh.\n'
p31698
sS'cpp_type'
p31699
S'bool'
p31700
sS'default'
p31701
S'0'
p31702
sS'name'
p31703
S'displaced_source_mesh'
p31704
sS'required'
p31705
I00
sS'group_name'
p31706
Nsa(dp31707
S'description'
p31708
S'Whether or not to use the displaced mesh for the target mesh.\n'
p31709
sS'cpp_type'
p31710
S'bool'
p31711
sS'default'
p31712
S'0'
p31713
sS'name'
p31714
S'displaced_target_mesh'
p31715
sS'required'
p31716
I00
sS'group_name'
p31717
Nsa(dp31718
S'name'
p31719
S'execute_on'
p31720
sS'cpp_type'
p31721
S'MooseEnum'
p31722
sS'default'
p31723
S'timestep_begin'
p31724
sS'description'
p31725
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p31726
sS'required'
p31727
I00
sS'options'
p31728
S'initial residual jacobian timestep timestep_begin custom'
p31729
sS'group_name'
p31730
Nsa(dp31731
S'description'
p31732
S'Set to true when the meshes are not changing (ie, no moviement or adaptivity).  This will cache nearest node neighbors to greatly speed up the transfer.\n'
p31733
sS'cpp_type'
p31734
S'bool'
p31735
sS'default'
p31736
S'0'
p31737
sS'name'
p31738
S'fixed_meshes'
p31739
sS'required'
p31740
I00
sS'group_name'
p31741
Nsa(dp31742
S'description'
p31743
S'The name of the MultiApp to use.\n'
p31744
sS'cpp_type'
p31745
S'MultiAppName'
p31746
sS'default'
p31747
g3
sS'name'
p31748
S'multi_app'
p31749
sS'required'
p31750
I01
sS'group_name'
p31751
Nsa(dp31752
S'description'
p31753
S'The variable to transfer from.\n'
p31754
sS'cpp_type'
p31755
S'VariableName'
p31756
sS'default'
p31757
g3
sS'name'
p31758
S'source_variable'
p31759
sS'required'
p31760
I01
sS'group_name'
p31761
Nsa(dp31762
S'description'
p31763
g3
sS'cpp_type'
p31764
S'std::string'
p31765
sS'default'
p31766
S'MultiAppNearestNodeTransfer'
p31767
sS'name'
p31768
S'type'
p31769
sS'required'
p31770
I00
sS'group_name'
p31771
Nsa(dp31772
S'description'
p31773
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31774
sS'cpp_type'
p31775
S'bool'
p31776
sS'default'
p31777
S'0'
p31778
sS'name'
p31779
S'use_displaced_mesh'
p31780
sS'required'
p31781
I00
sS'group_name'
p31782
S'Advanced'
p31783
sa(dp31784
S'description'
p31785
S'The auxiliary variable to store the transferred values in.\n'
p31786
sS'cpp_type'
p31787
S'AuxVariableName'
p31788
sS'default'
p31789
g3
sS'name'
p31790
S'variable'
p31791
sS'required'
p31792
I01
sS'group_name'
p31793
NsasS'name'
p31794
S'/Transfers/MultiAppNearestNodeTransfer'
p31795
sa(dp31796
S'description'
p31797
g3
sS'type'
p31798
NsS'subblocks'
p31799
NsS'parameters'
p31800
(lp31801
(dp31802
S'name'
p31803
S'direction'
p31804
sS'cpp_type'
p31805
S'MooseEnum'
p31806
sS'default'
p31807
g3
sS'description'
p31808
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p31809
sS'required'
p31810
I01
sS'options'
p31811
S'to_multiapp from_multiapp'
p31812
sS'group_name'
p31813
Nsa(dp31814
S'name'
p31815
S'execute_on'
p31816
sS'cpp_type'
p31817
S'MooseEnum'
p31818
sS'default'
p31819
S'timestep_begin'
p31820
sS'description'
p31821
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p31822
sS'required'
p31823
I00
sS'options'
p31824
S'initial residual jacobian timestep timestep_begin custom'
p31825
sS'group_name'
p31826
Nsa(dp31827
S'name'
p31828
S'interp_type'
p31829
sS'cpp_type'
p31830
S'MooseEnum'
p31831
sS'default'
p31832
S'inverse_distance'
p31833
sS'description'
p31834
S'The algorithm to use for interpolation.\n'
p31835
sS'required'
p31836
I00
sS'options'
p31837
S'inverse_distance radial_basis'
p31838
sS'group_name'
p31839
Nsa(dp31840
S'description'
p31841
S'The name of the MultiApp to use.\n'
p31842
sS'cpp_type'
p31843
S'MultiAppName'
p31844
sS'default'
p31845
g3
sS'name'
p31846
S'multi_app'
p31847
sS'required'
p31848
I01
sS'group_name'
p31849
Nsa(dp31850
S'description'
p31851
S'The number of nearest points to use for interpolation.\n'
p31852
sS'cpp_type'
p31853
S'unsigned int'
p31854
sS'default'
p31855
S'3'
p31856
sS'name'
p31857
S'num_points'
p31858
sS'required'
p31859
I00
sS'group_name'
p31860
Nsa(dp31861
S'description'
p31862
S'The Postprocessor to interpolate.\n'
p31863
sS'cpp_type'
p31864
S'PostprocessorName'
p31865
sS'default'
p31866
g3
sS'name'
p31867
S'postprocessor'
p31868
sS'required'
p31869
I01
sS'group_name'
p31870
Nsa(dp31871
S'description'
p31872
S'The polynomial power to use for calculation of the decay in the interpolation.\n'
p31873
sS'cpp_type'
p31874
S'double'
p31875
sS'default'
p31876
S'2'
p31877
sS'name'
p31878
S'power'
p31879
sS'required'
p31880
I00
sS'group_name'
p31881
Nsa(dp31882
S'description'
p31883
S'Radius to use for radial_basis interpolation.  If negative then the radius is taken as the max distance between points.\n'
p31884
sS'cpp_type'
p31885
S'double'
p31886
sS'default'
p31887
S'-1'
p31888
sS'name'
p31889
S'radius'
p31890
sS'required'
p31891
I00
sS'group_name'
p31892
Nsa(dp31893
S'description'
p31894
g3
sS'cpp_type'
p31895
S'std::string'
p31896
sS'default'
p31897
S'MultiAppPostprocessorInterpolationTransfer'
p31898
sS'name'
p31899
S'type'
p31900
sS'required'
p31901
I00
sS'group_name'
p31902
Nsa(dp31903
S'description'
p31904
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31905
sS'cpp_type'
p31906
S'bool'
p31907
sS'default'
p31908
S'0'
p31909
sS'name'
p31910
S'use_displaced_mesh'
p31911
sS'required'
p31912
I00
sS'group_name'
p31913
S'Advanced'
p31914
sa(dp31915
S'description'
p31916
S'The auxiliary variable to store the transferred values in.\n'
p31917
sS'cpp_type'
p31918
S'AuxVariableName'
p31919
sS'default'
p31920
g3
sS'name'
p31921
S'variable'
p31922
sS'required'
p31923
I01
sS'group_name'
p31924
NsasS'name'
p31925
S'/Transfers/MultiAppPostprocessorInterpolationTransfer'
p31926
sa(dp31927
S'description'
p31928
g3
sS'type'
p31929
NsS'subblocks'
p31930
NsS'parameters'
p31931
(lp31932
(dp31933
S'name'
p31934
S'direction'
p31935
sS'cpp_type'
p31936
S'MooseEnum'
p31937
sS'default'
p31938
g3
sS'description'
p31939
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p31940
sS'required'
p31941
I01
sS'options'
p31942
S'to_multiapp from_multiapp'
p31943
sS'group_name'
p31944
Nsa(dp31945
S'name'
p31946
S'execute_on'
p31947
sS'cpp_type'
p31948
S'MooseEnum'
p31949
sS'default'
p31950
S'timestep_begin'
p31951
sS'description'
p31952
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p31953
sS'required'
p31954
I00
sS'options'
p31955
S'initial residual jacobian timestep timestep_begin custom'
p31956
sS'group_name'
p31957
Nsa(dp31958
S'description'
p31959
S'The name of the Postprocessor in the Master to transfer the value from.\n'
p31960
sS'cpp_type'
p31961
S'PostprocessorName'
p31962
sS'default'
p31963
g3
sS'name'
p31964
S'from_postprocessor'
p31965
sS'required'
p31966
I01
sS'group_name'
p31967
Nsa(dp31968
S'description'
p31969
S'The name of the MultiApp to use.\n'
p31970
sS'cpp_type'
p31971
S'MultiAppName'
p31972
sS'default'
p31973
g3
sS'name'
p31974
S'multi_app'
p31975
sS'required'
p31976
I01
sS'group_name'
p31977
Nsa(dp31978
S'description'
p31979
S'The name of the scalar Aux variable in the MultiApp to transfer the value to.\n'
p31980
sS'cpp_type'
p31981
S'VariableName'
p31982
sS'default'
p31983
g3
sS'name'
p31984
S'to_aux_scalar'
p31985
sS'required'
p31986
I01
sS'group_name'
p31987
Nsa(dp31988
S'description'
p31989
g3
sS'cpp_type'
p31990
S'std::string'
p31991
sS'default'
p31992
S'MultiAppPostprocessorToAuxScalarTransfer'
p31993
sS'name'
p31994
S'type'
p31995
sS'required'
p31996
I00
sS'group_name'
p31997
Nsa(dp31998
S'description'
p31999
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32000
sS'cpp_type'
p32001
S'bool'
p32002
sS'default'
p32003
S'0'
p32004
sS'name'
p32005
S'use_displaced_mesh'
p32006
sS'required'
p32007
I00
sS'group_name'
p32008
S'Advanced'
p32009
sasS'name'
p32010
S'/Transfers/MultiAppPostprocessorToAuxScalarTransfer'
p32011
sa(dp32012
S'description'
p32013
g3
sS'type'
p32014
NsS'subblocks'
p32015
NsS'parameters'
p32016
(lp32017
(dp32018
S'name'
p32019
S'direction'
p32020
sS'cpp_type'
p32021
S'MooseEnum'
p32022
sS'default'
p32023
g3
sS'description'
p32024
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p32025
sS'required'
p32026
I01
sS'options'
p32027
S'to_multiapp from_multiapp'
p32028
sS'group_name'
p32029
Nsa(dp32030
S'name'
p32031
S'execute_on'
p32032
sS'cpp_type'
p32033
S'MooseEnum'
p32034
sS'default'
p32035
S'timestep_begin'
p32036
sS'description'
p32037
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p32038
sS'required'
p32039
I00
sS'options'
p32040
S'initial residual jacobian timestep timestep_begin custom'
p32041
sS'group_name'
p32042
Nsa(dp32043
S'description'
p32044
S'The name of the Postprocessor in the Master to transfer the value from.\n'
p32045
sS'cpp_type'
p32046
S'PostprocessorName'
p32047
sS'default'
p32048
g3
sS'name'
p32049
S'from_postprocessor'
p32050
sS'required'
p32051
I01
sS'group_name'
p32052
Nsa(dp32053
S'description'
p32054
S'The name of the MultiApp to use.\n'
p32055
sS'cpp_type'
p32056
S'MultiAppName'
p32057
sS'default'
p32058
g3
sS'name'
p32059
S'multi_app'
p32060
sS'required'
p32061
I01
sS'group_name'
p32062
Nsa(dp32063
S'description'
p32064
S'The name of the Postprocessor in the MultiApp to transfer the value to.  This should most likely be a Reporter Postprocessor.\n'
p32065
sS'cpp_type'
p32066
S'PostprocessorName'
p32067
sS'default'
p32068
g3
sS'name'
p32069
S'to_postprocessor'
p32070
sS'required'
p32071
I01
sS'group_name'
p32072
Nsa(dp32073
S'description'
p32074
g3
sS'cpp_type'
p32075
S'std::string'
p32076
sS'default'
p32077
S'MultiAppPostprocessorTransfer'
p32078
sS'name'
p32079
S'type'
p32080
sS'required'
p32081
I00
sS'group_name'
p32082
Nsa(dp32083
S'description'
p32084
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32085
sS'cpp_type'
p32086
S'bool'
p32087
sS'default'
p32088
S'0'
p32089
sS'name'
p32090
S'use_displaced_mesh'
p32091
sS'required'
p32092
I00
sS'group_name'
p32093
S'Advanced'
p32094
sasS'name'
p32095
S'/Transfers/MultiAppPostprocessorTransfer'
p32096
sa(dp32097
S'description'
p32098
g3
sS'type'
p32099
NsS'subblocks'
p32100
NsS'parameters'
p32101
(lp32102
(dp32103
S'name'
p32104
S'direction'
p32105
sS'cpp_type'
p32106
S'MooseEnum'
p32107
sS'default'
p32108
g3
sS'description'
p32109
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p32110
sS'required'
p32111
I01
sS'options'
p32112
S'to_multiapp from_multiapp'
p32113
sS'group_name'
p32114
Nsa(dp32115
S'name'
p32116
S'execute_on'
p32117
sS'cpp_type'
p32118
S'MooseEnum'
p32119
sS'default'
p32120
S'timestep_begin'
p32121
sS'description'
p32122
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p32123
sS'required'
p32124
I00
sS'options'
p32125
S'initial residual jacobian timestep timestep_begin custom'
p32126
sS'group_name'
p32127
Nsa(dp32128
S'name'
p32129
S'family'
p32130
sS'cpp_type'
p32131
S'MooseEnum'
p32132
sS'default'
p32133
S'LAGRANGE'
p32134
sS'description'
p32135
S'Specifies the family of FE shape functions to use for this variable\n'
p32136
sS'required'
p32137
I00
sS'options'
p32138
S'LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC'
p32139
sS'group_name'
p32140
Nsa(dp32141
S'description'
p32142
S'The name of the MultiApp to use.\n'
p32143
sS'cpp_type'
p32144
S'MultiAppName'
p32145
sS'default'
p32146
g3
sS'name'
p32147
S'multi_app'
p32148
sS'required'
p32149
I01
sS'group_name'
p32150
Nsa(dp32151
S'name'
p32152
S'order'
p32153
sS'cpp_type'
p32154
S'MooseEnum'
p32155
sS'default'
p32156
S'FIRST'
p32157
sS'description'
p32158
S'Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n'
p32159
sS'required'
p32160
I00
sS'options'
p32161
S'CONSTANT FIRST SECOND THIRD FOURTH'
p32162
sS'group_name'
p32163
Nsa(dp32164
S'name'
p32165
S'proj_type'
p32166
sS'cpp_type'
p32167
S'MooseEnum'
p32168
sS'default'
p32169
S'l2'
p32170
sS'description'
p32171
S'The type of the projection.\n'
p32172
sS'required'
p32173
I00
sS'options'
p32174
S'l2'
p32175
sS'group_name'
p32176
Nsa(dp32177
S'description'
p32178
S'The variable to transfer from.\n'
p32179
sS'cpp_type'
p32180
S'VariableName'
p32181
sS'default'
p32182
g3
sS'name'
p32183
S'source_variable'
p32184
sS'required'
p32185
I01
sS'group_name'
p32186
Nsa(dp32187
S'description'
p32188
g3
sS'cpp_type'
p32189
S'std::string'
p32190
sS'default'
p32191
S'MultiAppProjectionTransfer'
p32192
sS'name'
p32193
S'type'
p32194
sS'required'
p32195
I00
sS'group_name'
p32196
Nsa(dp32197
S'description'
p32198
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32199
sS'cpp_type'
p32200
S'bool'
p32201
sS'default'
p32202
S'0'
p32203
sS'name'
p32204
S'use_displaced_mesh'
p32205
sS'required'
p32206
I00
sS'group_name'
p32207
S'Advanced'
p32208
sa(dp32209
S'description'
p32210
S'The auxiliary variable to store the transferred values in.\n'
p32211
sS'cpp_type'
p32212
S'AuxVariableName'
p32213
sS'default'
p32214
g3
sS'name'
p32215
S'variable'
p32216
sS'required'
p32217
I01
sS'group_name'
p32218
NsasS'name'
p32219
S'/Transfers/MultiAppProjectionTransfer'
p32220
sa(dp32221
S'description'
p32222
g3
sS'type'
p32223
NsS'subblocks'
p32224
NsS'parameters'
p32225
(lp32226
(dp32227
S'name'
p32228
S'direction'
p32229
sS'cpp_type'
p32230
S'MooseEnum'
p32231
sS'default'
p32232
g3
sS'description'
p32233
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p32234
sS'required'
p32235
I01
sS'options'
p32236
S'to_multiapp from_multiapp'
p32237
sS'group_name'
p32238
Nsa(dp32239
S'description'
p32240
S'Whether or not to use the displaced mesh for the target mesh.\n'
p32241
sS'cpp_type'
p32242
S'bool'
p32243
sS'default'
p32244
S'0'
p32245
sS'name'
p32246
S'displaced_target_mesh'
p32247
sS'required'
p32248
I00
sS'group_name'
p32249
Nsa(dp32250
S'name'
p32251
S'execute_on'
p32252
sS'cpp_type'
p32253
S'MooseEnum'
p32254
sS'default'
p32255
S'timestep_begin'
p32256
sS'description'
p32257
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p32258
sS'required'
p32259
I00
sS'options'
p32260
S'initial residual jacobian timestep timestep_begin custom'
p32261
sS'group_name'
p32262
Nsa(dp32263
S'description'
p32264
S'The name of the MultiApp to use.\n'
p32265
sS'cpp_type'
p32266
S'MultiAppName'
p32267
sS'default'
p32268
g3
sS'name'
p32269
S'multi_app'
p32270
sS'required'
p32271
I01
sS'group_name'
p32272
Nsa(dp32273
S'description'
p32274
g3
sS'cpp_type'
p32275
S'std::string'
p32276
sS'default'
p32277
S'MultiAppUserObjectTransfer'
p32278
sS'name'
p32279
S'type'
p32280
sS'required'
p32281
I00
sS'group_name'
p32282
Nsa(dp32283
S'description'
p32284
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32285
sS'cpp_type'
p32286
S'bool'
p32287
sS'default'
p32288
S'0'
p32289
sS'name'
p32290
S'use_displaced_mesh'
p32291
sS'required'
p32292
I00
sS'group_name'
p32293
S'Advanced'
p32294
sa(dp32295
S'description'
p32296
S"The UserObject you want to transfer values from.  Note: This might be a UserObject from your MultiApp's input file!\n"
p32297
sS'cpp_type'
p32298
S'UserObjectName'
p32299
sS'default'
p32300
g3
sS'name'
p32301
S'user_object'
p32302
sS'required'
p32303
I01
sS'group_name'
p32304
Nsa(dp32305
S'description'
p32306
S'The auxiliary variable to store the transferred values in.\n'
p32307
sS'cpp_type'
p32308
S'AuxVariableName'
p32309
sS'default'
p32310
g3
sS'name'
p32311
S'variable'
p32312
sS'required'
p32313
I01
sS'group_name'
p32314
NsasS'name'
p32315
S'/Transfers/MultiAppUserObjectTransfer'
p32316
sa(dp32317
S'description'
p32318
g3
sS'type'
p32319
NsS'subblocks'
p32320
NsS'parameters'
p32321
(lp32322
(dp32323
S'name'
p32324
S'direction'
p32325
sS'cpp_type'
p32326
S'MooseEnum'
p32327
sS'default'
p32328
g3
sS'description'
p32329
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p32330
sS'required'
p32331
I01
sS'options'
p32332
S'to_multiapp from_multiapp'
p32333
sS'group_name'
p32334
Nsa(dp32335
S'name'
p32336
S'execute_on'
p32337
sS'cpp_type'
p32338
S'MooseEnum'
p32339
sS'default'
p32340
S'timestep_begin'
p32341
sS'description'
p32342
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p32343
sS'required'
p32344
I00
sS'options'
p32345
S'initial residual jacobian timestep timestep_begin custom'
p32346
sS'group_name'
p32347
Nsa(dp32348
S'description'
p32349
S'The name of the MultiApp to use.\n'
p32350
sS'cpp_type'
p32351
S'MultiAppName'
p32352
sS'default'
p32353
g3
sS'name'
p32354
S'multi_app'
p32355
sS'required'
p32356
I01
sS'group_name'
p32357
Nsa(dp32358
S'description'
p32359
S'The name of the postprocessor in the MultiApp to transfer the value to.  This should most likely be a Reporter Postprocessor.\n'
p32360
sS'cpp_type'
p32361
S'PostprocessorName'
p32362
sS'default'
p32363
g3
sS'name'
p32364
S'postprocessor'
p32365
sS'required'
p32366
I01
sS'group_name'
p32367
Nsa(dp32368
S'description'
p32369
S'The variable to transfer from.\n'
p32370
sS'cpp_type'
p32371
S'VariableName'
p32372
sS'default'
p32373
g3
sS'name'
p32374
S'source_variable'
p32375
sS'required'
p32376
I01
sS'group_name'
p32377
Nsa(dp32378
S'description'
p32379
g3
sS'cpp_type'
p32380
S'std::string'
p32381
sS'default'
p32382
S'MultiAppVariableValueSamplePostprocessorTransfer'
p32383
sS'name'
p32384
S'type'
p32385
sS'required'
p32386
I00
sS'group_name'
p32387
Nsa(dp32388
S'description'
p32389
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32390
sS'cpp_type'
p32391
S'bool'
p32392
sS'default'
p32393
S'0'
p32394
sS'name'
p32395
S'use_displaced_mesh'
p32396
sS'required'
p32397
I00
sS'group_name'
p32398
S'Advanced'
p32399
sasS'name'
p32400
S'/Transfers/MultiAppVariableValueSamplePostprocessorTransfer'
p32401
sa(dp32402
S'description'
p32403
g3
sS'type'
p32404
NsS'subblocks'
p32405
NsS'parameters'
p32406
(lp32407
(dp32408
S'name'
p32409
S'direction'
p32410
sS'cpp_type'
p32411
S'MooseEnum'
p32412
sS'default'
p32413
g3
sS'description'
p32414
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p32415
sS'required'
p32416
I01
sS'options'
p32417
S'to_multiapp from_multiapp'
p32418
sS'group_name'
p32419
Nsa(dp32420
S'name'
p32421
S'execute_on'
p32422
sS'cpp_type'
p32423
S'MooseEnum'
p32424
sS'default'
p32425
S'timestep_begin'
p32426
sS'description'
p32427
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p32428
sS'required'
p32429
I00
sS'options'
p32430
S'initial residual jacobian timestep timestep_begin custom'
p32431
sS'group_name'
p32432
Nsa(dp32433
S'description'
p32434
S'The name of the MultiApp to use.\n'
p32435
sS'cpp_type'
p32436
S'MultiAppName'
p32437
sS'default'
p32438
g3
sS'name'
p32439
S'multi_app'
p32440
sS'required'
p32441
I01
sS'group_name'
p32442
Nsa(dp32443
S'description'
p32444
S'The variable to transfer from.\n'
p32445
sS'cpp_type'
p32446
S'VariableName'
p32447
sS'default'
p32448
g3
sS'name'
p32449
S'source_variable'
p32450
sS'required'
p32451
I01
sS'group_name'
p32452
Nsa(dp32453
S'description'
p32454
g3
sS'cpp_type'
p32455
S'std::string'
p32456
sS'default'
p32457
S'MultiAppVariableValueSampleTransfer'
p32458
sS'name'
p32459
S'type'
p32460
sS'required'
p32461
I00
sS'group_name'
p32462
Nsa(dp32463
S'description'
p32464
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32465
sS'cpp_type'
p32466
S'bool'
p32467
sS'default'
p32468
S'0'
p32469
sS'name'
p32470
S'use_displaced_mesh'
p32471
sS'required'
p32472
I00
sS'group_name'
p32473
S'Advanced'
p32474
sa(dp32475
S'description'
p32476
S'The auxiliary variable to store the transferred values in.\n'
p32477
sS'cpp_type'
p32478
S'AuxVariableName'
p32479
sS'default'
p32480
g3
sS'name'
p32481
S'variable'
p32482
sS'required'
p32483
I01
sS'group_name'
p32484
NsasS'name'
p32485
S'/Transfers/MultiAppVariableValueSampleTransfer'
p32486
sasS'parameters'
p32487
NsS'name'
p32488
S'/Transfers'
p32489
sa(dp32490
S'description'
p32491
g3
sS'type'
p32492
NsS'subblocks'
p32493
(lp32494
(dp32495
S'description'
p32496
g3
sS'type'
p32497
NsS'subblocks'
p32498
NsS'parameters'
p32499
(lp32500
(dp32501
S'description'
p32502
S'A string representing the Moose Object that will be built by this Action\n'
p32503
sS'cpp_type'
p32504
S'std::string'
p32505
sS'default'
p32506
g3
sS'name'
p32507
S'type'
p32508
sS'required'
p32509
I01
sS'group_name'
p32510
NsasS'name'
p32511
S'/UserObjects/*'
p32512
sa(dp32513
S'description'
p32514
g3
sS'type'
p32515
NsS'subblocks'
p32516
NsS'parameters'
p32517
(lp32518
(dp32519
S'description'
p32520
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p32521
sS'cpp_type'
p32522
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p32523
sS'default'
p32524
g3
sS'name'
p32525
S'boundary'
p32526
sS'required'
p32527
I00
sS'group_name'
p32528
Nsa(dp32529
S'name'
p32530
S'execute_on'
p32531
sS'cpp_type'
p32532
S'MooseEnum'
p32533
sS'default'
p32534
S'timestep'
p32535
sS'description'
p32536
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p32537
sS'required'
p32538
I00
sS'options'
p32539
S'initial residual jacobian timestep timestep_begin custom'
p32540
sS'group_name'
p32541
Nsa(dp32542
S'name'
p32543
S'output'
p32544
sS'cpp_type'
p32545
S'MooseEnum'
p32546
sS'default'
p32547
S'auto'
p32548
sS'description'
p32549
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p32550
sS'required'
p32551
I00
sS'options'
p32552
S'none auto screen file both'
p32553
sS'group_name'
p32554
S'Advanced'
p32555
sa(dp32556
S'description'
p32557
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p32558
sS'cpp_type'
p32559
S'std::vector<OutputName, std::allocator<OutputName> >'
p32560
sS'default'
p32561
g3
sS'name'
p32562
S'outputs'
p32563
sS'required'
p32564
I00
sS'group_name'
p32565
S'Advanced'
p32566
sa(dp32567
S'description'
p32568
g3
sS'cpp_type'
p32569
S'std::string'
p32570
sS'default'
p32571
S'AreaPostprocessor'
p32572
sS'name'
p32573
S'type'
p32574
sS'required'
p32575
I00
sS'group_name'
p32576
Nsa(dp32577
S'description'
p32578
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32579
sS'cpp_type'
p32580
S'bool'
p32581
sS'default'
p32582
S'0'
p32583
sS'name'
p32584
S'use_displaced_mesh'
p32585
sS'required'
p32586
I00
sS'group_name'
p32587
S'Advanced'
p32588
sasS'name'
p32589
S'/UserObjects/AreaPostprocessor'
p32590
sa(dp32591
S'description'
p32592
g3
sS'type'
p32593
NsS'subblocks'
p32594
NsS'parameters'
p32595
(lp32596
(dp32597
S'description'
p32598
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p32599
sS'cpp_type'
p32600
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p32601
sS'default'
p32602
g3
sS'name'
p32603
S'block'
p32604
sS'required'
p32605
I00
sS'group_name'
p32606
Nsa(dp32607
S'name'
p32608
S'execute_on'
p32609
sS'cpp_type'
p32610
S'MooseEnum'
p32611
sS'default'
p32612
S'timestep'
p32613
sS'description'
p32614
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p32615
sS'required'
p32616
I00
sS'options'
p32617
S'initial residual jacobian timestep timestep_begin custom'
p32618
sS'group_name'
p32619
Nsa(dp32620
S'name'
p32621
S'output'
p32622
sS'cpp_type'
p32623
S'MooseEnum'
p32624
sS'default'
p32625
S'auto'
p32626
sS'description'
p32627
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p32628
sS'required'
p32629
I00
sS'options'
p32630
S'none auto screen file both'
p32631
sS'group_name'
p32632
S'Advanced'
p32633
sa(dp32634
S'description'
p32635
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p32636
sS'cpp_type'
p32637
S'std::vector<OutputName, std::allocator<OutputName> >'
p32638
sS'default'
p32639
g3
sS'name'
p32640
S'outputs'
p32641
sS'required'
p32642
I00
sS'group_name'
p32643
S'Advanced'
p32644
sa(dp32645
S'description'
p32646
S'The seed for the master random number generator\n'
p32647
sS'cpp_type'
p32648
S'unsigned int'
p32649
sS'default'
p32650
S'0'
p32651
sS'name'
p32652
S'seed'
p32653
sS'required'
p32654
I00
sS'group_name'
p32655
S'Advanced'
p32656
sa(dp32657
S'description'
p32658
g3
sS'cpp_type'
p32659
S'std::string'
p32660
sS'default'
p32661
S'AverageElementSize'
p32662
sS'name'
p32663
S'type'
p32664
sS'required'
p32665
I00
sS'group_name'
p32666
Nsa(dp32667
S'description'
p32668
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32669
sS'cpp_type'
p32670
S'bool'
p32671
sS'default'
p32672
S'0'
p32673
sS'name'
p32674
S'use_displaced_mesh'
p32675
sS'required'
p32676
I00
sS'group_name'
p32677
S'Advanced'
p32678
sa(dp32679
S'description'
p32680
S'The name of the variable that this object operates on\n'
p32681
sS'cpp_type'
p32682
S'VariableName'
p32683
sS'default'
p32684
g3
sS'name'
p32685
S'variable'
p32686
sS'required'
p32687
I01
sS'group_name'
p32688
NsasS'name'
p32689
S'/UserObjects/AverageElementSize'
p32690
sa(dp32691
S'description'
p32692
g3
sS'type'
p32693
NsS'subblocks'
p32694
NsS'parameters'
p32695
(lp32696
(dp32697
S'description'
p32698
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p32699
sS'cpp_type'
p32700
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p32701
sS'default'
p32702
g3
sS'name'
p32703
S'block'
p32704
sS'required'
p32705
I00
sS'group_name'
p32706
Nsa(dp32707
S'description'
p32708
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p32709
sS'cpp_type'
p32710
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p32711
sS'default'
p32712
g3
sS'name'
p32713
S'boundary'
p32714
sS'required'
p32715
I00
sS'group_name'
p32716
Nsa(dp32717
S'name'
p32718
S'execute_on'
p32719
sS'cpp_type'
p32720
S'MooseEnum'
p32721
sS'default'
p32722
S'timestep'
p32723
sS'description'
p32724
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p32725
sS'required'
p32726
I00
sS'options'
p32727
S'initial residual jacobian timestep timestep_begin custom'
p32728
sS'group_name'
p32729
Nsa(dp32730
S'name'
p32731
S'output'
p32732
sS'cpp_type'
p32733
S'MooseEnum'
p32734
sS'default'
p32735
S'auto'
p32736
sS'description'
p32737
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p32738
sS'required'
p32739
I00
sS'options'
p32740
S'none auto screen file both'
p32741
sS'group_name'
p32742
S'Advanced'
p32743
sa(dp32744
S'description'
p32745
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p32746
sS'cpp_type'
p32747
S'std::vector<OutputName, std::allocator<OutputName> >'
p32748
sS'default'
p32749
g3
sS'name'
p32750
S'outputs'
p32751
sS'required'
p32752
I00
sS'group_name'
p32753
S'Advanced'
p32754
sa(dp32755
S'description'
p32756
S'The seed for the master random number generator\n'
p32757
sS'cpp_type'
p32758
S'unsigned int'
p32759
sS'default'
p32760
S'0'
p32761
sS'name'
p32762
S'seed'
p32763
sS'required'
p32764
I00
sS'group_name'
p32765
S'Advanced'
p32766
sa(dp32767
S'description'
p32768
g3
sS'cpp_type'
p32769
S'std::string'
p32770
sS'default'
p32771
S'AverageNodalVariableValue'
p32772
sS'name'
p32773
S'type'
p32774
sS'required'
p32775
I00
sS'group_name'
p32776
Nsa(dp32777
S'description'
p32778
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32779
sS'cpp_type'
p32780
S'bool'
p32781
sS'default'
p32782
S'0'
p32783
sS'name'
p32784
S'use_displaced_mesh'
p32785
sS'required'
p32786
I00
sS'group_name'
p32787
S'Advanced'
p32788
sa(dp32789
S'description'
p32790
S'The name of the variable that this postprocessor operates on\n'
p32791
sS'cpp_type'
p32792
S'VariableName'
p32793
sS'default'
p32794
g3
sS'name'
p32795
S'variable'
p32796
sS'required'
p32797
I01
sS'group_name'
p32798
NsasS'name'
p32799
S'/UserObjects/AverageNodalVariableValue'
p32800
sa(dp32801
S'description'
p32802
g3
sS'type'
p32803
NsS'subblocks'
p32804
NsS'parameters'
p32805
(lp32806
(dp32807
S'description'
p32808
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p32809
sS'cpp_type'
p32810
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p32811
sS'default'
p32812
g3
sS'name'
p32813
S'block'
p32814
sS'required'
p32815
I00
sS'group_name'
p32816
Nsa(dp32817
S'name'
p32818
S'execute_on'
p32819
sS'cpp_type'
p32820
S'MooseEnum'
p32821
sS'default'
p32822
S'timestep'
p32823
sS'description'
p32824
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p32825
sS'required'
p32826
I00
sS'options'
p32827
S'initial residual jacobian timestep timestep_begin custom'
p32828
sS'group_name'
p32829
Nsa(dp32830
S'name'
p32831
S'output'
p32832
sS'cpp_type'
p32833
S'MooseEnum'
p32834
sS'default'
p32835
S'auto'
p32836
sS'description'
p32837
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p32838
sS'required'
p32839
I00
sS'options'
p32840
S'none auto screen file both'
p32841
sS'group_name'
p32842
S'Advanced'
p32843
sa(dp32844
S'description'
p32845
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p32846
sS'cpp_type'
p32847
S'std::vector<OutputName, std::allocator<OutputName> >'
p32848
sS'default'
p32849
g3
sS'name'
p32850
S'outputs'
p32851
sS'required'
p32852
I00
sS'group_name'
p32853
S'Advanced'
p32854
sa(dp32855
S'description'
p32856
S'The seed for the master random number generator\n'
p32857
sS'cpp_type'
p32858
S'unsigned int'
p32859
sS'default'
p32860
S'0'
p32861
sS'name'
p32862
S'seed'
p32863
sS'required'
p32864
I00
sS'group_name'
p32865
S'Advanced'
p32866
sa(dp32867
S'description'
p32868
g3
sS'cpp_type'
p32869
S'std::string'
p32870
sS'default'
p32871
S'ElementAverageTimeDerivative'
p32872
sS'name'
p32873
S'type'
p32874
sS'required'
p32875
I00
sS'group_name'
p32876
Nsa(dp32877
S'description'
p32878
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32879
sS'cpp_type'
p32880
S'bool'
p32881
sS'default'
p32882
S'0'
p32883
sS'name'
p32884
S'use_displaced_mesh'
p32885
sS'required'
p32886
I00
sS'group_name'
p32887
S'Advanced'
p32888
sa(dp32889
S'description'
p32890
S'The name of the variable that this object operates on\n'
p32891
sS'cpp_type'
p32892
S'VariableName'
p32893
sS'default'
p32894
g3
sS'name'
p32895
S'variable'
p32896
sS'required'
p32897
I01
sS'group_name'
p32898
NsasS'name'
p32899
S'/UserObjects/ElementAverageTimeDerivative'
p32900
sa(dp32901
S'description'
p32902
g3
sS'type'
p32903
NsS'subblocks'
p32904
NsS'parameters'
p32905
(lp32906
(dp32907
S'description'
p32908
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p32909
sS'cpp_type'
p32910
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p32911
sS'default'
p32912
g3
sS'name'
p32913
S'block'
p32914
sS'required'
p32915
I00
sS'group_name'
p32916
Nsa(dp32917
S'name'
p32918
S'execute_on'
p32919
sS'cpp_type'
p32920
S'MooseEnum'
p32921
sS'default'
p32922
S'timestep'
p32923
sS'description'
p32924
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p32925
sS'required'
p32926
I00
sS'options'
p32927
S'initial residual jacobian timestep timestep_begin custom'
p32928
sS'group_name'
p32929
Nsa(dp32930
S'name'
p32931
S'output'
p32932
sS'cpp_type'
p32933
S'MooseEnum'
p32934
sS'default'
p32935
S'auto'
p32936
sS'description'
p32937
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p32938
sS'required'
p32939
I00
sS'options'
p32940
S'none auto screen file both'
p32941
sS'group_name'
p32942
S'Advanced'
p32943
sa(dp32944
S'description'
p32945
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p32946
sS'cpp_type'
p32947
S'std::vector<OutputName, std::allocator<OutputName> >'
p32948
sS'default'
p32949
g3
sS'name'
p32950
S'outputs'
p32951
sS'required'
p32952
I00
sS'group_name'
p32953
S'Advanced'
p32954
sa(dp32955
S'description'
p32956
S'The seed for the master random number generator\n'
p32957
sS'cpp_type'
p32958
S'unsigned int'
p32959
sS'default'
p32960
S'0'
p32961
sS'name'
p32962
S'seed'
p32963
sS'required'
p32964
I00
sS'group_name'
p32965
S'Advanced'
p32966
sa(dp32967
S'description'
p32968
g3
sS'cpp_type'
p32969
S'std::string'
p32970
sS'default'
p32971
S'ElementAverageValue'
p32972
sS'name'
p32973
S'type'
p32974
sS'required'
p32975
I00
sS'group_name'
p32976
Nsa(dp32977
S'description'
p32978
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32979
sS'cpp_type'
p32980
S'bool'
p32981
sS'default'
p32982
S'0'
p32983
sS'name'
p32984
S'use_displaced_mesh'
p32985
sS'required'
p32986
I00
sS'group_name'
p32987
S'Advanced'
p32988
sa(dp32989
S'description'
p32990
S'The name of the variable that this object operates on\n'
p32991
sS'cpp_type'
p32992
S'VariableName'
p32993
sS'default'
p32994
g3
sS'name'
p32995
S'variable'
p32996
sS'required'
p32997
I01
sS'group_name'
p32998
NsasS'name'
p32999
S'/UserObjects/ElementAverageValue'
p33000
sa(dp33001
S'description'
p33002
g3
sS'type'
p33003
NsS'subblocks'
p33004
NsS'parameters'
p33005
(lp33006
(dp33007
S'description'
p33008
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p33009
sS'cpp_type'
p33010
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p33011
sS'default'
p33012
g3
sS'name'
p33013
S'block'
p33014
sS'required'
p33015
I00
sS'group_name'
p33016
Nsa(dp33017
S'name'
p33018
S'execute_on'
p33019
sS'cpp_type'
p33020
S'MooseEnum'
p33021
sS'default'
p33022
S'timestep'
p33023
sS'description'
p33024
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p33025
sS'required'
p33026
I00
sS'options'
p33027
S'initial residual jacobian timestep timestep_begin custom'
p33028
sS'group_name'
p33029
Nsa(dp33030
S'description'
p33031
S'The analytic solution to compare against\n'
p33032
sS'cpp_type'
p33033
S'FunctionName'
p33034
sS'default'
p33035
g3
sS'name'
p33036
S'function'
p33037
sS'required'
p33038
I01
sS'group_name'
p33039
Nsa(dp33040
S'name'
p33041
S'output'
p33042
sS'cpp_type'
p33043
S'MooseEnum'
p33044
sS'default'
p33045
S'auto'
p33046
sS'description'
p33047
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p33048
sS'required'
p33049
I00
sS'options'
p33050
S'none auto screen file both'
p33051
sS'group_name'
p33052
S'Advanced'
p33053
sa(dp33054
S'description'
p33055
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p33056
sS'cpp_type'
p33057
S'std::vector<OutputName, std::allocator<OutputName> >'
p33058
sS'default'
p33059
g3
sS'name'
p33060
S'outputs'
p33061
sS'required'
p33062
I00
sS'group_name'
p33063
S'Advanced'
p33064
sa(dp33065
S'description'
p33066
S'The seed for the master random number generator\n'
p33067
sS'cpp_type'
p33068
S'unsigned int'
p33069
sS'default'
p33070
S'0'
p33071
sS'name'
p33072
S'seed'
p33073
sS'required'
p33074
I00
sS'group_name'
p33075
S'Advanced'
p33076
sa(dp33077
S'description'
p33078
g3
sS'cpp_type'
p33079
S'std::string'
p33080
sS'default'
p33081
S'ElementH1Error'
p33082
sS'name'
p33083
S'type'
p33084
sS'required'
p33085
I00
sS'group_name'
p33086
Nsa(dp33087
S'description'
p33088
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33089
sS'cpp_type'
p33090
S'bool'
p33091
sS'default'
p33092
S'0'
p33093
sS'name'
p33094
S'use_displaced_mesh'
p33095
sS'required'
p33096
I00
sS'group_name'
p33097
S'Advanced'
p33098
sa(dp33099
S'description'
p33100
S'The name of the variable that this object operates on\n'
p33101
sS'cpp_type'
p33102
S'VariableName'
p33103
sS'default'
p33104
g3
sS'name'
p33105
S'variable'
p33106
sS'required'
p33107
I01
sS'group_name'
p33108
NsasS'name'
p33109
S'/UserObjects/ElementH1Error'
p33110
sa(dp33111
S'description'
p33112
g3
sS'type'
p33113
NsS'subblocks'
p33114
NsS'parameters'
p33115
(lp33116
(dp33117
S'description'
p33118
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p33119
sS'cpp_type'
p33120
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p33121
sS'default'
p33122
g3
sS'name'
p33123
S'block'
p33124
sS'required'
p33125
I00
sS'group_name'
p33126
Nsa(dp33127
S'name'
p33128
S'execute_on'
p33129
sS'cpp_type'
p33130
S'MooseEnum'
p33131
sS'default'
p33132
S'timestep'
p33133
sS'description'
p33134
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p33135
sS'required'
p33136
I00
sS'options'
p33137
S'initial residual jacobian timestep timestep_begin custom'
p33138
sS'group_name'
p33139
Nsa(dp33140
S'description'
p33141
S'The analytic solution to compare against\n'
p33142
sS'cpp_type'
p33143
S'FunctionName'
p33144
sS'default'
p33145
g3
sS'name'
p33146
S'function'
p33147
sS'required'
p33148
I01
sS'group_name'
p33149
Nsa(dp33150
S'name'
p33151
S'output'
p33152
sS'cpp_type'
p33153
S'MooseEnum'
p33154
sS'default'
p33155
S'auto'
p33156
sS'description'
p33157
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p33158
sS'required'
p33159
I00
sS'options'
p33160
S'none auto screen file both'
p33161
sS'group_name'
p33162
S'Advanced'
p33163
sa(dp33164
S'description'
p33165
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p33166
sS'cpp_type'
p33167
S'std::vector<OutputName, std::allocator<OutputName> >'
p33168
sS'default'
p33169
g3
sS'name'
p33170
S'outputs'
p33171
sS'required'
p33172
I00
sS'group_name'
p33173
S'Advanced'
p33174
sa(dp33175
S'description'
p33176
S'The seed for the master random number generator\n'
p33177
sS'cpp_type'
p33178
S'unsigned int'
p33179
sS'default'
p33180
S'0'
p33181
sS'name'
p33182
S'seed'
p33183
sS'required'
p33184
I00
sS'group_name'
p33185
S'Advanced'
p33186
sa(dp33187
S'description'
p33188
g3
sS'cpp_type'
p33189
S'std::string'
p33190
sS'default'
p33191
S'ElementH1SemiError'
p33192
sS'name'
p33193
S'type'
p33194
sS'required'
p33195
I00
sS'group_name'
p33196
Nsa(dp33197
S'description'
p33198
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33199
sS'cpp_type'
p33200
S'bool'
p33201
sS'default'
p33202
S'0'
p33203
sS'name'
p33204
S'use_displaced_mesh'
p33205
sS'required'
p33206
I00
sS'group_name'
p33207
S'Advanced'
p33208
sa(dp33209
S'description'
p33210
S'The name of the variable that this object operates on\n'
p33211
sS'cpp_type'
p33212
S'VariableName'
p33213
sS'default'
p33214
g3
sS'name'
p33215
S'variable'
p33216
sS'required'
p33217
I01
sS'group_name'
p33218
NsasS'name'
p33219
S'/UserObjects/ElementH1SemiError'
p33220
sa(dp33221
S'description'
p33222
g3
sS'type'
p33223
NsS'subblocks'
p33224
NsS'parameters'
p33225
(lp33226
(dp33227
S'description'
p33228
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p33229
sS'cpp_type'
p33230
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p33231
sS'default'
p33232
g3
sS'name'
p33233
S'block'
p33234
sS'required'
p33235
I00
sS'group_name'
p33236
Nsa(dp33237
S'name'
p33238
S'execute_on'
p33239
sS'cpp_type'
p33240
S'MooseEnum'
p33241
sS'default'
p33242
S'timestep'
p33243
sS'description'
p33244
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p33245
sS'required'
p33246
I00
sS'options'
p33247
S'initial residual jacobian timestep timestep_begin custom'
p33248
sS'group_name'
p33249
Nsa(dp33250
S'description'
p33251
S'The name of the material property\n'
p33252
sS'cpp_type'
p33253
S'std::string'
p33254
sS'default'
p33255
g3
sS'name'
p33256
S'mat_prop'
p33257
sS'required'
p33258
I01
sS'group_name'
p33259
Nsa(dp33260
S'name'
p33261
S'output'
p33262
sS'cpp_type'
p33263
S'MooseEnum'
p33264
sS'default'
p33265
S'auto'
p33266
sS'description'
p33267
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p33268
sS'required'
p33269
I00
sS'options'
p33270
S'none auto screen file both'
p33271
sS'group_name'
p33272
S'Advanced'
p33273
sa(dp33274
S'description'
p33275
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p33276
sS'cpp_type'
p33277
S'std::vector<OutputName, std::allocator<OutputName> >'
p33278
sS'default'
p33279
g3
sS'name'
p33280
S'outputs'
p33281
sS'required'
p33282
I00
sS'group_name'
p33283
S'Advanced'
p33284
sa(dp33285
S'description'
p33286
S'The seed for the master random number generator\n'
p33287
sS'cpp_type'
p33288
S'unsigned int'
p33289
sS'default'
p33290
S'0'
p33291
sS'name'
p33292
S'seed'
p33293
sS'required'
p33294
I00
sS'group_name'
p33295
S'Advanced'
p33296
sa(dp33297
S'description'
p33298
g3
sS'cpp_type'
p33299
S'std::string'
p33300
sS'default'
p33301
S'ElementIntegralMaterialProperty'
p33302
sS'name'
p33303
S'type'
p33304
sS'required'
p33305
I00
sS'group_name'
p33306
Nsa(dp33307
S'description'
p33308
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33309
sS'cpp_type'
p33310
S'bool'
p33311
sS'default'
p33312
S'0'
p33313
sS'name'
p33314
S'use_displaced_mesh'
p33315
sS'required'
p33316
I00
sS'group_name'
p33317
S'Advanced'
p33318
sasS'name'
p33319
S'/UserObjects/ElementIntegralMaterialProperty'
p33320
sa(dp33321
S'description'
p33322
g3
sS'type'
p33323
NsS'subblocks'
p33324
NsS'parameters'
p33325
(lp33326
(dp33327
S'description'
p33328
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p33329
sS'cpp_type'
p33330
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p33331
sS'default'
p33332
g3
sS'name'
p33333
S'block'
p33334
sS'required'
p33335
I00
sS'group_name'
p33336
Nsa(dp33337
S'name'
p33338
S'execute_on'
p33339
sS'cpp_type'
p33340
S'MooseEnum'
p33341
sS'default'
p33342
S'timestep'
p33343
sS'description'
p33344
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p33345
sS'required'
p33346
I00
sS'options'
p33347
S'initial residual jacobian timestep timestep_begin custom'
p33348
sS'group_name'
p33349
Nsa(dp33350
S'name'
p33351
S'output'
p33352
sS'cpp_type'
p33353
S'MooseEnum'
p33354
sS'default'
p33355
S'auto'
p33356
sS'description'
p33357
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p33358
sS'required'
p33359
I00
sS'options'
p33360
S'none auto screen file both'
p33361
sS'group_name'
p33362
S'Advanced'
p33363
sa(dp33364
S'description'
p33365
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p33366
sS'cpp_type'
p33367
S'std::vector<OutputName, std::allocator<OutputName> >'
p33368
sS'default'
p33369
g3
sS'name'
p33370
S'outputs'
p33371
sS'required'
p33372
I00
sS'group_name'
p33373
S'Advanced'
p33374
sa(dp33375
S'description'
p33376
S'The seed for the master random number generator\n'
p33377
sS'cpp_type'
p33378
S'unsigned int'
p33379
sS'default'
p33380
S'0'
p33381
sS'name'
p33382
S'seed'
p33383
sS'required'
p33384
I00
sS'group_name'
p33385
S'Advanced'
p33386
sa(dp33387
S'description'
p33388
g3
sS'cpp_type'
p33389
S'std::string'
p33390
sS'default'
p33391
S'ElementIntegralVariablePostprocessor'
p33392
sS'name'
p33393
S'type'
p33394
sS'required'
p33395
I00
sS'group_name'
p33396
Nsa(dp33397
S'description'
p33398
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33399
sS'cpp_type'
p33400
S'bool'
p33401
sS'default'
p33402
S'0'
p33403
sS'name'
p33404
S'use_displaced_mesh'
p33405
sS'required'
p33406
I00
sS'group_name'
p33407
S'Advanced'
p33408
sa(dp33409
S'description'
p33410
S'The name of the variable that this object operates on\n'
p33411
sS'cpp_type'
p33412
S'VariableName'
p33413
sS'default'
p33414
g3
sS'name'
p33415
S'variable'
p33416
sS'required'
p33417
I01
sS'group_name'
p33418
NsasS'name'
p33419
S'/UserObjects/ElementIntegralVariablePostprocessor'
p33420
sa(dp33421
S'description'
p33422
g3
sS'type'
p33423
NsS'subblocks'
p33424
NsS'parameters'
p33425
(lp33426
(dp33427
S'description'
p33428
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p33429
sS'cpp_type'
p33430
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p33431
sS'default'
p33432
g3
sS'name'
p33433
S'block'
p33434
sS'required'
p33435
I00
sS'group_name'
p33436
Nsa(dp33437
S'name'
p33438
S'execute_on'
p33439
sS'cpp_type'
p33440
S'MooseEnum'
p33441
sS'default'
p33442
S'timestep'
p33443
sS'description'
p33444
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p33445
sS'required'
p33446
I00
sS'options'
p33447
S'initial residual jacobian timestep timestep_begin custom'
p33448
sS'group_name'
p33449
Nsa(dp33450
S'description'
p33451
S'The seed for the master random number generator\n'
p33452
sS'cpp_type'
p33453
S'unsigned int'
p33454
sS'default'
p33455
S'0'
p33456
sS'name'
p33457
S'seed'
p33458
sS'required'
p33459
I00
sS'group_name'
p33460
S'Advanced'
p33461
sa(dp33462
S'description'
p33463
g3
sS'cpp_type'
p33464
S'std::string'
p33465
sS'default'
p33466
S'ElementIntegralVariableUserObject'
p33467
sS'name'
p33468
S'type'
p33469
sS'required'
p33470
I00
sS'group_name'
p33471
Nsa(dp33472
S'description'
p33473
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33474
sS'cpp_type'
p33475
S'bool'
p33476
sS'default'
p33477
S'0'
p33478
sS'name'
p33479
S'use_displaced_mesh'
p33480
sS'required'
p33481
I00
sS'group_name'
p33482
S'Advanced'
p33483
sa(dp33484
S'description'
p33485
S'The name of the variable that this object operates on\n'
p33486
sS'cpp_type'
p33487
S'VariableName'
p33488
sS'default'
p33489
g3
sS'name'
p33490
S'variable'
p33491
sS'required'
p33492
I01
sS'group_name'
p33493
NsasS'name'
p33494
S'/UserObjects/ElementIntegralVariableUserObject'
p33495
sa(dp33496
S'description'
p33497
g3
sS'type'
p33498
NsS'subblocks'
p33499
NsS'parameters'
p33500
(lp33501
(dp33502
S'description'
p33503
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p33504
sS'cpp_type'
p33505
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p33506
sS'default'
p33507
g3
sS'name'
p33508
S'block'
p33509
sS'required'
p33510
I00
sS'group_name'
p33511
Nsa(dp33512
S'name'
p33513
S'execute_on'
p33514
sS'cpp_type'
p33515
S'MooseEnum'
p33516
sS'default'
p33517
S'timestep'
p33518
sS'description'
p33519
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p33520
sS'required'
p33521
I00
sS'options'
p33522
S'initial residual jacobian timestep timestep_begin custom'
p33523
sS'group_name'
p33524
Nsa(dp33525
S'description'
p33526
S'The analytic solution to compare against\n'
p33527
sS'cpp_type'
p33528
S'FunctionName'
p33529
sS'default'
p33530
g3
sS'name'
p33531
S'function'
p33532
sS'required'
p33533
I01
sS'group_name'
p33534
Nsa(dp33535
S'name'
p33536
S'output'
p33537
sS'cpp_type'
p33538
S'MooseEnum'
p33539
sS'default'
p33540
S'auto'
p33541
sS'description'
p33542
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p33543
sS'required'
p33544
I00
sS'options'
p33545
S'none auto screen file both'
p33546
sS'group_name'
p33547
S'Advanced'
p33548
sa(dp33549
S'description'
p33550
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p33551
sS'cpp_type'
p33552
S'std::vector<OutputName, std::allocator<OutputName> >'
p33553
sS'default'
p33554
g3
sS'name'
p33555
S'outputs'
p33556
sS'required'
p33557
I00
sS'group_name'
p33558
S'Advanced'
p33559
sa(dp33560
S'description'
p33561
S'The seed for the master random number generator\n'
p33562
sS'cpp_type'
p33563
S'unsigned int'
p33564
sS'default'
p33565
S'0'
p33566
sS'name'
p33567
S'seed'
p33568
sS'required'
p33569
I00
sS'group_name'
p33570
S'Advanced'
p33571
sa(dp33572
S'description'
p33573
g3
sS'cpp_type'
p33574
S'std::string'
p33575
sS'default'
p33576
S'ElementL2Error'
p33577
sS'name'
p33578
S'type'
p33579
sS'required'
p33580
I00
sS'group_name'
p33581
Nsa(dp33582
S'description'
p33583
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33584
sS'cpp_type'
p33585
S'bool'
p33586
sS'default'
p33587
S'0'
p33588
sS'name'
p33589
S'use_displaced_mesh'
p33590
sS'required'
p33591
I00
sS'group_name'
p33592
S'Advanced'
p33593
sa(dp33594
S'description'
p33595
S'The name of the variable that this object operates on\n'
p33596
sS'cpp_type'
p33597
S'VariableName'
p33598
sS'default'
p33599
g3
sS'name'
p33600
S'variable'
p33601
sS'required'
p33602
I01
sS'group_name'
p33603
NsasS'name'
p33604
S'/UserObjects/ElementL2Error'
p33605
sa(dp33606
S'description'
p33607
g3
sS'type'
p33608
NsS'subblocks'
p33609
NsS'parameters'
p33610
(lp33611
(dp33612
S'description'
p33613
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p33614
sS'cpp_type'
p33615
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p33616
sS'default'
p33617
g3
sS'name'
p33618
S'block'
p33619
sS'required'
p33620
I00
sS'group_name'
p33621
Nsa(dp33622
S'name'
p33623
S'execute_on'
p33624
sS'cpp_type'
p33625
S'MooseEnum'
p33626
sS'default'
p33627
S'timestep'
p33628
sS'description'
p33629
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p33630
sS'required'
p33631
I00
sS'options'
p33632
S'initial residual jacobian timestep timestep_begin custom'
p33633
sS'group_name'
p33634
Nsa(dp33635
S'name'
p33636
S'output'
p33637
sS'cpp_type'
p33638
S'MooseEnum'
p33639
sS'default'
p33640
S'auto'
p33641
sS'description'
p33642
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p33643
sS'required'
p33644
I00
sS'options'
p33645
S'none auto screen file both'
p33646
sS'group_name'
p33647
S'Advanced'
p33648
sa(dp33649
S'description'
p33650
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p33651
sS'cpp_type'
p33652
S'std::vector<OutputName, std::allocator<OutputName> >'
p33653
sS'default'
p33654
g3
sS'name'
p33655
S'outputs'
p33656
sS'required'
p33657
I00
sS'group_name'
p33658
S'Advanced'
p33659
sa(dp33660
S'description'
p33661
S'The seed for the master random number generator\n'
p33662
sS'cpp_type'
p33663
S'unsigned int'
p33664
sS'default'
p33665
S'0'
p33666
sS'name'
p33667
S'seed'
p33668
sS'required'
p33669
I00
sS'group_name'
p33670
S'Advanced'
p33671
sa(dp33672
S'description'
p33673
g3
sS'cpp_type'
p33674
S'std::string'
p33675
sS'default'
p33676
S'ElementL2Norm'
p33677
sS'name'
p33678
S'type'
p33679
sS'required'
p33680
I00
sS'group_name'
p33681
Nsa(dp33682
S'description'
p33683
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33684
sS'cpp_type'
p33685
S'bool'
p33686
sS'default'
p33687
S'0'
p33688
sS'name'
p33689
S'use_displaced_mesh'
p33690
sS'required'
p33691
I00
sS'group_name'
p33692
S'Advanced'
p33693
sa(dp33694
S'description'
p33695
S'The name of the variable that this object operates on\n'
p33696
sS'cpp_type'
p33697
S'VariableName'
p33698
sS'default'
p33699
g3
sS'name'
p33700
S'variable'
p33701
sS'required'
p33702
I01
sS'group_name'
p33703
NsasS'name'
p33704
S'/UserObjects/ElementL2Norm'
p33705
sa(dp33706
S'description'
p33707
g3
sS'type'
p33708
NsS'subblocks'
p33709
NsS'parameters'
p33710
(lp33711
(dp33712
S'description'
p33713
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p33714
sS'cpp_type'
p33715
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p33716
sS'default'
p33717
g3
sS'name'
p33718
S'block'
p33719
sS'required'
p33720
I00
sS'group_name'
p33721
Nsa(dp33722
S'name'
p33723
S'execute_on'
p33724
sS'cpp_type'
p33725
S'MooseEnum'
p33726
sS'default'
p33727
S'timestep'
p33728
sS'description'
p33729
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p33730
sS'required'
p33731
I00
sS'options'
p33732
S'initial residual jacobian timestep timestep_begin custom'
p33733
sS'group_name'
p33734
Nsa(dp33735
S'description'
p33736
S'The analytic solution to compare against\n'
p33737
sS'cpp_type'
p33738
S'FunctionName'
p33739
sS'default'
p33740
g3
sS'name'
p33741
S'function_x'
p33742
sS'required'
p33743
I01
sS'group_name'
p33744
Nsa(dp33745
S'description'
p33746
S'The analytic solution to compare against\n'
p33747
sS'cpp_type'
p33748
S'FunctionName'
p33749
sS'default'
p33750
g3
sS'name'
p33751
S'function_y'
p33752
sS'required'
p33753
I00
sS'group_name'
p33754
Nsa(dp33755
S'description'
p33756
S'The analytic solution to compare against\n'
p33757
sS'cpp_type'
p33758
S'FunctionName'
p33759
sS'default'
p33760
g3
sS'name'
p33761
S'function_z'
p33762
sS'required'
p33763
I00
sS'group_name'
p33764
Nsa(dp33765
S'name'
p33766
S'output'
p33767
sS'cpp_type'
p33768
S'MooseEnum'
p33769
sS'default'
p33770
S'auto'
p33771
sS'description'
p33772
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p33773
sS'required'
p33774
I00
sS'options'
p33775
S'none auto screen file both'
p33776
sS'group_name'
p33777
S'Advanced'
p33778
sa(dp33779
S'description'
p33780
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p33781
sS'cpp_type'
p33782
S'std::vector<OutputName, std::allocator<OutputName> >'
p33783
sS'default'
p33784
g3
sS'name'
p33785
S'outputs'
p33786
sS'required'
p33787
I00
sS'group_name'
p33788
S'Advanced'
p33789
sa(dp33790
S'description'
p33791
S'The seed for the master random number generator\n'
p33792
sS'cpp_type'
p33793
S'unsigned int'
p33794
sS'default'
p33795
S'0'
p33796
sS'name'
p33797
S'seed'
p33798
sS'required'
p33799
I00
sS'group_name'
p33800
S'Advanced'
p33801
sa(dp33802
S'description'
p33803
g3
sS'cpp_type'
p33804
S'std::string'
p33805
sS'default'
p33806
S'ElementVectorL2Error'
p33807
sS'name'
p33808
S'type'
p33809
sS'required'
p33810
I00
sS'group_name'
p33811
Nsa(dp33812
S'description'
p33813
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33814
sS'cpp_type'
p33815
S'bool'
p33816
sS'default'
p33817
S'0'
p33818
sS'name'
p33819
S'use_displaced_mesh'
p33820
sS'required'
p33821
I00
sS'group_name'
p33822
S'Advanced'
p33823
sa(dp33824
S'description'
p33825
S'The FE solution in x direction\n'
p33826
sS'cpp_type'
p33827
S'std::vector<VariableName>'
p33828
sS'default'
p33829
g3
sS'name'
p33830
S'var_x'
p33831
sS'required'
p33832
I01
sS'group_name'
p33833
Nsa(dp33834
S'description'
p33835
S'The FE solution in y direction\n'
p33836
sS'cpp_type'
p33837
S'std::vector<VariableName>'
p33838
sS'default'
p33839
g3
sS'name'
p33840
S'var_y'
p33841
sS'required'
p33842
I00
sS'group_name'
p33843
Nsa(dp33844
S'description'
p33845
S'The FE solution in z direction\n'
p33846
sS'cpp_type'
p33847
S'std::vector<VariableName>'
p33848
sS'default'
p33849
g3
sS'name'
p33850
S'var_z'
p33851
sS'required'
p33852
I00
sS'group_name'
p33853
NsasS'name'
p33854
S'/UserObjects/ElementVectorL2Error'
p33855
sa(dp33856
S'description'
p33857
g3
sS'type'
p33858
NsS'subblocks'
p33859
NsS'parameters'
p33860
(lp33861
(dp33862
S'description'
p33863
S'The ID of the element where we monitor\n'
p33864
sS'cpp_type'
p33865
S'unsigned int'
p33866
sS'default'
p33867
g3
sS'name'
p33868
S'elementid'
p33869
sS'required'
p33870
I01
sS'group_name'
p33871
Nsa(dp33872
S'name'
p33873
S'execute_on'
p33874
sS'cpp_type'
p33875
S'MooseEnum'
p33876
sS'default'
p33877
S'timestep'
p33878
sS'description'
p33879
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p33880
sS'required'
p33881
I00
sS'options'
p33882
S'initial residual jacobian timestep timestep_begin custom'
p33883
sS'group_name'
p33884
Nsa(dp33885
S'name'
p33886
S'output'
p33887
sS'cpp_type'
p33888
S'MooseEnum'
p33889
sS'default'
p33890
S'auto'
p33891
sS'description'
p33892
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p33893
sS'required'
p33894
I00
sS'options'
p33895
S'none auto screen file both'
p33896
sS'group_name'
p33897
S'Advanced'
p33898
sa(dp33899
S'description'
p33900
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p33901
sS'cpp_type'
p33902
S'std::vector<OutputName, std::allocator<OutputName> >'
p33903
sS'default'
p33904
g3
sS'name'
p33905
S'outputs'
p33906
sS'required'
p33907
I00
sS'group_name'
p33908
S'Advanced'
p33909
sa(dp33910
S'description'
p33911
g3
sS'cpp_type'
p33912
S'std::string'
p33913
sS'default'
p33914
S'ElementalVariableValue'
p33915
sS'name'
p33916
S'type'
p33917
sS'required'
p33918
I00
sS'group_name'
p33919
Nsa(dp33920
S'description'
p33921
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33922
sS'cpp_type'
p33923
S'bool'
p33924
sS'default'
p33925
S'0'
p33926
sS'name'
p33927
S'use_displaced_mesh'
p33928
sS'required'
p33929
I00
sS'group_name'
p33930
S'Advanced'
p33931
sa(dp33932
S'description'
p33933
S'The variable to be monitored\n'
p33934
sS'cpp_type'
p33935
S'VariableName'
p33936
sS'default'
p33937
g3
sS'name'
p33938
S'variable'
p33939
sS'required'
p33940
I01
sS'group_name'
p33941
NsasS'name'
p33942
S'/UserObjects/ElementalVariableValue'
p33943
sa(dp33944
S'description'
p33945
g3
sS'type'
p33946
NsS'subblocks'
p33947
NsS'parameters'
p33948
(lp33949
(dp33950
S'name'
p33951
S'execute_on'
p33952
sS'cpp_type'
p33953
S'MooseEnum'
p33954
sS'default'
p33955
S'timestep'
p33956
sS'description'
p33957
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p33958
sS'required'
p33959
I00
sS'options'
p33960
S'initial residual jacobian timestep timestep_begin custom'
p33961
sS'group_name'
p33962
Nsa(dp33963
S'name'
p33964
S'output'
p33965
sS'cpp_type'
p33966
S'MooseEnum'
p33967
sS'default'
p33968
S'auto'
p33969
sS'description'
p33970
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p33971
sS'required'
p33972
I00
sS'options'
p33973
S'none auto screen file both'
p33974
sS'group_name'
p33975
S'Advanced'
p33976
sa(dp33977
S'description'
p33978
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p33979
sS'cpp_type'
p33980
S'std::vector<OutputName, std::allocator<OutputName> >'
p33981
sS'default'
p33982
g3
sS'name'
p33983
S'outputs'
p33984
sS'required'
p33985
I00
sS'group_name'
p33986
S'Advanced'
p33987
sa(dp33988
S'description'
p33989
g3
sS'cpp_type'
p33990
S'std::string'
p33991
sS'default'
p33992
S'EmptyPostprocessor'
p33993
sS'name'
p33994
S'type'
p33995
sS'required'
p33996
I00
sS'group_name'
p33997
Nsa(dp33998
S'description'
p33999
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34000
sS'cpp_type'
p34001
S'bool'
p34002
sS'default'
p34003
S'0'
p34004
sS'name'
p34005
S'use_displaced_mesh'
p34006
sS'required'
p34007
I00
sS'group_name'
p34008
S'Advanced'
p34009
sasS'name'
p34010
S'/UserObjects/EmptyPostprocessor'
p34011
sa(dp34012
S'description'
p34013
g3
sS'type'
p34014
NsS'subblocks'
p34015
NsS'parameters'
p34016
(lp34017
(dp34018
S'description'
p34019
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p34020
sS'cpp_type'
p34021
S'unsigned int'
p34022
sS'default'
p34023
S'1'
p34024
sS'name'
p34025
S'average_radius'
p34026
sS'required'
p34027
I00
sS'group_name'
p34028
Nsa(dp34029
S'description'
p34030
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p34031
sS'cpp_type'
p34032
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p34033
sS'default'
p34034
g3
sS'name'
p34035
S'block'
p34036
sS'required'
p34037
I00
sS'group_name'
p34038
Nsa(dp34039
S'name'
p34040
S'direction'
p34041
sS'cpp_type'
p34042
S'MooseEnum'
p34043
sS'default'
p34044
g3
sS'description'
p34045
S'The direction of the layers.\n'
p34046
sS'required'
p34047
I01
sS'options'
p34048
S'x y z'
p34049
sS'group_name'
p34050
Nsa(dp34051
S'name'
p34052
S'execute_on'
p34053
sS'cpp_type'
p34054
S'MooseEnum'
p34055
sS'default'
p34056
S'timestep'
p34057
sS'description'
p34058
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p34059
sS'required'
p34060
I00
sS'options'
p34061
S'initial residual jacobian timestep timestep_begin custom'
p34062
sS'group_name'
p34063
Nsa(dp34064
S'description'
p34065
S'The number of layers.\n'
p34066
sS'cpp_type'
p34067
S'unsigned int'
p34068
sS'default'
p34069
g3
sS'name'
p34070
S'num_layers'
p34071
sS'required'
p34072
I01
sS'group_name'
p34073
Nsa(dp34074
S'name'
p34075
S'sample_type'
p34076
sS'cpp_type'
p34077
S'MooseEnum'
p34078
sS'default'
p34079
S'direct'
p34080
sS'description'
p34081
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p34082
sS'required'
p34083
I00
sS'options'
p34084
S'direct interpolate average'
p34085
sS'group_name'
p34086
Nsa(dp34087
S'description'
p34088
S'The seed for the master random number generator\n'
p34089
sS'cpp_type'
p34090
S'unsigned int'
p34091
sS'default'
p34092
S'0'
p34093
sS'name'
p34094
S'seed'
p34095
sS'required'
p34096
I00
sS'group_name'
p34097
S'Advanced'
p34098
sa(dp34099
S'description'
p34100
g3
sS'cpp_type'
p34101
S'std::string'
p34102
sS'default'
p34103
S'LayeredAverage'
p34104
sS'name'
p34105
S'type'
p34106
sS'required'
p34107
I00
sS'group_name'
p34108
Nsa(dp34109
S'description'
p34110
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34111
sS'cpp_type'
p34112
S'bool'
p34113
sS'default'
p34114
S'0'
p34115
sS'name'
p34116
S'use_displaced_mesh'
p34117
sS'required'
p34118
I00
sS'group_name'
p34119
S'Advanced'
p34120
sa(dp34121
S'description'
p34122
S'The name of the variable that this object operates on\n'
p34123
sS'cpp_type'
p34124
S'VariableName'
p34125
sS'default'
p34126
g3
sS'name'
p34127
S'variable'
p34128
sS'required'
p34129
I01
sS'group_name'
p34130
NsasS'name'
p34131
S'/UserObjects/LayeredAverage'
p34132
sa(dp34133
S'description'
p34134
g3
sS'type'
p34135
NsS'subblocks'
p34136
NsS'parameters'
p34137
(lp34138
(dp34139
S'description'
p34140
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p34141
sS'cpp_type'
p34142
S'unsigned int'
p34143
sS'default'
p34144
S'1'
p34145
sS'name'
p34146
S'average_radius'
p34147
sS'required'
p34148
I00
sS'group_name'
p34149
Nsa(dp34150
S'description'
p34151
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p34152
sS'cpp_type'
p34153
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p34154
sS'default'
p34155
g3
sS'name'
p34156
S'block'
p34157
sS'required'
p34158
I00
sS'group_name'
p34159
Nsa(dp34160
S'name'
p34161
S'direction'
p34162
sS'cpp_type'
p34163
S'MooseEnum'
p34164
sS'default'
p34165
g3
sS'description'
p34166
S'The direction of the layers.\n'
p34167
sS'required'
p34168
I01
sS'options'
p34169
S'x y z'
p34170
sS'group_name'
p34171
Nsa(dp34172
S'name'
p34173
S'execute_on'
p34174
sS'cpp_type'
p34175
S'MooseEnum'
p34176
sS'default'
p34177
S'timestep'
p34178
sS'description'
p34179
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p34180
sS'required'
p34181
I00
sS'options'
p34182
S'initial residual jacobian timestep timestep_begin custom'
p34183
sS'group_name'
p34184
Nsa(dp34185
S'description'
p34186
S'The number of layers.\n'
p34187
sS'cpp_type'
p34188
S'unsigned int'
p34189
sS'default'
p34190
g3
sS'name'
p34191
S'num_layers'
p34192
sS'required'
p34193
I01
sS'group_name'
p34194
Nsa(dp34195
S'name'
p34196
S'sample_type'
p34197
sS'cpp_type'
p34198
S'MooseEnum'
p34199
sS'default'
p34200
S'direct'
p34201
sS'description'
p34202
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p34203
sS'required'
p34204
I00
sS'options'
p34205
S'direct interpolate average'
p34206
sS'group_name'
p34207
Nsa(dp34208
S'description'
p34209
S'The seed for the master random number generator\n'
p34210
sS'cpp_type'
p34211
S'unsigned int'
p34212
sS'default'
p34213
S'0'
p34214
sS'name'
p34215
S'seed'
p34216
sS'required'
p34217
I00
sS'group_name'
p34218
S'Advanced'
p34219
sa(dp34220
S'description'
p34221
g3
sS'cpp_type'
p34222
S'std::string'
p34223
sS'default'
p34224
S'LayeredIntegral'
p34225
sS'name'
p34226
S'type'
p34227
sS'required'
p34228
I00
sS'group_name'
p34229
Nsa(dp34230
S'description'
p34231
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34232
sS'cpp_type'
p34233
S'bool'
p34234
sS'default'
p34235
S'0'
p34236
sS'name'
p34237
S'use_displaced_mesh'
p34238
sS'required'
p34239
I00
sS'group_name'
p34240
S'Advanced'
p34241
sa(dp34242
S'description'
p34243
S'The name of the variable that this object operates on\n'
p34244
sS'cpp_type'
p34245
S'VariableName'
p34246
sS'default'
p34247
g3
sS'name'
p34248
S'variable'
p34249
sS'required'
p34250
I01
sS'group_name'
p34251
NsasS'name'
p34252
S'/UserObjects/LayeredIntegral'
p34253
sa(dp34254
S'description'
p34255
g3
sS'type'
p34256
NsS'subblocks'
p34257
NsS'parameters'
p34258
(lp34259
(dp34260
S'description'
p34261
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p34262
sS'cpp_type'
p34263
S'unsigned int'
p34264
sS'default'
p34265
S'1'
p34266
sS'name'
p34267
S'average_radius'
p34268
sS'required'
p34269
I00
sS'group_name'
p34270
Nsa(dp34271
S'description'
p34272
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p34273
sS'cpp_type'
p34274
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p34275
sS'default'
p34276
g3
sS'name'
p34277
S'boundary'
p34278
sS'required'
p34279
I00
sS'group_name'
p34280
Nsa(dp34281
S'name'
p34282
S'direction'
p34283
sS'cpp_type'
p34284
S'MooseEnum'
p34285
sS'default'
p34286
g3
sS'description'
p34287
S'The direction of the layers.\n'
p34288
sS'required'
p34289
I01
sS'options'
p34290
S'x y z'
p34291
sS'group_name'
p34292
Nsa(dp34293
S'name'
p34294
S'execute_on'
p34295
sS'cpp_type'
p34296
S'MooseEnum'
p34297
sS'default'
p34298
S'timestep'
p34299
sS'description'
p34300
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p34301
sS'required'
p34302
I00
sS'options'
p34303
S'initial residual jacobian timestep timestep_begin custom'
p34304
sS'group_name'
p34305
Nsa(dp34306
S'description'
p34307
S'The number of layers.\n'
p34308
sS'cpp_type'
p34309
S'unsigned int'
p34310
sS'default'
p34311
g3
sS'name'
p34312
S'num_layers'
p34313
sS'required'
p34314
I01
sS'group_name'
p34315
Nsa(dp34316
S'name'
p34317
S'sample_type'
p34318
sS'cpp_type'
p34319
S'MooseEnum'
p34320
sS'default'
p34321
S'direct'
p34322
sS'description'
p34323
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p34324
sS'required'
p34325
I00
sS'options'
p34326
S'direct interpolate average'
p34327
sS'group_name'
p34328
Nsa(dp34329
S'description'
p34330
g3
sS'cpp_type'
p34331
S'std::string'
p34332
sS'default'
p34333
S'LayeredSideAverage'
p34334
sS'name'
p34335
S'type'
p34336
sS'required'
p34337
I00
sS'group_name'
p34338
Nsa(dp34339
S'description'
p34340
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34341
sS'cpp_type'
p34342
S'bool'
p34343
sS'default'
p34344
S'0'
p34345
sS'name'
p34346
S'use_displaced_mesh'
p34347
sS'required'
p34348
I00
sS'group_name'
p34349
S'Advanced'
p34350
sa(dp34351
S'description'
p34352
S'The name of the variable that this boundary condition applies to\n'
p34353
sS'cpp_type'
p34354
S'VariableName'
p34355
sS'default'
p34356
g3
sS'name'
p34357
S'variable'
p34358
sS'required'
p34359
I01
sS'group_name'
p34360
NsasS'name'
p34361
S'/UserObjects/LayeredSideAverage'
p34362
sa(dp34363
S'description'
p34364
g3
sS'type'
p34365
NsS'subblocks'
p34366
NsS'parameters'
p34367
(lp34368
(dp34369
S'description'
p34370
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p34371
sS'cpp_type'
p34372
S'unsigned int'
p34373
sS'default'
p34374
S'1'
p34375
sS'name'
p34376
S'average_radius'
p34377
sS'required'
p34378
I00
sS'group_name'
p34379
Nsa(dp34380
S'description'
p34381
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p34382
sS'cpp_type'
p34383
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p34384
sS'default'
p34385
g3
sS'name'
p34386
S'boundary'
p34387
sS'required'
p34388
I00
sS'group_name'
p34389
Nsa(dp34390
S'description'
p34391
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p34392
sS'cpp_type'
p34393
S'std::string'
p34394
sS'default'
p34395
g3
sS'name'
p34396
S'diffusivity'
p34397
sS'required'
p34398
I01
sS'group_name'
p34399
Nsa(dp34400
S'name'
p34401
S'direction'
p34402
sS'cpp_type'
p34403
S'MooseEnum'
p34404
sS'default'
p34405
g3
sS'description'
p34406
S'The direction of the layers.\n'
p34407
sS'required'
p34408
I01
sS'options'
p34409
S'x y z'
p34410
sS'group_name'
p34411
Nsa(dp34412
S'name'
p34413
S'execute_on'
p34414
sS'cpp_type'
p34415
S'MooseEnum'
p34416
sS'default'
p34417
S'timestep'
p34418
sS'description'
p34419
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p34420
sS'required'
p34421
I00
sS'options'
p34422
S'initial residual jacobian timestep timestep_begin custom'
p34423
sS'group_name'
p34424
Nsa(dp34425
S'description'
p34426
S'The number of layers.\n'
p34427
sS'cpp_type'
p34428
S'unsigned int'
p34429
sS'default'
p34430
g3
sS'name'
p34431
S'num_layers'
p34432
sS'required'
p34433
I01
sS'group_name'
p34434
Nsa(dp34435
S'name'
p34436
S'sample_type'
p34437
sS'cpp_type'
p34438
S'MooseEnum'
p34439
sS'default'
p34440
S'direct'
p34441
sS'description'
p34442
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p34443
sS'required'
p34444
I00
sS'options'
p34445
S'direct interpolate average'
p34446
sS'group_name'
p34447
Nsa(dp34448
S'description'
p34449
g3
sS'cpp_type'
p34450
S'std::string'
p34451
sS'default'
p34452
S'LayeredSideFluxAverage'
p34453
sS'name'
p34454
S'type'
p34455
sS'required'
p34456
I00
sS'group_name'
p34457
Nsa(dp34458
S'description'
p34459
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34460
sS'cpp_type'
p34461
S'bool'
p34462
sS'default'
p34463
S'0'
p34464
sS'name'
p34465
S'use_displaced_mesh'
p34466
sS'required'
p34467
I00
sS'group_name'
p34468
S'Advanced'
p34469
sa(dp34470
S'description'
p34471
S'The name of the variable that this boundary condition applies to\n'
p34472
sS'cpp_type'
p34473
S'VariableName'
p34474
sS'default'
p34475
g3
sS'name'
p34476
S'variable'
p34477
sS'required'
p34478
I01
sS'group_name'
p34479
NsasS'name'
p34480
S'/UserObjects/LayeredSideFluxAverage'
p34481
sa(dp34482
S'description'
p34483
g3
sS'type'
p34484
NsS'subblocks'
p34485
NsS'parameters'
p34486
(lp34487
(dp34488
S'description'
p34489
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p34490
sS'cpp_type'
p34491
S'unsigned int'
p34492
sS'default'
p34493
S'1'
p34494
sS'name'
p34495
S'average_radius'
p34496
sS'required'
p34497
I00
sS'group_name'
p34498
Nsa(dp34499
S'description'
p34500
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p34501
sS'cpp_type'
p34502
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p34503
sS'default'
p34504
g3
sS'name'
p34505
S'boundary'
p34506
sS'required'
p34507
I00
sS'group_name'
p34508
Nsa(dp34509
S'name'
p34510
S'direction'
p34511
sS'cpp_type'
p34512
S'MooseEnum'
p34513
sS'default'
p34514
g3
sS'description'
p34515
S'The direction of the layers.\n'
p34516
sS'required'
p34517
I01
sS'options'
p34518
S'x y z'
p34519
sS'group_name'
p34520
Nsa(dp34521
S'name'
p34522
S'execute_on'
p34523
sS'cpp_type'
p34524
S'MooseEnum'
p34525
sS'default'
p34526
S'timestep'
p34527
sS'description'
p34528
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p34529
sS'required'
p34530
I00
sS'options'
p34531
S'initial residual jacobian timestep timestep_begin custom'
p34532
sS'group_name'
p34533
Nsa(dp34534
S'description'
p34535
S'The number of layers.\n'
p34536
sS'cpp_type'
p34537
S'unsigned int'
p34538
sS'default'
p34539
g3
sS'name'
p34540
S'num_layers'
p34541
sS'required'
p34542
I01
sS'group_name'
p34543
Nsa(dp34544
S'name'
p34545
S'sample_type'
p34546
sS'cpp_type'
p34547
S'MooseEnum'
p34548
sS'default'
p34549
S'direct'
p34550
sS'description'
p34551
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p34552
sS'required'
p34553
I00
sS'options'
p34554
S'direct interpolate average'
p34555
sS'group_name'
p34556
Nsa(dp34557
S'description'
p34558
g3
sS'cpp_type'
p34559
S'std::string'
p34560
sS'default'
p34561
S'LayeredSideIntegral'
p34562
sS'name'
p34563
S'type'
p34564
sS'required'
p34565
I00
sS'group_name'
p34566
Nsa(dp34567
S'description'
p34568
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34569
sS'cpp_type'
p34570
S'bool'
p34571
sS'default'
p34572
S'0'
p34573
sS'name'
p34574
S'use_displaced_mesh'
p34575
sS'required'
p34576
I00
sS'group_name'
p34577
S'Advanced'
p34578
sa(dp34579
S'description'
p34580
S'The name of the variable that this boundary condition applies to\n'
p34581
sS'cpp_type'
p34582
S'VariableName'
p34583
sS'default'
p34584
g3
sS'name'
p34585
S'variable'
p34586
sS'required'
p34587
I01
sS'group_name'
p34588
NsasS'name'
p34589
S'/UserObjects/LayeredSideIntegral'
p34590
sa(dp34591
S'description'
p34592
g3
sS'type'
p34593
NsS'subblocks'
p34594
NsS'parameters'
p34595
(lp34596
(dp34597
S'description'
p34598
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p34599
sS'cpp_type'
p34600
S'unsigned int'
p34601
sS'default'
p34602
S'1'
p34603
sS'name'
p34604
S'average_radius'
p34605
sS'required'
p34606
I00
sS'group_name'
p34607
Nsa(dp34608
S'description'
p34609
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p34610
sS'cpp_type'
p34611
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p34612
sS'default'
p34613
g3
sS'name'
p34614
S'block'
p34615
sS'required'
p34616
I00
sS'group_name'
p34617
Nsa(dp34618
S'name'
p34619
S'direction'
p34620
sS'cpp_type'
p34621
S'MooseEnum'
p34622
sS'default'
p34623
g3
sS'description'
p34624
S'The direction of the layers.\n'
p34625
sS'required'
p34626
I01
sS'options'
p34627
S'x y z'
p34628
sS'group_name'
p34629
Nsa(dp34630
S'name'
p34631
S'execute_on'
p34632
sS'cpp_type'
p34633
S'MooseEnum'
p34634
sS'default'
p34635
S'timestep'
p34636
sS'description'
p34637
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p34638
sS'required'
p34639
I00
sS'options'
p34640
S'initial residual jacobian timestep timestep_begin custom'
p34641
sS'group_name'
p34642
Nsa(dp34643
S'description'
p34644
S'The number of layers.\n'
p34645
sS'cpp_type'
p34646
S'unsigned int'
p34647
sS'default'
p34648
g3
sS'name'
p34649
S'num_layers'
p34650
sS'required'
p34651
I01
sS'group_name'
p34652
Nsa(dp34653
S'description'
p34654
S'Layered averages will be computed in space closest to these points.\n'
p34655
sS'cpp_type'
p34656
S'std::vector<double, std::allocator<double> >'
p34657
sS'default'
p34658
g3
sS'name'
p34659
S'points'
p34660
sS'required'
p34661
I01
sS'group_name'
p34662
Nsa(dp34663
S'name'
p34664
S'sample_type'
p34665
sS'cpp_type'
p34666
S'MooseEnum'
p34667
sS'default'
p34668
S'direct'
p34669
sS'description'
p34670
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p34671
sS'required'
p34672
I00
sS'options'
p34673
S'direct interpolate average'
p34674
sS'group_name'
p34675
Nsa(dp34676
S'description'
p34677
S'The seed for the master random number generator\n'
p34678
sS'cpp_type'
p34679
S'unsigned int'
p34680
sS'default'
p34681
S'0'
p34682
sS'name'
p34683
S'seed'
p34684
sS'required'
p34685
I00
sS'group_name'
p34686
S'Advanced'
p34687
sa(dp34688
S'description'
p34689
g3
sS'cpp_type'
p34690
S'std::string'
p34691
sS'default'
p34692
S'NearestPointLayeredAverage'
p34693
sS'name'
p34694
S'type'
p34695
sS'required'
p34696
I00
sS'group_name'
p34697
Nsa(dp34698
S'description'
p34699
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34700
sS'cpp_type'
p34701
S'bool'
p34702
sS'default'
p34703
S'0'
p34704
sS'name'
p34705
S'use_displaced_mesh'
p34706
sS'required'
p34707
I00
sS'group_name'
p34708
S'Advanced'
p34709
sa(dp34710
S'description'
p34711
S'The name of the variable that this object operates on\n'
p34712
sS'cpp_type'
p34713
S'VariableName'
p34714
sS'default'
p34715
g3
sS'name'
p34716
S'variable'
p34717
sS'required'
p34718
I01
sS'group_name'
p34719
NsasS'name'
p34720
S'/UserObjects/NearestPointLayeredAverage'
p34721
sa(dp34722
S'description'
p34723
g3
sS'type'
p34724
NsS'subblocks'
p34725
NsS'parameters'
p34726
(lp34727
(dp34728
S'description'
p34729
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p34730
sS'cpp_type'
p34731
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p34732
sS'default'
p34733
g3
sS'name'
p34734
S'block'
p34735
sS'required'
p34736
I00
sS'group_name'
p34737
Nsa(dp34738
S'description'
p34739
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p34740
sS'cpp_type'
p34741
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p34742
sS'default'
p34743
g3
sS'name'
p34744
S'boundary'
p34745
sS'required'
p34746
I00
sS'group_name'
p34747
Nsa(dp34748
S'name'
p34749
S'execute_on'
p34750
sS'cpp_type'
p34751
S'MooseEnum'
p34752
sS'default'
p34753
S'timestep'
p34754
sS'description'
p34755
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p34756
sS'required'
p34757
I00
sS'options'
p34758
S'initial residual jacobian timestep timestep_begin custom'
p34759
sS'group_name'
p34760
Nsa(dp34761
S'name'
p34762
S'output'
p34763
sS'cpp_type'
p34764
S'MooseEnum'
p34765
sS'default'
p34766
S'auto'
p34767
sS'description'
p34768
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p34769
sS'required'
p34770
I00
sS'options'
p34771
S'none auto screen file both'
p34772
sS'group_name'
p34773
S'Advanced'
p34774
sa(dp34775
S'description'
p34776
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p34777
sS'cpp_type'
p34778
S'std::vector<OutputName, std::allocator<OutputName> >'
p34779
sS'default'
p34780
g3
sS'name'
p34781
S'outputs'
p34782
sS'required'
p34783
I00
sS'group_name'
p34784
S'Advanced'
p34785
sa(dp34786
S'description'
p34787
S'The seed for the master random number generator\n'
p34788
sS'cpp_type'
p34789
S'unsigned int'
p34790
sS'default'
p34791
S'0'
p34792
sS'name'
p34793
S'seed'
p34794
sS'required'
p34795
I00
sS'group_name'
p34796
S'Advanced'
p34797
sa(dp34798
S'description'
p34799
g3
sS'cpp_type'
p34800
S'std::string'
p34801
sS'default'
p34802
S'NodalExtremeValue'
p34803
sS'name'
p34804
S'type'
p34805
sS'required'
p34806
I00
sS'group_name'
p34807
Nsa(dp34808
S'description'
p34809
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34810
sS'cpp_type'
p34811
S'bool'
p34812
sS'default'
p34813
S'0'
p34814
sS'name'
p34815
S'use_displaced_mesh'
p34816
sS'required'
p34817
I00
sS'group_name'
p34818
S'Advanced'
p34819
sa(dp34820
S'name'
p34821
S'value_type'
p34822
sS'cpp_type'
p34823
S'MooseEnum'
p34824
sS'default'
p34825
S'max'
p34826
sS'description'
p34827
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimu value.\n"
p34828
sS'required'
p34829
I00
sS'options'
p34830
S'max min'
p34831
sS'group_name'
p34832
Nsa(dp34833
S'description'
p34834
S'The name of the variable that this postprocessor operates on\n'
p34835
sS'cpp_type'
p34836
S'VariableName'
p34837
sS'default'
p34838
g3
sS'name'
p34839
S'variable'
p34840
sS'required'
p34841
I01
sS'group_name'
p34842
NsasS'name'
p34843
S'/UserObjects/NodalExtremeValue'
p34844
sa(dp34845
S'description'
p34846
g3
sS'type'
p34847
NsS'subblocks'
p34848
NsS'parameters'
p34849
(lp34850
(dp34851
S'description'
p34852
S'An optional file name where bubble volumes can be output.\n'
p34853
sS'cpp_type'
p34854
S'FileName'
p34855
sS'default'
p34856
g3
sS'name'
p34857
S'bubble_volume_file'
p34858
sS'required'
p34859
I00
sS'group_name'
p34860
Nsa(dp34861
S'description'
p34862
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p34863
sS'cpp_type'
p34864
S'bool'
p34865
sS'default'
p34866
S'0'
p34867
sS'name'
p34868
S'condense_map_info'
p34869
sS'required'
p34870
I00
sS'group_name'
p34871
Nsa(dp34872
S'description'
p34873
S'The threshold for which an existing bubble may be extended (defaults to "threshold")\n'
p34874
sS'cpp_type'
p34875
S'double'
p34876
sS'default'
p34877
g3
sS'name'
p34878
S'connecting_threshold'
p34879
sS'required'
p34880
I00
sS'group_name'
p34881
Nsa(dp34882
S'description'
p34883
S'If supplied, will be used to find the scaled threshold of the bubble edges\n'
p34884
sS'cpp_type'
p34885
S'PostprocessorName'
p34886
sS'default'
p34887
g3
sS'name'
p34888
S'elem_avg_value'
p34889
sS'required'
p34890
I00
sS'group_name'
p34891
Nsa(dp34892
S'description'
p34893
S'Instruct the UO to populate the variable index map.\n'
p34894
sS'cpp_type'
p34895
S'bool'
p34896
sS'default'
p34897
S'0'
p34898
sS'name'
p34899
S'enable_var_coloring'
p34900
sS'required'
p34901
I00
sS'group_name'
p34902
Nsa(dp34903
S'name'
p34904
S'execute_on'
p34905
sS'cpp_type'
p34906
S'MooseEnum'
p34907
sS'default'
p34908
S'timestep'
p34909
sS'description'
p34910
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p34911
sS'required'
p34912
I00
sS'options'
p34913
S'initial residual jacobian timestep timestep_begin custom'
p34914
sS'group_name'
p34915
Nsa(dp34916
S'name'
p34917
S'output'
p34918
sS'cpp_type'
p34919
S'MooseEnum'
p34920
sS'default'
p34921
S'auto'
p34922
sS'description'
p34923
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p34924
sS'required'
p34925
I00
sS'options'
p34926
S'none auto screen file both'
p34927
sS'group_name'
p34928
S'Advanced'
p34929
sa(dp34930
S'description'
p34931
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p34932
sS'cpp_type'
p34933
S'std::vector<OutputName, std::allocator<OutputName> >'
p34934
sS'default'
p34935
g3
sS'name'
p34936
S'outputs'
p34937
sS'required'
p34938
I00
sS'group_name'
p34939
S'Advanced'
p34940
sa(dp34941
S'description'
p34942
S'The threshold value for which a new bubble may be started\n'
p34943
sS'cpp_type'
p34944
S'double'
p34945
sS'default'
p34946
S'0.5'
p34947
sS'name'
p34948
S'threshold'
p34949
sS'required'
p34950
I00
sS'group_name'
p34951
Nsa(dp34952
S'description'
p34953
S'Calculate memory usage\n'
p34954
sS'cpp_type'
p34955
S'bool'
p34956
sS'default'
p34957
S'0'
p34958
sS'name'
p34959
S'track_memory_usage'
p34960
sS'required'
p34961
I00
sS'group_name'
p34962
Nsa(dp34963
S'description'
p34964
g3
sS'cpp_type'
p34965
S'std::string'
p34966
sS'default'
p34967
S'NodalFloodCount'
p34968
sS'name'
p34969
S'type'
p34970
sS'required'
p34971
I00
sS'group_name'
p34972
Nsa(dp34973
S'description'
p34974
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34975
sS'cpp_type'
p34976
S'bool'
p34977
sS'default'
p34978
S'0'
p34979
sS'name'
p34980
S'use_displaced_mesh'
p34981
sS'required'
p34982
I00
sS'group_name'
p34983
S'Advanced'
p34984
sa(dp34985
S'description'
p34986
S'Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n'
p34987
sS'cpp_type'
p34988
S'bool'
p34989
sS'default'
p34990
S'0'
p34991
sS'name'
p34992
S'use_global_numbering'
p34993
sS'required'
p34994
I00
sS'group_name'
p34995
Nsa(dp34996
S'description'
p34997
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p34998
sS'cpp_type'
p34999
S'bool'
p35000
sS'default'
p35001
S'1'
p35002
sS'name'
p35003
S'use_single_map'
p35004
sS'required'
p35005
I00
sS'group_name'
p35006
Nsa(dp35007
S'description'
p35008
S'Ths variable(s) for which to find connected regions of interests, i.e. "bubbles".\n'
p35009
sS'cpp_type'
p35010
S'std::vector<VariableName>'
p35011
sS'default'
p35012
g3
sS'name'
p35013
S'variable'
p35014
sS'required'
p35015
I01
sS'group_name'
p35016
NsasS'name'
p35017
S'/UserObjects/NodalFloodCount'
p35018
sa(dp35019
S'description'
p35020
g3
sS'type'
p35021
NsS'subblocks'
p35022
NsS'parameters'
p35023
(lp35024
(dp35025
S'description'
p35026
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p35027
sS'cpp_type'
p35028
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p35029
sS'default'
p35030
g3
sS'name'
p35031
S'block'
p35032
sS'required'
p35033
I00
sS'group_name'
p35034
Nsa(dp35035
S'description'
p35036
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35037
sS'cpp_type'
p35038
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35039
sS'default'
p35040
g3
sS'name'
p35041
S'boundary'
p35042
sS'required'
p35043
I00
sS'group_name'
p35044
Nsa(dp35045
S'name'
p35046
S'execute_on'
p35047
sS'cpp_type'
p35048
S'MooseEnum'
p35049
sS'default'
p35050
S'timestep'
p35051
sS'description'
p35052
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p35053
sS'required'
p35054
I00
sS'options'
p35055
S'initial residual jacobian timestep timestep_begin custom'
p35056
sS'group_name'
p35057
Nsa(dp35058
S'description'
p35059
S'The analytic solution to compare against\n'
p35060
sS'cpp_type'
p35061
S'FunctionName'
p35062
sS'default'
p35063
g3
sS'name'
p35064
S'function'
p35065
sS'required'
p35066
I01
sS'group_name'
p35067
Nsa(dp35068
S'name'
p35069
S'output'
p35070
sS'cpp_type'
p35071
S'MooseEnum'
p35072
sS'default'
p35073
S'auto'
p35074
sS'description'
p35075
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p35076
sS'required'
p35077
I00
sS'options'
p35078
S'none auto screen file both'
p35079
sS'group_name'
p35080
S'Advanced'
p35081
sa(dp35082
S'description'
p35083
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p35084
sS'cpp_type'
p35085
S'std::vector<OutputName, std::allocator<OutputName> >'
p35086
sS'default'
p35087
g3
sS'name'
p35088
S'outputs'
p35089
sS'required'
p35090
I00
sS'group_name'
p35091
S'Advanced'
p35092
sa(dp35093
S'description'
p35094
S'The seed for the master random number generator\n'
p35095
sS'cpp_type'
p35096
S'unsigned int'
p35097
sS'default'
p35098
S'0'
p35099
sS'name'
p35100
S'seed'
p35101
sS'required'
p35102
I00
sS'group_name'
p35103
S'Advanced'
p35104
sa(dp35105
S'description'
p35106
g3
sS'cpp_type'
p35107
S'std::string'
p35108
sS'default'
p35109
S'NodalL2Error'
p35110
sS'name'
p35111
S'type'
p35112
sS'required'
p35113
I00
sS'group_name'
p35114
Nsa(dp35115
S'description'
p35116
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35117
sS'cpp_type'
p35118
S'bool'
p35119
sS'default'
p35120
S'0'
p35121
sS'name'
p35122
S'use_displaced_mesh'
p35123
sS'required'
p35124
I00
sS'group_name'
p35125
S'Advanced'
p35126
sa(dp35127
S'description'
p35128
S'The name of the variable that this postprocessor operates on\n'
p35129
sS'cpp_type'
p35130
S'VariableName'
p35131
sS'default'
p35132
g3
sS'name'
p35133
S'variable'
p35134
sS'required'
p35135
I01
sS'group_name'
p35136
NsasS'name'
p35137
S'/UserObjects/NodalL2Error'
p35138
sa(dp35139
S'description'
p35140
g3
sS'type'
p35141
NsS'subblocks'
p35142
NsS'parameters'
p35143
(lp35144
(dp35145
S'description'
p35146
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p35147
sS'cpp_type'
p35148
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p35149
sS'default'
p35150
g3
sS'name'
p35151
S'block'
p35152
sS'required'
p35153
I00
sS'group_name'
p35154
Nsa(dp35155
S'description'
p35156
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35157
sS'cpp_type'
p35158
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35159
sS'default'
p35160
g3
sS'name'
p35161
S'boundary'
p35162
sS'required'
p35163
I00
sS'group_name'
p35164
Nsa(dp35165
S'name'
p35166
S'execute_on'
p35167
sS'cpp_type'
p35168
S'MooseEnum'
p35169
sS'default'
p35170
S'timestep'
p35171
sS'description'
p35172
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p35173
sS'required'
p35174
I00
sS'options'
p35175
S'initial residual jacobian timestep timestep_begin custom'
p35176
sS'group_name'
p35177
Nsa(dp35178
S'name'
p35179
S'output'
p35180
sS'cpp_type'
p35181
S'MooseEnum'
p35182
sS'default'
p35183
S'auto'
p35184
sS'description'
p35185
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p35186
sS'required'
p35187
I00
sS'options'
p35188
S'none auto screen file both'
p35189
sS'group_name'
p35190
S'Advanced'
p35191
sa(dp35192
S'description'
p35193
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p35194
sS'cpp_type'
p35195
S'std::vector<OutputName, std::allocator<OutputName> >'
p35196
sS'default'
p35197
g3
sS'name'
p35198
S'outputs'
p35199
sS'required'
p35200
I00
sS'group_name'
p35201
S'Advanced'
p35202
sa(dp35203
S'description'
p35204
S'The seed for the master random number generator\n'
p35205
sS'cpp_type'
p35206
S'unsigned int'
p35207
sS'default'
p35208
S'0'
p35209
sS'name'
p35210
S'seed'
p35211
sS'required'
p35212
I00
sS'group_name'
p35213
S'Advanced'
p35214
sa(dp35215
S'description'
p35216
g3
sS'cpp_type'
p35217
S'std::string'
p35218
sS'default'
p35219
S'NodalL2Norm'
p35220
sS'name'
p35221
S'type'
p35222
sS'required'
p35223
I00
sS'group_name'
p35224
Nsa(dp35225
S'description'
p35226
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35227
sS'cpp_type'
p35228
S'bool'
p35229
sS'default'
p35230
S'0'
p35231
sS'name'
p35232
S'use_displaced_mesh'
p35233
sS'required'
p35234
I00
sS'group_name'
p35235
S'Advanced'
p35236
sa(dp35237
S'description'
p35238
S'The name of the variable that this postprocessor operates on\n'
p35239
sS'cpp_type'
p35240
S'VariableName'
p35241
sS'default'
p35242
g3
sS'name'
p35243
S'variable'
p35244
sS'required'
p35245
I01
sS'group_name'
p35246
NsasS'name'
p35247
S'/UserObjects/NodalL2Norm'
p35248
sa(dp35249
S'description'
p35250
g3
sS'type'
p35251
NsS'subblocks'
p35252
NsS'parameters'
p35253
(lp35254
(dp35255
S'description'
p35256
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p35257
sS'cpp_type'
p35258
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p35259
sS'default'
p35260
g3
sS'name'
p35261
S'block'
p35262
sS'required'
p35263
I00
sS'group_name'
p35264
Nsa(dp35265
S'description'
p35266
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35267
sS'cpp_type'
p35268
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35269
sS'default'
p35270
g3
sS'name'
p35271
S'boundary'
p35272
sS'required'
p35273
I00
sS'group_name'
p35274
Nsa(dp35275
S'name'
p35276
S'execute_on'
p35277
sS'cpp_type'
p35278
S'MooseEnum'
p35279
sS'default'
p35280
S'timestep'
p35281
sS'description'
p35282
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p35283
sS'required'
p35284
I00
sS'options'
p35285
S'initial residual jacobian timestep timestep_begin custom'
p35286
sS'group_name'
p35287
Nsa(dp35288
S'name'
p35289
S'output'
p35290
sS'cpp_type'
p35291
S'MooseEnum'
p35292
sS'default'
p35293
S'auto'
p35294
sS'description'
p35295
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p35296
sS'required'
p35297
I00
sS'options'
p35298
S'none auto screen file both'
p35299
sS'group_name'
p35300
S'Advanced'
p35301
sa(dp35302
S'description'
p35303
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p35304
sS'cpp_type'
p35305
S'std::vector<OutputName, std::allocator<OutputName> >'
p35306
sS'default'
p35307
g3
sS'name'
p35308
S'outputs'
p35309
sS'required'
p35310
I00
sS'group_name'
p35311
S'Advanced'
p35312
sa(dp35313
S'description'
p35314
S'The seed for the master random number generator\n'
p35315
sS'cpp_type'
p35316
S'unsigned int'
p35317
sS'default'
p35318
S'0'
p35319
sS'name'
p35320
S'seed'
p35321
sS'required'
p35322
I00
sS'group_name'
p35323
S'Advanced'
p35324
sa(dp35325
S'description'
p35326
g3
sS'cpp_type'
p35327
S'std::string'
p35328
sS'default'
p35329
S'NodalMaxValue'
p35330
sS'name'
p35331
S'type'
p35332
sS'required'
p35333
I00
sS'group_name'
p35334
Nsa(dp35335
S'description'
p35336
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35337
sS'cpp_type'
p35338
S'bool'
p35339
sS'default'
p35340
S'0'
p35341
sS'name'
p35342
S'use_displaced_mesh'
p35343
sS'required'
p35344
I00
sS'group_name'
p35345
S'Advanced'
p35346
sa(dp35347
S'description'
p35348
S'The name of the variable that this postprocessor operates on\n'
p35349
sS'cpp_type'
p35350
S'VariableName'
p35351
sS'default'
p35352
g3
sS'name'
p35353
S'variable'
p35354
sS'required'
p35355
I01
sS'group_name'
p35356
NsasS'name'
p35357
S'/UserObjects/NodalMaxValue'
p35358
sa(dp35359
S'description'
p35360
g3
sS'type'
p35361
NsS'subblocks'
p35362
NsS'parameters'
p35363
(lp35364
(dp35365
S'description'
p35366
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35367
sS'cpp_type'
p35368
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35369
sS'default'
p35370
g3
sS'name'
p35371
S'boundary'
p35372
sS'required'
p35373
I00
sS'group_name'
p35374
Nsa(dp35375
S'description'
p35376
S"Node set ID which contains the nodes that are in 'corners'.\n"
p35377
sS'cpp_type'
p35378
S'BoundaryName'
p35379
sS'default'
p35380
g3
sS'name'
p35381
S'corner_boundary'
p35382
sS'required'
p35383
I01
sS'group_name'
p35384
Nsa(dp35385
S'name'
p35386
S'execute_on'
p35387
sS'cpp_type'
p35388
S'MooseEnum'
p35389
sS'default'
p35390
S'timestep'
p35391
sS'description'
p35392
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p35393
sS'required'
p35394
I00
sS'options'
p35395
S'initial residual jacobian timestep timestep_begin custom'
p35396
sS'group_name'
p35397
Nsa(dp35398
S'description'
p35399
g3
sS'cpp_type'
p35400
S'std::string'
p35401
sS'default'
p35402
S'NodalNormalsCorner'
p35403
sS'name'
p35404
S'type'
p35405
sS'required'
p35406
I00
sS'group_name'
p35407
Nsa(dp35408
S'description'
p35409
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35410
sS'cpp_type'
p35411
S'bool'
p35412
sS'default'
p35413
S'0'
p35414
sS'name'
p35415
S'use_displaced_mesh'
p35416
sS'required'
p35417
I00
sS'group_name'
p35418
S'Advanced'
p35419
sasS'name'
p35420
S'/UserObjects/NodalNormalsCorner'
p35421
sa(dp35422
S'description'
p35423
g3
sS'type'
p35424
NsS'subblocks'
p35425
NsS'parameters'
p35426
(lp35427
(dp35428
S'description'
p35429
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p35430
sS'cpp_type'
p35431
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p35432
sS'default'
p35433
g3
sS'name'
p35434
S'block'
p35435
sS'required'
p35436
I00
sS'group_name'
p35437
Nsa(dp35438
S'description'
p35439
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35440
sS'cpp_type'
p35441
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35442
sS'default'
p35443
g3
sS'name'
p35444
S'boundary'
p35445
sS'required'
p35446
I00
sS'group_name'
p35447
Nsa(dp35448
S'name'
p35449
S'execute_on'
p35450
sS'cpp_type'
p35451
S'MooseEnum'
p35452
sS'default'
p35453
S'timestep'
p35454
sS'description'
p35455
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p35456
sS'required'
p35457
I00
sS'options'
p35458
S'initial residual jacobian timestep timestep_begin custom'
p35459
sS'group_name'
p35460
Nsa(dp35461
S'description'
p35462
S'The seed for the master random number generator\n'
p35463
sS'cpp_type'
p35464
S'unsigned int'
p35465
sS'default'
p35466
S'0'
p35467
sS'name'
p35468
S'seed'
p35469
sS'required'
p35470
I00
sS'group_name'
p35471
S'Advanced'
p35472
sa(dp35473
S'description'
p35474
g3
sS'cpp_type'
p35475
S'std::string'
p35476
sS'default'
p35477
S'NodalNormalsEvaluator'
p35478
sS'name'
p35479
S'type'
p35480
sS'required'
p35481
I00
sS'group_name'
p35482
Nsa(dp35483
S'description'
p35484
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35485
sS'cpp_type'
p35486
S'bool'
p35487
sS'default'
p35488
S'0'
p35489
sS'name'
p35490
S'use_displaced_mesh'
p35491
sS'required'
p35492
I00
sS'group_name'
p35493
S'Advanced'
p35494
sasS'name'
p35495
S'/UserObjects/NodalNormalsEvaluator'
p35496
sa(dp35497
S'description'
p35498
g3
sS'type'
p35499
NsS'subblocks'
p35500
NsS'parameters'
p35501
(lp35502
(dp35503
S'description'
p35504
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p35505
sS'cpp_type'
p35506
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p35507
sS'default'
p35508
g3
sS'name'
p35509
S'block'
p35510
sS'required'
p35511
I00
sS'group_name'
p35512
Nsa(dp35513
S'description'
p35514
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35515
sS'cpp_type'
p35516
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35517
sS'default'
p35518
g3
sS'name'
p35519
S'boundary'
p35520
sS'required'
p35521
I00
sS'group_name'
p35522
Nsa(dp35523
S'description'
p35524
S"Node set ID which contains the nodes that are in 'corners'.\n"
p35525
sS'cpp_type'
p35526
S'BoundaryName'
p35527
sS'default'
p35528
g3
sS'name'
p35529
S'corner_boundary'
p35530
sS'required'
p35531
I00
sS'group_name'
p35532
Nsa(dp35533
S'name'
p35534
S'execute_on'
p35535
sS'cpp_type'
p35536
S'MooseEnum'
p35537
sS'default'
p35538
S'timestep'
p35539
sS'description'
p35540
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p35541
sS'required'
p35542
I00
sS'options'
p35543
S'initial residual jacobian timestep timestep_begin custom'
p35544
sS'group_name'
p35545
Nsa(dp35546
S'description'
p35547
S'The seed for the master random number generator\n'
p35548
sS'cpp_type'
p35549
S'unsigned int'
p35550
sS'default'
p35551
S'0'
p35552
sS'name'
p35553
S'seed'
p35554
sS'required'
p35555
I00
sS'group_name'
p35556
S'Advanced'
p35557
sa(dp35558
S'description'
p35559
g3
sS'cpp_type'
p35560
S'std::string'
p35561
sS'default'
p35562
S'NodalNormalsPreprocessor'
p35563
sS'name'
p35564
S'type'
p35565
sS'required'
p35566
I00
sS'group_name'
p35567
Nsa(dp35568
S'description'
p35569
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35570
sS'cpp_type'
p35571
S'bool'
p35572
sS'default'
p35573
S'0'
p35574
sS'name'
p35575
S'use_displaced_mesh'
p35576
sS'required'
p35577
I00
sS'group_name'
p35578
S'Advanced'
p35579
sasS'name'
p35580
S'/UserObjects/NodalNormalsPreprocessor'
p35581
sa(dp35582
S'description'
p35583
g3
sS'type'
p35584
NsS'subblocks'
p35585
NsS'parameters'
p35586
(lp35587
(dp35588
S'description'
p35589
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p35590
sS'cpp_type'
p35591
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p35592
sS'default'
p35593
g3
sS'name'
p35594
S'block'
p35595
sS'required'
p35596
I00
sS'group_name'
p35597
Nsa(dp35598
S'description'
p35599
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35600
sS'cpp_type'
p35601
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35602
sS'default'
p35603
g3
sS'name'
p35604
S'boundary'
p35605
sS'required'
p35606
I00
sS'group_name'
p35607
Nsa(dp35608
S'name'
p35609
S'execute_on'
p35610
sS'cpp_type'
p35611
S'MooseEnum'
p35612
sS'default'
p35613
S'timestep'
p35614
sS'description'
p35615
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p35616
sS'required'
p35617
I00
sS'options'
p35618
S'initial residual jacobian timestep timestep_begin custom'
p35619
sS'group_name'
p35620
Nsa(dp35621
S'name'
p35622
S'output'
p35623
sS'cpp_type'
p35624
S'MooseEnum'
p35625
sS'default'
p35626
S'auto'
p35627
sS'description'
p35628
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p35629
sS'required'
p35630
I00
sS'options'
p35631
S'none auto screen file both'
p35632
sS'group_name'
p35633
S'Advanced'
p35634
sa(dp35635
S'description'
p35636
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p35637
sS'cpp_type'
p35638
S'std::vector<OutputName, std::allocator<OutputName> >'
p35639
sS'default'
p35640
g3
sS'name'
p35641
S'outputs'
p35642
sS'required'
p35643
I00
sS'group_name'
p35644
S'Advanced'
p35645
sa(dp35646
S'description'
p35647
S'The seed for the master random number generator\n'
p35648
sS'cpp_type'
p35649
S'unsigned int'
p35650
sS'default'
p35651
S'0'
p35652
sS'name'
p35653
S'seed'
p35654
sS'required'
p35655
I00
sS'group_name'
p35656
S'Advanced'
p35657
sa(dp35658
S'description'
p35659
g3
sS'cpp_type'
p35660
S'std::string'
p35661
sS'default'
p35662
S'NodalProxyMaxValue'
p35663
sS'name'
p35664
S'type'
p35665
sS'required'
p35666
I00
sS'group_name'
p35667
Nsa(dp35668
S'description'
p35669
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35670
sS'cpp_type'
p35671
S'bool'
p35672
sS'default'
p35673
S'0'
p35674
sS'name'
p35675
S'use_displaced_mesh'
p35676
sS'required'
p35677
I00
sS'group_name'
p35678
S'Advanced'
p35679
sa(dp35680
S'description'
p35681
S'The name of the variable that this postprocessor operates on\n'
p35682
sS'cpp_type'
p35683
S'VariableName'
p35684
sS'default'
p35685
g3
sS'name'
p35686
S'variable'
p35687
sS'required'
p35688
I01
sS'group_name'
p35689
NsasS'name'
p35690
S'/UserObjects/NodalProxyMaxValue'
p35691
sa(dp35692
S'description'
p35693
g3
sS'type'
p35694
NsS'subblocks'
p35695
NsS'parameters'
p35696
(lp35697
(dp35698
S'description'
p35699
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p35700
sS'cpp_type'
p35701
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p35702
sS'default'
p35703
g3
sS'name'
p35704
S'block'
p35705
sS'required'
p35706
I00
sS'group_name'
p35707
Nsa(dp35708
S'description'
p35709
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35710
sS'cpp_type'
p35711
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p35712
sS'default'
p35713
g3
sS'name'
p35714
S'boundary'
p35715
sS'required'
p35716
I00
sS'group_name'
p35717
Nsa(dp35718
S'name'
p35719
S'execute_on'
p35720
sS'cpp_type'
p35721
S'MooseEnum'
p35722
sS'default'
p35723
S'timestep'
p35724
sS'description'
p35725
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p35726
sS'required'
p35727
I00
sS'options'
p35728
S'initial residual jacobian timestep timestep_begin custom'
p35729
sS'group_name'
p35730
Nsa(dp35731
S'name'
p35732
S'output'
p35733
sS'cpp_type'
p35734
S'MooseEnum'
p35735
sS'default'
p35736
S'auto'
p35737
sS'description'
p35738
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p35739
sS'required'
p35740
I00
sS'options'
p35741
S'none auto screen file both'
p35742
sS'group_name'
p35743
S'Advanced'
p35744
sa(dp35745
S'description'
p35746
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p35747
sS'cpp_type'
p35748
S'std::vector<OutputName, std::allocator<OutputName> >'
p35749
sS'default'
p35750
g3
sS'name'
p35751
S'outputs'
p35752
sS'required'
p35753
I00
sS'group_name'
p35754
S'Advanced'
p35755
sa(dp35756
S'description'
p35757
S'The seed for the master random number generator\n'
p35758
sS'cpp_type'
p35759
S'unsigned int'
p35760
sS'default'
p35761
S'0'
p35762
sS'name'
p35763
S'seed'
p35764
sS'required'
p35765
I00
sS'group_name'
p35766
S'Advanced'
p35767
sa(dp35768
S'description'
p35769
g3
sS'cpp_type'
p35770
S'std::string'
p35771
sS'default'
p35772
S'NodalSum'
p35773
sS'name'
p35774
S'type'
p35775
sS'required'
p35776
I00
sS'group_name'
p35777
Nsa(dp35778
S'description'
p35779
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35780
sS'cpp_type'
p35781
S'bool'
p35782
sS'default'
p35783
S'0'
p35784
sS'name'
p35785
S'use_displaced_mesh'
p35786
sS'required'
p35787
I00
sS'group_name'
p35788
S'Advanced'
p35789
sa(dp35790
S'description'
p35791
S'The name of the variable that this postprocessor operates on\n'
p35792
sS'cpp_type'
p35793
S'VariableName'
p35794
sS'default'
p35795
g3
sS'name'
p35796
S'variable'
p35797
sS'required'
p35798
I01
sS'group_name'
p35799
NsasS'name'
p35800
S'/UserObjects/NodalSum'
p35801
sa(dp35802
S'description'
p35803
g3
sS'type'
p35804
NsS'subblocks'
p35805
NsS'parameters'
p35806
(lp35807
(dp35808
S'name'
p35809
S'execute_on'
p35810
sS'cpp_type'
p35811
S'MooseEnum'
p35812
sS'default'
p35813
S'timestep'
p35814
sS'description'
p35815
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p35816
sS'required'
p35817
I00
sS'options'
p35818
S'initial residual jacobian timestep timestep_begin custom'
p35819
sS'group_name'
p35820
Nsa(dp35821
S'description'
p35822
S'The ID of the node where we monitor\n'
p35823
sS'cpp_type'
p35824
S'unsigned int'
p35825
sS'default'
p35826
g3
sS'name'
p35827
S'nodeid'
p35828
sS'required'
p35829
I01
sS'group_name'
p35830
Nsa(dp35831
S'name'
p35832
S'output'
p35833
sS'cpp_type'
p35834
S'MooseEnum'
p35835
sS'default'
p35836
S'auto'
p35837
sS'description'
p35838
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p35839
sS'required'
p35840
I00
sS'options'
p35841
S'none auto screen file both'
p35842
sS'group_name'
p35843
S'Advanced'
p35844
sa(dp35845
S'description'
p35846
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p35847
sS'cpp_type'
p35848
S'std::vector<OutputName, std::allocator<OutputName> >'
p35849
sS'default'
p35850
g3
sS'name'
p35851
S'outputs'
p35852
sS'required'
p35853
I00
sS'group_name'
p35854
S'Advanced'
p35855
sa(dp35856
S'description'
p35857
g3
sS'cpp_type'
p35858
S'std::string'
p35859
sS'default'
p35860
S'NodalVariableValue'
p35861
sS'name'
p35862
S'type'
p35863
sS'required'
p35864
I00
sS'group_name'
p35865
Nsa(dp35866
S'description'
p35867
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35868
sS'cpp_type'
p35869
S'bool'
p35870
sS'default'
p35871
S'0'
p35872
sS'name'
p35873
S'use_displaced_mesh'
p35874
sS'required'
p35875
I00
sS'group_name'
p35876
S'Advanced'
p35877
sa(dp35878
S'description'
p35879
S'The variable to be monitored\n'
p35880
sS'cpp_type'
p35881
S'VariableName'
p35882
sS'default'
p35883
g3
sS'name'
p35884
S'variable'
p35885
sS'required'
p35886
I01
sS'group_name'
p35887
NsasS'name'
p35888
S'/UserObjects/NodalVariableValue'
p35889
sa(dp35890
S'description'
p35891
g3
sS'type'
p35892
NsS'subblocks'
p35893
NsS'parameters'
p35894
(lp35895
(dp35896
S'description'
p35897
S'filename for Avrami analysis info (ln time and Avrami)\n'
p35898
sS'cpp_type'
p35899
S'FileName'
p35900
sS'default'
p35901
g3
sS'name'
p35902
S'Avrami_file'
p35903
sS'required'
p35904
I00
sS'group_name'
p35905
Nsa(dp35906
S'description'
p35907
S'An optional file name where bubble volumes can be output.\n'
p35908
sS'cpp_type'
p35909
S'FileName'
p35910
sS'default'
p35911
g3
sS'name'
p35912
S'bubble_volume_file'
p35913
sS'required'
p35914
I00
sS'group_name'
p35915
Nsa(dp35916
S'description'
p35917
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p35918
sS'cpp_type'
p35919
S'bool'
p35920
sS'default'
p35921
S'0'
p35922
sS'name'
p35923
S'condense_map_info'
p35924
sS'required'
p35925
I00
sS'group_name'
p35926
Nsa(dp35927
S'description'
p35928
S'The threshold for which an existing bubble may be extended (defaults to "threshold")\n'
p35929
sS'cpp_type'
p35930
S'double'
p35931
sS'default'
p35932
g3
sS'name'
p35933
S'connecting_threshold'
p35934
sS'required'
p35935
I00
sS'group_name'
p35936
Nsa(dp35937
S'description'
p35938
S'If supplied, will be used to find the scaled threshold of the bubble edges\n'
p35939
sS'cpp_type'
p35940
S'PostprocessorName'
p35941
sS'default'
p35942
g3
sS'name'
p35943
S'elem_avg_value'
p35944
sS'required'
p35945
I00
sS'group_name'
p35946
Nsa(dp35947
S'description'
p35948
S'Instruct the UO to populate the variable index map.\n'
p35949
sS'cpp_type'
p35950
S'bool'
p35951
sS'default'
p35952
S'0'
p35953
sS'name'
p35954
S'enable_var_coloring'
p35955
sS'required'
p35956
I00
sS'group_name'
p35957
Nsa(dp35958
S'description'
p35959
S'Equilibrium volume fraction of 2nd phase for Avrami analysis\n'
p35960
sS'cpp_type'
p35961
S'double'
p35962
sS'default'
p35963
S'-1'
p35964
sS'name'
p35965
S'equil_fraction'
p35966
sS'required'
p35967
I00
sS'group_name'
p35968
Nsa(dp35969
S'name'
p35970
S'execute_on'
p35971
sS'cpp_type'
p35972
S'MooseEnum'
p35973
sS'default'
p35974
S'timestep'
p35975
sS'description'
p35976
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p35977
sS'required'
p35978
I00
sS'options'
p35979
S'initial residual jacobian timestep timestep_begin custom'
p35980
sS'group_name'
p35981
Nsa(dp35982
S'description'
p35983
S'Postprocessor from which to get mesh volume\n'
p35984
sS'cpp_type'
p35985
S'PostprocessorName'
p35986
sS'default'
p35987
g3
sS'name'
p35988
S'mesh_volume'
p35989
sS'required'
p35990
I01
sS'group_name'
p35991
Nsa(dp35992
S'name'
p35993
S'output'
p35994
sS'cpp_type'
p35995
S'MooseEnum'
p35996
sS'default'
p35997
S'auto'
p35998
sS'description'
p35999
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p36000
sS'required'
p36001
I00
sS'options'
p36002
S'none auto screen file both'
p36003
sS'group_name'
p36004
S'Advanced'
p36005
sa(dp36006
S'description'
p36007
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p36008
sS'cpp_type'
p36009
S'std::vector<OutputName, std::allocator<OutputName> >'
p36010
sS'default'
p36011
g3
sS'name'
p36012
S'outputs'
p36013
sS'required'
p36014
I00
sS'group_name'
p36015
S'Advanced'
p36016
sa(dp36017
S'description'
p36018
S'The threshold value for which a new bubble may be started\n'
p36019
sS'cpp_type'
p36020
S'double'
p36021
sS'default'
p36022
S'0.5'
p36023
sS'name'
p36024
S'threshold'
p36025
sS'required'
p36026
I00
sS'group_name'
p36027
Nsa(dp36028
S'description'
p36029
S'Calculate memory usage\n'
p36030
sS'cpp_type'
p36031
S'bool'
p36032
sS'default'
p36033
S'0'
p36034
sS'name'
p36035
S'track_memory_usage'
p36036
sS'required'
p36037
I00
sS'group_name'
p36038
Nsa(dp36039
S'description'
p36040
g3
sS'cpp_type'
p36041
S'std::string'
p36042
sS'default'
p36043
S'NodalVolumeFraction'
p36044
sS'name'
p36045
S'type'
p36046
sS'required'
p36047
I00
sS'group_name'
p36048
Nsa(dp36049
S'description'
p36050
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36051
sS'cpp_type'
p36052
S'bool'
p36053
sS'default'
p36054
S'0'
p36055
sS'name'
p36056
S'use_displaced_mesh'
p36057
sS'required'
p36058
I00
sS'group_name'
p36059
S'Advanced'
p36060
sa(dp36061
S'description'
p36062
S'Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n'
p36063
sS'cpp_type'
p36064
S'bool'
p36065
sS'default'
p36066
S'0'
p36067
sS'name'
p36068
S'use_global_numbering'
p36069
sS'required'
p36070
I00
sS'group_name'
p36071
Nsa(dp36072
S'description'
p36073
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p36074
sS'cpp_type'
p36075
S'bool'
p36076
sS'default'
p36077
S'1'
p36078
sS'name'
p36079
S'use_single_map'
p36080
sS'required'
p36081
I00
sS'group_name'
p36082
Nsa(dp36083
S'description'
p36084
S'Ths variable(s) for which to find connected regions of interests, i.e. "bubbles".\n'
p36085
sS'cpp_type'
p36086
S'std::vector<VariableName>'
p36087
sS'default'
p36088
g3
sS'name'
p36089
S'variable'
p36090
sS'required'
p36091
I01
sS'group_name'
p36092
NsasS'name'
p36093
S'/UserObjects/NodalVolumeFraction'
p36094
sa(dp36095
S'description'
p36096
g3
sS'type'
p36097
NsS'subblocks'
p36098
NsS'parameters'
p36099
(lp36100
(dp36101
S'name'
p36102
S'execute_on'
p36103
sS'cpp_type'
p36104
S'MooseEnum'
p36105
sS'default'
p36106
S'timestep'
p36107
sS'description'
p36108
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36109
sS'required'
p36110
I00
sS'options'
p36111
S'initial residual jacobian timestep timestep_begin custom'
p36112
sS'group_name'
p36113
Nsa(dp36114
S'name'
p36115
S'output'
p36116
sS'cpp_type'
p36117
S'MooseEnum'
p36118
sS'default'
p36119
S'auto'
p36120
sS'description'
p36121
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p36122
sS'required'
p36123
I00
sS'options'
p36124
S'none auto screen file both'
p36125
sS'group_name'
p36126
S'Advanced'
p36127
sa(dp36128
S'description'
p36129
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p36130
sS'cpp_type'
p36131
S'std::vector<OutputName, std::allocator<OutputName> >'
p36132
sS'default'
p36133
g3
sS'name'
p36134
S'outputs'
p36135
sS'required'
p36136
I00
sS'group_name'
p36137
S'Advanced'
p36138
sa(dp36139
S'description'
p36140
g3
sS'cpp_type'
p36141
S'std::string'
p36142
sS'default'
p36143
S'NumDOFs'
p36144
sS'name'
p36145
S'type'
p36146
sS'required'
p36147
I00
sS'group_name'
p36148
Nsa(dp36149
S'description'
p36150
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36151
sS'cpp_type'
p36152
S'bool'
p36153
sS'default'
p36154
S'0'
p36155
sS'name'
p36156
S'use_displaced_mesh'
p36157
sS'required'
p36158
I00
sS'group_name'
p36159
S'Advanced'
p36160
sasS'name'
p36161
S'/UserObjects/NumDOFs'
p36162
sa(dp36163
S'description'
p36164
g3
sS'type'
p36165
NsS'subblocks'
p36166
NsS'parameters'
p36167
(lp36168
(dp36169
S'name'
p36170
S'execute_on'
p36171
sS'cpp_type'
p36172
S'MooseEnum'
p36173
sS'default'
p36174
S'timestep'
p36175
sS'description'
p36176
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36177
sS'required'
p36178
I00
sS'options'
p36179
S'initial residual jacobian timestep timestep_begin custom'
p36180
sS'group_name'
p36181
Nsa(dp36182
S'name'
p36183
S'output'
p36184
sS'cpp_type'
p36185
S'MooseEnum'
p36186
sS'default'
p36187
S'auto'
p36188
sS'description'
p36189
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p36190
sS'required'
p36191
I00
sS'options'
p36192
S'none auto screen file both'
p36193
sS'group_name'
p36194
S'Advanced'
p36195
sa(dp36196
S'description'
p36197
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p36198
sS'cpp_type'
p36199
S'std::vector<OutputName, std::allocator<OutputName> >'
p36200
sS'default'
p36201
g3
sS'name'
p36202
S'outputs'
p36203
sS'required'
p36204
I00
sS'group_name'
p36205
S'Advanced'
p36206
sa(dp36207
S'description'
p36208
g3
sS'cpp_type'
p36209
S'std::string'
p36210
sS'default'
p36211
S'NumElems'
p36212
sS'name'
p36213
S'type'
p36214
sS'required'
p36215
I00
sS'group_name'
p36216
Nsa(dp36217
S'description'
p36218
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36219
sS'cpp_type'
p36220
S'bool'
p36221
sS'default'
p36222
S'0'
p36223
sS'name'
p36224
S'use_displaced_mesh'
p36225
sS'required'
p36226
I00
sS'group_name'
p36227
S'Advanced'
p36228
sasS'name'
p36229
S'/UserObjects/NumElems'
p36230
sa(dp36231
S'description'
p36232
g3
sS'type'
p36233
NsS'subblocks'
p36234
NsS'parameters'
p36235
(lp36236
(dp36237
S'name'
p36238
S'execute_on'
p36239
sS'cpp_type'
p36240
S'MooseEnum'
p36241
sS'default'
p36242
S'timestep'
p36243
sS'description'
p36244
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36245
sS'required'
p36246
I00
sS'options'
p36247
S'initial residual jacobian timestep timestep_begin custom'
p36248
sS'group_name'
p36249
Nsa(dp36250
S'name'
p36251
S'output'
p36252
sS'cpp_type'
p36253
S'MooseEnum'
p36254
sS'default'
p36255
S'auto'
p36256
sS'description'
p36257
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p36258
sS'required'
p36259
I00
sS'options'
p36260
S'none auto screen file both'
p36261
sS'group_name'
p36262
S'Advanced'
p36263
sa(dp36264
S'description'
p36265
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p36266
sS'cpp_type'
p36267
S'std::vector<OutputName, std::allocator<OutputName> >'
p36268
sS'default'
p36269
g3
sS'name'
p36270
S'outputs'
p36271
sS'required'
p36272
I00
sS'group_name'
p36273
S'Advanced'
p36274
sa(dp36275
S'description'
p36276
g3
sS'cpp_type'
p36277
S'std::string'
p36278
sS'default'
p36279
S'NumLinearIterations'
p36280
sS'name'
p36281
S'type'
p36282
sS'required'
p36283
I00
sS'group_name'
p36284
Nsa(dp36285
S'description'
p36286
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36287
sS'cpp_type'
p36288
S'bool'
p36289
sS'default'
p36290
S'0'
p36291
sS'name'
p36292
S'use_displaced_mesh'
p36293
sS'required'
p36294
I00
sS'group_name'
p36295
S'Advanced'
p36296
sasS'name'
p36297
S'/UserObjects/NumLinearIterations'
p36298
sa(dp36299
S'description'
p36300
g3
sS'type'
p36301
NsS'subblocks'
p36302
NsS'parameters'
p36303
(lp36304
(dp36305
S'name'
p36306
S'execute_on'
p36307
sS'cpp_type'
p36308
S'MooseEnum'
p36309
sS'default'
p36310
S'timestep'
p36311
sS'description'
p36312
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36313
sS'required'
p36314
I00
sS'options'
p36315
S'initial residual jacobian timestep timestep_begin custom'
p36316
sS'group_name'
p36317
Nsa(dp36318
S'name'
p36319
S'output'
p36320
sS'cpp_type'
p36321
S'MooseEnum'
p36322
sS'default'
p36323
S'auto'
p36324
sS'description'
p36325
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p36326
sS'required'
p36327
I00
sS'options'
p36328
S'none auto screen file both'
p36329
sS'group_name'
p36330
S'Advanced'
p36331
sa(dp36332
S'description'
p36333
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p36334
sS'cpp_type'
p36335
S'std::vector<OutputName, std::allocator<OutputName> >'
p36336
sS'default'
p36337
g3
sS'name'
p36338
S'outputs'
p36339
sS'required'
p36340
I00
sS'group_name'
p36341
S'Advanced'
p36342
sa(dp36343
S'description'
p36344
g3
sS'cpp_type'
p36345
S'std::string'
p36346
sS'default'
p36347
S'NumNodes'
p36348
sS'name'
p36349
S'type'
p36350
sS'required'
p36351
I00
sS'group_name'
p36352
Nsa(dp36353
S'description'
p36354
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36355
sS'cpp_type'
p36356
S'bool'
p36357
sS'default'
p36358
S'0'
p36359
sS'name'
p36360
S'use_displaced_mesh'
p36361
sS'required'
p36362
I00
sS'group_name'
p36363
S'Advanced'
p36364
sasS'name'
p36365
S'/UserObjects/NumNodes'
p36366
sa(dp36367
S'description'
p36368
g3
sS'type'
p36369
NsS'subblocks'
p36370
NsS'parameters'
p36371
(lp36372
(dp36373
S'name'
p36374
S'execute_on'
p36375
sS'cpp_type'
p36376
S'MooseEnum'
p36377
sS'default'
p36378
S'timestep'
p36379
sS'description'
p36380
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36381
sS'required'
p36382
I00
sS'options'
p36383
S'initial residual jacobian timestep timestep_begin custom'
p36384
sS'group_name'
p36385
Nsa(dp36386
S'name'
p36387
S'output'
p36388
sS'cpp_type'
p36389
S'MooseEnum'
p36390
sS'default'
p36391
S'auto'
p36392
sS'description'
p36393
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p36394
sS'required'
p36395
I00
sS'options'
p36396
S'none auto screen file both'
p36397
sS'group_name'
p36398
S'Advanced'
p36399
sa(dp36400
S'description'
p36401
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p36402
sS'cpp_type'
p36403
S'std::vector<OutputName, std::allocator<OutputName> >'
p36404
sS'default'
p36405
g3
sS'name'
p36406
S'outputs'
p36407
sS'required'
p36408
I00
sS'group_name'
p36409
S'Advanced'
p36410
sa(dp36411
S'description'
p36412
g3
sS'cpp_type'
p36413
S'std::string'
p36414
sS'default'
p36415
S'NumNonlinearIterations'
p36416
sS'name'
p36417
S'type'
p36418
sS'required'
p36419
I00
sS'group_name'
p36420
Nsa(dp36421
S'description'
p36422
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36423
sS'cpp_type'
p36424
S'bool'
p36425
sS'default'
p36426
S'0'
p36427
sS'name'
p36428
S'use_displaced_mesh'
p36429
sS'required'
p36430
I00
sS'group_name'
p36431
S'Advanced'
p36432
sasS'name'
p36433
S'/UserObjects/NumNonlinearIterations'
p36434
sa(dp36435
S'description'
p36436
g3
sS'type'
p36437
NsS'subblocks'
p36438
NsS'parameters'
p36439
(lp36440
(dp36441
S'name'
p36442
S'execute_on'
p36443
sS'cpp_type'
p36444
S'MooseEnum'
p36445
sS'default'
p36446
S'timestep'
p36447
sS'description'
p36448
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36449
sS'required'
p36450
I00
sS'options'
p36451
S'initial residual jacobian timestep timestep_begin custom'
p36452
sS'group_name'
p36453
Nsa(dp36454
S'name'
p36455
S'output'
p36456
sS'cpp_type'
p36457
S'MooseEnum'
p36458
sS'default'
p36459
S'auto'
p36460
sS'description'
p36461
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p36462
sS'required'
p36463
I00
sS'options'
p36464
S'none auto screen file both'
p36465
sS'group_name'
p36466
S'Advanced'
p36467
sa(dp36468
S'description'
p36469
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p36470
sS'cpp_type'
p36471
S'std::vector<OutputName, std::allocator<OutputName> >'
p36472
sS'default'
p36473
g3
sS'name'
p36474
S'outputs'
p36475
sS'required'
p36476
I00
sS'group_name'
p36477
S'Advanced'
p36478
sa(dp36479
S'description'
p36480
g3
sS'cpp_type'
p36481
S'std::string'
p36482
sS'default'
p36483
S'NumResidualEvaluations'
p36484
sS'name'
p36485
S'type'
p36486
sS'required'
p36487
I00
sS'group_name'
p36488
Nsa(dp36489
S'description'
p36490
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36491
sS'cpp_type'
p36492
S'bool'
p36493
sS'default'
p36494
S'0'
p36495
sS'name'
p36496
S'use_displaced_mesh'
p36497
sS'required'
p36498
I00
sS'group_name'
p36499
S'Advanced'
p36500
sasS'name'
p36501
S'/UserObjects/NumResidualEvaluations'
p36502
sa(dp36503
S'description'
p36504
g3
sS'type'
p36505
NsS'subblocks'
p36506
NsS'parameters'
p36507
(lp36508
(dp36509
S'name'
p36510
S'execute_on'
p36511
sS'cpp_type'
p36512
S'MooseEnum'
p36513
sS'default'
p36514
S'timestep'
p36515
sS'description'
p36516
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36517
sS'required'
p36518
I00
sS'options'
p36519
S'initial residual jacobian timestep timestep_begin custom'
p36520
sS'group_name'
p36521
Nsa(dp36522
S'name'
p36523
S'output'
p36524
sS'cpp_type'
p36525
S'MooseEnum'
p36526
sS'default'
p36527
S'auto'
p36528
sS'description'
p36529
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p36530
sS'required'
p36531
I00
sS'options'
p36532
S'none auto screen file both'
p36533
sS'group_name'
p36534
S'Advanced'
p36535
sa(dp36536
S'description'
p36537
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p36538
sS'cpp_type'
p36539
S'std::vector<OutputName, std::allocator<OutputName> >'
p36540
sS'default'
p36541
g3
sS'name'
p36542
S'outputs'
p36543
sS'required'
p36544
I00
sS'group_name'
p36545
S'Advanced'
p36546
sa(dp36547
S'name'
p36548
S'system'
p36549
sS'cpp_type'
p36550
S'MooseEnum'
p36551
sS'default'
p36552
S'nonlinear'
p36553
sS'description'
p36554
S'The system for which you want to print the number of variables.\n'
p36555
sS'required'
p36556
I00
sS'options'
p36557
S'nonlinear auxiliary'
p36558
sS'group_name'
p36559
Nsa(dp36560
S'description'
p36561
g3
sS'cpp_type'
p36562
S'std::string'
p36563
sS'default'
p36564
S'NumVars'
p36565
sS'name'
p36566
S'type'
p36567
sS'required'
p36568
I00
sS'group_name'
p36569
Nsa(dp36570
S'description'
p36571
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36572
sS'cpp_type'
p36573
S'bool'
p36574
sS'default'
p36575
S'0'
p36576
sS'name'
p36577
S'use_displaced_mesh'
p36578
sS'required'
p36579
I00
sS'group_name'
p36580
S'Advanced'
p36581
sasS'name'
p36582
S'/UserObjects/NumVars'
p36583
sa(dp36584
S'description'
p36585
g3
sS'type'
p36586
NsS'subblocks'
p36587
NsS'parameters'
p36588
(lp36589
(dp36590
S'name'
p36591
S'column'
p36592
sS'cpp_type'
p36593
S'MooseEnum'
p36594
sS'default'
p36595
g3
sS'description'
p36596
S'The column you want the value of.\n'
p36597
sS'required'
p36598
I01
sS'options'
p36599
S'n_calls total_time average_time total_time_with_sub average_time_with_sub percent_of_active_time percent_of_active_time_with_sub'
p36600
sS'group_name'
p36601
Nsa(dp36602
S'description'
p36603
S'The name of the event.\n'
p36604
sS'cpp_type'
p36605
S'std::string'
p36606
sS'default'
p36607
g3
sS'name'
p36608
S'event'
p36609
sS'required'
p36610
I01
sS'group_name'
p36611
Nsa(dp36612
S'name'
p36613
S'execute_on'
p36614
sS'cpp_type'
p36615
S'MooseEnum'
p36616
sS'default'
p36617
S'timestep'
p36618
sS'description'
p36619
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36620
sS'required'
p36621
I00
sS'options'
p36622
S'initial residual jacobian timestep timestep_begin custom'
p36623
sS'group_name'
p36624
Nsa(dp36625
S'name'
p36626
S'output'
p36627
sS'cpp_type'
p36628
S'MooseEnum'
p36629
sS'default'
p36630
S'auto'
p36631
sS'description'
p36632
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p36633
sS'required'
p36634
I00
sS'options'
p36635
S'none auto screen file both'
p36636
sS'group_name'
p36637
S'Advanced'
p36638
sa(dp36639
S'description'
p36640
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p36641
sS'cpp_type'
p36642
S'std::vector<OutputName, std::allocator<OutputName> >'
p36643
sS'default'
p36644
g3
sS'name'
p36645
S'outputs'
p36646
sS'required'
p36647
I00
sS'group_name'
p36648
S'Advanced'
p36649
sa(dp36650
S'description'
p36651
g3
sS'cpp_type'
p36652
S'std::string'
p36653
sS'default'
p36654
S'PerformanceData'
p36655
sS'name'
p36656
S'type'
p36657
sS'required'
p36658
I00
sS'group_name'
p36659
Nsa(dp36660
S'description'
p36661
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36662
sS'cpp_type'
p36663
S'bool'
p36664
sS'default'
p36665
S'0'
p36666
sS'name'
p36667
S'use_displaced_mesh'
p36668
sS'required'
p36669
I00
sS'group_name'
p36670
S'Advanced'
p36671
sasS'name'
p36672
S'/UserObjects/PerformanceData'
p36673
sa(dp36674
S'description'
p36675
g3
sS'type'
p36676
NsS'subblocks'
p36677
NsS'parameters'
p36678
(lp36679
(dp36680
S'name'
p36681
S'execute_on'
p36682
sS'cpp_type'
p36683
S'MooseEnum'
p36684
sS'default'
p36685
S'timestep'
p36686
sS'description'
p36687
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36688
sS'required'
p36689
I00
sS'options'
p36690
S'initial residual jacobian timestep timestep_begin custom'
p36691
sS'group_name'
p36692
Nsa(dp36693
S'description'
p36694
S'Name of the function to plot (i.e. sample)\n'
p36695
sS'cpp_type'
p36696
S'FunctionName'
p36697
sS'default'
p36698
g3
sS'name'
p36699
S'function'
p36700
sS'required'
p36701
I01
sS'group_name'
p36702
Nsa(dp36703
S'name'
p36704
S'output'
p36705
sS'cpp_type'
p36706
S'MooseEnum'
p36707
sS'default'
p36708
S'auto'
p36709
sS'description'
p36710
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p36711
sS'required'
p36712
I00
sS'options'
p36713
S'none auto screen file both'
p36714
sS'group_name'
p36715
S'Advanced'
p36716
sa(dp36717
S'description'
p36718
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p36719
sS'cpp_type'
p36720
S'std::vector<OutputName, std::allocator<OutputName> >'
p36721
sS'default'
p36722
g3
sS'name'
p36723
S'outputs'
p36724
sS'required'
p36725
I00
sS'group_name'
p36726
S'Advanced'
p36727
sa(dp36728
S'description'
p36729
S'A point in space to be given to the function\n'
p36730
sS'cpp_type'
p36731
S'libMesh::Point'
p36732
sS'default'
p36733
g3
sS'name'
p36734
S'point'
p36735
sS'required'
p36736
I00
sS'group_name'
p36737
Nsa(dp36738
S'description'
p36739
S'A scale factor to be applied to the function\n'
p36740
sS'cpp_type'
p36741
S'double'
p36742
sS'default'
p36743
S'1'
p36744
sS'name'
p36745
S'scale_factor'
p36746
sS'required'
p36747
I00
sS'group_name'
p36748
Nsa(dp36749
S'description'
p36750
g3
sS'cpp_type'
p36751
S'std::string'
p36752
sS'default'
p36753
S'PlotFunction'
p36754
sS'name'
p36755
S'type'
p36756
sS'required'
p36757
I00
sS'group_name'
p36758
Nsa(dp36759
S'description'
p36760
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36761
sS'cpp_type'
p36762
S'bool'
p36763
sS'default'
p36764
S'0'
p36765
sS'name'
p36766
S'use_displaced_mesh'
p36767
sS'required'
p36768
I00
sS'group_name'
p36769
S'Advanced'
p36770
sasS'name'
p36771
S'/UserObjects/PlotFunction'
p36772
sa(dp36773
S'description'
p36774
g3
sS'type'
p36775
NsS'subblocks'
p36776
NsS'parameters'
p36777
(lp36778
(dp36779
S'name'
p36780
S'execute_on'
p36781
sS'cpp_type'
p36782
S'MooseEnum'
p36783
sS'default'
p36784
S'timestep'
p36785
sS'description'
p36786
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36787
sS'required'
p36788
I00
sS'options'
p36789
S'initial residual jacobian timestep timestep_begin custom'
p36790
sS'group_name'
p36791
Nsa(dp36792
S'name'
p36793
S'output'
p36794
sS'cpp_type'
p36795
S'MooseEnum'
p36796
sS'default'
p36797
S'auto'
p36798
sS'description'
p36799
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p36800
sS'required'
p36801
I00
sS'options'
p36802
S'none auto screen file both'
p36803
sS'group_name'
p36804
S'Advanced'
p36805
sa(dp36806
S'description'
p36807
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p36808
sS'cpp_type'
p36809
S'std::vector<OutputName, std::allocator<OutputName> >'
p36810
sS'default'
p36811
g3
sS'name'
p36812
S'outputs'
p36813
sS'required'
p36814
I00
sS'group_name'
p36815
S'Advanced'
p36816
sa(dp36817
S'description'
p36818
S'The physical point where the solution will be evaluated.\n'
p36819
sS'cpp_type'
p36820
S'libMesh::Point'
p36821
sS'default'
p36822
g3
sS'name'
p36823
S'point'
p36824
sS'required'
p36825
I01
sS'group_name'
p36826
Nsa(dp36827
S'description'
p36828
g3
sS'cpp_type'
p36829
S'std::string'
p36830
sS'default'
p36831
S'PointValue'
p36832
sS'name'
p36833
S'type'
p36834
sS'required'
p36835
I00
sS'group_name'
p36836
Nsa(dp36837
S'description'
p36838
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36839
sS'cpp_type'
p36840
S'bool'
p36841
sS'default'
p36842
S'0'
p36843
sS'name'
p36844
S'use_displaced_mesh'
p36845
sS'required'
p36846
I00
sS'group_name'
p36847
S'Advanced'
p36848
sa(dp36849
S'description'
p36850
S'The name of the variable that this postprocessor operates on.\n'
p36851
sS'cpp_type'
p36852
S'VariableName'
p36853
sS'default'
p36854
g3
sS'name'
p36855
S'variable'
p36856
sS'required'
p36857
I01
sS'group_name'
p36858
NsasS'name'
p36859
S'/UserObjects/PointValue'
p36860
sa(dp36861
S'description'
p36862
g3
sS'type'
p36863
NsS'subblocks'
p36864
NsS'parameters'
p36865
(lp36866
(dp36867
S'name'
p36868
S'execute_on'
p36869
sS'cpp_type'
p36870
S'MooseEnum'
p36871
sS'default'
p36872
S'timestep'
p36873
sS'description'
p36874
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36875
sS'required'
p36876
I00
sS'options'
p36877
S'initial residual jacobian timestep timestep_begin custom'
p36878
sS'group_name'
p36879
Nsa(dp36880
S'name'
p36881
S'output'
p36882
sS'cpp_type'
p36883
S'MooseEnum'
p36884
sS'default'
p36885
S'auto'
p36886
sS'description'
p36887
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p36888
sS'required'
p36889
I00
sS'options'
p36890
S'none auto screen file both'
p36891
sS'group_name'
p36892
S'Advanced'
p36893
sa(dp36894
S'description'
p36895
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p36896
sS'cpp_type'
p36897
S'std::vector<OutputName, std::allocator<OutputName> >'
p36898
sS'default'
p36899
g3
sS'name'
p36900
S'outputs'
p36901
sS'required'
p36902
I00
sS'group_name'
p36903
S'Advanced'
p36904
sa(dp36905
S'description'
p36906
S'Name of the parameter to be exposed\n'
p36907
sS'cpp_type'
p36908
S'std::string'
p36909
sS'default'
p36910
g3
sS'name'
p36911
S'param_name'
p36912
sS'required'
p36913
I01
sS'group_name'
p36914
Nsa(dp36915
S'description'
p36916
g3
sS'cpp_type'
p36917
S'std::string'
p36918
sS'default'
p36919
S'ProblemRealParameter'
p36920
sS'name'
p36921
S'type'
p36922
sS'required'
p36923
I00
sS'group_name'
p36924
Nsa(dp36925
S'description'
p36926
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36927
sS'cpp_type'
p36928
S'bool'
p36929
sS'default'
p36930
S'0'
p36931
sS'name'
p36932
S'use_displaced_mesh'
p36933
sS'required'
p36934
I00
sS'group_name'
p36935
S'Advanced'
p36936
sasS'name'
p36937
S'/UserObjects/ProblemRealParameter'
p36938
sa(dp36939
S'description'
p36940
g3
sS'type'
p36941
NsS'subblocks'
p36942
NsS'parameters'
p36943
(lp36944
(dp36945
S'description'
p36946
S'The default value\n'
p36947
sS'cpp_type'
p36948
S'double'
p36949
sS'default'
p36950
g3
sS'name'
p36951
S'default'
p36952
sS'required'
p36953
I00
sS'group_name'
p36954
Nsa(dp36955
S'name'
p36956
S'execute_on'
p36957
sS'cpp_type'
p36958
S'MooseEnum'
p36959
sS'default'
p36960
S'timestep'
p36961
sS'description'
p36962
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p36963
sS'required'
p36964
I00
sS'options'
p36965
S'initial residual jacobian timestep timestep_begin custom'
p36966
sS'group_name'
p36967
Nsa(dp36968
S'name'
p36969
S'output'
p36970
sS'cpp_type'
p36971
S'MooseEnum'
p36972
sS'default'
p36973
S'auto'
p36974
sS'description'
p36975
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p36976
sS'required'
p36977
I00
sS'options'
p36978
S'none auto screen file both'
p36979
sS'group_name'
p36980
S'Advanced'
p36981
sa(dp36982
S'description'
p36983
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p36984
sS'cpp_type'
p36985
S'std::vector<OutputName, std::allocator<OutputName> >'
p36986
sS'default'
p36987
g3
sS'name'
p36988
S'outputs'
p36989
sS'required'
p36990
I00
sS'group_name'
p36991
S'Advanced'
p36992
sa(dp36993
S'description'
p36994
g3
sS'cpp_type'
p36995
S'std::string'
p36996
sS'default'
p36997
S'Receiver'
p36998
sS'name'
p36999
S'type'
p37000
sS'required'
p37001
I00
sS'group_name'
p37002
Nsa(dp37003
S'description'
p37004
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37005
sS'cpp_type'
p37006
S'bool'
p37007
sS'default'
p37008
S'0'
p37009
sS'name'
p37010
S'use_displaced_mesh'
p37011
sS'required'
p37012
I00
sS'group_name'
p37013
S'Advanced'
p37014
sasS'name'
p37015
S'/UserObjects/Receiver'
p37016
sa(dp37017
S'description'
p37018
g3
sS'type'
p37019
NsS'subblocks'
p37020
NsS'parameters'
p37021
(lp37022
(dp37023
S'name'
p37024
S'execute_on'
p37025
sS'cpp_type'
p37026
S'MooseEnum'
p37027
sS'default'
p37028
S'timestep'
p37029
sS'description'
p37030
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p37031
sS'required'
p37032
I00
sS'options'
p37033
S'initial residual jacobian timestep timestep_begin custom'
p37034
sS'group_name'
p37035
Nsa(dp37036
S'name'
p37037
S'output'
p37038
sS'cpp_type'
p37039
S'MooseEnum'
p37040
sS'default'
p37041
S'auto'
p37042
sS'description'
p37043
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p37044
sS'required'
p37045
I00
sS'options'
p37046
S'none auto screen file both'
p37047
sS'group_name'
p37048
S'Advanced'
p37049
sa(dp37050
S'description'
p37051
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p37052
sS'cpp_type'
p37053
S'std::vector<OutputName, std::allocator<OutputName> >'
p37054
sS'default'
p37055
g3
sS'name'
p37056
S'outputs'
p37057
sS'required'
p37058
I00
sS'group_name'
p37059
S'Advanced'
p37060
sa(dp37061
S'description'
p37062
g3
sS'cpp_type'
p37063
S'std::string'
p37064
sS'default'
p37065
S'Residual'
p37066
sS'name'
p37067
S'type'
p37068
sS'required'
p37069
I00
sS'group_name'
p37070
Nsa(dp37071
S'description'
p37072
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37073
sS'cpp_type'
p37074
S'bool'
p37075
sS'default'
p37076
S'0'
p37077
sS'name'
p37078
S'use_displaced_mesh'
p37079
sS'required'
p37080
I00
sS'group_name'
p37081
S'Advanced'
p37082
sasS'name'
p37083
S'/UserObjects/Residual'
p37084
sa(dp37085
S'description'
p37086
g3
sS'type'
p37087
NsS'subblocks'
p37088
NsS'parameters'
p37089
(lp37090
(dp37091
S'name'
p37092
S'execute_on'
p37093
sS'cpp_type'
p37094
S'MooseEnum'
p37095
sS'default'
p37096
S'timestep'
p37097
sS'description'
p37098
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p37099
sS'required'
p37100
I00
sS'options'
p37101
S'initial residual jacobian timestep timestep_begin custom'
p37102
sS'group_name'
p37103
Nsa(dp37104
S'name'
p37105
S'output'
p37106
sS'cpp_type'
p37107
S'MooseEnum'
p37108
sS'default'
p37109
S'auto'
p37110
sS'description'
p37111
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p37112
sS'required'
p37113
I00
sS'options'
p37114
S'none auto screen file both'
p37115
sS'group_name'
p37116
S'Advanced'
p37117
sa(dp37118
S'description'
p37119
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p37120
sS'cpp_type'
p37121
S'std::vector<OutputName, std::allocator<OutputName> >'
p37122
sS'default'
p37123
g3
sS'name'
p37124
S'outputs'
p37125
sS'required'
p37126
I00
sS'group_name'
p37127
S'Advanced'
p37128
sa(dp37129
S'name'
p37130
S'time_type'
p37131
sS'cpp_type'
p37132
S'MooseEnum'
p37133
sS'default'
p37134
g3
sS'description'
p37135
S'Whether to output the total elapsed or just the active time\n'
p37136
sS'required'
p37137
I01
sS'options'
p37138
S'alive active'
p37139
sS'group_name'
p37140
Nsa(dp37141
S'description'
p37142
g3
sS'cpp_type'
p37143
S'std::string'
p37144
sS'default'
p37145
S'RunTime'
p37146
sS'name'
p37147
S'type'
p37148
sS'required'
p37149
I00
sS'group_name'
p37150
Nsa(dp37151
S'description'
p37152
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37153
sS'cpp_type'
p37154
S'bool'
p37155
sS'default'
p37156
S'0'
p37157
sS'name'
p37158
S'use_displaced_mesh'
p37159
sS'required'
p37160
I00
sS'group_name'
p37161
S'Advanced'
p37162
sasS'name'
p37163
S'/UserObjects/RunTime'
p37164
sa(dp37165
S'description'
p37166
g3
sS'type'
p37167
NsS'subblocks'
p37168
NsS'parameters'
p37169
(lp37170
(dp37171
S'name'
p37172
S'execute_on'
p37173
sS'cpp_type'
p37174
S'MooseEnum'
p37175
sS'default'
p37176
S'timestep'
p37177
sS'description'
p37178
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p37179
sS'required'
p37180
I00
sS'options'
p37181
S'initial residual jacobian timestep timestep_begin custom'
p37182
sS'group_name'
p37183
Nsa(dp37184
S'description'
p37185
S'The analytic solution to compare against\n'
p37186
sS'cpp_type'
p37187
S'FunctionName'
p37188
sS'default'
p37189
g3
sS'name'
p37190
S'function'
p37191
sS'required'
p37192
I01
sS'group_name'
p37193
Nsa(dp37194
S'name'
p37195
S'output'
p37196
sS'cpp_type'
p37197
S'MooseEnum'
p37198
sS'default'
p37199
S'auto'
p37200
sS'description'
p37201
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p37202
sS'required'
p37203
I00
sS'options'
p37204
S'none auto screen file both'
p37205
sS'group_name'
p37206
S'Advanced'
p37207
sa(dp37208
S'description'
p37209
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p37210
sS'cpp_type'
p37211
S'std::vector<OutputName, std::allocator<OutputName> >'
p37212
sS'default'
p37213
g3
sS'name'
p37214
S'outputs'
p37215
sS'required'
p37216
I00
sS'group_name'
p37217
S'Advanced'
p37218
sa(dp37219
S'description'
p37220
g3
sS'cpp_type'
p37221
S'std::string'
p37222
sS'default'
p37223
S'ScalarL2Error'
p37224
sS'name'
p37225
S'type'
p37226
sS'required'
p37227
I00
sS'group_name'
p37228
Nsa(dp37229
S'description'
p37230
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37231
sS'cpp_type'
p37232
S'bool'
p37233
sS'default'
p37234
S'0'
p37235
sS'name'
p37236
S'use_displaced_mesh'
p37237
sS'required'
p37238
I00
sS'group_name'
p37239
S'Advanced'
p37240
sa(dp37241
S'description'
p37242
S'The name of the scalar variable\n'
p37243
sS'cpp_type'
p37244
S'VariableName'
p37245
sS'default'
p37246
g3
sS'name'
p37247
S'variable'
p37248
sS'required'
p37249
I01
sS'group_name'
p37250
NsasS'name'
p37251
S'/UserObjects/ScalarL2Error'
p37252
sa(dp37253
S'description'
p37254
g3
sS'type'
p37255
NsS'subblocks'
p37256
NsS'parameters'
p37257
(lp37258
(dp37259
S'description'
p37260
S'Component to output for this variable\n'
p37261
sS'cpp_type'
p37262
S'unsigned int'
p37263
sS'default'
p37264
S'0'
p37265
sS'name'
p37266
S'component'
p37267
sS'required'
p37268
I00
sS'group_name'
p37269
Nsa(dp37270
S'name'
p37271
S'execute_on'
p37272
sS'cpp_type'
p37273
S'MooseEnum'
p37274
sS'default'
p37275
S'timestep'
p37276
sS'description'
p37277
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p37278
sS'required'
p37279
I00
sS'options'
p37280
S'initial residual jacobian timestep timestep_begin custom'
p37281
sS'group_name'
p37282
Nsa(dp37283
S'name'
p37284
S'output'
p37285
sS'cpp_type'
p37286
S'MooseEnum'
p37287
sS'default'
p37288
S'auto'
p37289
sS'description'
p37290
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p37291
sS'required'
p37292
I00
sS'options'
p37293
S'none auto screen file both'
p37294
sS'group_name'
p37295
S'Advanced'
p37296
sa(dp37297
S'description'
p37298
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p37299
sS'cpp_type'
p37300
S'std::vector<OutputName, std::allocator<OutputName> >'
p37301
sS'default'
p37302
g3
sS'name'
p37303
S'outputs'
p37304
sS'required'
p37305
I00
sS'group_name'
p37306
S'Advanced'
p37307
sa(dp37308
S'description'
p37309
g3
sS'cpp_type'
p37310
S'std::string'
p37311
sS'default'
p37312
S'ScalarVariable'
p37313
sS'name'
p37314
S'type'
p37315
sS'required'
p37316
I00
sS'group_name'
p37317
Nsa(dp37318
S'description'
p37319
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37320
sS'cpp_type'
p37321
S'bool'
p37322
sS'default'
p37323
S'0'
p37324
sS'name'
p37325
S'use_displaced_mesh'
p37326
sS'required'
p37327
I00
sS'group_name'
p37328
S'Advanced'
p37329
sa(dp37330
S'description'
p37331
S'Name of the variable\n'
p37332
sS'cpp_type'
p37333
S'VariableName'
p37334
sS'default'
p37335
g3
sS'name'
p37336
S'variable'
p37337
sS'required'
p37338
I01
sS'group_name'
p37339
NsasS'name'
p37340
S'/UserObjects/ScalarVariable'
p37341
sa(dp37342
S'description'
p37343
g3
sS'type'
p37344
NsS'subblocks'
p37345
NsS'parameters'
p37346
(lp37347
(dp37348
S'description'
p37349
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p37350
sS'cpp_type'
p37351
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p37352
sS'default'
p37353
g3
sS'name'
p37354
S'boundary'
p37355
sS'required'
p37356
I00
sS'group_name'
p37357
Nsa(dp37358
S'name'
p37359
S'execute_on'
p37360
sS'cpp_type'
p37361
S'MooseEnum'
p37362
sS'default'
p37363
S'timestep'
p37364
sS'description'
p37365
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p37366
sS'required'
p37367
I00
sS'options'
p37368
S'initial residual jacobian timestep timestep_begin custom'
p37369
sS'group_name'
p37370
Nsa(dp37371
S'name'
p37372
S'output'
p37373
sS'cpp_type'
p37374
S'MooseEnum'
p37375
sS'default'
p37376
S'auto'
p37377
sS'description'
p37378
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p37379
sS'required'
p37380
I00
sS'options'
p37381
S'none auto screen file both'
p37382
sS'group_name'
p37383
S'Advanced'
p37384
sa(dp37385
S'description'
p37386
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p37387
sS'cpp_type'
p37388
S'std::vector<OutputName, std::allocator<OutputName> >'
p37389
sS'default'
p37390
g3
sS'name'
p37391
S'outputs'
p37392
sS'required'
p37393
I00
sS'group_name'
p37394
S'Advanced'
p37395
sa(dp37396
S'description'
p37397
g3
sS'cpp_type'
p37398
S'std::string'
p37399
sS'default'
p37400
S'SideAverageValue'
p37401
sS'name'
p37402
S'type'
p37403
sS'required'
p37404
I00
sS'group_name'
p37405
Nsa(dp37406
S'description'
p37407
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37408
sS'cpp_type'
p37409
S'bool'
p37410
sS'default'
p37411
S'0'
p37412
sS'name'
p37413
S'use_displaced_mesh'
p37414
sS'required'
p37415
I00
sS'group_name'
p37416
S'Advanced'
p37417
sa(dp37418
S'description'
p37419
S'The name of the variable that this boundary condition applies to\n'
p37420
sS'cpp_type'
p37421
S'VariableName'
p37422
sS'default'
p37423
g3
sS'name'
p37424
S'variable'
p37425
sS'required'
p37426
I01
sS'group_name'
p37427
NsasS'name'
p37428
S'/UserObjects/SideAverageValue'
p37429
sa(dp37430
S'description'
p37431
g3
sS'type'
p37432
NsS'subblocks'
p37433
NsS'parameters'
p37434
(lp37435
(dp37436
S'description'
p37437
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p37438
sS'cpp_type'
p37439
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p37440
sS'default'
p37441
g3
sS'name'
p37442
S'boundary'
p37443
sS'required'
p37444
I00
sS'group_name'
p37445
Nsa(dp37446
S'description'
p37447
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p37448
sS'cpp_type'
p37449
S'std::string'
p37450
sS'default'
p37451
g3
sS'name'
p37452
S'diffusivity'
p37453
sS'required'
p37454
I01
sS'group_name'
p37455
Nsa(dp37456
S'name'
p37457
S'execute_on'
p37458
sS'cpp_type'
p37459
S'MooseEnum'
p37460
sS'default'
p37461
S'timestep'
p37462
sS'description'
p37463
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p37464
sS'required'
p37465
I00
sS'options'
p37466
S'initial residual jacobian timestep timestep_begin custom'
p37467
sS'group_name'
p37468
Nsa(dp37469
S'name'
p37470
S'output'
p37471
sS'cpp_type'
p37472
S'MooseEnum'
p37473
sS'default'
p37474
S'auto'
p37475
sS'description'
p37476
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p37477
sS'required'
p37478
I00
sS'options'
p37479
S'none auto screen file both'
p37480
sS'group_name'
p37481
S'Advanced'
p37482
sa(dp37483
S'description'
p37484
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p37485
sS'cpp_type'
p37486
S'std::vector<OutputName, std::allocator<OutputName> >'
p37487
sS'default'
p37488
g3
sS'name'
p37489
S'outputs'
p37490
sS'required'
p37491
I00
sS'group_name'
p37492
S'Advanced'
p37493
sa(dp37494
S'description'
p37495
g3
sS'cpp_type'
p37496
S'std::string'
p37497
sS'default'
p37498
S'SideFluxAverage'
p37499
sS'name'
p37500
S'type'
p37501
sS'required'
p37502
I00
sS'group_name'
p37503
Nsa(dp37504
S'description'
p37505
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37506
sS'cpp_type'
p37507
S'bool'
p37508
sS'default'
p37509
S'0'
p37510
sS'name'
p37511
S'use_displaced_mesh'
p37512
sS'required'
p37513
I00
sS'group_name'
p37514
S'Advanced'
p37515
sa(dp37516
S'description'
p37517
S'The name of the variable that this boundary condition applies to\n'
p37518
sS'cpp_type'
p37519
S'VariableName'
p37520
sS'default'
p37521
g3
sS'name'
p37522
S'variable'
p37523
sS'required'
p37524
I01
sS'group_name'
p37525
NsasS'name'
p37526
S'/UserObjects/SideFluxAverage'
p37527
sa(dp37528
S'description'
p37529
g3
sS'type'
p37530
NsS'subblocks'
p37531
NsS'parameters'
p37532
(lp37533
(dp37534
S'description'
p37535
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p37536
sS'cpp_type'
p37537
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p37538
sS'default'
p37539
g3
sS'name'
p37540
S'boundary'
p37541
sS'required'
p37542
I00
sS'group_name'
p37543
Nsa(dp37544
S'description'
p37545
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p37546
sS'cpp_type'
p37547
S'std::string'
p37548
sS'default'
p37549
g3
sS'name'
p37550
S'diffusivity'
p37551
sS'required'
p37552
I01
sS'group_name'
p37553
Nsa(dp37554
S'name'
p37555
S'execute_on'
p37556
sS'cpp_type'
p37557
S'MooseEnum'
p37558
sS'default'
p37559
S'timestep'
p37560
sS'description'
p37561
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p37562
sS'required'
p37563
I00
sS'options'
p37564
S'initial residual jacobian timestep timestep_begin custom'
p37565
sS'group_name'
p37566
Nsa(dp37567
S'name'
p37568
S'output'
p37569
sS'cpp_type'
p37570
S'MooseEnum'
p37571
sS'default'
p37572
S'auto'
p37573
sS'description'
p37574
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p37575
sS'required'
p37576
I00
sS'options'
p37577
S'none auto screen file both'
p37578
sS'group_name'
p37579
S'Advanced'
p37580
sa(dp37581
S'description'
p37582
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p37583
sS'cpp_type'
p37584
S'std::vector<OutputName, std::allocator<OutputName> >'
p37585
sS'default'
p37586
g3
sS'name'
p37587
S'outputs'
p37588
sS'required'
p37589
I00
sS'group_name'
p37590
S'Advanced'
p37591
sa(dp37592
S'description'
p37593
g3
sS'cpp_type'
p37594
S'std::string'
p37595
sS'default'
p37596
S'SideFluxIntegral'
p37597
sS'name'
p37598
S'type'
p37599
sS'required'
p37600
I00
sS'group_name'
p37601
Nsa(dp37602
S'description'
p37603
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37604
sS'cpp_type'
p37605
S'bool'
p37606
sS'default'
p37607
S'0'
p37608
sS'name'
p37609
S'use_displaced_mesh'
p37610
sS'required'
p37611
I00
sS'group_name'
p37612
S'Advanced'
p37613
sa(dp37614
S'description'
p37615
S'The name of the variable that this boundary condition applies to\n'
p37616
sS'cpp_type'
p37617
S'VariableName'
p37618
sS'default'
p37619
g3
sS'name'
p37620
S'variable'
p37621
sS'required'
p37622
I01
sS'group_name'
p37623
NsasS'name'
p37624
S'/UserObjects/SideFluxIntegral'
p37625
sa(dp37626
S'description'
p37627
g3
sS'type'
p37628
NsS'subblocks'
p37629
NsS'parameters'
p37630
(lp37631
(dp37632
S'description'
p37633
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p37634
sS'cpp_type'
p37635
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p37636
sS'default'
p37637
g3
sS'name'
p37638
S'boundary'
p37639
sS'required'
p37640
I00
sS'group_name'
p37641
Nsa(dp37642
S'name'
p37643
S'execute_on'
p37644
sS'cpp_type'
p37645
S'MooseEnum'
p37646
sS'default'
p37647
S'timestep'
p37648
sS'description'
p37649
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p37650
sS'required'
p37651
I00
sS'options'
p37652
S'initial residual jacobian timestep timestep_begin custom'
p37653
sS'group_name'
p37654
Nsa(dp37655
S'name'
p37656
S'output'
p37657
sS'cpp_type'
p37658
S'MooseEnum'
p37659
sS'default'
p37660
S'auto'
p37661
sS'description'
p37662
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p37663
sS'required'
p37664
I00
sS'options'
p37665
S'none auto screen file both'
p37666
sS'group_name'
p37667
S'Advanced'
p37668
sa(dp37669
S'description'
p37670
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p37671
sS'cpp_type'
p37672
S'std::vector<OutputName, std::allocator<OutputName> >'
p37673
sS'default'
p37674
g3
sS'name'
p37675
S'outputs'
p37676
sS'required'
p37677
I00
sS'group_name'
p37678
S'Advanced'
p37679
sa(dp37680
S'description'
p37681
g3
sS'cpp_type'
p37682
S'std::string'
p37683
sS'default'
p37684
S'SideIntegralVariablePostprocessor'
p37685
sS'name'
p37686
S'type'
p37687
sS'required'
p37688
I00
sS'group_name'
p37689
Nsa(dp37690
S'description'
p37691
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37692
sS'cpp_type'
p37693
S'bool'
p37694
sS'default'
p37695
S'0'
p37696
sS'name'
p37697
S'use_displaced_mesh'
p37698
sS'required'
p37699
I00
sS'group_name'
p37700
S'Advanced'
p37701
sa(dp37702
S'description'
p37703
S'The name of the variable that this boundary condition applies to\n'
p37704
sS'cpp_type'
p37705
S'VariableName'
p37706
sS'default'
p37707
g3
sS'name'
p37708
S'variable'
p37709
sS'required'
p37710
I01
sS'group_name'
p37711
NsasS'name'
p37712
S'/UserObjects/SideIntegralVariablePostprocessor'
p37713
sa(dp37714
S'description'
p37715
g3
sS'type'
p37716
NsS'subblocks'
p37717
NsS'parameters'
p37718
(lp37719
(dp37720
S'description'
p37721
S'Transformation factors for x,y,z coordiantes (e.g., x + factor)\n'
p37722
sS'cpp_type'
p37723
S'std::vector<double, std::allocator<double> >'
p37724
sS'default'
p37725
S'0 0 0'
p37726
sS'name'
p37727
S'coord_factor'
p37728
sS'required'
p37729
I00
sS'group_name'
p37730
Nsa(dp37731
S'description'
p37732
S'Scaling parameter for x,y,z coordiantes (e.g. x*scale)\n'
p37733
sS'cpp_type'
p37734
S'std::vector<double, std::allocator<double> >'
p37735
sS'default'
p37736
S'1 1 1'
p37737
sS'name'
p37738
S'coord_scale'
p37739
sS'required'
p37740
I00
sS'group_name'
p37741
Nsa(dp37742
S'description'
p37743
S'The name of the element variables from the file you want to use for values.\n'
p37744
sS'cpp_type'
p37745
S'std::vector<std::string, std::allocator<std::string> >'
p37746
sS'default'
p37747
g3
sS'name'
p37748
S'elemental_variables'
p37749
sS'required'
p37750
I00
sS'group_name'
p37751
Nsa(dp37752
S'description'
p37753
S'The name of the file holding the equation system info in xda format (xda only).\n'
p37754
sS'cpp_type'
p37755
S'std::string'
p37756
sS'default'
p37757
g3
sS'name'
p37758
S'es'
p37759
sS'required'
p37760
I00
sS'group_name'
p37761
Nsa(dp37762
S'name'
p37763
S'execute_on'
p37764
sS'cpp_type'
p37765
S'MooseEnum'
p37766
sS'default'
p37767
S'timestep_begin'
p37768
sS'description'
p37769
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p37770
sS'required'
p37771
I00
sS'options'
p37772
S'initial residual jacobian timestep timestep_begin custom'
p37773
sS'group_name'
p37774
Nsa(dp37775
S'description'
p37776
S'The name of the mesh file (must be xda or exodusII file.\n'
p37777
sS'cpp_type'
p37778
S'std::string'
p37779
sS'default'
p37780
g3
sS'name'
p37781
S'mesh'
p37782
sS'required'
p37783
I01
sS'group_name'
p37784
Nsa(dp37785
S'description'
p37786
S'The name of the nodal variables from the file you want to use for values.\n'
p37787
sS'cpp_type'
p37788
S'std::vector<std::string, std::allocator<std::string> >'
p37789
sS'default'
p37790
g3
sS'name'
p37791
S'nodal_variables'
p37792
sS'required'
p37793
I00
sS'group_name'
p37794
Nsa(dp37795
S'description'
p37796
S'The name of the system to pull values out of (xda only).\n'
p37797
sS'cpp_type'
p37798
S'std::string'
p37799
sS'default'
p37800
S'NonlinearSystem'
p37801
sS'name'
p37802
S'system'
p37803
sS'required'
p37804
I00
sS'group_name'
p37805
Nsa(dp37806
S'description'
p37807
S'Index of the single timestep used (exodusII only).  If not supplied, time interpolation will occur.\n'
p37808
sS'cpp_type'
p37809
S'int'
p37810
sS'default'
p37811
S'-1'
p37812
sS'name'
p37813
S'timestep'
p37814
sS'required'
p37815
I00
sS'group_name'
p37816
Nsa(dp37817
S'description'
p37818
g3
sS'cpp_type'
p37819
S'std::string'
p37820
sS'default'
p37821
S'SolutionUserObject'
p37822
sS'name'
p37823
S'type'
p37824
sS'required'
p37825
I00
sS'group_name'
p37826
Nsa(dp37827
S'description'
p37828
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37829
sS'cpp_type'
p37830
S'bool'
p37831
sS'default'
p37832
S'0'
p37833
sS'name'
p37834
S'use_displaced_mesh'
p37835
sS'required'
p37836
I00
sS'group_name'
p37837
S'Advanced'
p37838
sasS'name'
p37839
S'/UserObjects/SolutionUserObject'
p37840
sa(dp37841
S'description'
p37842
g3
sS'type'
p37843
NsS'subblocks'
p37844
NsS'parameters'
p37845
(lp37846
(dp37847
S'name'
p37848
S'execute_on'
p37849
sS'cpp_type'
p37850
S'MooseEnum'
p37851
sS'default'
p37852
S'timestep'
p37853
sS'description'
p37854
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p37855
sS'required'
p37856
I00
sS'options'
p37857
S'initial residual jacobian timestep timestep_begin custom'
p37858
sS'group_name'
p37859
Nsa(dp37860
S'name'
p37861
S'output'
p37862
sS'cpp_type'
p37863
S'MooseEnum'
p37864
sS'default'
p37865
S'auto'
p37866
sS'description'
p37867
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p37868
sS'required'
p37869
I00
sS'options'
p37870
S'none auto screen file both'
p37871
sS'group_name'
p37872
S'Advanced'
p37873
sa(dp37874
S'description'
p37875
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p37876
sS'cpp_type'
p37877
S'std::vector<OutputName, std::allocator<OutputName> >'
p37878
sS'default'
p37879
g3
sS'name'
p37880
S'outputs'
p37881
sS'required'
p37882
I00
sS'group_name'
p37883
S'Advanced'
p37884
sa(dp37885
S'description'
p37886
g3
sS'cpp_type'
p37887
S'std::string'
p37888
sS'default'
p37889
S'TimestepSize'
p37890
sS'name'
p37891
S'type'
p37892
sS'required'
p37893
I00
sS'group_name'
p37894
Nsa(dp37895
S'description'
p37896
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37897
sS'cpp_type'
p37898
S'bool'
p37899
sS'default'
p37900
S'0'
p37901
sS'name'
p37902
S'use_displaced_mesh'
p37903
sS'required'
p37904
I00
sS'group_name'
p37905
S'Advanced'
p37906
sasS'name'
p37907
S'/UserObjects/TimestepSize'
p37908
sa(dp37909
S'description'
p37910
g3
sS'type'
p37911
NsS'subblocks'
p37912
NsS'parameters'
p37913
(lp37914
(dp37915
S'name'
p37916
S'execute_on'
p37917
sS'cpp_type'
p37918
S'MooseEnum'
p37919
sS'default'
p37920
S'timestep'
p37921
sS'description'
p37922
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p37923
sS'required'
p37924
I00
sS'options'
p37925
S'initial residual jacobian timestep timestep_begin custom'
p37926
sS'group_name'
p37927
Nsa(dp37928
S'name'
p37929
S'output'
p37930
sS'cpp_type'
p37931
S'MooseEnum'
p37932
sS'default'
p37933
S'auto'
p37934
sS'description'
p37935
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p37936
sS'required'
p37937
I00
sS'options'
p37938
S'none auto screen file both'
p37939
sS'group_name'
p37940
S'Advanced'
p37941
sa(dp37942
S'description'
p37943
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p37944
sS'cpp_type'
p37945
S'std::vector<OutputName, std::allocator<OutputName> >'
p37946
sS'default'
p37947
g3
sS'name'
p37948
S'outputs'
p37949
sS'required'
p37950
I00
sS'group_name'
p37951
S'Advanced'
p37952
sa(dp37953
S'description'
p37954
g3
sS'cpp_type'
p37955
S'std::string'
p37956
sS'default'
p37957
S'TotalVariableValue'
p37958
sS'name'
p37959
S'type'
p37960
sS'required'
p37961
I00
sS'group_name'
p37962
Nsa(dp37963
S'description'
p37964
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37965
sS'cpp_type'
p37966
S'bool'
p37967
sS'default'
p37968
S'0'
p37969
sS'name'
p37970
S'use_displaced_mesh'
p37971
sS'required'
p37972
I00
sS'group_name'
p37973
S'Advanced'
p37974
sa(dp37975
S'description'
p37976
S'The name of the postprocessor\n'
p37977
sS'cpp_type'
p37978
S'PostprocessorName'
p37979
sS'default'
p37980
g3
sS'name'
p37981
S'value'
p37982
sS'required'
p37983
I00
sS'group_name'
p37984
NsasS'name'
p37985
S'/UserObjects/TotalVariableValue'
p37986
sa(dp37987
S'description'
p37988
g3
sS'type'
p37989
NsS'subblocks'
p37990
NsS'parameters'
p37991
(lp37992
(dp37993
S'description'
p37994
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p37995
sS'cpp_type'
p37996
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p37997
sS'default'
p37998
g3
sS'name'
p37999
S'block'
p38000
sS'required'
p38001
I00
sS'group_name'
p38002
Nsa(dp38003
S'name'
p38004
S'execute_on'
p38005
sS'cpp_type'
p38006
S'MooseEnum'
p38007
sS'default'
p38008
S'timestep'
p38009
sS'description'
p38010
S'Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n'
p38011
sS'required'
p38012
I00
sS'options'
p38013
S'initial residual jacobian timestep timestep_begin custom'
p38014
sS'group_name'
p38015
Nsa(dp38016
S'name'
p38017
S'output'
p38018
sS'cpp_type'
p38019
S'MooseEnum'
p38020
sS'default'
p38021
S'auto'
p38022
sS'description'
p38023
S'The values are: none, screen, file, both, auto (no output, output to screen only, output to files only, output both to screen and files, same as both but no warnings if output options conflict.)\n'
p38024
sS'required'
p38025
I00
sS'options'
p38026
S'none auto screen file both'
p38027
sS'group_name'
p38028
S'Advanced'
p38029
sa(dp38030
S'description'
p38031
S'Vector of output names were you would like to restrict the output of postprocessors\n'
p38032
sS'cpp_type'
p38033
S'std::vector<OutputName, std::allocator<OutputName> >'
p38034
sS'default'
p38035
g3
sS'name'
p38036
S'outputs'
p38037
sS'required'
p38038
I00
sS'group_name'
p38039
S'Advanced'
p38040
sa(dp38041
S'description'
p38042
S'The seed for the master random number generator\n'
p38043
sS'cpp_type'
p38044
S'unsigned int'
p38045
sS'default'
p38046
S'0'
p38047
sS'name'
p38048
S'seed'
p38049
sS'required'
p38050
I00
sS'group_name'
p38051
S'Advanced'
p38052
sa(dp38053
S'description'
p38054
g3
sS'cpp_type'
p38055
S'std::string'
p38056
sS'default'
p38057
S'VolumePostprocessor'
p38058
sS'name'
p38059
S'type'
p38060
sS'required'
p38061
I00
sS'group_name'
p38062
Nsa(dp38063
S'description'
p38064
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38065
sS'cpp_type'
p38066
S'bool'
p38067
sS'default'
p38068
S'0'
p38069
sS'name'
p38070
S'use_displaced_mesh'
p38071
sS'required'
p38072
I00
sS'group_name'
p38073
S'Advanced'
p38074
sasS'name'
p38075
S'/UserObjects/VolumePostprocessor'
p38076
sasS'parameters'
p38077
NsS'name'
p38078
S'/UserObjects'
p38079
sa(dp38080
S'description'
p38081
g3
sS'type'
p38082
NsS'subblocks'
p38083
(lp38084
(dp38085
S'description'
p38086
g3
sS'type'
p38087
NsS'subblocks'
p38088
(lp38089
(dp38090
S'description'
p38091
g3
sS'type'
p38092
NsS'subblocks'
p38093
(lp38094
(dp38095
S'description'
p38096
g3
sS'type'
p38097
NsS'subblocks'
p38098
(lp38099
(dp38100
S'description'
p38101
g3
sS'type'
p38102
NsS'subblocks'
p38103
NsS'parameters'
p38104
(lp38105
(dp38106
S'description'
p38107
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p38108
sS'cpp_type'
p38109
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38110
sS'default'
p38111
g3
sS'name'
p38112
S'block'
p38113
sS'required'
p38114
I00
sS'group_name'
p38115
Nsa(dp38116
S'description'
p38117
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38118
sS'cpp_type'
p38119
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38120
sS'default'
p38121
g3
sS'name'
p38122
S'boundary'
p38123
sS'required'
p38124
I00
sS'group_name'
p38125
Nsa(dp38126
S'description'
p38127
S'The value of the variable inside the box\n'
p38128
sS'cpp_type'
p38129
S'double'
p38130
sS'default'
p38131
S'0'
p38132
sS'name'
p38133
S'inside'
p38134
sS'required'
p38135
I00
sS'group_name'
p38136
Nsa(dp38137
S'description'
p38138
S'The value of the variable outside the box\n'
p38139
sS'cpp_type'
p38140
S'double'
p38141
sS'default'
p38142
S'0'
p38143
sS'name'
p38144
S'outside'
p38145
sS'required'
p38146
I00
sS'group_name'
p38147
Nsa(dp38148
S'description'
p38149
g3
sS'cpp_type'
p38150
S'std::string'
p38151
sS'default'
p38152
S'BoundingBoxIC'
p38153
sS'name'
p38154
S'type'
p38155
sS'required'
p38156
I00
sS'group_name'
p38157
Nsa(dp38158
S'description'
p38159
S'The variable this initial condition is supposed to provide values for.\n'
p38160
sS'cpp_type'
p38161
S'VariableName'
p38162
sS'default'
p38163
g3
sS'name'
p38164
S'variable'
p38165
sS'required'
p38166
I01
sS'group_name'
p38167
Nsa(dp38168
S'description'
p38169
S'The x coordinate of the lower left-hand corner of the box\n'
p38170
sS'cpp_type'
p38171
S'double'
p38172
sS'default'
p38173
g3
sS'name'
p38174
S'x1'
p38175
sS'required'
p38176
I01
sS'group_name'
p38177
Nsa(dp38178
S'description'
p38179
S'The x coordinate of the upper right-hand corner of the box\n'
p38180
sS'cpp_type'
p38181
S'double'
p38182
sS'default'
p38183
g3
sS'name'
p38184
S'x2'
p38185
sS'required'
p38186
I01
sS'group_name'
p38187
Nsa(dp38188
S'description'
p38189
S'The y coordinate of the lower left-hand corner of the box\n'
p38190
sS'cpp_type'
p38191
S'double'
p38192
sS'default'
p38193
g3
sS'name'
p38194
S'y1'
p38195
sS'required'
p38196
I01
sS'group_name'
p38197
Nsa(dp38198
S'description'
p38199
S'The y coordinate of the upper right-hand corner of the box\n'
p38200
sS'cpp_type'
p38201
S'double'
p38202
sS'default'
p38203
g3
sS'name'
p38204
S'y2'
p38205
sS'required'
p38206
I01
sS'group_name'
p38207
Nsa(dp38208
S'description'
p38209
S'The z coordinate of the lower left-hand corner of the box\n'
p38210
sS'cpp_type'
p38211
S'double'
p38212
sS'default'
p38213
S'0'
p38214
sS'name'
p38215
S'z1'
p38216
sS'required'
p38217
I00
sS'group_name'
p38218
Nsa(dp38219
S'description'
p38220
S'The z coordinate of the upper right-hand corner of the box\n'
p38221
sS'cpp_type'
p38222
S'double'
p38223
sS'default'
p38224
S'0'
p38225
sS'name'
p38226
S'z2'
p38227
sS'required'
p38228
I00
sS'group_name'
p38229
NsasS'name'
p38230
S'/Variables/*/InitialCondition/<type>/BoundingBoxIC'
p38231
sa(dp38232
S'description'
p38233
g3
sS'type'
p38234
NsS'subblocks'
p38235
NsS'parameters'
p38236
(lp38237
(dp38238
S'description'
p38239
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p38240
sS'cpp_type'
p38241
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38242
sS'default'
p38243
g3
sS'name'
p38244
S'block'
p38245
sS'required'
p38246
I00
sS'group_name'
p38247
Nsa(dp38248
S'description'
p38249
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38250
sS'cpp_type'
p38251
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38252
sS'default'
p38253
g3
sS'name'
p38254
S'boundary'
p38255
sS'required'
p38256
I00
sS'group_name'
p38257
Nsa(dp38258
S'description'
p38259
g3
sS'cpp_type'
p38260
S'std::string'
p38261
sS'default'
p38262
S'ConstantIC'
p38263
sS'name'
p38264
S'type'
p38265
sS'required'
p38266
I00
sS'group_name'
p38267
Nsa(dp38268
S'description'
p38269
S'The value to be set in IC\n'
p38270
sS'cpp_type'
p38271
S'double'
p38272
sS'default'
p38273
g3
sS'name'
p38274
S'value'
p38275
sS'required'
p38276
I01
sS'group_name'
p38277
Nsa(dp38278
S'description'
p38279
S'The variable this initial condition is supposed to provide values for.\n'
p38280
sS'cpp_type'
p38281
S'VariableName'
p38282
sS'default'
p38283
g3
sS'name'
p38284
S'variable'
p38285
sS'required'
p38286
I01
sS'group_name'
p38287
NsasS'name'
p38288
S'/Variables/*/InitialCondition/<type>/ConstantIC'
p38289
sa(dp38290
S'description'
p38291
g3
sS'type'
p38292
NsS'subblocks'
p38293
NsS'parameters'
p38294
(lp38295
(dp38296
S'description'
p38297
S'The amplitude\n'
p38298
sS'cpp_type'
p38299
S'double'
p38300
sS'default'
p38301
S'1'
p38302
sS'name'
p38303
S'amplitude'
p38304
sS'required'
p38305
I00
sS'group_name'
p38306
Nsa(dp38307
S'description'
p38308
S'The average value\n'
p38309
sS'cpp_type'
p38310
S'double'
p38311
sS'default'
p38312
S'0'
p38313
sS'name'
p38314
S'average'
p38315
sS'required'
p38316
I00
sS'group_name'
p38317
Nsa(dp38318
S'description'
p38319
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p38320
sS'cpp_type'
p38321
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38322
sS'default'
p38323
g3
sS'name'
p38324
S'block'
p38325
sS'required'
p38326
I00
sS'group_name'
p38327
Nsa(dp38328
S'description'
p38329
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38330
sS'cpp_type'
p38331
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38332
sS'default'
p38333
g3
sS'name'
p38334
S'boundary'
p38335
sS'required'
p38336
I00
sS'group_name'
p38337
Nsa(dp38338
S'description'
p38339
S'A small area between the max value and the interface\n'
p38340
sS'cpp_type'
p38341
S'double'
p38342
sS'default'
p38343
S'0.03125'
p38344
sS'name'
p38345
S'buffer'
p38346
sS'required'
p38347
I00
sS'group_name'
p38348
Nsa(dp38349
S'description'
p38350
S'The interface width\n'
p38351
sS'cpp_type'
p38352
S'double'
p38353
sS'default'
p38354
S'0.03125'
p38355
sS'name'
p38356
S'interface'
p38357
sS'required'
p38358
I00
sS'group_name'
p38359
Nsa(dp38360
S'description'
p38361
S'The length\n'
p38362
sS'cpp_type'
p38363
S'double'
p38364
sS'default'
p38365
S'0.75'
p38366
sS'name'
p38367
S'length'
p38368
sS'required'
p38369
I00
sS'group_name'
p38370
Nsa(dp38371
S'description'
p38372
g3
sS'cpp_type'
p38373
S'std::string'
p38374
sS'default'
p38375
S'CrossIC'
p38376
sS'name'
p38377
S'type'
p38378
sS'required'
p38379
I00
sS'group_name'
p38380
Nsa(dp38381
S'description'
p38382
S'The variable this initial condition is supposed to provide values for.\n'
p38383
sS'cpp_type'
p38384
S'VariableName'
p38385
sS'default'
p38386
g3
sS'name'
p38387
S'variable'
p38388
sS'required'
p38389
I01
sS'group_name'
p38390
Nsa(dp38391
S'description'
p38392
S'The width\n'
p38393
sS'cpp_type'
p38394
S'double'
p38395
sS'default'
p38396
S'0.125'
p38397
sS'name'
p38398
S'width'
p38399
sS'required'
p38400
I00
sS'group_name'
p38401
Nsa(dp38402
S'description'
p38403
S'The x coordinate of the lower left-hand corner of the box\n'
p38404
sS'cpp_type'
p38405
S'double'
p38406
sS'default'
p38407
S'0'
p38408
sS'name'
p38409
S'x1'
p38410
sS'required'
p38411
I00
sS'group_name'
p38412
Nsa(dp38413
S'description'
p38414
S'The x coordinate of the upper right-hand corner of the box\n'
p38415
sS'cpp_type'
p38416
S'double'
p38417
sS'default'
p38418
S'1'
p38419
sS'name'
p38420
S'x2'
p38421
sS'required'
p38422
I00
sS'group_name'
p38423
Nsa(dp38424
S'description'
p38425
S'The y coordinate of the lower left-hand corner of the box\n'
p38426
sS'cpp_type'
p38427
S'double'
p38428
sS'default'
p38429
S'0'
p38430
sS'name'
p38431
S'y1'
p38432
sS'required'
p38433
I00
sS'group_name'
p38434
Nsa(dp38435
S'description'
p38436
S'The y coordinate of the upper right-hand corner of the box\n'
p38437
sS'cpp_type'
p38438
S'double'
p38439
sS'default'
p38440
S'1'
p38441
sS'name'
p38442
S'y2'
p38443
sS'required'
p38444
I00
sS'group_name'
p38445
NsasS'name'
p38446
S'/Variables/*/InitialCondition/<type>/CrossIC'
p38447
sa(dp38448
S'description'
p38449
g3
sS'type'
p38450
NsS'subblocks'
p38451
NsS'parameters'
p38452
(lp38453
(dp38454
S'description'
p38455
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p38456
sS'cpp_type'
p38457
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38458
sS'default'
p38459
g3
sS'name'
p38460
S'block'
p38461
sS'required'
p38462
I00
sS'group_name'
p38463
Nsa(dp38464
S'description'
p38465
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38466
sS'cpp_type'
p38467
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38468
sS'default'
p38469
g3
sS'name'
p38470
S'boundary'
p38471
sS'required'
p38472
I00
sS'group_name'
p38473
Nsa(dp38474
S'description'
p38475
S'The initial condition function.\n'
p38476
sS'cpp_type'
p38477
S'FunctionName'
p38478
sS'default'
p38479
g3
sS'name'
p38480
S'function'
p38481
sS'required'
p38482
I01
sS'group_name'
p38483
Nsa(dp38484
S'description'
p38485
g3
sS'cpp_type'
p38486
S'std::string'
p38487
sS'default'
p38488
S'FunctionIC'
p38489
sS'name'
p38490
S'type'
p38491
sS'required'
p38492
I00
sS'group_name'
p38493
Nsa(dp38494
S'description'
p38495
S'The variable this initial condition is supposed to provide values for.\n'
p38496
sS'cpp_type'
p38497
S'VariableName'
p38498
sS'default'
p38499
g3
sS'name'
p38500
S'variable'
p38501
sS'required'
p38502
I01
sS'group_name'
p38503
NsasS'name'
p38504
S'/Variables/*/InitialCondition/<type>/FunctionIC'
p38505
sa(dp38506
S'description'
p38507
g3
sS'type'
p38508
NsS'subblocks'
p38509
NsS'parameters'
p38510
(lp38511
(dp38512
S'description'
p38513
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p38514
sS'cpp_type'
p38515
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38516
sS'default'
p38517
g3
sS'name'
p38518
S'block'
p38519
sS'required'
p38520
I00
sS'group_name'
p38521
Nsa(dp38522
S'description'
p38523
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38524
sS'cpp_type'
p38525
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38526
sS'default'
p38527
g3
sS'name'
p38528
S'boundary'
p38529
sS'required'
p38530
I00
sS'group_name'
p38531
Nsa(dp38532
S'description'
p38533
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p38534
sS'cpp_type'
p38535
S'bool'
p38536
sS'default'
p38537
S'0'
p38538
sS'name'
p38539
S'cody_test'
p38540
sS'required'
p38541
I00
sS'group_name'
p38542
Nsa(dp38543
S'description'
p38544
S'3D microstructure will be columnar in the z-direction?\n'
p38545
sS'cpp_type'
p38546
S'bool'
p38547
sS'default'
p38548
S'0'
p38549
sS'name'
p38550
S'columnar_3D'
p38551
sS'required'
p38552
I00
sS'group_name'
p38553
Nsa(dp38554
S'description'
p38555
S'The index for the current order parameter\n'
p38556
sS'cpp_type'
p38557
S'unsigned int'
p38558
sS'default'
p38559
g3
sS'name'
p38560
S'crys_index'
p38561
sS'required'
p38562
I01
sS'group_name'
p38563
Nsa(dp38564
S'description'
p38565
S'Number of order parameters\n'
p38566
sS'cpp_type'
p38567
S'unsigned int'
p38568
sS'default'
p38569
g3
sS'name'
p38570
S'crys_num'
p38571
sS'required'
p38572
I01
sS'group_name'
p38573
Nsa(dp38574
S'description'
p38575
S'Number of grains being represented by the order parameters\n'
p38576
sS'cpp_type'
p38577
S'unsigned int'
p38578
sS'default'
p38579
g3
sS'name'
p38580
S'grain_num'
p38581
sS'required'
p38582
I01
sS'group_name'
p38583
Nsa(dp38584
S'description'
p38585
S'The percent to randomly perturbate centers of grains relative to the size of the grain\n'
p38586
sS'cpp_type'
p38587
S'double'
p38588
sS'default'
p38589
S'0'
p38590
sS'name'
p38591
S'perturbation_percent'
p38592
sS'required'
p38593
I00
sS'group_name'
p38594
Nsa(dp38595
S'description'
p38596
S'The random seed\n'
p38597
sS'cpp_type'
p38598
S'unsigned int'
p38599
sS'default'
p38600
S'12444'
p38601
sS'name'
p38602
S'rand_seed'
p38603
sS'required'
p38604
I00
sS'group_name'
p38605
Nsa(dp38606
S'description'
p38607
g3
sS'cpp_type'
p38608
S'int'
p38609
sS'default'
p38610
S'1'
p38611
sS'name'
p38612
S'typ'
p38613
sS'required'
p38614
I00
sS'group_name'
p38615
Nsa(dp38616
S'description'
p38617
g3
sS'cpp_type'
p38618
S'std::string'
p38619
sS'default'
p38620
S'HexPolycrystalIC'
p38621
sS'name'
p38622
S'type'
p38623
sS'required'
p38624
I00
sS'group_name'
p38625
Nsa(dp38626
S'description'
p38627
S'The variable this initial condition is supposed to provide values for.\n'
p38628
sS'cpp_type'
p38629
S'VariableName'
p38630
sS'default'
p38631
g3
sS'name'
p38632
S'variable'
p38633
sS'required'
p38634
I01
sS'group_name'
p38635
Nsa(dp38636
S'description'
p38637
S'Specifies offset of hexagon grid in x-direction\n'
p38638
sS'cpp_type'
p38639
S'double'
p38640
sS'default'
p38641
S'0.5'
p38642
sS'name'
p38643
S'x_offset'
p38644
sS'required'
p38645
I00
sS'group_name'
p38646
NsasS'name'
p38647
S'/Variables/*/InitialCondition/<type>/HexPolycrystalIC'
p38648
sa(dp38649
S'description'
p38650
g3
sS'type'
p38651
NsS'subblocks'
p38652
NsS'parameters'
p38653
(lp38654
(dp38655
S'description'
p38656
S'in 3D, whether the objects are spheres or columns\n'
p38657
sS'cpp_type'
p38658
S'bool'
p38659
sS'default'
p38660
S'1'
p38661
sS'name'
p38662
S'3D_spheres'
p38663
sS'required'
p38664
I00
sS'group_name'
p38665
Nsa(dp38666
S'description'
p38667
S'length of simulation domain in x-direction\n'
p38668
sS'cpp_type'
p38669
S'double'
p38670
sS'default'
p38671
g3
sS'name'
p38672
S'Lx'
p38673
sS'required'
p38674
I01
sS'group_name'
p38675
Nsa(dp38676
S'description'
p38677
S'length of simulation domain in y-direction\n'
p38678
sS'cpp_type'
p38679
S'double'
p38680
sS'default'
p38681
g3
sS'name'
p38682
S'Ly'
p38683
sS'required'
p38684
I01
sS'group_name'
p38685
Nsa(dp38686
S'description'
p38687
S'length of simulation domain in z-direction\n'
p38688
sS'cpp_type'
p38689
S'double'
p38690
sS'default'
p38691
S'0'
p38692
sS'name'
p38693
S'Lz'
p38694
sS'required'
p38695
I00
sS'group_name'
p38696
Nsa(dp38697
S'description'
p38698
S'Variation from central lattice position\n'
p38699
sS'cpp_type'
p38700
S'double'
p38701
sS'default'
p38702
S'0'
p38703
sS'name'
p38704
S'Rnd_variation'
p38705
sS'required'
p38706
I00
sS'group_name'
p38707
Nsa(dp38708
S'description'
p38709
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p38710
sS'cpp_type'
p38711
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38712
sS'default'
p38713
g3
sS'name'
p38714
S'block'
p38715
sS'required'
p38716
I00
sS'group_name'
p38717
Nsa(dp38718
S'description'
p38719
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38720
sS'cpp_type'
p38721
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38722
sS'default'
p38723
g3
sS'name'
p38724
S'boundary'
p38725
sS'required'
p38726
I00
sS'group_name'
p38727
Nsa(dp38728
S'description'
p38729
S'minimum spacing of bubbles, measured from center to center\n'
p38730
sS'cpp_type'
p38731
S'double'
p38732
sS'default'
p38733
S'0'
p38734
sS'name'
p38735
S'bubspac'
p38736
sS'required'
p38737
I01
sS'group_name'
p38738
Nsa(dp38739
S'description'
p38740
S'Vector containing the number of bubbles along each side\n'
p38741
sS'cpp_type'
p38742
S'std::vector<unsigned int, std::allocator<unsigned int> >'
p38743
sS'default'
p38744
g3
sS'name'
p38745
S'circles_per_side'
p38746
sS'required'
p38747
I01
sS'group_name'
p38748
Nsa(dp38749
S'description'
p38750
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p38751
sS'cpp_type'
p38752
S'double'
p38753
sS'default'
p38754
S'0'
p38755
sS'name'
p38756
S'int_width'
p38757
sS'required'
p38758
I00
sS'group_name'
p38759
Nsa(dp38760
S'description'
p38761
S'The variable value inside the circle\n'
p38762
sS'cpp_type'
p38763
S'double'
p38764
sS'default'
p38765
g3
sS'name'
p38766
S'invalue'
p38767
sS'required'
p38768
I01
sS'group_name'
p38769
Nsa(dp38770
S'description'
p38771
S'The number of bubbles to be placed on GB\n'
p38772
sS'cpp_type'
p38773
S'unsigned int'
p38774
sS'default'
p38775
S'0'
p38776
sS'name'
p38777
S'numbub'
p38778
sS'required'
p38779
I01
sS'group_name'
p38780
Nsa(dp38781
S'description'
p38782
S'The number of tries\n'
p38783
sS'cpp_type'
p38784
S'unsigned int'
p38785
sS'default'
p38786
S'1000'
p38787
sS'name'
p38788
S'numtries'
p38789
sS'required'
p38790
I00
sS'group_name'
p38791
Nsa(dp38792
S'description'
p38793
S'The variable value outside the circle\n'
p38794
sS'cpp_type'
p38795
S'double'
p38796
sS'default'
p38797
g3
sS'name'
p38798
S'outvalue'
p38799
sS'required'
p38800
I01
sS'group_name'
p38801
Nsa(dp38802
S'description'
p38803
S'The radius of a circle\n'
p38804
sS'cpp_type'
p38805
S'double'
p38806
sS'default'
p38807
g3
sS'name'
p38808
S'radius'
p38809
sS'required'
p38810
I01
sS'group_name'
p38811
Nsa(dp38812
S'description'
p38813
S'Plus or minus Percent of random variation in the bubble radius\n'
p38814
sS'cpp_type'
p38815
S'double'
p38816
sS'default'
p38817
S'0'
p38818
sS'name'
p38819
S'radius_variation'
p38820
sS'required'
p38821
I00
sS'group_name'
p38822
Nsa(dp38823
S'description'
p38824
S'random seed\n'
p38825
sS'cpp_type'
p38826
S'unsigned int'
p38827
sS'default'
p38828
S'2000'
p38829
sS'name'
p38830
S'rand_seed'
p38831
sS'required'
p38832
I00
sS'group_name'
p38833
Nsa(dp38834
S'description'
p38835
g3
sS'cpp_type'
p38836
S'std::string'
p38837
sS'default'
p38838
S'LatticeSmoothCircleIC'
p38839
sS'name'
p38840
S'type'
p38841
sS'required'
p38842
I00
sS'group_name'
p38843
Nsa(dp38844
S'description'
p38845
S'The variable this initial condition is supposed to provide values for.\n'
p38846
sS'cpp_type'
p38847
S'VariableName'
p38848
sS'default'
p38849
g3
sS'name'
p38850
S'variable'
p38851
sS'required'
p38852
I01
sS'group_name'
p38853
Nsa(dp38854
S'description'
p38855
S'The x coordinate of the circle center\n'
p38856
sS'cpp_type'
p38857
S'double'
p38858
sS'default'
p38859
S'0'
p38860
sS'name'
p38861
S'x1'
p38862
sS'required'
p38863
I01
sS'group_name'
p38864
Nsa(dp38865
S'description'
p38866
S'The y coordinate of the circle center\n'
p38867
sS'cpp_type'
p38868
S'double'
p38869
sS'default'
p38870
S'0'
p38871
sS'name'
p38872
S'y1'
p38873
sS'required'
p38874
I01
sS'group_name'
p38875
Nsa(dp38876
S'description'
p38877
S'The z coordinate of the circle center\n'
p38878
sS'cpp_type'
p38879
S'double'
p38880
sS'default'
p38881
S'0'
p38882
sS'name'
p38883
S'z1'
p38884
sS'required'
p38885
I00
sS'group_name'
p38886
NsasS'name'
p38887
S'/Variables/*/InitialCondition/<type>/LatticeSmoothCircleIC'
p38888
sa(dp38889
S'description'
p38890
g3
sS'type'
p38891
NsS'subblocks'
p38892
NsS'parameters'
p38893
(lp38894
(dp38895
S'description'
p38896
S'in 3D, whether the objects are spheres or columns\n'
p38897
sS'cpp_type'
p38898
S'bool'
p38899
sS'default'
p38900
S'1'
p38901
sS'name'
p38902
S'3D_spheres'
p38903
sS'required'
p38904
I00
sS'group_name'
p38905
Nsa(dp38906
S'description'
p38907
S'length of simulation domain in x-direction\n'
p38908
sS'cpp_type'
p38909
S'double'
p38910
sS'default'
p38911
g3
sS'name'
p38912
S'Lx'
p38913
sS'required'
p38914
I01
sS'group_name'
p38915
Nsa(dp38916
S'description'
p38917
S'length of simulation domain in y-direction\n'
p38918
sS'cpp_type'
p38919
S'double'
p38920
sS'default'
p38921
g3
sS'name'
p38922
S'Ly'
p38923
sS'required'
p38924
I01
sS'group_name'
p38925
Nsa(dp38926
S'description'
p38927
S'length of simulation domain in z-direction\n'
p38928
sS'cpp_type'
p38929
S'double'
p38930
sS'default'
p38931
S'0'
p38932
sS'name'
p38933
S'Lz'
p38934
sS'required'
p38935
I00
sS'group_name'
p38936
Nsa(dp38937
S'description'
p38938
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p38939
sS'cpp_type'
p38940
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p38941
sS'default'
p38942
g3
sS'name'
p38943
S'block'
p38944
sS'required'
p38945
I00
sS'group_name'
p38946
Nsa(dp38947
S'description'
p38948
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38949
sS'cpp_type'
p38950
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p38951
sS'default'
p38952
g3
sS'name'
p38953
S'boundary'
p38954
sS'required'
p38955
I00
sS'group_name'
p38956
Nsa(dp38957
S'description'
p38958
S'minimum spacing of bubbles, measured from center to center\n'
p38959
sS'cpp_type'
p38960
S'double'
p38961
sS'default'
p38962
g3
sS'name'
p38963
S'bubspac'
p38964
sS'required'
p38965
I01
sS'group_name'
p38966
Nsa(dp38967
S'description'
p38968
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p38969
sS'cpp_type'
p38970
S'double'
p38971
sS'default'
p38972
S'0'
p38973
sS'name'
p38974
S'int_width'
p38975
sS'required'
p38976
I00
sS'group_name'
p38977
Nsa(dp38978
S'description'
p38979
S'The variable value inside the circle\n'
p38980
sS'cpp_type'
p38981
S'double'
p38982
sS'default'
p38983
g3
sS'name'
p38984
S'invalue'
p38985
sS'required'
p38986
I01
sS'group_name'
p38987
Nsa(dp38988
S'description'
p38989
S'The number of bubbles to be placed on GB\n'
p38990
sS'cpp_type'
p38991
S'unsigned int'
p38992
sS'default'
p38993
g3
sS'name'
p38994
S'numbub'
p38995
sS'required'
p38996
I01
sS'group_name'
p38997
Nsa(dp38998
S'description'
p38999
S'The number of tries\n'
p39000
sS'cpp_type'
p39001
S'unsigned int'
p39002
sS'default'
p39003
S'1000'
p39004
sS'name'
p39005
S'numtries'
p39006
sS'required'
p39007
I00
sS'group_name'
p39008
Nsa(dp39009
S'description'
p39010
S'The variable value outside the circle\n'
p39011
sS'cpp_type'
p39012
S'double'
p39013
sS'default'
p39014
g3
sS'name'
p39015
S'outvalue'
p39016
sS'required'
p39017
I01
sS'group_name'
p39018
Nsa(dp39019
S'description'
p39020
S'The radius of a circle\n'
p39021
sS'cpp_type'
p39022
S'double'
p39023
sS'default'
p39024
g3
sS'name'
p39025
S'radius'
p39026
sS'required'
p39027
I01
sS'group_name'
p39028
Nsa(dp39029
S'description'
p39030
S'Plus or minus Percent of random variation in the bubble radius\n'
p39031
sS'cpp_type'
p39032
S'double'
p39033
sS'default'
p39034
S'0'
p39035
sS'name'
p39036
S'radius_variation'
p39037
sS'required'
p39038
I00
sS'group_name'
p39039
Nsa(dp39040
S'description'
p39041
S'random seed\n'
p39042
sS'cpp_type'
p39043
S'unsigned int'
p39044
sS'default'
p39045
S'2000'
p39046
sS'name'
p39047
S'rand_seed'
p39048
sS'required'
p39049
I00
sS'group_name'
p39050
Nsa(dp39051
S'description'
p39052
g3
sS'cpp_type'
p39053
S'std::string'
p39054
sS'default'
p39055
S'MultiSmoothCircleIC'
p39056
sS'name'
p39057
S'type'
p39058
sS'required'
p39059
I00
sS'group_name'
p39060
Nsa(dp39061
S'description'
p39062
S'The variable this initial condition is supposed to provide values for.\n'
p39063
sS'cpp_type'
p39064
S'VariableName'
p39065
sS'default'
p39066
g3
sS'name'
p39067
S'variable'
p39068
sS'required'
p39069
I01
sS'group_name'
p39070
Nsa(dp39071
S'description'
p39072
S'The x coordinate of the circle center\n'
p39073
sS'cpp_type'
p39074
S'double'
p39075
sS'default'
p39076
S'0'
p39077
sS'name'
p39078
S'x1'
p39079
sS'required'
p39080
I01
sS'group_name'
p39081
Nsa(dp39082
S'description'
p39083
S'The y coordinate of the circle center\n'
p39084
sS'cpp_type'
p39085
S'double'
p39086
sS'default'
p39087
S'0'
p39088
sS'name'
p39089
S'y1'
p39090
sS'required'
p39091
I01
sS'group_name'
p39092
Nsa(dp39093
S'description'
p39094
S'The z coordinate of the circle center\n'
p39095
sS'cpp_type'
p39096
S'double'
p39097
sS'default'
p39098
S'0'
p39099
sS'name'
p39100
S'z1'
p39101
sS'required'
p39102
I00
sS'group_name'
p39103
NsasS'name'
p39104
S'/Variables/*/InitialCondition/<type>/MultiSmoothCircleIC'
p39105
sa(dp39106
S'description'
p39107
g3
sS'type'
p39108
NsS'subblocks'
p39109
NsS'parameters'
p39110
(lp39111
(dp39112
S'description'
p39113
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p39114
sS'cpp_type'
p39115
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p39116
sS'default'
p39117
g3
sS'name'
p39118
S'block'
p39119
sS'required'
p39120
I00
sS'group_name'
p39121
Nsa(dp39122
S'description'
p39123
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39124
sS'cpp_type'
p39125
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p39126
sS'default'
p39127
g3
sS'name'
p39128
S'boundary'
p39129
sS'required'
p39130
I00
sS'group_name'
p39131
Nsa(dp39132
S'description'
p39133
S'The index for the current order parameter\n'
p39134
sS'cpp_type'
p39135
S'unsigned int'
p39136
sS'default'
p39137
g3
sS'name'
p39138
S'crys_index'
p39139
sS'required'
p39140
I01
sS'group_name'
p39141
Nsa(dp39142
S'description'
p39143
S'Number of order parameters\n'
p39144
sS'cpp_type'
p39145
S'unsigned int'
p39146
sS'default'
p39147
g3
sS'name'
p39148
S'crys_num'
p39149
sS'required'
p39150
I01
sS'group_name'
p39151
Nsa(dp39152
S'description'
p39153
S'Type of random grain structure\n'
p39154
sS'cpp_type'
p39155
S'unsigned int'
p39156
sS'default'
p39157
g3
sS'name'
p39158
S'typ'
p39159
sS'required'
p39160
I01
sS'group_name'
p39161
Nsa(dp39162
S'description'
p39163
g3
sS'cpp_type'
p39164
S'std::string'
p39165
sS'default'
p39166
S'PolycrystalRandomIC'
p39167
sS'name'
p39168
S'type'
p39169
sS'required'
p39170
I00
sS'group_name'
p39171
Nsa(dp39172
S'description'
p39173
S'The variable this initial condition is supposed to provide values for.\n'
p39174
sS'cpp_type'
p39175
S'VariableName'
p39176
sS'default'
p39177
g3
sS'name'
p39178
S'variable'
p39179
sS'required'
p39180
I01
sS'group_name'
p39181
NsasS'name'
p39182
S'/Variables/*/InitialCondition/<type>/PolycrystalRandomIC'
p39183
sa(dp39184
S'description'
p39185
g3
sS'type'
p39186
NsS'subblocks'
p39187
NsS'parameters'
p39188
(lp39189
(dp39190
S'description'
p39191
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p39192
sS'cpp_type'
p39193
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p39194
sS'default'
p39195
g3
sS'name'
p39196
S'block'
p39197
sS'required'
p39198
I00
sS'group_name'
p39199
Nsa(dp39200
S'description'
p39201
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39202
sS'cpp_type'
p39203
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p39204
sS'default'
p39205
g3
sS'name'
p39206
S'boundary'
p39207
sS'required'
p39208
I00
sS'group_name'
p39209
Nsa(dp39210
S'description'
p39211
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p39212
sS'cpp_type'
p39213
S'bool'
p39214
sS'default'
p39215
S'0'
p39216
sS'name'
p39217
S'cody_test'
p39218
sS'required'
p39219
I00
sS'group_name'
p39220
Nsa(dp39221
S'description'
p39222
S'3D microstructure will be columnar in the z-direction?\n'
p39223
sS'cpp_type'
p39224
S'bool'
p39225
sS'default'
p39226
S'0'
p39227
sS'name'
p39228
S'columnar_3D'
p39229
sS'required'
p39230
I00
sS'group_name'
p39231
Nsa(dp39232
S'description'
p39233
S'The index for the current order parameter\n'
p39234
sS'cpp_type'
p39235
S'unsigned int'
p39236
sS'default'
p39237
g3
sS'name'
p39238
S'crys_index'
p39239
sS'required'
p39240
I01
sS'group_name'
p39241
Nsa(dp39242
S'description'
p39243
S'Number of order parameters\n'
p39244
sS'cpp_type'
p39245
S'unsigned int'
p39246
sS'default'
p39247
g3
sS'name'
p39248
S'crys_num'
p39249
sS'required'
p39250
I01
sS'group_name'
p39251
Nsa(dp39252
S'description'
p39253
S'Number of grains being represented by the order parameters\n'
p39254
sS'cpp_type'
p39255
S'unsigned int'
p39256
sS'default'
p39257
g3
sS'name'
p39258
S'grain_num'
p39259
sS'required'
p39260
I01
sS'group_name'
p39261
Nsa(dp39262
S'description'
p39263
S'The random seed\n'
p39264
sS'cpp_type'
p39265
S'unsigned int'
p39266
sS'default'
p39267
S'12444'
p39268
sS'name'
p39269
S'rand_seed'
p39270
sS'required'
p39271
I00
sS'group_name'
p39272
Nsa(dp39273
S'description'
p39274
g3
sS'cpp_type'
p39275
S'std::string'
p39276
sS'default'
p39277
S'PolycrystalReducedIC'
p39278
sS'name'
p39279
S'type'
p39280
sS'required'
p39281
I00
sS'group_name'
p39282
Nsa(dp39283
S'description'
p39284
S'The variable this initial condition is supposed to provide values for.\n'
p39285
sS'cpp_type'
p39286
S'VariableName'
p39287
sS'default'
p39288
g3
sS'name'
p39289
S'variable'
p39290
sS'required'
p39291
I01
sS'group_name'
p39292
NsasS'name'
p39293
S'/Variables/*/InitialCondition/<type>/PolycrystalReducedIC'
p39294
sa(dp39295
S'description'
p39296
g3
sS'type'
p39297
NsS'subblocks'
p39298
NsS'parameters'
p39299
(lp39300
(dp39301
S'description'
p39302
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p39303
sS'cpp_type'
p39304
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p39305
sS'default'
p39306
g3
sS'name'
p39307
S'block'
p39308
sS'required'
p39309
I00
sS'group_name'
p39310
Nsa(dp39311
S'description'
p39312
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39313
sS'cpp_type'
p39314
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p39315
sS'default'
p39316
g3
sS'name'
p39317
S'boundary'
p39318
sS'required'
p39319
I00
sS'group_name'
p39320
Nsa(dp39321
S'description'
p39322
S'Upper bound of the randomly generated values\n'
p39323
sS'cpp_type'
p39324
S'double'
p39325
sS'default'
p39326
S'1'
p39327
sS'name'
p39328
S'max'
p39329
sS'required'
p39330
I00
sS'group_name'
p39331
Nsa(dp39332
S'description'
p39333
S'Lower bound of the randomly generated values\n'
p39334
sS'cpp_type'
p39335
S'double'
p39336
sS'default'
p39337
S'0'
p39338
sS'name'
p39339
S'min'
p39340
sS'required'
p39341
I00
sS'group_name'
p39342
Nsa(dp39343
S'description'
p39344
S'Seed value for the random number generator\n'
p39345
sS'cpp_type'
p39346
S'unsigned int'
p39347
sS'default'
p39348
S'0'
p39349
sS'name'
p39350
S'seed'
p39351
sS'required'
p39352
I00
sS'group_name'
p39353
Nsa(dp39354
S'description'
p39355
g3
sS'cpp_type'
p39356
S'std::string'
p39357
sS'default'
p39358
S'RandomIC'
p39359
sS'name'
p39360
S'type'
p39361
sS'required'
p39362
I00
sS'group_name'
p39363
Nsa(dp39364
S'description'
p39365
S'The variable this initial condition is supposed to provide values for.\n'
p39366
sS'cpp_type'
p39367
S'VariableName'
p39368
sS'default'
p39369
g3
sS'name'
p39370
S'variable'
p39371
sS'required'
p39372
I01
sS'group_name'
p39373
NsasS'name'
p39374
S'/Variables/*/InitialCondition/<type>/RandomIC'
p39375
sa(dp39376
S'description'
p39377
g3
sS'type'
p39378
NsS'subblocks'
p39379
NsS'parameters'
p39380
(lp39381
(dp39382
S'description'
p39383
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p39384
sS'cpp_type'
p39385
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p39386
sS'default'
p39387
g3
sS'name'
p39388
S'block'
p39389
sS'required'
p39390
I00
sS'group_name'
p39391
Nsa(dp39392
S'description'
p39393
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39394
sS'cpp_type'
p39395
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p39396
sS'default'
p39397
g3
sS'name'
p39398
S'boundary'
p39399
sS'required'
p39400
I00
sS'group_name'
p39401
Nsa(dp39402
S'description'
p39403
S'The min value of the variable invalue the box\n'
p39404
sS'cpp_type'
p39405
S'double'
p39406
sS'default'
p39407
S'0'
p39408
sS'name'
p39409
S'mn_invalue'
p39410
sS'required'
p39411
I00
sS'group_name'
p39412
Nsa(dp39413
S'description'
p39414
S'The min value of the variable outvalue the box\n'
p39415
sS'cpp_type'
p39416
S'double'
p39417
sS'default'
p39418
S'0'
p39419
sS'name'
p39420
S'mn_outvalue'
p39421
sS'required'
p39422
I00
sS'group_name'
p39423
Nsa(dp39424
S'description'
p39425
S'The max value of the variable invalue the box\n'
p39426
sS'cpp_type'
p39427
S'double'
p39428
sS'default'
p39429
g3
sS'name'
p39430
S'mx_invalue'
p39431
sS'required'
p39432
I01
sS'group_name'
p39433
Nsa(dp39434
S'description'
p39435
S'The max value of the variable outvalue the box\n'
p39436
sS'cpp_type'
p39437
S'double'
p39438
sS'default'
p39439
g3
sS'name'
p39440
S'mx_outvalue'
p39441
sS'required'
p39442
I01
sS'group_name'
p39443
Nsa(dp39444
S'description'
p39445
g3
sS'cpp_type'
p39446
S'std::string'
p39447
sS'default'
p39448
S'RndBoundingBoxIC'
p39449
sS'name'
p39450
S'type'
p39451
sS'required'
p39452
I00
sS'group_name'
p39453
Nsa(dp39454
S'description'
p39455
S'The variable this initial condition is supposed to provide values for.\n'
p39456
sS'cpp_type'
p39457
S'VariableName'
p39458
sS'default'
p39459
g3
sS'name'
p39460
S'variable'
p39461
sS'required'
p39462
I01
sS'group_name'
p39463
Nsa(dp39464
S'description'
p39465
S'The x coordinate of the lower left-hand corner of the box\n'
p39466
sS'cpp_type'
p39467
S'double'
p39468
sS'default'
p39469
g3
sS'name'
p39470
S'x1'
p39471
sS'required'
p39472
I01
sS'group_name'
p39473
Nsa(dp39474
S'description'
p39475
S'The x coordinate of the upper right-hand corner of the box\n'
p39476
sS'cpp_type'
p39477
S'double'
p39478
sS'default'
p39479
g3
sS'name'
p39480
S'x2'
p39481
sS'required'
p39482
I01
sS'group_name'
p39483
Nsa(dp39484
S'description'
p39485
S'The y coordinate of the lower left-hand corner of the box\n'
p39486
sS'cpp_type'
p39487
S'double'
p39488
sS'default'
p39489
g3
sS'name'
p39490
S'y1'
p39491
sS'required'
p39492
I01
sS'group_name'
p39493
Nsa(dp39494
S'description'
p39495
S'The y coordinate of the upper right-hand corner of the box\n'
p39496
sS'cpp_type'
p39497
S'double'
p39498
sS'default'
p39499
g3
sS'name'
p39500
S'y2'
p39501
sS'required'
p39502
I01
sS'group_name'
p39503
Nsa(dp39504
S'description'
p39505
S'The z coordinate of the lower left-hand corner of the box\n'
p39506
sS'cpp_type'
p39507
S'double'
p39508
sS'default'
p39509
S'0'
p39510
sS'name'
p39511
S'z1'
p39512
sS'required'
p39513
I00
sS'group_name'
p39514
Nsa(dp39515
S'description'
p39516
S'The z coordinate of the upper right-hand corner of the box\n'
p39517
sS'cpp_type'
p39518
S'double'
p39519
sS'default'
p39520
S'0'
p39521
sS'name'
p39522
S'z2'
p39523
sS'required'
p39524
I00
sS'group_name'
p39525
NsasS'name'
p39526
S'/Variables/*/InitialCondition/<type>/RndBoundingBoxIC'
p39527
sa(dp39528
S'description'
p39529
g3
sS'type'
p39530
NsS'subblocks'
p39531
NsS'parameters'
p39532
(lp39533
(dp39534
S'description'
p39535
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p39536
sS'cpp_type'
p39537
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p39538
sS'default'
p39539
g3
sS'name'
p39540
S'block'
p39541
sS'required'
p39542
I00
sS'group_name'
p39543
Nsa(dp39544
S'description'
p39545
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39546
sS'cpp_type'
p39547
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p39548
sS'default'
p39549
g3
sS'name'
p39550
S'boundary'
p39551
sS'required'
p39552
I00
sS'group_name'
p39553
Nsa(dp39554
S'description'
p39555
S'The min variable value inside the circle\n'
p39556
sS'cpp_type'
p39557
S'double'
p39558
sS'default'
p39559
g3
sS'name'
p39560
S'mn_invalue'
p39561
sS'required'
p39562
I01
sS'group_name'
p39563
Nsa(dp39564
S'description'
p39565
S'The min variable value outside the circle\n'
p39566
sS'cpp_type'
p39567
S'double'
p39568
sS'default'
p39569
g3
sS'name'
p39570
S'mn_outvalue'
p39571
sS'required'
p39572
I01
sS'group_name'
p39573
Nsa(dp39574
S'description'
p39575
S'The max variable value inside the circle\n'
p39576
sS'cpp_type'
p39577
S'double'
p39578
sS'default'
p39579
g3
sS'name'
p39580
S'mx_invalue'
p39581
sS'required'
p39582
I01
sS'group_name'
p39583
Nsa(dp39584
S'description'
p39585
S'The max variable value outside the circle\n'
p39586
sS'cpp_type'
p39587
S'double'
p39588
sS'default'
p39589
g3
sS'name'
p39590
S'mx_outvalue'
p39591
sS'required'
p39592
I01
sS'group_name'
p39593
Nsa(dp39594
S'description'
p39595
S'The radius of a circle\n'
p39596
sS'cpp_type'
p39597
S'double'
p39598
sS'default'
p39599
g3
sS'name'
p39600
S'radius'
p39601
sS'required'
p39602
I01
sS'group_name'
p39603
Nsa(dp39604
S'description'
p39605
S'Seed value for the random number generator\n'
p39606
sS'cpp_type'
p39607
S'unsigned int'
p39608
sS'default'
p39609
S'12345'
p39610
sS'name'
p39611
S'seed'
p39612
sS'required'
p39613
I00
sS'group_name'
p39614
Nsa(dp39615
S'description'
p39616
g3
sS'cpp_type'
p39617
S'std::string'
p39618
sS'default'
p39619
S'RndSmoothCircleIC'
p39620
sS'name'
p39621
S'type'
p39622
sS'required'
p39623
I00
sS'group_name'
p39624
Nsa(dp39625
S'description'
p39626
S'The variable this initial condition is supposed to provide values for.\n'
p39627
sS'cpp_type'
p39628
S'VariableName'
p39629
sS'default'
p39630
g3
sS'name'
p39631
S'variable'
p39632
sS'required'
p39633
I01
sS'group_name'
p39634
Nsa(dp39635
S'description'
p39636
S'The x coordinate of the circle center\n'
p39637
sS'cpp_type'
p39638
S'double'
p39639
sS'default'
p39640
g3
sS'name'
p39641
S'x1'
p39642
sS'required'
p39643
I01
sS'group_name'
p39644
Nsa(dp39645
S'description'
p39646
S'The y coordinate of the circle center\n'
p39647
sS'cpp_type'
p39648
S'double'
p39649
sS'default'
p39650
g3
sS'name'
p39651
S'y1'
p39652
sS'required'
p39653
I01
sS'group_name'
p39654
Nsa(dp39655
S'description'
p39656
S'The z coordinate of the circle center\n'
p39657
sS'cpp_type'
p39658
S'double'
p39659
sS'default'
p39660
S'0'
p39661
sS'name'
p39662
S'z1'
p39663
sS'required'
p39664
I00
sS'group_name'
p39665
NsasS'name'
p39666
S'/Variables/*/InitialCondition/<type>/RndSmoothCircleIC'
p39667
sa(dp39668
S'description'
p39669
g3
sS'type'
p39670
NsS'subblocks'
p39671
NsS'parameters'
p39672
(lp39673
(dp39674
S'description'
p39675
g3
sS'cpp_type'
p39676
S'std::string'
p39677
sS'default'
p39678
S'ScalarComponentIC'
p39679
sS'name'
p39680
S'type'
p39681
sS'required'
p39682
I00
sS'group_name'
p39683
Nsa(dp39684
S'description'
p39685
S'Initial values to initialize the scalar variable.\n'
p39686
sS'cpp_type'
p39687
S'std::vector<double, std::allocator<double> >'
p39688
sS'default'
p39689
g3
sS'name'
p39690
S'values'
p39691
sS'required'
p39692
I01
sS'group_name'
p39693
Nsa(dp39694
S'description'
p39695
S'The variable this initial condition is supposed to provide values for.\n'
p39696
sS'cpp_type'
p39697
S'VariableName'
p39698
sS'default'
p39699
g3
sS'name'
p39700
S'variable'
p39701
sS'required'
p39702
I00
sS'group_name'
p39703
NsasS'name'
p39704
S'/Variables/*/InitialCondition/<type>/ScalarComponentIC'
p39705
sa(dp39706
S'description'
p39707
g3
sS'type'
p39708
NsS'subblocks'
p39709
NsS'parameters'
p39710
(lp39711
(dp39712
S'description'
p39713
g3
sS'cpp_type'
p39714
S'std::string'
p39715
sS'default'
p39716
S'ScalarConstantIC'
p39717
sS'name'
p39718
S'type'
p39719
sS'required'
p39720
I00
sS'group_name'
p39721
Nsa(dp39722
S'description'
p39723
g3
sS'cpp_type'
p39724
S'double'
p39725
sS'default'
p39726
S'0'
p39727
sS'name'
p39728
S'value'
p39729
sS'required'
p39730
I00
sS'group_name'
p39731
Nsa(dp39732
S'description'
p39733
S'The variable this initial condition is supposed to provide values for.\n'
p39734
sS'cpp_type'
p39735
S'VariableName'
p39736
sS'default'
p39737
g3
sS'name'
p39738
S'variable'
p39739
sS'required'
p39740
I00
sS'group_name'
p39741
NsasS'name'
p39742
S'/Variables/*/InitialCondition/<type>/ScalarConstantIC'
p39743
sa(dp39744
S'description'
p39745
g3
sS'type'
p39746
NsS'subblocks'
p39747
NsS'parameters'
p39748
(lp39749
(dp39750
S'description'
p39751
S'in 3D, whether the objects are spheres or columns\n'
p39752
sS'cpp_type'
p39753
S'bool'
p39754
sS'default'
p39755
S'1'
p39756
sS'name'
p39757
S'3D_spheres'
p39758
sS'required'
p39759
I00
sS'group_name'
p39760
Nsa(dp39761
S'description'
p39762
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p39763
sS'cpp_type'
p39764
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p39765
sS'default'
p39766
g3
sS'name'
p39767
S'block'
p39768
sS'required'
p39769
I00
sS'group_name'
p39770
Nsa(dp39771
S'description'
p39772
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39773
sS'cpp_type'
p39774
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p39775
sS'default'
p39776
g3
sS'name'
p39777
S'boundary'
p39778
sS'required'
p39779
I00
sS'group_name'
p39780
Nsa(dp39781
S'description'
p39782
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p39783
sS'cpp_type'
p39784
S'double'
p39785
sS'default'
p39786
S'0'
p39787
sS'name'
p39788
S'int_width'
p39789
sS'required'
p39790
I00
sS'group_name'
p39791
Nsa(dp39792
S'description'
p39793
S'The variable value inside the circle\n'
p39794
sS'cpp_type'
p39795
S'double'
p39796
sS'default'
p39797
g3
sS'name'
p39798
S'invalue'
p39799
sS'required'
p39800
I01
sS'group_name'
p39801
Nsa(dp39802
S'description'
p39803
S'The variable value outside the circle\n'
p39804
sS'cpp_type'
p39805
S'double'
p39806
sS'default'
p39807
g3
sS'name'
p39808
S'outvalue'
p39809
sS'required'
p39810
I01
sS'group_name'
p39811
Nsa(dp39812
S'description'
p39813
S'The radius of a circle\n'
p39814
sS'cpp_type'
p39815
S'double'
p39816
sS'default'
p39817
g3
sS'name'
p39818
S'radius'
p39819
sS'required'
p39820
I01
sS'group_name'
p39821
Nsa(dp39822
S'description'
p39823
g3
sS'cpp_type'
p39824
S'std::string'
p39825
sS'default'
p39826
S'SmoothCircleIC'
p39827
sS'name'
p39828
S'type'
p39829
sS'required'
p39830
I00
sS'group_name'
p39831
Nsa(dp39832
S'description'
p39833
S'The variable this initial condition is supposed to provide values for.\n'
p39834
sS'cpp_type'
p39835
S'VariableName'
p39836
sS'default'
p39837
g3
sS'name'
p39838
S'variable'
p39839
sS'required'
p39840
I01
sS'group_name'
p39841
Nsa(dp39842
S'description'
p39843
S'The x coordinate of the circle center\n'
p39844
sS'cpp_type'
p39845
S'double'
p39846
sS'default'
p39847
g3
sS'name'
p39848
S'x1'
p39849
sS'required'
p39850
I01
sS'group_name'
p39851
Nsa(dp39852
S'description'
p39853
S'The y coordinate of the circle center\n'
p39854
sS'cpp_type'
p39855
S'double'
p39856
sS'default'
p39857
g3
sS'name'
p39858
S'y1'
p39859
sS'required'
p39860
I01
sS'group_name'
p39861
Nsa(dp39862
S'description'
p39863
S'The z coordinate of the circle center\n'
p39864
sS'cpp_type'
p39865
S'double'
p39866
sS'default'
p39867
S'0'
p39868
sS'name'
p39869
S'z1'
p39870
sS'required'
p39871
I00
sS'group_name'
p39872
NsasS'name'
p39873
S'/Variables/*/InitialCondition/<type>/SmoothCircleIC'
p39874
sa(dp39875
S'description'
p39876
g3
sS'type'
p39877
NsS'subblocks'
p39878
NsS'parameters'
p39879
(lp39880
(dp39881
S'description'
p39882
S'in 3D, whether the objects are spheres or columns\n'
p39883
sS'cpp_type'
p39884
S'bool'
p39885
sS'default'
p39886
S'1'
p39887
sS'name'
p39888
S'3D_spheres'
p39889
sS'required'
p39890
I00
sS'group_name'
p39891
Nsa(dp39892
S'description'
p39893
S'length of simulation domain in x-direction\n'
p39894
sS'cpp_type'
p39895
S'double'
p39896
sS'default'
p39897
S'0'
p39898
sS'name'
p39899
S'Lx'
p39900
sS'required'
p39901
I01
sS'group_name'
p39902
Nsa(dp39903
S'description'
p39904
S'length of simulation domain in y-direction\n'
p39905
sS'cpp_type'
p39906
S'double'
p39907
sS'default'
p39908
S'0'
p39909
sS'name'
p39910
S'Ly'
p39911
sS'required'
p39912
I01
sS'group_name'
p39913
Nsa(dp39914
S'description'
p39915
S'length of simulation domain in z-direction\n'
p39916
sS'cpp_type'
p39917
S'double'
p39918
sS'default'
p39919
S'0'
p39920
sS'name'
p39921
S'Lz'
p39922
sS'required'
p39923
I00
sS'group_name'
p39924
Nsa(dp39925
S'description'
p39926
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p39927
sS'cpp_type'
p39928
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p39929
sS'default'
p39930
g3
sS'name'
p39931
S'block'
p39932
sS'required'
p39933
I00
sS'group_name'
p39934
Nsa(dp39935
S'description'
p39936
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39937
sS'cpp_type'
p39938
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p39939
sS'default'
p39940
g3
sS'name'
p39941
S'boundary'
p39942
sS'required'
p39943
I00
sS'group_name'
p39944
Nsa(dp39945
S'description'
p39946
S'minimum spacing of bubbles, measured from center to center\n'
p39947
sS'cpp_type'
p39948
S'double'
p39949
sS'default'
p39950
S'0'
p39951
sS'name'
p39952
S'bubspac'
p39953
sS'required'
p39954
I01
sS'group_name'
p39955
Nsa(dp39956
S'description'
p39957
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p39958
sS'cpp_type'
p39959
S'double'
p39960
sS'default'
p39961
S'0'
p39962
sS'name'
p39963
S'int_width'
p39964
sS'required'
p39965
I00
sS'group_name'
p39966
Nsa(dp39967
S'description'
p39968
S'The variable value inside the circle\n'
p39969
sS'cpp_type'
p39970
S'double'
p39971
sS'default'
p39972
g3
sS'name'
p39973
S'invalue'
p39974
sS'required'
p39975
I01
sS'group_name'
p39976
Nsa(dp39977
S'description'
p39978
S'The number of bubbles to be placed on GB\n'
p39979
sS'cpp_type'
p39980
S'unsigned int'
p39981
sS'default'
p39982
S'0'
p39983
sS'name'
p39984
S'numbub'
p39985
sS'required'
p39986
I01
sS'group_name'
p39987
Nsa(dp39988
S'description'
p39989
S'The number of tries\n'
p39990
sS'cpp_type'
p39991
S'unsigned int'
p39992
sS'default'
p39993
S'1000'
p39994
sS'name'
p39995
S'numtries'
p39996
sS'required'
p39997
I00
sS'group_name'
p39998
Nsa(dp39999
S'description'
p40000
S'The variable value outside the circle\n'
p40001
sS'cpp_type'
p40002
S'double'
p40003
sS'default'
p40004
g3
sS'name'
p40005
S'outvalue'
p40006
sS'required'
p40007
I01
sS'group_name'
p40008
Nsa(dp40009
S'description'
p40010
S'The radius for each circle\n'
p40011
sS'cpp_type'
p40012
S'std::vector<double, std::allocator<double> >'
p40013
sS'default'
p40014
g3
sS'name'
p40015
S'radii'
p40016
sS'required'
p40017
I01
sS'group_name'
p40018
Nsa(dp40019
S'description'
p40020
S'The radius of a circle\n'
p40021
sS'cpp_type'
p40022
S'double'
p40023
sS'default'
p40024
S'0'
p40025
sS'name'
p40026
S'radius'
p40027
sS'required'
p40028
I01
sS'group_name'
p40029
Nsa(dp40030
S'description'
p40031
S'Plus or minus Percent of random variation in the bubble radius\n'
p40032
sS'cpp_type'
p40033
S'double'
p40034
sS'default'
p40035
S'0'
p40036
sS'name'
p40037
S'radius_variation'
p40038
sS'required'
p40039
I00
sS'group_name'
p40040
Nsa(dp40041
S'description'
p40042
S'random seed\n'
p40043
sS'cpp_type'
p40044
S'unsigned int'
p40045
sS'default'
p40046
S'2000'
p40047
sS'name'
p40048
S'rand_seed'
p40049
sS'required'
p40050
I00
sS'group_name'
p40051
Nsa(dp40052
S'description'
p40053
g3
sS'cpp_type'
p40054
S'std::string'
p40055
sS'default'
p40056
S'SpecifiedSmoothCircleIC'
p40057
sS'name'
p40058
S'type'
p40059
sS'required'
p40060
I00
sS'group_name'
p40061
Nsa(dp40062
S'description'
p40063
S'The variable this initial condition is supposed to provide values for.\n'
p40064
sS'cpp_type'
p40065
S'VariableName'
p40066
sS'default'
p40067
g3
sS'name'
p40068
S'variable'
p40069
sS'required'
p40070
I01
sS'group_name'
p40071
Nsa(dp40072
S'description'
p40073
S'The x coordinate of the circle center\n'
p40074
sS'cpp_type'
p40075
S'double'
p40076
sS'default'
p40077
S'0'
p40078
sS'name'
p40079
S'x1'
p40080
sS'required'
p40081
I01
sS'group_name'
p40082
Nsa(dp40083
S'description'
p40084
S'The x-coordinate for each circle center\n'
p40085
sS'cpp_type'
p40086
S'std::vector<double, std::allocator<double> >'
p40087
sS'default'
p40088
g3
sS'name'
p40089
S'x_positions'
p40090
sS'required'
p40091
I01
sS'group_name'
p40092
Nsa(dp40093
S'description'
p40094
S'The y coordinate of the circle center\n'
p40095
sS'cpp_type'
p40096
S'double'
p40097
sS'default'
p40098
S'0'
p40099
sS'name'
p40100
S'y1'
p40101
sS'required'
p40102
I01
sS'group_name'
p40103
Nsa(dp40104
S'description'
p40105
S'The y-coordinate for each circle center\n'
p40106
sS'cpp_type'
p40107
S'std::vector<double, std::allocator<double> >'
p40108
sS'default'
p40109
g3
sS'name'
p40110
S'y_positions'
p40111
sS'required'
p40112
I01
sS'group_name'
p40113
Nsa(dp40114
S'description'
p40115
S'The z coordinate of the circle center\n'
p40116
sS'cpp_type'
p40117
S'double'
p40118
sS'default'
p40119
S'0'
p40120
sS'name'
p40121
S'z1'
p40122
sS'required'
p40123
I00
sS'group_name'
p40124
Nsa(dp40125
S'description'
p40126
S'The z-coordinate for each circle center\n'
p40127
sS'cpp_type'
p40128
S'std::vector<double, std::allocator<double> >'
p40129
sS'default'
p40130
g3
sS'name'
p40131
S'z_positions'
p40132
sS'required'
p40133
I01
sS'group_name'
p40134
NsasS'name'
p40135
S'/Variables/*/InitialCondition/<type>/SpecifiedSmoothCircleIC'
p40136
sa(dp40137
S'description'
p40138
g3
sS'type'
p40139
NsS'subblocks'
p40140
NsS'parameters'
p40141
(lp40142
(dp40143
S'description'
p40144
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p40145
sS'cpp_type'
p40146
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p40147
sS'default'
p40148
g3
sS'name'
p40149
S'block'
p40150
sS'required'
p40151
I00
sS'group_name'
p40152
Nsa(dp40153
S'description'
p40154
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40155
sS'cpp_type'
p40156
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p40157
sS'default'
p40158
g3
sS'name'
p40159
S'boundary'
p40160
sS'required'
p40161
I00
sS'group_name'
p40162
Nsa(dp40163
S'description'
p40164
S'The z coordinate of the circle center\n'
p40165
sS'cpp_type'
p40166
S'double'
p40167
sS'default'
p40168
g3
sS'name'
p40169
S'height'
p40170
sS'required'
p40171
I01
sS'group_name'
p40172
Nsa(dp40173
S'description'
p40174
S'The variable value inside the circle\n'
p40175
sS'cpp_type'
p40176
S'double'
p40177
sS'default'
p40178
g3
sS'name'
p40179
S'invalue'
p40180
sS'required'
p40181
I01
sS'group_name'
p40182
Nsa(dp40183
S'description'
p40184
S'The variable value outside the circle\n'
p40185
sS'cpp_type'
p40186
S'double'
p40187
sS'default'
p40188
g3
sS'name'
p40189
S'outvalue'
p40190
sS'required'
p40191
I01
sS'group_name'
p40192
Nsa(dp40193
S'description'
p40194
g3
sS'cpp_type'
p40195
S'std::string'
p40196
sS'default'
p40197
S'ThumbIC'
p40198
sS'name'
p40199
S'type'
p40200
sS'required'
p40201
I00
sS'group_name'
p40202
Nsa(dp40203
S'description'
p40204
S'The variable this initial condition is supposed to provide values for.\n'
p40205
sS'cpp_type'
p40206
S'VariableName'
p40207
sS'default'
p40208
g3
sS'name'
p40209
S'variable'
p40210
sS'required'
p40211
I01
sS'group_name'
p40212
Nsa(dp40213
S'description'
p40214
S'The y coordinate of the circle center\n'
p40215
sS'cpp_type'
p40216
S'double'
p40217
sS'default'
p40218
g3
sS'name'
p40219
S'width'
p40220
sS'required'
p40221
I01
sS'group_name'
p40222
Nsa(dp40223
S'description'
p40224
S'The x coordinate of the circle center\n'
p40225
sS'cpp_type'
p40226
S'double'
p40227
sS'default'
p40228
g3
sS'name'
p40229
S'xcoord'
p40230
sS'required'
p40231
I01
sS'group_name'
p40232
NsasS'name'
p40233
S'/Variables/*/InitialCondition/<type>/ThumbIC'
p40234
sa(dp40235
S'description'
p40236
g3
sS'type'
p40237
NsS'subblocks'
p40238
NsS'parameters'
p40239
(lp40240
(dp40241
S'description'
p40242
S'The list of ids of the blocks (SubdomainID) that this kernel will be applied to\n'
p40243
sS'cpp_type'
p40244
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p40245
sS'default'
p40246
g3
sS'name'
p40247
S'block'
p40248
sS'required'
p40249
I00
sS'group_name'
p40250
Nsa(dp40251
S'description'
p40252
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40253
sS'cpp_type'
p40254
S'std::vector<BoundaryName, std::allocator<BoundaryName> >'
p40255
sS'default'
p40256
g3
sS'name'
p40257
S'boundary'
p40258
sS'required'
p40259
I00
sS'group_name'
p40260
Nsa(dp40261
S'description'
p40262
S'The index for the current crystal\n'
p40263
sS'cpp_type'
p40264
S'unsigned int'
p40265
sS'default'
p40266
g3
sS'name'
p40267
S'crys_index'
p40268
sS'required'
p40269
I01
sS'group_name'
p40270
Nsa(dp40271
S'description'
p40272
S'Number of crystals\n'
p40273
sS'cpp_type'
p40274
S'unsigned int'
p40275
sS'default'
p40276
g3
sS'name'
p40277
S'crys_num'
p40278
sS'required'
p40279
I01
sS'group_name'
p40280
Nsa(dp40281
S'description'
p40282
g3
sS'cpp_type'
p40283
S'std::string'
p40284
sS'default'
p40285
S'Tricrystal2CircleGrainsIC'
p40286
sS'name'
p40287
S'type'
p40288
sS'required'
p40289
I00
sS'group_name'
p40290
Nsa(dp40291
S'description'
p40292
S'The variable this initial condition is supposed to provide values for.\n'
p40293
sS'cpp_type'
p40294
S'VariableName'
p40295
sS'default'
p40296
g3
sS'name'
p40297
S'variable'
p40298
sS'required'
p40299
I01
sS'group_name'
p40300
NsasS'name'
p40301
S'/Variables/*/InitialCondition/<type>/Tricrystal2CircleGrainsIC'
p40302
sasS'parameters'
p40303
NsS'name'
p40304
S'/Variables/*/InitialCondition/<type>'
p40305
sasS'parameters'
p40306
(lp40307
(dp40308
S'description'
p40309
S'A string representing the Moose Object that will be built by this Action\n'
p40310
sS'cpp_type'
p40311
S'std::string'
p40312
sS'default'
p40313
g3
sS'name'
p40314
S'type'
p40315
sS'required'
p40316
I01
sS'group_name'
p40317
NsasS'name'
p40318
S'/Variables/*/InitialCondition'
p40319
sasS'parameters'
p40320
(lp40321
(dp40322
S'description'
p40323
S'The block id where this variable lives\n'
p40324
sS'cpp_type'
p40325
S'std::vector<SubdomainName, std::allocator<SubdomainName> >'
p40326
sS'default'
p40327
g3
sS'name'
p40328
S'block'
p40329
sS'required'
p40330
I00
sS'group_name'
p40331
Nsa(dp40332
S'name'
p40333
S'family'
p40334
sS'cpp_type'
p40335
S'MooseEnum'
p40336
sS'default'
p40337
S'LAGRANGE'
p40338
sS'description'
p40339
S'Specifies the family of FE shape functions to use for this variable\n'
p40340
sS'required'
p40341
I00
sS'options'
p40342
S'LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC'
p40343
sS'group_name'
p40344
Nsa(dp40345
S'description'
p40346
S'Specifies the initial condition for this variable\n'
p40347
sS'cpp_type'
p40348
S'double'
p40349
sS'default'
p40350
S'0'
p40351
sS'name'
p40352
S'initial_condition'
p40353
sS'required'
p40354
I00
sS'group_name'
p40355
Nsa(dp40356
S'name'
p40357
S'order'
p40358
sS'cpp_type'
p40359
S'MooseEnum'
p40360
sS'default'
p40361
S'FIRST'
p40362
sS'description'
p40363
S'Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n'
p40364
sS'required'
p40365
I00
sS'options'
p40366
S'CONSTANT FIRST SECOND THIRD FOURTH'
p40367
sS'group_name'
p40368
Nsa(dp40369
S'description'
p40370
S'Specifies a scaling factor to apply to this variable\n'
p40371
sS'cpp_type'
p40372
S'double'
p40373
sS'default'
p40374
S'1'
p40375
sS'name'
p40376
S'scaling'
p40377
sS'required'
p40378
I00
sS'group_name'
p40379
S'Advanced'
p40380
sa(dp40381
S'description'
p40382
S'Gives the timestep for which to read a solution from a file for a given variable\n'
p40383
sS'cpp_type'
p40384
S'int'
p40385
sS'default'
p40386
S'2'
p40387
sS'name'
p40388
S'initial_from_file_timestep'
p40389
sS'required'
p40390
I00
sS'group_name'
p40391
S'Initial From File'
p40392
sa(dp40393
S'description'
p40394
S'Gives the name of a variable for which to read an initial condition from a mesh file\n'
p40395
sS'cpp_type'
p40396
S'std::string'
p40397
sS'default'
p40398
g3
sS'name'
p40399
S'initial_from_file_var'
p40400
sS'required'
p40401
I00
sS'group_name'
p40402
S'Initial From File'
p40403
sasS'name'
p40404
S'/Variables/*'
p40405
sa(dp40406
S'description'
p40407
g3
sS'type'
p40408
NsS'subblocks'
p40409
NsS'parameters'
p40410
(lp40411
(dp40412
S'description'
p40413
S'specifies the number of order parameters to create\n'
p40414
sS'cpp_type'
p40415
S'unsigned int'
p40416
sS'default'
p40417
g3
sS'name'
p40418
S'crys_num'
p40419
sS'required'
p40420
I01
sS'group_name'
p40421
Nsa(dp40422
S'description'
p40423
S'Specifies the family of FE shape functions to use for this variable\n'
p40424
sS'cpp_type'
p40425
S'std::string'
p40426
sS'default'
p40427
S'LAGRANGE'
p40428
sS'name'
p40429
S'family'
p40430
sS'required'
p40431
I00
sS'group_name'
p40432
Nsa(dp40433
S'description'
p40434
S'Specifies the order of the FE shape function to use for this variable\n'
p40435
sS'cpp_type'
p40436
S'std::string'
p40437
sS'default'
p40438
S'FIRST'
p40439
sS'name'
p40440
S'order'
p40441
sS'required'
p40442
I00
sS'group_name'
p40443
Nsa(dp40444
S'description'
p40445
S'Specifies a scaling factor to apply to this variable\n'
p40446
sS'cpp_type'
p40447
S'double'
p40448
sS'default'
p40449
S'1'
p40450
sS'name'
p40451
S'scaling'
p40452
sS'required'
p40453
I00
sS'group_name'
p40454
Nsa(dp40455
S'description'
p40456
S'specifies the base name of the variables\n'
p40457
sS'cpp_type'
p40458
S'std::string'
p40459
sS'default'
p40460
g3
sS'name'
p40461
S'var_name_base'
p40462
sS'required'
p40463
I01
sS'group_name'
p40464
NsasS'name'
p40465
S'/Variables/PolycrystalVariables'
p40466
sasS'parameters'
p40467
NsS'name'
p40468
S'/Variables'
p40469
sa.