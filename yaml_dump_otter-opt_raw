S'- name: /Adaptivity\n  description: !!str\n  type: \n  parameters:\n  - name: initial_marker\n    required: No\n    default: !!str \n    cpp_type: MarkerName\n    group_name: \n    description: |\n      The name of the Marker to use to adapt the mesh during initial refinement.\n  - name: initial_steps\n    required: No\n    default: !!str 0\n    cpp_type: unsigned int\n    group_name: \n    description: |\n      The number of adaptive steps to do based on the initial condition.\n  - name: marker\n    required: No\n    default: !!str \n    cpp_type: MarkerName\n    group_name: \n    description: |\n      The name of the Marker to use to actually adapt the mesh.\n  - name: max_h_level\n    required: No\n    default: !!str 0\n    cpp_type: unsigned int\n    group_name: \n    description: |\n      Maximum number of times a single element can be refined. If 0 then infinite.\n  - name: start_time\n    required: No\n    default: !!str -1.79769e+308\n    cpp_type: double\n    group_name: \n    description: |\n      The time that adaptivity will be active after.\n  - name: steps\n    required: No\n    default: !!str 0\n    cpp_type: unsigned int\n    group_name: \n    description: |\n      The number of adaptive steps to use when doing a Steady simulation.\n  - name: stop_time\n    required: No\n    default: !!str 1.79769e+308\n    cpp_type: double\n    group_name: \n    description: |\n      The time after which adaptivity will no longer be active.\n  subblocks:\n  - name: /Adaptivity/Indicators\n    description: !!str\n    type: \n    parameters:\n    subblocks:\n    - name: /Adaptivity/Indicators/*\n      description: !!str\n      type: \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The block id where this object lives.\n      - name: type\n        required: Yes\n        default: !!str \n        cpp_type: std::string\n        group_name: \n        description: |\n          A string representing the Moose Object that will be built by this Action\n      subblocks:\n    - name: /Adaptivity/Indicators/AnalyticalIndicator\n      description: !!str\n      type: \n      parameters:\n      - name: block\n        required: No\n        default: !!str ANY_BLOCK_ID \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          block ID or name where the object works\n      - name: function\n        required: Yes\n        default: !!str \n        cpp_type: FunctionName\n        group_name: \n        description: |\n          The analytic solution to compare against\n      - name: type\n        required: No\n        default: !!str AnalyticalIndicator\n        cpp_type: std::string\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      - name: variable\n        required: Yes\n        default: !!str \n        cpp_type: VariableName\n        group_name: \n        description: |\n          The name of the variable that this Indicator operates on\n      subblocks:\n    - name: /Adaptivity/Indicators/FluxJumpIndicator\n      description: !!str\n      type: \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: property\n        required: Yes\n        default: !!str \n        cpp_type: std::string\n        group_name: \n        description: |\n          The name of the material property to used as the \'diffusivity\'\n      - name: scale_by_flux_faces\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n      - name: type\n        required: No\n        default: !!str FluxJumpIndicator\n        cpp_type: std::string\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      - name: variable\n        required: Yes\n        default: !!str \n        cpp_type: VariableName\n        group_name: \n        description: |\n          The name of the variable that this side indicator applies to\n      subblocks:\n    - name: /Adaptivity/Indicators/GradientJumpIndicator\n      description: !!str\n      type: \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: scale_by_flux_faces\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n      - name: type\n        required: No\n        default: !!str GradientJumpIndicator\n        cpp_type: std::string\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      - name: variable\n        required: Yes\n        default: !!str \n        cpp_type: VariableName\n        group_name: \n        description: |\n          The name of the variable that this side indicator applies to\n      subblocks:\n    - name: /Adaptivity/Indicators/LaplacianJumpIndicator\n      description: !!str\n      type: \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: scale_by_flux_faces\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n      - name: type\n        required: No\n        default: !!str LaplacianJumpIndicator\n        cpp_type: std::string\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      - name: variable\n        required: Yes\n        default: !!str \n        cpp_type: VariableName\n        group_name: \n        description: |\n          The name of the variable that this side indicator applies to\n      subblocks:\n  - name: /Adaptivity/Markers\n    description: !!str\n    type: \n    parameters:\n    subblocks:\n    - name: /Adaptivity/Markers/*\n      description: !!str\n      type: \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The block id where this object lives.\n      - name: type\n        required: Yes\n        default: !!str \n        cpp_type: std::string\n        group_name: \n        description: |\n          A string representing the Moose Object that will be built by this Action\n      subblocks:\n    - name: /Adaptivity/Markers/BoxMarker\n      description: !!str\n      type: \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: bottom_left\n        required: Yes\n        default: !!str \n        cpp_type: libMesh::VectorValue<double>\n        group_name: \n        description: |\n          The bottom left point (in x,y,z with spaces in-between).\n      - name: inside\n        required: Yes\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: dont_mark coarsen do_nothing refine\n        description: |\n          How to mark elements inside the box.\n      - name: outside\n        required: Yes\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: dont_mark coarsen do_nothing refine\n        description: |\n          How to mark elements outside the box.\n      - name: top_right\n        required: Yes\n        default: !!str \n        cpp_type: libMesh::VectorValue<double>\n        group_name: \n        description: |\n          The bottom left point (in x,y,z with spaces in-between).\n      - name: type\n        required: No\n        default: !!str BoxMarker\n        cpp_type: std::string\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      subblocks:\n    - name: /Adaptivity/Markers/ComboMarker\n      description: !!str\n      type: \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: markers\n        required: Yes\n        default: !!str \n        cpp_type: std::vector<MarkerName, std::allocator<MarkerName> >\n        group_name: \n        description: |\n          The Markers to combine.\n      - name: type\n        required: No\n        default: !!str ComboMarker\n        cpp_type: std::string\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      subblocks:\n    - name: /Adaptivity/Markers/ErrorFractionMarker\n      description: !!str\n      type: \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: coarsen\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Elements within this percentage of the min error will be coarsened.  Must be between 0 and 1!\n      - name: indicator\n        required: Yes\n        default: !!str \n        cpp_type: IndicatorName\n        group_name: \n        description: |\n          The name of the Indicator that this Marker uses.\n      - name: refine\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Elements within this percentage of the max error will be refined.  Must be between 0 and 1!\n      - name: type\n        required: No\n        default: !!str ErrorFractionMarker\n        cpp_type: std::string\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      subblocks:\n    - name: /Adaptivity/Markers/ErrorToleranceMarker\n      description: !!str\n      type: \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: coarsen\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Elements with error less than this will be coarsened.\n      - name: indicator\n        required: Yes\n        default: !!str \n        cpp_type: IndicatorName\n        group_name: \n        description: |\n          The name of the Indicator that this Marker uses.\n      - name: refine\n        required: No\n        default: !!str 1.79769e+308\n        cpp_type: double\n        group_name: \n        description: |\n          Elements with error more than this will be refined.\n      - name: type\n        required: No\n        default: !!str ErrorToleranceMarker\n        cpp_type: std::string\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      subblocks:\n    - name: /Adaptivity/Markers/OrientedBoxMarker\n      description: !!str\n      type: \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: center\n        required: Yes\n        default: !!str \n        cpp_type: libMesh::Point\n        group_name: \n        description: |\n          The center (many people spell this \'center\') of the box.\n      - name: height\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The height of the box\n      - name: inside\n        required: Yes\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: dont_mark coarsen do_nothing refine\n        description: |\n          How to mark elements inside the box.\n      - name: length\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The length of the box\n      - name: length_direction\n        required: Yes\n        default: !!str \n        cpp_type: libMesh::VectorValue<double>\n        group_name: \n        description: |\n          The direction along which the length is oriented (must be perpendicular to width_direction).\n      - name: outside\n        required: Yes\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: dont_mark coarsen do_nothing refine\n        description: |\n          How to mark elements outside the box.\n      - name: type\n        required: No\n        default: !!str OrientedBoxMarker\n        cpp_type: std::string\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      - name: width\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The width of the box\n      - name: width_direction\n        required: Yes\n        default: !!str \n        cpp_type: libMesh::VectorValue<double>\n        group_name: \n        description: |\n          The direction along which the width is oriented.\n      subblocks:\n    - name: /Adaptivity/Markers/UniformMarker\n      description: !!str\n      type: \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: mark\n        required: Yes\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: dont_mark coarsen do_nothing refine\n        description: |\n          How to mark elements.\n      - name: type\n        required: No\n        default: !!str UniformMarker\n        cpp_type: std::string\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      subblocks:\n    - name: /Adaptivity/Markers/ValueRangeMarker\n      description: !!str\n      type: \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: buffer_size\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          A buffer zone value added to both ends of the range where a third_state marker can be returned.\n      - name: invert\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          If this is true then values inside the range will be coarsened, and values outside the range will be refined.\n      - name: lower_bound\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The lower bound value for the range.\n      - name: third_state\n        required: No\n        default: !!str DONT_MARK\n        cpp_type: MooseEnum\n        group_name: \n        options: DONT_MARK COARSEN DO_NOTHING REFINE\n        description: |\n          The Marker state to apply to values in the buffer zone (both ends of the range).\n      - name: type\n        required: No\n        default: !!str ValueRangeMarker\n        cpp_type: std::string\n        group_name: \n        description: |\n          \n      - name: upper_bound\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The upper bound value for the range.\n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      - name: variable\n        required: Yes\n        default: !!str \n        cpp_type: VariableName\n        group_name: \n        description: |\n          The variable whose values are used in this marker.\n      subblocks:\n    - name: /Adaptivity/Markers/ValueThresholdMarker\n      description: !!str\n      type: \n      parameters:\n      - name: block\n        required: No\n        default: !!str \n        cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n        group_name: \n        description: |\n          The list of block ids (SubdomainID) that this object will be applied\n      - name: coarsen\n        required: No\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The threshold value for coarsening.  Elements with variable values beyond this will be marked for coarsening.\n      - name: invert\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          If this is true then values _below_ \'refine\' will be refined and _above_ \'coarsen\' will be coarsened.\n      - name: refine\n        required: No\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The threshold value for refinement.  Elements with variable values beyond this will be marked for refinement.\n      - name: third_state\n        required: No\n        default: !!str DONT_MARK\n        cpp_type: MooseEnum\n        group_name: \n        options: DONT_MARK COARSEN DO_NOTHING REFINE\n        description: |\n          The Marker state to apply to values falling in-between the coarsen and refine thresholds.\n      - name: type\n        required: No\n        default: !!str ValueThresholdMarker\n        cpp_type: std::string\n        group_name: \n        description: |\n          \n      - name: use_displaced_mesh\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n      - name: variable\n        required: Yes\n        default: !!str \n        cpp_type: VariableName\n        group_name: \n        description: |\n          The values of this variable will be compared to \'refine\' and \'coarsen\' to see what should be done with the element\n      subblocks:\n- name: /AuxBCs\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /AuxBCs/*\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /AuxBCs/BndsCalcAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: crys_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        number of grains\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str BndsCalcAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: var_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        base for variable names\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxBCs/BoundsAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bounded_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to be bounded\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: lower\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The lower bound for the variable\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str BoundsAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: upper\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The upper bound for the variable\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxBCs/ConstantAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConstantAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Some constant value that can be read from the input file\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxBCs/DebugResidualAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: debug_variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The variable that is being debugged.\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DebugResidualAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxBCs/FunctionAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function to use as the value\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str FunctionAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxBCs/GapValueAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary on the other side of a gap.\n    - name: paired_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to get the value of.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str GapValueAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: warnings\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to output warning messages concerning nodes not being found\n    subblocks:\n  - name: /AuxBCs/MaterialRealAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The scalar material property name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxBCs/MaterialRealTensorValueAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: column\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The column component to consider for this kernel\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The scalar material property name\n    - name: row\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The row component to consider for this kernel\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealTensorValueAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxBCs/MaterialRealVectorValueAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The vector component to consider for this kernel\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The scalar material property name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealVectorValueAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxBCs/NearestNodeDistanceAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to find the distance to.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NearestNodeDistanceAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxBCs/NearestNodeValueAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to get the value from.\n    - name: paired_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to get the value of.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NearestNodeValueAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxBCs/NodalFloodCountAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bubble_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The NodalFloodCount UserObject to get values from.\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: field_display\n      required: No\n      default: !!str UNIQUE_REGION\n      cpp_type: MooseEnum\n      group_name: \n      options: UNIQUE_REGION VARIABLE_COLORING ACTIVE_BOUNDS CENTROID\n      description: |\n        Determines how the auxilary field should be colored. (UNIQUE_REGION and VARIABLE_COLORING are nodal, CENTROID is elemental, default: UNIQUE_REGION)\n    - name: map_index\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of which map to retrieve values from when using NodalFloodCount with multiple maps.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalFloodCountAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxBCs/NormalizationAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: normal_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The normalization factor\n    - name: normalization\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The postprocessor on the source\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to be normalized\n    - name: type\n      required: No\n      default: !!str NormalizationAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxBCs/PenetrationAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to be penetrated\n    - name: quantity\n      required: No\n      default: !!str distance\n      cpp_type: std::string\n      group_name: \n      description: |\n        The quantity to recover from the available penetration information: distance(default), tangential_distance, normal_x, normal_y, normal_z, closest_point_x, closest_point_y, closest_point_z, element_id, side, incremental_slip_x, incremental_slip_y, incremental_slip_z, incremental_slip_magnitude, accumulated_slip, force_x, force_y, force_z, normal_force_magnitude, normal_force_x, normal_force_y, normal_force_z, tangential_force_magnitude, tangential_force_x, tangential_force_y, tangential_force_z, frictional_energy, mechanical_status\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str PenetrationAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxBCs/ProcessorIDAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ProcessorIDAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxBCs/QuotientAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: denominator\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The downstairs of the quotient variable\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: numerator\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The upstairs of the quotient variable\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str QuotientAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxBCs/SelfAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SelfAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxBCs/SolutionAux\n    description: !!str\n    type: \n    parameters:\n    - name: add_factor\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Add this value (b) to the solution (x): ax+b, where a is the \'scale_factor\'\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: direct\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true the meshes must be the same and then the values are simply copied over.\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: from_variable\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The name of the variable to extract from the file\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor (a)  to be applied to the solution (x): ax+b, where b is the \'add_factor\'\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: solution\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The name of the SolutionUserObject\n    - name: type\n      required: No\n      default: !!str SolutionAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxBCs/SpatialUserObjectAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SpatialUserObjectAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: user_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxBCs/VectorMagnitudeAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VectorMagnitudeAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-component of the vector\n    - name: y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-component of the vector\n    - name: z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-component of the vector\n    subblocks:\n- name: /AuxKernels\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /AuxKernels/*\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /AuxKernels/BndsCalcAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: crys_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        number of grains\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str BndsCalcAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: var_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        base for variable names\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/BoundsAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bounded_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to be bounded\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: lower\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The lower bound for the variable\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str BoundsAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: upper\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The upper bound for the variable\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/ConstantAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConstantAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Some constant value that can be read from the input file\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/DebugResidualAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: debug_variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The variable that is being debugged.\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DebugResidualAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/FunctionAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function to use as the value\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str FunctionAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/GapValueAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary on the other side of a gap.\n    - name: paired_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to get the value of.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str GapValueAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: warnings\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to output warning messages concerning nodes not being found\n    subblocks:\n  - name: /AuxKernels/MaterialRealAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The scalar material property name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/MaterialRealTensorValueAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: column\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The column component to consider for this kernel\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The scalar material property name\n    - name: row\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The row component to consider for this kernel\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealTensorValueAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/MaterialRealVectorValueAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The vector component to consider for this kernel\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The scalar material property name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealVectorValueAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/NearestNodeDistanceAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to find the distance to.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NearestNodeDistanceAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/NearestNodeValueAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to get the value from.\n    - name: paired_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to get the value of.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NearestNodeValueAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/NodalFloodCountAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bubble_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The NodalFloodCount UserObject to get values from.\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: field_display\n      required: No\n      default: !!str UNIQUE_REGION\n      cpp_type: MooseEnum\n      group_name: \n      options: UNIQUE_REGION VARIABLE_COLORING ACTIVE_BOUNDS CENTROID\n      description: |\n        Determines how the auxilary field should be colored. (UNIQUE_REGION and VARIABLE_COLORING are nodal, CENTROID is elemental, default: UNIQUE_REGION)\n    - name: map_index\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of which map to retrieve values from when using NodalFloodCount with multiple maps.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalFloodCountAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/NormalizationAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: normal_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The normalization factor\n    - name: normalization\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The postprocessor on the source\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to be normalized\n    - name: type\n      required: No\n      default: !!str NormalizationAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/PenetrationAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to be penetrated\n    - name: quantity\n      required: No\n      default: !!str distance\n      cpp_type: std::string\n      group_name: \n      description: |\n        The quantity to recover from the available penetration information: distance(default), tangential_distance, normal_x, normal_y, normal_z, closest_point_x, closest_point_y, closest_point_z, element_id, side, incremental_slip_x, incremental_slip_y, incremental_slip_z, incremental_slip_magnitude, accumulated_slip, force_x, force_y, force_z, normal_force_magnitude, normal_force_x, normal_force_y, normal_force_z, tangential_force_magnitude, tangential_force_x, tangential_force_y, tangential_force_z, frictional_energy, mechanical_status\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str PenetrationAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/ProcessorIDAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ProcessorIDAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/QuotientAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: denominator\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The downstairs of the quotient variable\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: numerator\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The upstairs of the quotient variable\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str QuotientAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/SelfAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SelfAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/SolutionAux\n    description: !!str\n    type: \n    parameters:\n    - name: add_factor\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Add this value (b) to the solution (x): ax+b, where a is the \'scale_factor\'\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: direct\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true the meshes must be the same and then the values are simply copied over.\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: from_variable\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The name of the variable to extract from the file\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor (a)  to be applied to the solution (x): ax+b, where b is the \'add_factor\'\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: solution\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The name of the SolutionUserObject\n    - name: type\n      required: No\n      default: !!str SolutionAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/SpatialUserObjectAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SpatialUserObjectAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: user_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /AuxKernels/VectorMagnitudeAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VectorMagnitudeAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-component of the vector\n    - name: y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-component of the vector\n    - name: z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-component of the vector\n    subblocks:\n- name: /AuxScalarKernels\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /AuxScalarKernels/*\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /AuxScalarKernels/ConstantScalarAux\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: No\n      default: !!str ConstantScalarAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value to be set to the scalar variable.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    subblocks:\n- name: /AuxVariables\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /AuxVariables/*\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The block id where this variable lives\n    - name: family\n      required: No\n      default: !!str LAGRANGE\n      cpp_type: MooseEnum\n      group_name: \n      options: LAGRANGE MONOMIAL SCALAR\n      description: |\n        Specifies the family of FE shape functions to use for this variable\n    - name: initial_condition\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Specifies the initial condition for this variable\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH\n      description: |\n        Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n    - name: initial_from_file_timestep\n      required: No\n      default: !!str 2\n      cpp_type: int\n      group_name: Initial From File\n      description: |\n        Gives the timestep for which to read a solution from a file for a given variable\n    - name: initial_from_file_var\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: Initial From File\n      description: |\n        Gives the name of a variable for which to read an initial condition from a mesh file\n    subblocks:\n    - name: /AuxVariables/*/InitialCondition\n      description: !!str\n      type: \n      parameters:\n      - name: type\n        required: Yes\n        default: !!str \n        cpp_type: std::string\n        group_name: \n        description: |\n          A string representing the Moose Object that will be built by this Action\n      subblocks:\n      - name: /AuxVariables/*/InitialCondition/<type>\n        description: !!str\n        type: \n        parameters:\n        subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/BoundingBoxIC\n          description: !!str\n          type: \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: inside\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The value of the variable inside the box\n          - name: outside\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The value of the variable outside the box\n          - name: type\n            required: No\n            default: !!str BoundingBoxIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the lower left-hand corner of the box\n          - name: x2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the upper right-hand corner of the box\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the lower left-hand corner of the box\n          - name: y2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the upper right-hand corner of the box\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the lower left-hand corner of the box\n          - name: z2\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the upper right-hand corner of the box\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/ConstantIC\n          description: !!str\n          type: \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: type\n            required: No\n            default: !!str ConstantIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: value\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The value to be set in IC\n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/CrossIC\n          description: !!str\n          type: \n          parameters:\n          - name: amplitude\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              The amplitude\n          - name: average\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The average value\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: buffer\n            required: No\n            default: !!str 0.03125\n            cpp_type: double\n            group_name: \n            description: |\n              A small area between the max value and the interface\n          - name: interface\n            required: No\n            default: !!str 0.03125\n            cpp_type: double\n            group_name: \n            description: |\n              The interface width\n          - name: length\n            required: No\n            default: !!str 0.75\n            cpp_type: double\n            group_name: \n            description: |\n              The length\n          - name: type\n            required: No\n            default: !!str CrossIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: width\n            required: No\n            default: !!str 0.125\n            cpp_type: double\n            group_name: \n            description: |\n              The width\n          - name: x1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the lower left-hand corner of the box\n          - name: x2\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the upper right-hand corner of the box\n          - name: y1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the lower left-hand corner of the box\n          - name: y2\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the upper right-hand corner of the box\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/FunctionIC\n          description: !!str\n          type: \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: function\n            required: Yes\n            default: !!str \n            cpp_type: FunctionName\n            group_name: \n            description: |\n              The initial condition function.\n          - name: type\n            required: No\n            default: !!str FunctionIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/HexPolycrystalIC\n          description: !!str\n          type: \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: cody_test\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Use set grain center points for Cody\'s test. Grain num MUST equal 10\n          - name: columnar_3D\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              3D microstructure will be columnar in the z-direction?\n          - name: crys_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The index for the current order parameter\n          - name: crys_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of order parameters\n          - name: grain_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of grains being represented by the order parameters\n          - name: perturbation_percent\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The percent to randomly perturbate centers of grains relative to the size of the grain\n          - name: rand_seed\n            required: No\n            default: !!str 12444\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The random seed\n          - name: typ\n            required: No\n            default: !!str 1\n            cpp_type: int\n            group_name: \n            description: |\n              \n          - name: type\n            required: No\n            default: !!str HexPolycrystalIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x_offset\n            required: No\n            default: !!str 0.5\n            cpp_type: double\n            group_name: \n            description: |\n              Specifies offset of hexagon grid in x-direction\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/LatticeSmoothCircleIC\n          description: !!str\n          type: \n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: Lx\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              length of simulation domain in x-direction\n          - name: Ly\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              length of simulation domain in y-direction\n          - name: Lz\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              length of simulation domain in z-direction\n          - name: Rnd_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Variation from central lattice position\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: bubspac\n            required: Yes\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              minimum spacing of bubbles, measured from center to center\n          - name: circles_per_side\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n            group_name: \n            description: |\n              Vector containing the number of bubbles along each side\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: numbub\n            required: Yes\n            default: !!str 0\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of bubbles to be placed on GB\n          - name: numtries\n            required: No\n            default: !!str 1000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of tries\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The radius of a circle\n          - name: radius_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus Percent of random variation in the bubble radius\n          - name: rand_seed\n            required: No\n            default: !!str 2000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              random seed\n          - name: type\n            required: No\n            default: !!str LatticeSmoothCircleIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the circle center\n          - name: y1\n            required: Yes\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the circle center\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the circle center\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/MultiSmoothCircleIC\n          description: !!str\n          type: \n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: Lx\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              length of simulation domain in x-direction\n          - name: Ly\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              length of simulation domain in y-direction\n          - name: Lz\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              length of simulation domain in z-direction\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: bubspac\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              minimum spacing of bubbles, measured from center to center\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: numbub\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of bubbles to be placed on GB\n          - name: numtries\n            required: No\n            default: !!str 1000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of tries\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The radius of a circle\n          - name: radius_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus Percent of random variation in the bubble radius\n          - name: rand_seed\n            required: No\n            default: !!str 2000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              random seed\n          - name: type\n            required: No\n            default: !!str MultiSmoothCircleIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the circle center\n          - name: y1\n            required: Yes\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the circle center\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the circle center\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/PolycrystalRandomIC\n          description: !!str\n          type: \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: crys_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The index for the current order parameter\n          - name: crys_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of order parameters\n          - name: typ\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Type of random grain structure\n          - name: type\n            required: No\n            default: !!str PolycrystalRandomIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/PolycrystalReducedIC\n          description: !!str\n          type: \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: cody_test\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Use set grain center points for Cody\'s test. Grain num MUST equal 10\n          - name: columnar_3D\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              3D microstructure will be columnar in the z-direction?\n          - name: crys_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The index for the current order parameter\n          - name: crys_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of order parameters\n          - name: grain_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of grains being represented by the order parameters\n          - name: rand_seed\n            required: No\n            default: !!str 12444\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The random seed\n          - name: type\n            required: No\n            default: !!str PolycrystalReducedIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/RandomIC\n          description: !!str\n          type: \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: max\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              Upper bound of the randomly generated values\n          - name: min\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Lower bound of the randomly generated values\n          - name: seed\n            required: No\n            default: !!str 0\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str RandomIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/RndBoundingBoxIC\n          description: !!str\n          type: \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: mn_invalue\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The min value of the variable invalue the box\n          - name: mn_outvalue\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The min value of the variable outvalue the box\n          - name: mx_invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The max value of the variable invalue the box\n          - name: mx_outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The max value of the variable outvalue the box\n          - name: type\n            required: No\n            default: !!str RndBoundingBoxIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the lower left-hand corner of the box\n          - name: x2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the upper right-hand corner of the box\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the lower left-hand corner of the box\n          - name: y2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the upper right-hand corner of the box\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the lower left-hand corner of the box\n          - name: z2\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the upper right-hand corner of the box\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/RndSmoothCircleIC\n          description: !!str\n          type: \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: mn_invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The min variable value inside the circle\n          - name: mn_outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The min variable value outside the circle\n          - name: mx_invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The max variable value inside the circle\n          - name: mx_outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The max variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The radius of a circle\n          - name: seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str RndSmoothCircleIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the circle center\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the circle center\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the circle center\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/ScalarComponentIC\n          description: !!str\n          type: \n          parameters:\n          - name: type\n            required: No\n            default: !!str ScalarComponentIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: values\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Initial values to initialize the scalar variable.\n          - name: variable\n            required: No\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/ScalarConstantIC\n          description: !!str\n          type: \n          parameters:\n          - name: type\n            required: No\n            default: !!str ScalarConstantIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: value\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              \n          - name: variable\n            required: No\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/SmoothCircleIC\n          description: !!str\n          type: \n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The radius of a circle\n          - name: type\n            required: No\n            default: !!str SmoothCircleIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the circle center\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the circle center\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the circle center\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/SpecifiedSmoothCircleIC\n          description: !!str\n          type: \n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: Lx\n            required: Yes\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              length of simulation domain in x-direction\n          - name: Ly\n            required: Yes\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              length of simulation domain in y-direction\n          - name: Lz\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              length of simulation domain in z-direction\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: bubspac\n            required: Yes\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              minimum spacing of bubbles, measured from center to center\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: numbub\n            required: Yes\n            default: !!str 0\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of bubbles to be placed on GB\n          - name: numtries\n            required: No\n            default: !!str 1000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of tries\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radii\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The radius for each circle\n          - name: radius\n            required: Yes\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The radius of a circle\n          - name: radius_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus Percent of random variation in the bubble radius\n          - name: rand_seed\n            required: No\n            default: !!str 2000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              random seed\n          - name: type\n            required: No\n            default: !!str SpecifiedSmoothCircleIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the circle center\n          - name: x_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The x-coordinate for each circle center\n          - name: y1\n            required: Yes\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the circle center\n          - name: y_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The y-coordinate for each circle center\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the circle center\n          - name: z_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The z-coordinate for each circle center\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/ThumbIC\n          description: !!str\n          type: \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: height\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the circle center\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: type\n            required: No\n            default: !!str ThumbIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: width\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the circle center\n          - name: xcoord\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the circle center\n          subblocks:\n        - name: /AuxVariables/*/InitialCondition/<type>/Tricrystal2CircleGrainsIC\n          description: !!str\n          type: \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: crys_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The index for the current crystal\n          - name: crys_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of crystals\n          - name: type\n            required: No\n            default: !!str Tricrystal2CircleGrainsIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n- name: /BCs\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /BCs/*\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/ConvectiveFluxBC\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: duration\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: final\n      required: No\n      default: !!str 500\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: initial\n      required: No\n      default: !!str 500\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: rate\n      required: No\n      default: !!str 7500\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConvectiveFluxBC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/DGFunctionDiffusionDirichletBC\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: epsilon\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Epsilon\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The forcing function.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: sigma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Sigma\n    - name: type\n      required: No\n      default: !!str DGFunctionDiffusionDirichletBC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The value the variable should have on the boundary\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/DiffusionFluxBC\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DiffusionFluxBC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/DirichletBC\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DirichletBC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Value of the BC\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/FunctionDirichletBC\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The forcing function.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str FunctionDirichletBC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/FunctionNeumannBC\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function.\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str FunctionNeumannBC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/FunctionPresetBC\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The forcing function.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str FunctionPresetBC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/MatchedValueBC\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MatchedValueBC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/NeumannBC\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NeumannBC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the gradient on the boundary.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/Periodic\n    description: !!str\n    type: \n    parameters:\n    subblocks:\n    - name: /BCs/Periodic/*\n      description: !!str\n      type: \n      parameters:\n      - name: auto_direction\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::string, std::allocator<std::string> >\n        group_name: \n        description: |\n          If using a generated mesh, you can specifiy just the dimension(s) you want to mark as periodic\n      - name: inv_transform_func\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::string, std::allocator<std::string> >\n        group_name: \n        description: |\n          Functions that specify the inverse transformation\n      - name: primary\n        required: No\n        default: !!str \n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          Boundary ID associated with the primary boundary.\n      - name: secondary\n        required: No\n        default: !!str \n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          Boundary ID associated with the secondary boundary.\n      - name: transform_func\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::string, std::allocator<std::string> >\n        group_name: \n        description: |\n          Functions that specify the transformation\n      - name: translation\n        required: No\n        default: !!str \n        cpp_type: libMesh::VectorValue<double>\n        group_name: \n        description: |\n          Vector that translates coordinates on the primary boundary to coordinates on the secondary boundary.\n      - name: variable\n        required: No\n        default: !!str \n        cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n        group_name: \n        description: |\n          Variable for the periodic boundary\n      subblocks:\n  - name: /BCs/PresetBC\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str PresetBC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Value of the BC\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/SinDirichletBC\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: duration\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: final\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: initial\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SinDirichletBC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/SinNeumannBC\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: duration\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The duration of the ramp\n    - name: final\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The final value of the gradient on the boundary\n    - name: initial\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The initial value of the gradient on the boundary\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SinNeumannBC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/VacuumBC\n    description: !!str\n    type: \n    parameters:\n    - name: alpha\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        No idea.\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VacuumBC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /BCs/VectorNeumannBC\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VectorNeumannBC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    - name: vector_value\n      required: No\n      default: !!str 0 0 0\n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        vector this BC should act in\n    subblocks:\n  - name: /BCs/WeakGradientBC\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str WeakGradientBC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n- name: /Bounds\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /Bounds/*\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Bounds/BndsCalcAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: crys_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        number of grains\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str BndsCalcAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variables\n    - name: var_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        base for variable names\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/BoundsAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bounded_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to be bounded\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: lower\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The lower bound for the variable\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str BoundsAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: upper\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The upper bound for the variable\n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/ConstantAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConstantAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Some constant value that can be read from the input file\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/DebugResidualAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: debug_variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The variable that is being debugged.\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DebugResidualAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/FunctionAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The function to use as the value\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str FunctionAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/GapValueAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary on the other side of a gap.\n    - name: paired_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to get the value of.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str GapValueAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: warnings\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether to output warning messages concerning nodes not being found\n    subblocks:\n  - name: /Bounds/MaterialRealAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The scalar material property name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/MaterialRealTensorValueAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: column\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The column component to consider for this kernel\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The scalar material property name\n    - name: row\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The row component to consider for this kernel\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealTensorValueAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/MaterialRealVectorValueAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: component\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The vector component to consider for this kernel\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The factor by which to multiply your material property for visualization\n    - name: offset\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The offset to add to your material property for visualization\n    - name: property\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The scalar material property name\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MaterialRealVectorValueAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/NearestNodeDistanceAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to find the distance to.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NearestNodeDistanceAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/NearestNodeValueAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to get the value from.\n    - name: paired_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to get the value of.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NearestNodeValueAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/NodalFloodCountAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bubble_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The NodalFloodCount UserObject to get values from.\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: field_display\n      required: No\n      default: !!str UNIQUE_REGION\n      cpp_type: MooseEnum\n      group_name: \n      options: UNIQUE_REGION VARIABLE_COLORING ACTIVE_BOUNDS CENTROID\n      description: |\n        Determines how the auxilary field should be colored. (UNIQUE_REGION and VARIABLE_COLORING are nodal, CENTROID is elemental, default: UNIQUE_REGION)\n    - name: map_index\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index of which map to retrieve values from when using NodalFloodCount with multiple maps.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalFloodCountAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/NormalizationAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: normal_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The normalization factor\n    - name: normalization\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The postprocessor on the source\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable to be normalized\n    - name: type\n      required: No\n      default: !!str NormalizationAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/PenetrationAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FOURTH\n      description: |\n        The finite element order\n    - name: paired_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary to be penetrated\n    - name: quantity\n      required: No\n      default: !!str distance\n      cpp_type: std::string\n      group_name: \n      description: |\n        The quantity to recover from the available penetration information: distance(default), tangential_distance, normal_x, normal_y, normal_z, closest_point_x, closest_point_y, closest_point_z, element_id, side, incremental_slip_x, incremental_slip_y, incremental_slip_z, incremental_slip_magnitude, accumulated_slip, force_x, force_y, force_z, normal_force_magnitude, normal_force_x, normal_force_y, normal_force_z, tangential_force_magnitude, tangential_force_x, tangential_force_y, tangential_force_z, frictional_energy, mechanical_status\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str PenetrationAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/ProcessorIDAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ProcessorIDAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/QuotientAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: denominator\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The downstairs of the quotient variable\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: numerator\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The upstairs of the quotient variable\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str QuotientAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/SelfAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SelfAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/SolutionAux\n    description: !!str\n    type: \n    parameters:\n    - name: add_factor\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Add this value (b) to the solution (x): ax+b, where a is the \'scale_factor\'\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: direct\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true the meshes must be the same and then the values are simply copied over.\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: from_variable\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The name of the variable to extract from the file\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor (a)  to be applied to the solution (x): ax+b, where b is the \'add_factor\'\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: solution\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The name of the SolutionUserObject\n    - name: type\n      required: No\n      default: !!str SolutionAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/SpatialUserObjectAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SpatialUserObjectAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: user_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    subblocks:\n  - name: /Bounds/VectorMagnitudeAux\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VectorMagnitudeAux\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The name of the variable that this object applies to\n    - name: x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        x-component of the vector\n    - name: y\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        y-component of the vector\n    - name: z\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        z-component of the vector\n    subblocks:\n- name: /Constraints\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /Constraints/*\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Constraints/CoupledTiedValueConstraint\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: master\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary ID associated with the master side\n    - name: master_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable on the master side of the domain\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FORTH\n      description: |\n        The finite element order used for projections\n    - name: scaling\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        scaling factor to be applied to constraint equations\n    - name: slave\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary ID associated with the slave side\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str CoupledTiedValueConstraint\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this constraint is applied to.\n    subblocks:\n  - name: /Constraints/EqualValueConstraint\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: interface\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The name of the interface.\n    - name: master_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Variable on master surface\n    - name: slave_variable\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Variable on master surface\n    - name: type\n      required: No\n      default: !!str EqualValueConstraint\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this constraint is applied to.\n    subblocks:\n  - name: /Constraints/TiedValueConstraint\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str residual\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: master\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary ID associated with the master side\n    - name: master_variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The variable on the master side of the domain\n    - name: normal_smoothing_distance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Distance from edge in parametric coordinates over which to smooth contact normal\n    - name: normal_smoothing_method\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        Method to use to smooth normals (edge_based|nodal_normal_based)\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: FIRST SECOND THIRD FORTH\n      description: |\n        The finite element order used for projections\n    - name: scaling\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        scaling factor to be applied to constraint equations\n    - name: slave\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        The boundary ID associated with the slave side\n    - name: tangential_tolerance\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Tangential distance to extend edges of contact surfaces\n    - name: type\n      required: No\n      default: !!str TiedValueConstraint\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this constraint is applied to.\n    subblocks:\n- name: /CoupledProblems\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /CoupledProblems/*\n    description: !!str\n    type: \n    parameters:\n    - name: input_file\n      required: Yes\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        File name of the input file\n    subblocks:\n    - name: /CoupledProblems/*/*\n      description: !!str\n      type: \n      parameters:\n      - name: from\n        required: Yes\n        default: !!str \n        cpp_type: std::string\n        group_name: \n        description: |\n          The name of the problem we are getting the variable from\n      - name: var_name\n        required: Yes\n        default: !!str \n        cpp_type: std::string\n        group_name: \n        description: |\n          The name of the variable we are getting from the problem\n      subblocks:\n- name: /DGKernels\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /DGKernels/*\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /DGKernels/DGDiffusion\n    description: !!str\n    type: \n    parameters:\n    - name: epsilon\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        epsilon\n    - name: sigma\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        sigma\n    - name: type\n      required: No\n      default: !!str DGDiffusion\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n- name: /Dampers\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /Dampers/*\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Dampers/ConstantDamper\n    description: !!str\n    type: \n    parameters:\n    - name: damping\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The percentage (between 0 and 1) of the newton update to take.\n    - name: type\n      required: No\n      default: !!str ConstantDamper\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this damper operates on\n    subblocks:\n  - name: /Dampers/MaxIncrement\n    description: !!str\n    type: \n    parameters:\n    - name: max_increment\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The maximum newton increment for the variable.\n    - name: type\n      required: No\n      default: !!str MaxIncrement\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this damper operates on\n    subblocks:\n- name: /Debug\n  description: !!str\n  type: \n  parameters:\n  - name: show_actions\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Print out the actions being executed\n  - name: show_material_props\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Print out the material properties supplied for each block, face, neighbor, and/or sideset\n  - name: show_parser\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Shows parser block extraction and debugging information\n  - name: show_top_residuals\n    required: No\n    default: !!str 0\n    cpp_type: unsigned int\n    group_name: \n    description: |\n      The number of top residuals to print out (0 = no output)\n  - name: show_var_residual_norms\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Print the residual norms of the individual solution variables at each nonlinear iteration\n  - name: show_var_residual\n    required: No\n    default: !!str \n    cpp_type: std::vector<NonlinearVariableName, std::allocator<NonlinearVariableName> >\n    group_name: \n    description: |\n      Variables for which residuals will be sent to the output file\n  subblocks:\n- name: /DeprecatedBlock\n  description: !!str\n  type: \n  parameters:\n  - name: DEPRECATED\n    required: No\n    default: !!str \n    cpp_type: bool\n    group_name: \n    description: |\n      *** WARNING: This block is deprecated - DO NOT USE ***\n  subblocks:\n- name: /DiracKernels\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /DiracKernels/*\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /DiracKernels/ConstantPointSource\n    description: !!str\n    type: \n    parameters:\n    - name: point\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The x,y,z coordinates of the point\n    - name: type\n      required: No\n      default: !!str ConstantPointSource\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value of the point source\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    subblocks:\n- name: /Executioner\n  description: !!str\n  type: \n  parameters:\n  - name: l_abs_step_tol\n    required: No\n    default: !!str -1\n    cpp_type: double\n    group_name: Solver\n    description: |\n      Linear Absolute Step Tolerance\n  - name: l_max_its\n    required: No\n    default: !!str 10000\n    cpp_type: unsigned int\n    group_name: Solver\n    description: |\n      Max Linear Iterations\n  - name: l_tol\n    required: No\n    default: !!str 1e-05\n    cpp_type: double\n    group_name: Solver\n    description: |\n      Linear Tolerance\n  - name: line_search\n    required: No\n    default: !!str default\n    cpp_type: MooseEnum\n    group_name: \n    options: default shell none basic l2 bt cp\n    description: |\n      Specifies the line search type (Note: none = basic)\n  - name: nl_abs_step_tol\n    required: No\n    default: !!str 1e-50\n    cpp_type: double\n    group_name: Solver\n    description: |\n      Nonlinear Absolute step Tolerance\n  - name: nl_abs_tol\n    required: No\n    default: !!str 1e-50\n    cpp_type: double\n    group_name: Solver\n    description: |\n      Nonlinear Absolute Tolerance\n  - name: nl_max_funcs\n    required: No\n    default: !!str 10000\n    cpp_type: unsigned int\n    group_name: Solver\n    description: |\n      Max Nonlinear solver function evaluations\n  - name: nl_max_its\n    required: No\n    default: !!str 50\n    cpp_type: unsigned int\n    group_name: Solver\n    description: |\n      Max Nonlinear Iterations\n  - name: nl_rel_step_tol\n    required: No\n    default: !!str 1e-50\n    cpp_type: double\n    group_name: Solver\n    description: |\n      Nonlinear Relative step Tolerance\n  - name: nl_rel_tol\n    required: No\n    default: !!str 1e-08\n    cpp_type: double\n    group_name: Solver\n    description: |\n      Nonlinear Relative Tolerance\n  - name: no_fe_reinit\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: Advanced\n    description: |\n      Specifies whether or not to reinitialize FEs\n  - name: petsc_options\n    required: No\n    default: !!str  \n    cpp_type: std::vector<MooseEnum, std::allocator<MooseEnum> >\n    group_name: \n    options: \n    description: |\n      Singleton PETSc options\n  - name: petsc_options_iname\n    required: No\n    default: !!str \n    cpp_type: std::vector<std::string, std::allocator<std::string> >\n    group_name: \n    description: |\n      Names of PETSc name/value pairs\n  - name: petsc_options_value\n    required: No\n    default: !!str \n    cpp_type: std::vector<std::string, std::allocator<std::string> >\n    group_name: \n    description: |\n      Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n  - name: solve_type\n    required: No\n    default: !!str \n    cpp_type: MooseEnum\n    group_name: \n    options: PJFNK JFNK NEWTON FD LINEAR\n    description: |\n      PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n  - name: type\n    required: Yes\n    default: !!str \n    cpp_type: std::string\n    group_name: \n    description: |\n      A string representing the Moose Object that will be built by this Action\n  subblocks:\n  - name: /Executioner/<type>\n    description: !!str\n    type: \n    parameters:\n    subblocks:\n    - name: /Executioner/<type>/CoupledTransientExecutioner\n      description: !!str\n      type: \n      parameters:\n      - name: num_steps\n        required: No\n        default: !!str 4294967295\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The number of timesteps in a transient run\n      - name: restart_file_base\n        required: No\n        default: !!str \n        cpp_type: FileNameNoExtension\n        group_name: Restart\n        description: |\n          File base name used for restart\n      - name: splitting\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::string, std::allocator<std::string> >\n        group_name: \n        description: |\n          Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n      - name: type\n        required: No\n        default: !!str CoupledTransientExecutioner\n        cpp_type: std::string\n        group_name: \n        description: |\n          \n      subblocks:\n    - name: /Executioner/<type>/InversePowerMethod\n      description: !!str\n      type: \n      parameters:\n      - name: Chebyshev_acceleration_on\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          If Chebyshev acceleration is turned on\n      - name: auto_initialization\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          True to ask the solver to set initial\n      - name: bx_norm\n        required: Yes\n        default: !!str \n        cpp_type: PostprocessorName\n        group_name: \n        description: |\n          To evaluate |Bx| for the eigenvalue\n      - name: eig_check_tol\n        required: No\n        default: !!str 1e-06\n        cpp_type: double\n        group_name: \n        description: |\n          Eigenvalue convergence tolerance\n      - name: k0\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Initial guess of the eigenvalue\n      - name: max_power_iterations\n        required: No\n        default: !!str 300\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The maximum number of power iterations\n      - name: min_power_iterations\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Minimum number of power iterations\n      - name: normal_factor\n        required: No\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          Normalize x to make |x| equal to this factor\n      - name: normalization\n        required: No\n        default: !!str \n        cpp_type: PostprocessorName\n        group_name: \n        description: |\n          To evaluate |x| for normalization\n      - name: output_on_final\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          True to disable all the intemediate exodus outputs\n      - name: output_pi_history\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          True to output solutions durint PI\n      - name: pfactor\n        required: No\n        default: !!str 0.01\n        cpp_type: double\n        group_name: \n        description: |\n          Reduce residual norm per power iteration by this factor\n      - name: restart_file_base\n        required: No\n        default: !!str \n        cpp_type: FileNameNoExtension\n        group_name: Restart\n        description: |\n          File base name used for restart\n      - name: splitting\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::string, std::allocator<std::string> >\n        group_name: \n        description: |\n          Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n      - name: time\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          System time\n      - name: type\n        required: No\n        default: !!str InversePowerMethod\n        cpp_type: std::string\n        group_name: \n        description: |\n          \n      - name: xdiff\n        required: No\n        default: !!str \n        cpp_type: PostprocessorName\n        group_name: \n        description: |\n          To evaluate |x-x_previous| for power iterations\n      subblocks:\n    - name: /Executioner/<type>/NonlinearEigen\n      description: !!str\n      type: \n      parameters:\n      - name: auto_initialization\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          True to ask the solver to set initial\n      - name: bx_norm\n        required: Yes\n        default: !!str \n        cpp_type: PostprocessorName\n        group_name: \n        description: |\n          To evaluate |Bx| for the eigenvalue\n      - name: free_power_iterations\n        required: No\n        default: !!str 4\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The number of free power iterations\n      - name: k0\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Initial guess of the eigenvalue\n      - name: normal_factor\n        required: No\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          Normalize x to make |x| equal to this factor\n      - name: normalization\n        required: No\n        default: !!str \n        cpp_type: PostprocessorName\n        group_name: \n        description: |\n          To evaluate |x| for normalization\n      - name: output_on_final\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          True to disable all the intemediate exodus outputs\n      - name: output_pi_history\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          True to output solutions durint PI\n      - name: pfactor\n        required: No\n        default: !!str 0.01\n        cpp_type: double\n        group_name: \n        description: |\n          The factor of residual to be reduced per power iteration\n      - name: restart_file_base\n        required: No\n        default: !!str \n        cpp_type: FileNameNoExtension\n        group_name: Restart\n        description: |\n          File base name used for restart\n      - name: source_abs_tol\n        required: No\n        default: !!str 1e-06\n        cpp_type: double\n        group_name: \n        description: |\n          Absolute tolernance on residual norm\n      - name: source_rel_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: \n        description: |\n          Relative tolernance on residual norm after free power iterations\n      - name: splitting\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::string, std::allocator<std::string> >\n        group_name: \n        description: |\n          Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n      - name: time\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          System time\n      - name: type\n        required: No\n        default: !!str NonlinearEigen\n        cpp_type: std::string\n        group_name: \n        description: |\n          \n      - name: xdiff\n        required: No\n        default: !!str \n        cpp_type: PostprocessorName\n        group_name: \n        description: |\n          To evaluate |x-x_previous| for power iterations\n      subblocks:\n    - name: /Executioner/<type>/Steady\n      description: !!str\n      type: \n      parameters:\n      - name: restart_file_base\n        required: No\n        default: !!str \n        cpp_type: FileNameNoExtension\n        group_name: Restart\n        description: |\n          File base name used for restart\n      - name: splitting\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::string, std::allocator<std::string> >\n        group_name: \n        description: |\n          Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n      - name: type\n        required: No\n        default: !!str Steady\n        cpp_type: std::string\n        group_name: \n        description: |\n          \n      subblocks:\n    - name: /Executioner/<type>/Transient\n      description: !!str\n      type: \n      parameters:\n      - name: abort_on_solve_fail\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          abort if solve not converged rather than cut timestep\n      - name: dt\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          The timestep size between solves\n      - name: dtmax\n        required: No\n        default: !!str 1e+30\n        cpp_type: double\n        group_name: Advanced\n        description: |\n          The maximum timestep size in an adaptive run\n      - name: dtmin\n        required: No\n        default: !!str 2e-14\n        cpp_type: double\n        group_name: Advanced\n        description: |\n          The minimum timestep size in an adaptive run\n      - name: end_time\n        required: No\n        default: !!str 1e+30\n        cpp_type: double\n        group_name: \n        description: |\n          The end time of the simulation\n      - name: n_startup_steps\n        required: No\n        default: !!str 0\n        cpp_type: int\n        group_name: Advanced\n        description: |\n          The number of timesteps during startup\n      - name: num_steps\n        required: No\n        default: !!str 4294967295\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The number of timesteps in a transient run\n      - name: picard_abs_tol\n        required: No\n        default: !!str 1e-50\n        cpp_type: double\n        group_name: Picard\n        description: |\n          The absolute nonlinear residual to shoot for during Picard iterations.  This check is performed based on the Master app\'s nonlinear residual.\n      - name: picard_max_its\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: Picard\n        description: |\n          Number of times each timestep will be solved.  Mainly used when wanting to do Picard iterations with MultiApps that are set to execute_on timestep or timestep_begin\n      - name: picard_rel_tol\n        required: No\n        default: !!str 1e-08\n        cpp_type: double\n        group_name: Picard\n        description: |\n          The relative nonlinear residual drop to shoot for during Picard iterations.  This check is performed based on the Master app\'s nonlinear residual.\n      - name: predictor_scale\n        required: No\n        default: !!str \n        cpp_type: double\n        group_name: Advanced\n        description: |\n          The scale factor for the predictor (can range from 0 to 1)\n      - name: reset_dt\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Use when restarting a calculation to force a change in dt.\n      - name: restart_file_base\n        required: No\n        default: !!str \n        cpp_type: FileNameNoExtension\n        group_name: Restart\n        description: |\n          File base name used for restart\n      - name: scheme\n        required: No\n        default: !!str implicit-euler\n        cpp_type: MooseEnum\n        group_name: \n        options: implicit-euler explicit-euler crank-nicolson bdf2 rk-2\n        description: |\n          Time integration scheme used.\n      - name: splitting\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::string, std::allocator<std::string> >\n        group_name: \n        description: |\n          Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n      - name: ss_check_tol\n        required: No\n        default: !!str 1e-08\n        cpp_type: double\n        group_name: Advanced\n        description: |\n          Whenever the relative residual changes by less than this the solution will be considered to be at steady state.\n      - name: ss_tmin\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: Advanced\n        description: |\n          Minimum number of timesteps to take before checking for steady state conditions.\n      - name: start_time\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: Advanced\n        description: |\n          The start time of the simulation\n      - name: sync_times\n        required: No\n        default: !!str -1.79769e+308 \n        cpp_type: std::vector<double, std::allocator<double> >\n        group_name: Advanced\n        description: |\n          A list of times that will be solved for provided they are within the simulation time\n      - name: time_period_ends\n        required: No\n        default: !!str \n        cpp_type: std::vector<double, std::allocator<double> >\n        group_name: Time Periods\n        description: |\n          The end times of time periods\n      - name: time_period_starts\n        required: No\n        default: !!str \n        cpp_type: std::vector<double, std::allocator<double> >\n        group_name: Time Periods\n        description: |\n          The start times of time periods\n      - name: time_periods\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::string, std::allocator<std::string> >\n        group_name: Time Periods\n        description: |\n          The names of periods\n      - name: timestep_tolerance\n        required: No\n        default: !!str 2e-14\n        cpp_type: double\n        group_name: Advanced\n        description: |\n          the tolerance setting for final timestep size and sync times\n      - name: trans_ss_check\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          Whether or not to check for steady state conditions\n      - name: type\n        required: No\n        default: !!str Transient\n        cpp_type: std::string\n        group_name: \n        description: |\n          \n      - name: use_multiapp_dt\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          If true then the dt for the simulation will be chosen by the MultiApps.  If false (the default) then the minimum over the master dt and the MultiApps is used\n      - name: verbose\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Print detailed diagnostics on timestep calculation\n      subblocks:\n  - name: /Executioner/Adaptivity\n    description: !!str\n    type: \n    parameters:\n    - name: coarsen_fraction\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of elements or error to coarsen. Should be between 0 and 1.\n    - name: cycles_per_step\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of adaptivity cycles per step\n    - name: error_estimator\n      required: No\n      default: !!str KellyErrorEstimator\n      cpp_type: MooseEnum\n      group_name: \n      options: KellyErrorEstimator LaplacianErrorEstimator PatchRecoveryErrorEstimator\n      description: |\n        The class name of the error estimator you want to use.\n    - name: initial_adaptivity\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of adaptivity steps to perform using the initial conditions\n    - name: max_h_level\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of times a single element can be refined. If 0 then infinite.\n    - name: print_changed_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determines whether information about the mesh is printed when adaptivity occurs\n    - name: refine_fraction\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The fraction of elements or error to refine. Should be between 0 and 1.\n    - name: start_time\n      required: No\n      default: !!str -1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The time that adaptivity will be active after.\n    - name: steps\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of adaptivity steps to perform at any one time for steady state\n    - name: stop_time\n      required: No\n      default: !!str 1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The time after which adaptivity will no longer be active.\n    - name: weight_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        List of names of variables that will be associated with weight_values\n    - name: weight_values\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        List of values between 0 and 1 to weight the associated weight_names error by\n    subblocks:\n  - name: /Executioner/Predictor\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n    - name: /Executioner/Predictor/<type>\n      description: !!str\n      type: \n      parameters:\n      subblocks:\n      - name: /Executioner/Predictor/<type>/AdamsPredictor\n        description: !!str\n        type: \n        parameters:\n        - name: order\n          required: No\n          default: !!str 2\n          cpp_type: int\n          group_name: \n          description: |\n            The maximum reachable order of the Adams-Bashforth Predictor\n        - name: scale\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            The scale factor for the predictor (can range from 0 to 1)\n        - name: type\n          required: No\n          default: !!str AdamsPredictor\n          cpp_type: std::string\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/Predictor/<type>/SimplePredictor\n        description: !!str\n        type: \n        parameters:\n        - name: scale\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            The scale factor for the predictor (can range from 0 to 1)\n        - name: type\n          required: No\n          default: !!str SimplePredictor\n          cpp_type: std::string\n          group_name: \n          description: |\n            \n        subblocks:\n  - name: /Executioner/Quadrature\n    description: !!str\n    type: \n    parameters:\n    - name: order\n      required: No\n      default: !!str AUTO\n      cpp_type: MooseEnum\n      group_name: \n      options: AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH\n      description: |\n        Order of the quadrature\n    - name: type\n      required: No\n      default: !!str GAUSS\n      cpp_type: MooseEnum\n      group_name: \n      options: CLOUGH CONICAL GAUSS GRID MONOMIAL SIMPSON TRAP\n      description: |\n        Type of the quadrature rule\n    subblocks:\n  - name: /Executioner/TimePeriods\n    description: !!str\n    type: \n    parameters:\n    subblocks:\n    - name: /Executioner/TimePeriods/*\n      description: !!str\n      type: \n      parameters:\n      - name: active_bcs\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::string, std::allocator<std::string> >\n        group_name: \n        description: |\n          The list of active boundary conditions during this time period (must not be used with "inactive_bcs")\n      - name: active_kernels\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::string, std::allocator<std::string> >\n        group_name: \n        description: |\n          The list of active kernels during this time period (must not be used with "inactive_kernels")\n      - name: inactive_bcs\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::string, std::allocator<std::string> >\n        group_name: \n        description: |\n          The list of inactive boundary conditions during this time period (must not be used with "active_bcs")\n      - name: inactive_kernels\n        required: No\n        default: !!str \n        cpp_type: std::vector<std::string, std::allocator<std::string> >\n        group_name: \n        description: |\n          The list of inactive kernels during this time period (must not be used with "active_kernels")\n      - name: start\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The start time for this time period\n      subblocks:\n  - name: /Executioner/TimeStepper\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n    - name: /Executioner/TimeStepper/<type>\n      description: !!str\n      type: \n      parameters:\n      subblocks:\n      - name: /Executioner/TimeStepper/<type>/AB2PredictorCorrector\n        description: !!str\n        type: \n        parameters:\n        - name: dt\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            Initial time step size\n        - name: e_max\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            Maximum acceptable error.\n        - name: e_tol\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            Target error tolerance.\n        - name: max_increase\n          required: No\n          default: !!str 1e+09\n          cpp_type: double\n          group_name: \n          description: |\n            Maximum ratio that the time step can increase.\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: scaling_parameter\n          required: No\n          default: !!str 0.8\n          cpp_type: double\n          group_name: \n          description: |\n            scaling parameter for dt selection\n        - name: start_adapting\n          required: No\n          default: !!str 2\n          cpp_type: int\n          group_name: \n          description: |\n            when to start taking adaptive time steps\n        - name: steps_between_increase\n          required: No\n          default: !!str 1\n          cpp_type: int\n          group_name: \n          description: |\n            the number of time steps before recalculating dt\n        - name: type\n          required: No\n          default: !!str AB2PredictorCorrector\n          cpp_type: std::string\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeStepper/<type>/ConstantDT\n        description: !!str\n        type: \n        parameters:\n        - name: dt\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            Size of the time step\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: type\n          required: No\n          default: !!str ConstantDT\n          cpp_type: std::string\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeStepper/<type>/DT2\n        description: !!str\n        type: \n        parameters:\n        - name: dt\n          required: No\n          default: !!str 1\n          cpp_type: double\n          group_name: \n          description: |\n            The initial time step size.\n        - name: e_max\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            Maximum acceptable error.\n        - name: e_tol\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            Target error tolerance.\n        - name: max_increase\n          required: No\n          default: !!str 1e+09\n          cpp_type: double\n          group_name: \n          description: |\n            Maximum ratio that the time step can increase.\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: type\n          required: No\n          default: !!str DT2\n          cpp_type: std::string\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeStepper/<type>/FunctionDT\n        description: !!str\n        type: \n        parameters:\n        - name: growth_factor\n          required: No\n          default: !!str 2\n          cpp_type: double\n          group_name: \n          description: |\n            Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.\n        - name: min_dt\n          required: No\n          default: !!str 0\n          cpp_type: double\n          group_name: \n          description: |\n            The minimal dt to take.\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: time_dt\n          required: No\n          default: !!str \n          cpp_type: std::vector<double, std::allocator<double> >\n          group_name: \n          description: |\n            The values of dt\n        - name: time_t\n          required: No\n          default: !!str \n          cpp_type: std::vector<double, std::allocator<double> >\n          group_name: \n          description: |\n            The values of t\n        - name: type\n          required: No\n          default: !!str FunctionDT\n          cpp_type: std::string\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeStepper/<type>/IterationAdaptiveDT\n        description: !!str\n        type: \n        parameters:\n        - name: cutback_factor\n          required: No\n          default: !!str 0.5\n          cpp_type: double\n          group_name: \n          description: |\n            Factor to apply to timestep if difficult convergence (if \'optimal_iterations\' is specified) or if solution failed.\n        - name: dt\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            The default timestep size between solves\n        - name: force_step_every_function_point\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Forces the timestepper to take a step that is consistent with points defined in the function.\n        - name: growth_factor\n          required: No\n          default: !!str 2\n          cpp_type: double\n          group_name: \n          description: |\n            Factor to apply to timestep if easy convergence (if \'optimal_iterations\' is specified) or if recovering from failed solve\n        - name: iteration_window\n          required: No\n          default: !!str \n          cpp_type: int\n          group_name: \n          description: |\n            The size of the nonlinear iteration window for adaptive timestepping (default = 0.2*optimal_iterations)\n        - name: linear_iteration_ratio\n          required: No\n          default: !!str \n          cpp_type: unsigned int\n          group_name: \n          description: |\n            The ratio of linear to nonlinear iterations to determine target linear iterations and window for adaptive timestepping (default = 25)\n        - name: max_function_change\n          required: No\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            The absolute value of the maximum change in timestep_limiting_function over a timestep\n        - name: optimal_iterations\n          required: No\n          default: !!str \n          cpp_type: int\n          group_name: \n          description: |\n            The target number of nonlinear iterations for adaptive timestepping\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: time_dt\n          required: No\n          default: !!str \n          cpp_type: std::vector<double, std::allocator<double> >\n          group_name: \n          description: |\n            The values of dt\n        - name: time_t\n          required: No\n          default: !!str \n          cpp_type: std::vector<double, std::allocator<double> >\n          group_name: \n          description: |\n            The values of t\n        - name: timestep_limiting_function\n          required: No\n          default: !!str \n          cpp_type: FunctionName\n          group_name: \n          description: |\n            A function used to control the timestep by limiting the change in the function over a timestep\n        - name: type\n          required: No\n          default: !!str IterationAdaptiveDT\n          cpp_type: std::string\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeStepper/<type>/PostprocessorDT\n        description: !!str\n        type: \n        parameters:\n        - name: dt\n          required: No\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            Initial value of dt\n        - name: postprocessor\n          required: Yes\n          default: !!str \n          cpp_type: PostprocessorName\n          group_name: \n          description: |\n            The name of the postprocessor that computes the dt\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: type\n          required: No\n          default: !!str PostprocessorDT\n          cpp_type: std::string\n          group_name: \n          description: |\n            \n        subblocks:\n      - name: /Executioner/TimeStepper/<type>/SolutionTimeAdaptiveDT\n        description: !!str\n        type: \n        parameters:\n        - name: adapt_log\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Output adaptive time step log\n        - name: dt\n          required: Yes\n          default: !!str \n          cpp_type: double\n          group_name: \n          description: |\n            The timestep size between solves\n        - name: initial_direction\n          required: No\n          default: !!str 1\n          cpp_type: int\n          group_name: \n          description: |\n            Direction for the first step.  1 for up... -1 for down. \n        - name: percent_change\n          required: No\n          default: !!str 0.1\n          cpp_type: double\n          group_name: \n          description: |\n            Percentage to change the timestep by.  Should be between 0 and 1\n        - name: reset_dt\n          required: No\n          default: !!str 0\n          cpp_type: bool\n          group_name: \n          description: |\n            Use when restarting a calculation to force a change in dt.\n        - name: type\n          required: No\n          default: !!str SolutionTimeAdaptiveDT\n          cpp_type: std::string\n          group_name: \n          description: |\n            \n        subblocks:\n- name: /Functions\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /Functions/*\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Functions/CompositeFunction\n    description: !!str\n    type: \n    parameters:\n    - name: functions\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        The functions to be multiplied together.\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor to be applied to the ordinate values\n    - name: type\n      required: No\n      default: !!str CompositeFunction\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Functions/ConstantFunction\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: No\n      default: !!str ConstantFunction\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The constant value\n    subblocks:\n  - name: /Functions/ParsedFunction\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: No\n      default: !!str ParsedFunction\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: vals\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        The initial values of the variables (optional)\n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The user defined function.\n    - name: vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        The constant variables (excluding t,x,y,z) in the forcing function.\n    subblocks:\n  - name: /Functions/ParsedGradFunction\n    description: !!str\n    type: \n    parameters:\n    - name: grad_x\n      required: No\n      default: !!str 0\n      cpp_type: std::string\n      group_name: \n      description: |\n        Partial with respect to x.\n    - name: grad_y\n      required: No\n      default: !!str 0\n      cpp_type: std::string\n      group_name: \n      description: |\n        Partial with respect to y.\n    - name: grad_z\n      required: No\n      default: !!str 0\n      cpp_type: std::string\n      group_name: \n      description: |\n        Partial with respect to z.\n    - name: type\n      required: No\n      default: !!str ParsedGradFunction\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: vals\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        The initial values of the variables (optional)\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: std::string\n      group_name: \n      description: |\n        User defined function.\n    - name: vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        The constant variables (excluding t,x,y,z) in the forcing function.\n    subblocks:\n  - name: /Functions/ParsedVectorFunction\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: No\n      default: !!str ParsedVectorFunction\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: vals\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        The initial values of the variables (optional)\n    - name: value_x\n      required: No\n      default: !!str 0\n      cpp_type: std::string\n      group_name: \n      description: |\n        x-component of function.\n    - name: value_y\n      required: No\n      default: !!str 0\n      cpp_type: std::string\n      group_name: \n      description: |\n        y-component of function.\n    - name: value_z\n      required: No\n      default: !!str 0\n      cpp_type: std::string\n      group_name: \n      description: |\n        z-component of function.\n    - name: vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        The constant variables (excluding t,x,y,z) in the forcing function.\n    subblocks:\n  - name: /Functions/PiecewiseBilinear\n    description: !!str\n    type: \n    parameters:\n    - name: axis\n      required: No\n      default: !!str -1\n      cpp_type: int\n      group_name: \n      description: |\n        The axis used (0, 1, or 2 for x, y, or z).\n    - name: data_file\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        File holding csv data for use with PiecewiseBilinear\n    - name: radial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true if you want to interpolate along a radius rather that along a specific axis, and note that you have to define xaxis and yaxis in the input file\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor to be applied to the axis, yaxis, or xaxis values\n    - name: type\n      required: No\n      default: !!str PiecewiseBilinear\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: xaxis\n      required: No\n      default: !!str -1\n      cpp_type: int\n      group_name: \n      description: |\n        The coordinate used for x-axis data (0, 1, or 2 for x, y, or z).\n    - name: yaxis\n      required: No\n      default: !!str -1\n      cpp_type: int\n      group_name: \n      description: |\n        The coordinate used for y-axis data (0, 1, or 2 for x, y, or z).\n    subblocks:\n  - name: /Functions/PiecewiseConstant\n    description: !!str\n    type: \n    parameters:\n    - name: axis\n      required: No\n      default: !!str \n      cpp_type: int\n      group_name: \n      description: |\n        The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n    - name: data_file\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        File holding csv data for use with Piecewise\n    - name: direction\n      required: No\n      default: !!str left\n      cpp_type: MooseEnum\n      group_name: \n      options: left right\n      description: |\n        Direction to look to find value: left, right\n    - name: format\n      required: No\n      default: !!str rows\n      cpp_type: std::string\n      group_name: \n      description: |\n        Format of csv data file that is in either in columns or rows\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor to be applied to the ordinate values\n    - name: type\n      required: No\n      default: !!str PiecewiseConstant\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: x\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The abscissa values\n    - name: xy_data\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        All function data, supplied in abscissa, ordinate pairs\n    - name: y\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The ordinate values\n    subblocks:\n  - name: /Functions/PiecewiseLinear\n    description: !!str\n    type: \n    parameters:\n    - name: axis\n      required: No\n      default: !!str \n      cpp_type: int\n      group_name: \n      description: |\n        The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n    - name: data_file\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        File holding csv data for use with Piecewise\n    - name: format\n      required: No\n      default: !!str rows\n      cpp_type: std::string\n      group_name: \n      description: |\n        Format of csv data file that is in either in columns or rows\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor to be applied to the ordinate values\n    - name: type\n      required: No\n      default: !!str PiecewiseLinear\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: x\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The abscissa values\n    - name: xy_data\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        All function data, supplied in abscissa, ordinate pairs\n    - name: y\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The ordinate values\n    subblocks:\n  - name: /Functions/PiecewiseLinearFile\n    description: !!str\n    type: \n    parameters:\n    - name: axis\n      required: No\n      default: !!str \n      cpp_type: int\n      group_name: \n      description: |\n        The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n    - name: data_file\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        File holding csv data for use with Piecewise\n    - name: format\n      required: No\n      default: !!str rows\n      cpp_type: std::string\n      group_name: \n      description: |\n        Format of csv data file that is in either in columns or rows\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor to be applied to the ordinate values\n    - name: type\n      required: No\n      default: !!str PiecewiseLinearFile\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: x\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The abscissa values\n    - name: xy_data\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        All function data, supplied in abscissa, ordinate pairs\n    - name: y\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The ordinate values\n    subblocks:\n  - name: /Functions/PiecewiseMultilinear\n    description: !!str\n    type: \n    parameters:\n    - name: data_file\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        File holding data for use with PiecewiseMultilinear.  Format: any empty line and any line beginning with # are ignored, all other lines are assumed to contain relevant information.  The file must begin with specification of the grid.  This is done through lines containing the keywords: AXIS X; AXIS Y; AXIS Z; or AXIS T.  Immediately following the keyword line must be a space-separated line of real numbers which define the grid along the specified axis.  These data must be monotonically increasing.  After all the axes and their grids have been specified, there must be a line that is DATA.  Following that line, function values are given in the correct order (they may be on indivicual lines, or be space-separated on a number of lines).  When the function is evaluated, f[i,j,k,l] corresponds to the i + j*Ni + k*Ni*Nj + l*Ni*Nj*Nk data value.  Here i>=0 corresponding to the index along the first AXIS, j>=0 corresponding to the index along the second AXIS, etc, and Ni = number of grid points along the first AXIS, etc.\n    - name: type\n      required: No\n      default: !!str PiecewiseMultilinear\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Functions/SolutionFunction\n    description: !!str\n    type: \n    parameters:\n    - name: add_factor\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Add this value (b) to the solution (x): ax+b, where a is the \'scale_factor\'\n    - name: from_variable\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The name of the variable in the file that is too be extracted\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Scale factor (a) to be applied to the solution (x): ax+b, where b is the \'add_factor\'\n    - name: solution\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The SolutionUserObject to extract data from.\n    - name: type\n      required: No\n      default: !!str SolutionFunction\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Functions/SplineFunction\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: No\n      default: !!str SplineFunction\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The abscissa values\n    - name: y\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The ordinate values\n    - name: yp1\n      required: No\n      default: !!str 1e+30\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the first derivative of the interpolating function at point 1\n    - name: ypn\n      required: No\n      default: !!str 1e+30\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the first derivative of the interpolating function at point n\n    subblocks:\n- name: /GlobalParams\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n- name: /ICs\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /ICs/*\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /ICs/BoundingBoxIC\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: inside\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the variable inside the box\n    - name: outside\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The value of the variable outside the box\n    - name: type\n      required: No\n      default: !!str BoundingBoxIC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: x1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the lower left-hand corner of the box\n    - name: x2\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the upper right-hand corner of the box\n    - name: y1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the lower left-hand corner of the box\n    - name: y2\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the upper right-hand corner of the box\n    - name: z1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the lower left-hand corner of the box\n    - name: z2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the upper right-hand corner of the box\n    subblocks:\n  - name: /ICs/ConstantIC\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: type\n      required: No\n      default: !!str ConstantIC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The value to be set in IC\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/CrossIC\n    description: !!str\n    type: \n    parameters:\n    - name: amplitude\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The amplitude\n    - name: average\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The average value\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: buffer\n      required: No\n      default: !!str 0.03125\n      cpp_type: double\n      group_name: \n      description: |\n        A small area between the max value and the interface\n    - name: interface\n      required: No\n      default: !!str 0.03125\n      cpp_type: double\n      group_name: \n      description: |\n        The interface width\n    - name: length\n      required: No\n      default: !!str 0.75\n      cpp_type: double\n      group_name: \n      description: |\n        The length\n    - name: type\n      required: No\n      default: !!str CrossIC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: width\n      required: No\n      default: !!str 0.125\n      cpp_type: double\n      group_name: \n      description: |\n        The width\n    - name: x1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the lower left-hand corner of the box\n    - name: x2\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the upper right-hand corner of the box\n    - name: y1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the lower left-hand corner of the box\n    - name: y2\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the upper right-hand corner of the box\n    subblocks:\n  - name: /ICs/FunctionIC\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The initial condition function.\n    - name: type\n      required: No\n      default: !!str FunctionIC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/HexPolycrystalIC\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: cody_test\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Use set grain center points for Cody\'s test. Grain num MUST equal 10\n    - name: columnar_3D\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        3D microstructure will be columnar in the z-direction?\n    - name: crys_index\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index for the current order parameter\n    - name: crys_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of order parameters\n    - name: grain_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of grains being represented by the order parameters\n    - name: perturbation_percent\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The percent to randomly perturbate centers of grains relative to the size of the grain\n    - name: rand_seed\n      required: No\n      default: !!str 12444\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The random seed\n    - name: typ\n      required: No\n      default: !!str 1\n      cpp_type: int\n      group_name: \n      description: |\n        \n    - name: type\n      required: No\n      default: !!str HexPolycrystalIC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: x_offset\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        Specifies offset of hexagon grid in x-direction\n    subblocks:\n  - name: /ICs/LatticeSmoothCircleIC\n    description: !!str\n    type: \n    parameters:\n    - name: 3D_spheres\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        in 3D, whether the objects are spheres or columns\n    - name: Lx\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        length of simulation domain in x-direction\n    - name: Ly\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        length of simulation domain in y-direction\n    - name: Lz\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        length of simulation domain in z-direction\n    - name: Rnd_variation\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Variation from central lattice position\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bubspac\n      required: Yes\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        minimum spacing of bubbles, measured from center to center\n    - name: circles_per_side\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Vector containing the number of bubbles along each side\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of the void surface.  Defaults to sharp interface\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the circle\n    - name: numbub\n      required: Yes\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of bubbles to be placed on GB\n    - name: numtries\n      required: No\n      default: !!str 1000\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of tries\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the circle\n    - name: radius\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The radius of a circle\n    - name: radius_variation\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Plus or minus Percent of random variation in the bubble radius\n    - name: rand_seed\n      required: No\n      default: !!str 2000\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        random seed\n    - name: type\n      required: No\n      default: !!str LatticeSmoothCircleIC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: x1\n      required: Yes\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the circle center\n    - name: y1\n      required: Yes\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the circle center\n    - name: z1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the circle center\n    subblocks:\n  - name: /ICs/MultiSmoothCircleIC\n    description: !!str\n    type: \n    parameters:\n    - name: 3D_spheres\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        in 3D, whether the objects are spheres or columns\n    - name: Lx\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        length of simulation domain in x-direction\n    - name: Ly\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        length of simulation domain in y-direction\n    - name: Lz\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        length of simulation domain in z-direction\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bubspac\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        minimum spacing of bubbles, measured from center to center\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of the void surface.  Defaults to sharp interface\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the circle\n    - name: numbub\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of bubbles to be placed on GB\n    - name: numtries\n      required: No\n      default: !!str 1000\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of tries\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the circle\n    - name: radius\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The radius of a circle\n    - name: radius_variation\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Plus or minus Percent of random variation in the bubble radius\n    - name: rand_seed\n      required: No\n      default: !!str 2000\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        random seed\n    - name: type\n      required: No\n      default: !!str MultiSmoothCircleIC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: x1\n      required: Yes\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the circle center\n    - name: y1\n      required: Yes\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the circle center\n    - name: z1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the circle center\n    subblocks:\n  - name: /ICs/PolycrystalICs\n    description: !!str\n    type: \n    parameters:\n    subblocks:\n    - name: /ICs/PolycrystalICs/BicrystalBoundingBoxIC\n      description: !!str\n      type: \n      parameters:\n      - name: crys_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of grains, should be 2\n      - name: var_name_base\n        required: Yes\n        default: !!str \n        cpp_type: std::string\n        group_name: \n        description: |\n          specifies the base name of the variables\n      - name: x1\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The x coordinate of the lower left-hand corner of the box\n      - name: x2\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The x coordinate of the upper right-hand corner of the box\n      - name: y1\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The y coordinate of the lower left-hand corner of the box\n      - name: y2\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The y coordinate of the upper right-hand corner of the box\n      - name: z1\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The z coordinate of the lower left-hand corner of the box\n      - name: z2\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The z coordinate of the upper right-hand corner of the box\n      subblocks:\n    - name: /ICs/PolycrystalICs/BicrystalCircleGrainIC\n      description: !!str\n      type: \n      parameters:\n      - name: 3D_sphere\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          in 3D, whether the smaller grain is a spheres or columnar grain\n      - name: crys_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of grains, should be 2\n      - name: int_width\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The interfacial width of the void surface.  Defaults to sharp interface\n      - name: radius\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          Void radius\n      - name: var_name_base\n        required: Yes\n        default: !!str \n        cpp_type: std::string\n        group_name: \n        description: |\n          specifies the base name of the variables\n      - name: x\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The x coordinate of the circle grain center\n      - name: y\n        required: Yes\n        default: !!str \n        cpp_type: double\n        group_name: \n        description: |\n          The y coordinate of the circle grain center\n      - name: z\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The z coordinate of the circle grain center\n      subblocks:\n    - name: /ICs/PolycrystalICs/PolycrystalHexGrainIC\n      description: !!str\n      type: \n      parameters:\n      - name: crys_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of order parameters\n      - name: grain_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of grains, must be a square (4, 9, 16, etc)\n      - name: perturbation_percent\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The percent to randomly perturbate centers of grains relative to the size of the grain\n      - name: rand_seed\n        required: No\n        default: !!str 12444\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The random seed\n      - name: var_name_base\n        required: Yes\n        default: !!str \n        cpp_type: std::string\n        group_name: \n        description: |\n          specifies the base name of the variables\n      - name: x_offset\n        required: No\n        default: !!str 0.5\n        cpp_type: double\n        group_name: \n        description: |\n          Specifies offset of hexagon grid in x-direction\n      subblocks:\n    - name: /ICs/PolycrystalICs/PolycrystalRandomIC\n      description: !!str\n      type: \n      parameters:\n      - name: crys_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          number of order parameters to create\n      - name: random_type\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: continuous discrete\n        description: |\n          The type of random polycrystal initial condition. Whether one order parameter is chosen to be 1 at each node or if each order parameter continuously varies from 0 to 1\n      - name: var_name_base\n        required: Yes\n        default: !!str \n        cpp_type: std::string\n        group_name: \n        description: |\n          specifies the base name of the variables\n      subblocks:\n    - name: /ICs/PolycrystalICs/PolycrystalVoronoiIC\n      description: !!str\n      type: \n      parameters:\n      - name: cody_test\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          Use set grain center points for Cody\'s test. Grain num MUST equal 10\n      - name: columnar_3D\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: \n        description: |\n          3D microstructure will be columnar in the z-direction?\n      - name: crys_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          number of order parameters to create\n      - name: grain_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          number of grains to create, if it is going to greater than crys_num\n      - name: rand_seed\n        required: No\n        default: !!str 12444\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The random seed\n      - name: var_name_base\n        required: Yes\n        default: !!str \n        cpp_type: std::string\n        group_name: \n        description: |\n          specifies the base name of the variables\n      subblocks:\n    - name: /ICs/PolycrystalICs/Tricrystal2CircleGrainsIC\n      description: !!str\n      type: \n      parameters:\n      - name: crys_num\n        required: Yes\n        default: !!str \n        cpp_type: unsigned int\n        group_name: \n        description: |\n          number of order parameters to create\n      - name: var_name_base\n        required: Yes\n        default: !!str \n        cpp_type: std::string\n        group_name: \n        description: |\n          specifies the base name of the variables\n      subblocks:\n  - name: /ICs/PolycrystalRandomIC\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: crys_index\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index for the current order parameter\n    - name: crys_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of order parameters\n    - name: typ\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Type of random grain structure\n    - name: type\n      required: No\n      default: !!str PolycrystalRandomIC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/PolycrystalReducedIC\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: cody_test\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Use set grain center points for Cody\'s test. Grain num MUST equal 10\n    - name: columnar_3D\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        3D microstructure will be columnar in the z-direction?\n    - name: crys_index\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index for the current order parameter\n    - name: crys_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of order parameters\n    - name: grain_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of grains being represented by the order parameters\n    - name: rand_seed\n      required: No\n      default: !!str 12444\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The random seed\n    - name: type\n      required: No\n      default: !!str PolycrystalReducedIC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/RandomIC\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: max\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Upper bound of the randomly generated values\n    - name: min\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Lower bound of the randomly generated values\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Seed value for the random number generator\n    - name: type\n      required: No\n      default: !!str RandomIC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/RndBoundingBoxIC\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: mn_invalue\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The min value of the variable invalue the box\n    - name: mn_outvalue\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The min value of the variable outvalue the box\n    - name: mx_invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The max value of the variable invalue the box\n    - name: mx_outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The max value of the variable outvalue the box\n    - name: type\n      required: No\n      default: !!str RndBoundingBoxIC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: x1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the lower left-hand corner of the box\n    - name: x2\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the upper right-hand corner of the box\n    - name: y1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the lower left-hand corner of the box\n    - name: y2\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the upper right-hand corner of the box\n    - name: z1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the lower left-hand corner of the box\n    - name: z2\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the upper right-hand corner of the box\n    subblocks:\n  - name: /ICs/RndSmoothCircleIC\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: mn_invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The min variable value inside the circle\n    - name: mn_outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The min variable value outside the circle\n    - name: mx_invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The max variable value inside the circle\n    - name: mx_outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The max variable value outside the circle\n    - name: radius\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The radius of a circle\n    - name: seed\n      required: No\n      default: !!str 12345\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Seed value for the random number generator\n    - name: type\n      required: No\n      default: !!str RndSmoothCircleIC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: x1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the circle center\n    - name: y1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the circle center\n    - name: z1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the circle center\n    subblocks:\n  - name: /ICs/ScalarComponentIC\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: No\n      default: !!str ScalarComponentIC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: values\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Initial values to initialize the scalar variable.\n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/ScalarConstantIC\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: No\n      default: !!str ScalarConstantIC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: variable\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n  - name: /ICs/SmoothCircleIC\n    description: !!str\n    type: \n    parameters:\n    - name: 3D_spheres\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        in 3D, whether the objects are spheres or columns\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of the void surface.  Defaults to sharp interface\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the circle\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the circle\n    - name: radius\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The radius of a circle\n    - name: type\n      required: No\n      default: !!str SmoothCircleIC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: x1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the circle center\n    - name: y1\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the circle center\n    - name: z1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the circle center\n    subblocks:\n  - name: /ICs/SpecifiedSmoothCircleIC\n    description: !!str\n    type: \n    parameters:\n    - name: 3D_spheres\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        in 3D, whether the objects are spheres or columns\n    - name: Lx\n      required: Yes\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        length of simulation domain in x-direction\n    - name: Ly\n      required: Yes\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        length of simulation domain in y-direction\n    - name: Lz\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        length of simulation domain in z-direction\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bubspac\n      required: Yes\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        minimum spacing of bubbles, measured from center to center\n    - name: int_width\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The interfacial width of the void surface.  Defaults to sharp interface\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the circle\n    - name: numbub\n      required: Yes\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of bubbles to be placed on GB\n    - name: numtries\n      required: No\n      default: !!str 1000\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of tries\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the circle\n    - name: radii\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The radius for each circle\n    - name: radius\n      required: Yes\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The radius of a circle\n    - name: radius_variation\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Plus or minus Percent of random variation in the bubble radius\n    - name: rand_seed\n      required: No\n      default: !!str 2000\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        random seed\n    - name: type\n      required: No\n      default: !!str SpecifiedSmoothCircleIC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: x1\n      required: Yes\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the circle center\n    - name: x_positions\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The x-coordinate for each circle center\n    - name: y1\n      required: Yes\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the circle center\n    - name: y_positions\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The y-coordinate for each circle center\n    - name: z1\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the circle center\n    - name: z_positions\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The z-coordinate for each circle center\n    subblocks:\n  - name: /ICs/ThumbIC\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: height\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The z coordinate of the circle center\n    - name: invalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value inside the circle\n    - name: outvalue\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The variable value outside the circle\n    - name: type\n      required: No\n      default: !!str ThumbIC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    - name: width\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The y coordinate of the circle center\n    - name: xcoord\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The x coordinate of the circle center\n    subblocks:\n  - name: /ICs/Tricrystal2CircleGrainsIC\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: crys_index\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The index for the current crystal\n    - name: crys_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of crystals\n    - name: type\n      required: No\n      default: !!str Tricrystal2CircleGrainsIC\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable this initial condition is supposed to provide values for.\n    subblocks:\n- name: /Kernels\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /Kernels/*\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Kernels/ACGBPoly\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Other species concentration\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: en_ratio\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of surface energy to GB energy\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: std::string\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ACGBPoly\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/ACGrGrPoly\n    description: !!str\n    type: \n    parameters:\n    - name: T\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        temperature\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: std::string\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ACGrGrPoly\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Array of coupled variable names\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/ACInterface\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: kappa_name\n      required: No\n      default: !!str kappa_op\n      cpp_type: std::string\n      group_name: \n      description: |\n        The kappa used with the kernel\n    - name: mob_name\n      required: No\n      default: !!str L\n      cpp_type: std::string\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ACInterface\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/AnisotropicDiffusion\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: tensor_coeff\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::TensorValue<double>\n      group_name: \n      description: |\n        The Tensor to multiply the Diffusion operator by\n    - name: type\n      required: No\n      default: !!str AnisotropicDiffusion\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/BodyForce\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: function\n      required: No\n      default: !!str 1\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        A function that describes the body force\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str BodyForce\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        \n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CHInterface\n    description: !!str\n    type: \n    parameters:\n    - name: Dmob_name\n      required: No\n      default: !!str DM\n      cpp_type: std::string\n      group_name: \n      description: |\n        The D mobility used with the kernel\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: grad_mob_name\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The gradient of the mobility used with the kernel\n    - name: has_MJac\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Jacobian information for the mobility is defined\n    - name: kappa_name\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The kappa used with the kernel\n    - name: mob_name\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CHInterface\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CHMath\n    description: !!str\n    type: \n    parameters:\n    - name: Dmob_name\n      required: No\n      default: !!str DM\n      cpp_type: std::string\n      group_name: \n      description: |\n        The D mobility used with the kernel\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: has_MJac\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Jacobian information for the mobility is defined\n    - name: mob_name\n      required: No\n      default: !!str M\n      cpp_type: std::string\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CHMath\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/ConvectionSK\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: grad_velocity\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Field variable for gradient of convective term\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ConvectionSK\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CoupledForce\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CoupledForce\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The coupled variable which provides the force\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/CoupledImplicitEuler\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str CoupledImplicitEuler\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: v\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Coupled variable\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/Diffusion\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str Diffusion\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/DiffusionSK\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str DiffusionSK\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/MassEigenKernel\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: eigen\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Use for eigenvalue problem (true) or source problem (false)\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MassEigenKernel\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/MatDiffusion\n    description: !!str\n    type: \n    parameters:\n    - name: D_name\n      required: No\n      default: !!str D\n      cpp_type: std::string\n      group_name: \n      description: |\n        The name of the diffusivity\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str MatDiffusion\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/PolycrystalKernel\n    description: !!str\n    type: \n    parameters:\n    - name: T\n      required: No\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Name of temperature variable\n    - name: c\n      required: No\n      default: !!str NONE\n      cpp_type: VariableName\n      group_name: \n      description: |\n        Name of coupled concentration variable\n    - name: crys_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the number of grains to create\n    - name: en_ratio\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Ratio of surface to GB energy\n    - name: implicit\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether kernels are implicit or not\n    - name: var_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        specifies the base name of the variables\n    subblocks:\n  - name: /Kernels/Reaction\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str Reaction\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/RealPropertyOutput\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: prop_name\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The Real material property you would like to output\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str RealPropertyOutput\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/SplitCHMath\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: kappa_name\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The kappa used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SplitCHMath\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    - name: w\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        chem poten\n    subblocks:\n  - name: /Kernels/SplitCHWRes\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: c\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        intermediate parameter--concentration\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: mob_name\n      required: No\n      default: !!str mobtemp\n      cpp_type: std::string\n      group_name: \n      description: |\n        The mobility used with the kernel\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str SplitCHWRes\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/TimeDerivative\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: lumping\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        True for mass matrix lumping, false otherwise\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str TimeDerivative\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n  - name: /Kernels/UserForcingFunction\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: diag_save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The forcing function\n    - name: save_in\n      required: No\n      default: !!str \n      cpp_type: std::vector<AuxVariableName, std::allocator<AuxVariableName> >\n      group_name: Advanced\n      description: |\n        The name of auxiliary variables to save this Kernel\'s residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it\'s on, etc.)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str UserForcingFunction\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this Kernel operates on\n    subblocks:\n- name: /Materials\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /Materials/*\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Materials/GBEvolution\n    description: !!str\n    type: \n    parameters:\n    - name: GBMobility\n      required: No\n      default: !!str -1\n      cpp_type: double\n      group_name: \n      description: |\n        GB mobility input in m^4/(J*s), that overrides the temperature dependent calculation\n    - name: GBenergy\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Grain boundary energy in J/m^2\n    - name: GBmob0\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Grain boundary mobility prefactor in m^4/(J*s)\n    - name: Q\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Grain boundary migration activation energy in eV\n    - name: T\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Temperature in Kelvin\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: f0s\n      required: No\n      default: !!str 0.125\n      cpp_type: double\n      group_name: \n      description: |\n        The GB energy constant \n    - name: length_scale\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Length scale in m, where default is nm\n    - name: molar_volume\n      required: No\n      default: !!str 2.462e-05\n      cpp_type: double\n      group_name: \n      description: |\n        Molar volume in m^3/mol, needed for temperature gradient driving force\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of material data (empty outputs to all)\n    - name: time_scale\n      required: No\n      default: !!str 1e-09\n      cpp_type: double\n      group_name: \n      description: |\n        Time scale in s, where default is ns\n    - name: type\n      required: No\n      default: !!str GBEvolution\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: wGB\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        Diffuse GB width in nm \n    subblocks:\n  - name: /Materials/GenericConstantMaterial\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of material data (empty outputs to all)\n    - name: prop_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        The names of the properties this material will have\n    - name: prop_values\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The values associated with the named properties\n    - name: type\n      required: No\n      default: !!str GenericConstantMaterial\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/GenericFunctionMaterial\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of material data (empty outputs to all)\n    - name: prop_names\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        The names of the properties this material will have\n    - name: prop_values\n      required: No\n      default: !!str \n      cpp_type: std::vector<FunctionName, std::allocator<FunctionName> >\n      group_name: \n      description: |\n        The corresponding names of the functions that are going to provide the values for the variables\n    - name: type\n      required: No\n      default: !!str GenericFunctionMaterial\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Materials/PFMobility\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: kappa\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        The kappa parameter for the vacancy concentration\n    - name: mob\n      required: Yes\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The mobility value\n    - name: output_properties\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: Outputs\n      description: |\n        List of material properties, from this material, to output (outputs must also be defined to an output type)\n    - name: outputs\n      required: No\n      default: !!str none \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Outputs\n      description: |\n        Vector of output names were you would like to restrict the output of material data (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str PFMobility\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n- name: /Mesh\n  description: !!str\n  type: \n  parameters:\n  - name: displacements\n    required: No\n    default: !!str \n    cpp_type: std::vector<std::string, std::allocator<std::string> >\n    group_name: \n    description: |\n      The variables corresponding to the x y z displacements of the mesh.  If this is provided then the displacements will be taken into account during the computation.\n  - name: block_id\n    required: No\n    default: !!str \n    cpp_type: std::vector<unsigned short, std::allocator<unsigned short> >\n    group_name: Add Names\n    description: |\n      IDs of the block id/name pairs\n  - name: block_name\n    required: No\n    default: !!str \n    cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n    group_name: Add Names\n    description: |\n      Names of the block id/name pairs (must correspond with "block_id"\n  - name: boundary_id\n    required: No\n    default: !!str \n    cpp_type: std::vector<short, std::allocator<short> >\n    group_name: Add Names\n    description: |\n      IDs of the boundary id/name pairs\n  - name: boundary_name\n    required: No\n    default: !!str \n    cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n    group_name: Add Names\n    description: |\n      Names of the boundary id/name pairs (must correspond with "boundary_id"\n  - name: construct_side_list_from_node_list\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: Advanced\n    description: |\n      If true, construct side lists from the nodesets in the mesh (i.e. if every node on a give side is in a nodeset then add that side to a sideset\n  - name: ghosted_boundaries\n    required: No\n    default: !!str \n    cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n    group_name: Advanced\n    description: |\n      Boundaries to be ghosted if using Nemesis\n  - name: ghosted_boundaries_inflation\n    required: No\n    default: !!str \n    cpp_type: std::vector<double, std::allocator<double> >\n    group_name: Advanced\n    description: |\n      If you are using ghosted boundaries you will want to set this value to a vector of amounts to inflate the bounding boxes by.  ie if you are running a 3D problem you might set it to \'0.2 0.1 0.4\'\n  - name: patch_size\n    required: No\n    default: !!str 40\n    cpp_type: unsigned int\n    group_name: Advanced\n    description: |\n      The number of nodes to consider in the NearestNode neighborhood.\n  - name: second_order\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: Advanced\n    description: |\n      Converts a first order mesh to a second order mesh.  Note: This is NOT needed if you are reading an actual first order mesh.\n  - name: type\n    required: Yes\n    default: !!str FileMesh\n    cpp_type: std::string\n    group_name: \n    description: |\n      A string representing the Moose Object that will be built by this Action\n  - name: uniform_refine\n    required: No\n    default: !!str 0\n    cpp_type: unsigned int\n    group_name: \n    description: |\n      Specify the level of uniform refinement applied to the initial mesh\n  subblocks:\n  - name: /Mesh/<type>\n    description: !!str\n    type: \n    parameters:\n    subblocks:\n    - name: /Mesh/<type>/FileMesh\n      description: !!str\n      type: \n      parameters:\n      - name: centroid_partitioner_direction\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: Partitioning\n        options: x y z radial\n        description: |\n          Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n      - name: dim\n        required: No\n        default: !!str 3\n        cpp_type: MooseEnum\n        group_name: Advanced\n        options: 1 2 3\n        description: |\n          This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected.  In particular you must supply this for GMSH meshes.  Note: This is completely ignored for ExodusII meshes!\n      - name: distribution\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: PARALLEL SERIAL DEFAULT\n        description: |\n          PARALLEL: Always use libMesh::ParallelMesh SERIAL: Always use libMesh::SerialMesh DEFAULT: Use libMesh::SerialMesh unless --parallel-mesh is specified on the command line\n      - name: file\n        required: Yes\n        default: !!str \n        cpp_type: MeshFileName\n        group_name: \n        description: |\n          The name of the mesh file to read\n      - name: nemesis\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n      - name: partitioner\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: Partitioning\n        options: default metis parmetis linear centroid hilbert_sfc morton_sfc\n        description: |\n          Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n      - name: skip_partitioning\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Partitioning\n        description: |\n          If true the mesh won\'t be partitioned.  Probably not a good idea to use it with a serial mesh!\n      - name: type\n        required: No\n        default: !!str FileMesh\n        cpp_type: std::string\n        group_name: \n        description: |\n          \n      subblocks:\n    - name: /Mesh/<type>/GeneratedMesh\n      description: !!str\n      type: \n      parameters:\n      - name: centroid_partitioner_direction\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: Partitioning\n        options: x y z radial\n        description: |\n          Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n      - name: dim\n        required: Yes\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: Main\n        options: 1 2 3\n        description: |\n          The dimension of the mesh to be generated\n      - name: distribution\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: PARALLEL SERIAL DEFAULT\n        description: |\n          PARALLEL: Always use libMesh::ParallelMesh SERIAL: Always use libMesh::SerialMesh DEFAULT: Use libMesh::SerialMesh unless --parallel-mesh is specified on the command line\n      - name: elem_type\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: \n        options: EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18\n        description: |\n          The type of element from libMesh to generate (default: linear element for requested dimension)\n      - name: nemesis\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n      - name: nx\n        required: No\n        default: !!str 1\n        cpp_type: int\n        group_name: \n        description: |\n          Number of elements in the X direction\n      - name: ny\n        required: No\n        default: !!str 1\n        cpp_type: int\n        group_name: \n        description: |\n          Number of elements in the Y direction\n      - name: nz\n        required: No\n        default: !!str 1\n        cpp_type: int\n        group_name: \n        description: |\n          Number of elements in the Z direction\n      - name: partitioner\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: Partitioning\n        options: default metis parmetis linear centroid hilbert_sfc morton_sfc\n        description: |\n          Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n      - name: type\n        required: No\n        default: !!str GeneratedMesh\n        cpp_type: std::string\n        group_name: \n        description: |\n          \n      - name: xmax\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Upper X Coordinate of the generated mesh\n      - name: xmin\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Lower X Coordinate of the generated mesh\n      - name: ymax\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Upper Y Coordinate of the generated mesh\n      - name: ymin\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Lower Y Coordinate of the generated mesh\n      - name: zmax\n        required: No\n        default: !!str 1\n        cpp_type: double\n        group_name: \n        description: |\n          Upper Z Coordinate of the generated mesh\n      - name: zmin\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          Lower Z Coordinate of the generated mesh\n      subblocks:\n    - name: /Mesh/<type>/TiledMesh\n      description: !!str\n      type: \n      parameters:\n      - name: back_boundary\n        required: No\n        default: !!str back_boundary\n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          name of the back (z) boundary\n      - name: bottom_boundary\n        required: No\n        default: !!str bottom_boundary\n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          name of the bottom (y) boundary\n      - name: centroid_partitioner_direction\n        required: No\n        default: !!str \n        cpp_type: MooseEnum\n        group_name: Partitioning\n        options: x y z radial\n        description: |\n          Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n      - name: dim\n        required: No\n        default: !!str 3\n        cpp_type: MooseEnum\n        group_name: Advanced\n        options: 1 2 3\n        description: |\n          This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected.  In particular you must supply this for GMSH meshes.  Note: This is completely ignored for ExodusII meshes!\n      - name: distribution\n        required: No\n        default: !!str DEFAULT\n        cpp_type: MooseEnum\n        group_name: \n        options: PARALLEL SERIAL DEFAULT\n        description: |\n          PARALLEL: Always use libMesh::ParallelMesh SERIAL: Always use libMesh::SerialMesh DEFAULT: Use libMesh::SerialMesh unless --parallel-mesh is specified on the command line\n      - name: file\n        required: Yes\n        default: !!str \n        cpp_type: MeshFileName\n        group_name: \n        description: |\n          The name of the mesh file to read\n      - name: front_boundary\n        required: No\n        default: !!str front_boundary\n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          name of the front (z) boundary\n      - name: left_boundary\n        required: No\n        default: !!str left_boundary\n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          name of the left (x) boundary\n      - name: nemesis\n        required: No\n        default: !!str 0\n        cpp_type: bool\n        group_name: Advanced\n        description: |\n          If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n      - name: partitioner\n        required: No\n        default: !!str default\n        cpp_type: MooseEnum\n        group_name: Partitioning\n        options: default metis parmetis linear centroid hilbert_sfc morton_sfc\n        description: |\n          Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n      - name: right_boundary\n        required: No\n        default: !!str right_boundary\n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          name of the right (x) boundary\n      - name: top_boundary\n        required: No\n        default: !!str top_boundary\n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          name of the top (y) boundary\n      - name: type\n        required: No\n        default: !!str TiledMesh\n        cpp_type: std::string\n        group_name: \n        description: |\n          \n      - name: x_tiles\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of tiles to stitch together (left to right) in the x-direction\n      - name: x_width\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The tile width in the x direction\n      - name: y_tiles\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of tiles to stitch together (top to bottom) in the y-direction\n      - name: y_width\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The tile width in the y direction\n      - name: z_tiles\n        required: No\n        default: !!str 1\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          Number of tiles to stitch together (front to back) in the z-direction\n      - name: z_width\n        required: No\n        default: !!str 0\n        cpp_type: double\n        group_name: \n        description: |\n          The tile width in the z direction\n      subblocks:\n  - name: /Mesh/MortarInterfaces\n    description: !!str\n    type: \n    parameters:\n    subblocks:\n    - name: /Mesh/MortarInterfaces/*\n      description: !!str\n      type: \n      parameters:\n      - name: master\n        required: Yes\n        default: !!str \n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          Master side ID\n      - name: slave\n        required: Yes\n        default: !!str \n        cpp_type: BoundaryName\n        group_name: \n        description: |\n          Slave side ID\n      - name: subdomain\n        required: Yes\n        default: !!str \n        cpp_type: SubdomainName\n        group_name: \n        description: |\n          Subdomain name that is the mortar interface\n      subblocks:\n- name: /MeshModifiers\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /MeshModifiers/*\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /MeshModifiers/AddAllSideSetsByNormals\n    description: !!str\n    type: \n    parameters:\n    - name: fixed_normal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n    - name: type\n      required: No\n      default: !!str AddAllSideSetsByNormals\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: variance\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        The variance [0.0 - 1.0] allowed when comparing normals\n    subblocks:\n  - name: /MeshModifiers/AddExtraNodeset\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: coord\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The nodes with coordinates you want to be in the nodeset (Either this parameter or "nodes" must be supplied).\n    - name: nodes\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        The nodes you want to be in the nodeset (Either this parameter or "coord" must be supplied).\n    - name: tolerance\n      required: No\n      default: !!str 1e-06\n      cpp_type: double\n      group_name: \n      description: |\n        The tolerance in which two nodes are considered identical\n    - name: type\n      required: No\n      default: !!str AddExtraNodeset\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /MeshModifiers/MeshExtruder\n    description: !!str\n    type: \n    parameters:\n    - name: bottom_sideset\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The boundary that will be applied to the bottom of the extruded mesh\n    - name: extrusion_vector\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The direction and length of the extrusion\n    - name: num_layers\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of layers in the extruded mesh\n    - name: top_sideset\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The boundary that will be to the top of the extruded mesh\n    - name: type\n      required: No\n      default: !!str MeshExtruder\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /MeshModifiers/SideSetsAroundSubdomain\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs to create on the supplied subdomain\n    - name: fixed_normal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n    - name: normal\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        If supplied, only faces with normal equal to this, up to normal_tol, will be added to the sidesets specified\n    - name: normal_tol\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        If normal is supplied then faces are only added if face_normal.normal_hat >= 1 - normal_tol, where normal_hat = normal/|normal|\n    - name: type\n      required: No\n      default: !!str SideSetsAroundSubdomain\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: variance\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        The variance [0.0 - 1.0] allowed when comparing normals\n    subblocks:\n  - name: /MeshModifiers/SideSetsBetweenSubdomains\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: fixed_normal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n    - name: master_block\n      required: Yes\n      default: !!str \n      cpp_type: SubdomainName\n      group_name: \n      description: |\n        The first block for which to draw a sideset between\n    - name: paired_block\n      required: Yes\n      default: !!str \n      cpp_type: SubdomainName\n      group_name: \n      description: |\n        The second block for which to draw a sideset between\n    - name: type\n      required: No\n      default: !!str SideSetsBetweenSubdomains\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: variance\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        The variance [0.0 - 1.0] allowed when comparing normals\n    subblocks:\n  - name: /MeshModifiers/SideSetsFromNormals\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: fixed_normal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n    - name: normals\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        A list of normals for which to start painting sidesets\n    - name: type\n      required: No\n      default: !!str SideSetsFromNormals\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: variance\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        The variance [0.0 - 1.0] allowed when comparing normals\n    subblocks:\n  - name: /MeshModifiers/SideSetsFromPoints\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: fixed_normal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n    - name: points\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        A list of points from which to start painting sidesets\n    - name: type\n      required: No\n      default: !!str SideSetsFromPoints\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: variance\n      required: No\n      default: !!str 0.1\n      cpp_type: double\n      group_name: \n      description: |\n        The variance [0.0 - 1.0] allowed when comparing normals\n    subblocks:\n  - name: /MeshModifiers/Transform\n    description: !!str\n    type: \n    parameters:\n    - name: transform\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: TRANSLATE ROTATE SCALE\n      description: |\n        The type of transformation to perform (TRANSLATE, ROTATE, SCALE)\n    - name: type\n      required: No\n      default: !!str Transform\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: vector_value\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::VectorValue<double>\n      group_name: \n      description: |\n        The value to use for the transformation. When using TRANSLATE or SCALE, the xyz coordinates are applied in each direction respectively. When using ROTATE, the coordinates are interpreted as phi, theta and psi.\n    subblocks:\n- name: /MultiApps\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /MultiApps/*\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /MultiApps/FullSolveMultiApp\n    description: !!str\n    type: \n    parameters:\n    - name: app_type\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: OtterApp\n      description: |\n        The type of application to build.\n    - name: bounding_box_inflation\n      required: No\n      default: !!str 0.01\n      cpp_type: double\n      group_name: \n      description: |\n        Relative amount to \'inflate\' the bounding box of this MultiApp.\n    - name: execute_on\n      required: No\n      default: !!str timestep_begin\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: input_files\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.\n    - name: max_procs_per_app\n      required: No\n      default: !!str 4294967295\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don\'t get spread out\n    - name: move_apps\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Apps, designated by their \'numbers\' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n    - name: move_positions\n      required: No\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        The positions corresponding to each move_app.\n    - name: move_time\n      required: No\n      default: !!str 1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The time at which Apps designated by move_apps are moved to move_positions.\n    - name: output_in_position\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true this will cause the output from the MultiApp to be \'moved\' by its position vector\n    - name: positions\n      required: No\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        The positions of the App locations.  Each set of 3 values will represent a Point.  Either this must be supplied or \'positions_file\'\n    - name: positions_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        A filename that should be looked in for positions. Each set of 3 values in that file will represent a Point.  Either this must be supplied or \'positions\'\n    - name: reset_apps\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        The Apps that will be reset when \'reset_time\' is hit.  These are the App \'numbers\' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of \'new\' material for that app.\n    - name: reset_time\n      required: No\n      default: !!str 1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The time at which to reset Apps given by the \'reset_apps\' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of \'new\' material for that app.\n    - name: type\n      required: No\n      default: !!str FullSolveMultiApp\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /MultiApps/TransientMultiApp\n    description: !!str\n    type: \n    parameters:\n    - name: app_type\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: OtterApp\n      description: |\n        The type of application to build.\n    - name: bounding_box_inflation\n      required: No\n      default: !!str 0.01\n      cpp_type: double\n      group_name: \n      description: |\n        Relative amount to \'inflate\' the bounding box of this MultiApp.\n    - name: catch_up\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true this will allow failed solves to attempt to \'catch up\' using smaller timesteps.\n    - name: detect_steady_state\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true then while sub_cycling a steady state check will be done.  In this mode output will only be done once the MultiApp reaches the target time or steady state is reached\n    - name: execute_on\n      required: No\n      default: !!str timestep_begin\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: input_files\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.\n    - name: interpolate_transfers\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Only valid when sub_cycling.  This allows transferred values to be interpolated over the time frame the MultiApp is executing over when sub_cycling\n    - name: max_catch_up_steps\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        Maximum number of steps to allow an app to take when trying to catch back up after a failed solve.\n    - name: max_failures\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of solve failures tolerated while sub_cycling.\n    - name: max_procs_per_app\n      required: No\n      default: !!str 4294967295\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don\'t get spread out\n    - name: move_apps\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        Apps, designated by their \'numbers\' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n    - name: move_positions\n      required: No\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        The positions corresponding to each move_app.\n    - name: move_time\n      required: No\n      default: !!str 1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The time at which Apps designated by move_apps are moved to move_positions.\n    - name: output_in_position\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true this will cause the output from the MultiApp to be \'moved\' by its position vector\n    - name: output_sub_cycles\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true when sub_cycling every sub-cycle will be output.\n    - name: positions\n      required: No\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        The positions of the App locations.  Each set of 3 values will represent a Point.  Either this must be supplied or \'positions_file\'\n    - name: positions_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        A filename that should be looked in for positions. Each set of 3 values in that file will represent a Point.  Either this must be supplied or \'positions\'\n    - name: reset_apps\n      required: No\n      default: !!str \n      cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n      group_name: \n      description: |\n        The Apps that will be reset when \'reset_time\' is hit.  These are the App \'numbers\' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of \'new\' material for that app.\n    - name: reset_time\n      required: No\n      default: !!str 1.79769e+308\n      cpp_type: double\n      group_name: \n      description: |\n        The time at which to reset Apps given by the \'reset_apps\' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of \'new\' material for that app.\n    - name: steady_state_tol\n      required: No\n      default: !!str 1e-08\n      cpp_type: double\n      group_name: \n      description: |\n        The relative difference between the new solution and the old solution that will be considered to be at steady state\n    - name: sub_cycling\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true to allow this MultiApp to take smaller timesteps than the rest of the simulation.  More than one timestep will be performed for each \'master\' timestep\n    - name: tolerate_failure\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true this MultiApp won\'t participate in dt decisions and will always be fast-forwarded to the current time.\n    - name: type\n      required: No\n      default: !!str TransientMultiApp\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n- name: /NodalNormals\n  description: !!str\n  type: \n  parameters:\n  - name: boundary\n    required: No\n    default: !!str ANY_BOUNDARY_ID \n    cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n    group_name: \n    description: |\n      The boundary ID or name where the normals will be computed\n  - name: corner_boundary\n    required: No\n    default: !!str \n    cpp_type: BoundaryName\n    group_name: \n    description: |\n      boundary ID or name with nodes at \'corners\'\n  - name: order\n    required: No\n    default: !!str FIRST\n    cpp_type: MooseEnum\n    group_name: \n    options: FIRST SECOND\n    description: |\n      Specifies the order of variables that hold the nodal normals. Needs to match the order of the mesh\n  subblocks:\n- name: /Outputs\n  description: !!str\n  type: \n  parameters:\n  - name: checkpoint\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Create checkpoint files using the default options.\n  - name: console\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the results using the default settings for Console output\n  - name: csv\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the scalar variable and postprocessors to a *.csv file using the default CSV output.\n  - name: exodus\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the results using the default settings for Exodus output\n  - name: file_base\n    required: No\n    default: !!str \n    cpp_type: std::string\n    group_name: \n    description: |\n      Common file base name to be utilized with all output objects\n  - name: gmv\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the results using the default settings for GMV output\n  - name: gnuplot\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the scalar and postprocessor results using the default settings for GNUPlot output\n  - name: hide\n    required: No\n    default: !!str \n    cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n    group_name: \n    description: |\n      A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n  - name: interval\n    required: No\n    default: !!str 1\n    cpp_type: unsigned int\n    group_name: \n    description: |\n      The interval at which timesteps are output to the solution file\n  - name: nemesis\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the results using the default settings for Nemesis output\n  - name: output_final\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Force the final timestep to be output, regardless of output interval\n  - name: output_if_base_contains\n    required: No\n    default: !!str \n    cpp_type: std::vector<std::string, std::allocator<std::string> >\n    group_name: \n    description: |\n      If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n  - name: output_initial\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Request that the initial condition is output to the solution file\n  - name: output_intermediate\n    required: No\n    default: !!str 1\n    cpp_type: bool\n    group_name: \n    description: |\n      Request that all intermediate steps (not initial or final) are output\n  - name: show\n    required: No\n    default: !!str \n    cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n    group_name: \n    description: |\n      A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n  - name: solution_history\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Print a solution history file (.slh) using the default settings\n  - name: sync_times\n    required: No\n    default: !!str \n    cpp_type: std::vector<double, std::allocator<double> >\n    group_name: \n    description: |\n      Times at which the output and solution is forced to occur\n  - name: tecplot\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the results using the default settings for Tecplot output\n  - name: xda\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the results using the default settings for XDA/XDR output (ascii)\n  - name: xdr\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Output the results using the default settings for XDA/XDR output (binary)\n  subblocks:\n  - name: /Outputs/*\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Outputs/CSV\n    description: !!str\n    type: \n    parameters:\n    - name: append_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Displaced\n      description: |\n        Append \'_displaced\' to the output file base\n    - name: append_restart\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Append existing file on restart\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_failed\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true all time attempted time steps are output\n    - name: output_final\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Force the final time step to be output, regardless of output interval\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Request that the initial condition is output to the solution file\n    - name: output_intermediate\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Request that all intermediate steps (not initial or final) are output\n    - name: output_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Enable/disable the output of postprocessors\n    - name: output_scalar_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Enable/disable the output of aux scalar variables\n    - name: output_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Toggles the display of the system information prior to the solve\n    - name: output_vector_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Enable/disable the output of VectorPostprocessors\n    - name: sequence\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable sequential file output (enable by default when \'use_displace = true\', otherwise defaults to false\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str CSV\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/Checkpoint\n    description: !!str\n    type: \n    parameters:\n    - name: append_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Displaced\n      description: |\n        Append \'_displaced\' to the output file base\n    - name: binary\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Toggle the output of binary files\n    - name: elemental_as_nodal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Output elemental nonlinear variables as nodal\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: num_files\n      required: No\n      default: !!str 2\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Number of the restart files to save\n    - name: output_failed\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true all time attempted time steps are output\n    - name: output_final\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Force the final time step to be output, regardless of output interval\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Request that the initial condition is output to the solution file\n    - name: output_input\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output the input file\n    - name: output_intermediate\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Request that all intermediate steps (not initial or final) are output\n    - name: output_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Toggles the display of the system information prior to the solve\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: scalar_as_nodal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Output scalar variables as nodal\n    - name: sequence\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable sequential file output (enable by default when \'use_displace = true\', otherwise defaults to false\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: suffix\n      required: No\n      default: !!str cp\n      cpp_type: std::string\n      group_name: \n      description: |\n        This will be appended to the file_base to create the directory name for checkpoint files.\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str Checkpoint\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/Console\n    description: !!str\n    type: \n    parameters:\n    - name: all_variable_norms\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Norms\n      description: |\n        If true, all variable norms will be printed after each solve\n    - name: append_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Displaced\n      description: |\n        Append \'_displaced\' to the output file base\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: fit_mode\n      required: No\n      default: !!str ENVIRONMENT\n      cpp_type: MooseEnum\n      group_name: \n      options: ENVIRONMENT AUTO 80 120 160\n      description: |\n        Specifies the wrapping mode for post-processor tables that are printed to the screen (ENVIRONMENT: Read "MOOSE_PPS_WIDTH" for desired width, AUTO: Attempt to determine width automatically (serial only), <n>: Desired width\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: max_rows\n      required: No\n      default: !!str 15\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The maximum number of postprocessor/scalar values displayed on screen during a timestep (set to 0 for unlimited)\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: outlier_multiplier\n      required: No\n      default: !!str 0.8 2 \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Norms\n      description: |\n        Multiplier utilized to determine if a residual norm is an outlier. If the variable residual is less than multiplier[0] times the total residual it is colored red. If the variable residual is less than multiplier[1] times the average residual it is colored yellow.\n    - name: outlier_variable_norms\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Norms\n      description: |\n        If true, outlier variable norms will be printed after each solve\n    - name: output_failed\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        When true all time attempted time steps are output\n    - name: output_file\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output to the file\n    - name: output_final\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Force the final time step to be output, regardless of output interval\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Request that the initial condition is output to the solution file\n    - name: output_intermediate\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Request that all intermediate steps (not initial or final) are output\n    - name: output_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Enable/disable the output of postprocessors\n    - name: output_scalar_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Enable/disable the output of aux scalar variables\n    - name: output_screen\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Output to the screen\n    - name: output_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Toggles the display of the system information prior to the solve\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: perf_header\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: Perf Log\n      description: |\n        Print the libMesh performance log header (requires that \'perf_log = true\')\n    - name: perf_log\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Perf Log\n      description: |\n        If true, all performance logs will be printed. The individual log settings will override this option.\n    - name: scientific_time\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Control the printing of time and dt in scientific notation\n    - name: sequence\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable sequential file output (enable by default when \'use_displace = true\', otherwise defaults to false\n    - name: setup_log\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: Perf Log\n      description: |\n        Toggles the printing of the \'Setup Performance\' log\n    - name: setup_log_early\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Perf Log\n      description: |\n        Specifies whether or not the Setup Performance log should be printed before the first time step.  It will still be printed at the end if perf_log is also enabled and likewise disabled if perf_log is false\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: solve_log\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: Perf Log\n      description: |\n        Toggles the printing of the \'Moose Test Performance\' log\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_precision\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of significant digits that are printed on time related outputs\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str Console\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_color\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        If true, color will be added to the output\n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    - name: verbose\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Print detailed diagnostics on timestep calculation\n    subblocks:\n  - name: /Outputs/DebugOutput\n    description: !!str\n    type: \n    parameters:\n    - name: append_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Displaced\n      description: |\n        Append \'_displaced\' to the output file base\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_elemental_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Enable/disable the output of elemental nonlinear variables\n    - name: output_failed\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true all time attempted time steps are output\n    - name: output_final\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Force the final time step to be output, regardless of output interval\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Request that the initial condition is output to the solution file\n    - name: output_intermediate\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Request that all intermediate steps (not initial or final) are output\n    - name: output_nodal_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Enable/disable the output of nodal nonlinear variables\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: show_var_residual_norms\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Print the residual norms of the individual solution variables at each nonlinear iteration\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str DebugOutput\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/Exodus\n    description: !!str\n    type: \n    parameters:\n    - name: append_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Displaced\n      description: |\n        Append \'_displaced\' to the output file base\n    - name: append_oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Oversampling\n      description: |\n        Append \'_oversample\' to the output file base\n    - name: elemental_as_nodal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Output elemental nonlinear variables as nodal\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: file\n      required: No\n      default: !!str \n      cpp_type: MeshFileName\n      group_name: Oversampling\n      description: |\n        The name of the mesh file to read, for oversampling\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_elemental_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Enable/disable the output of elemental nonlinear variables\n    - name: output_failed\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true all time attempted time steps are output\n    - name: output_final\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Force the final time step to be output, regardless of output interval\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Request that the initial condition is output to the solution file\n    - name: output_input\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output the input file\n    - name: output_intermediate\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Request that all intermediate steps (not initial or final) are output\n    - name: output_nodal_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Enable/disable the output of nodal nonlinear variables\n    - name: output_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Enable/disable the output of postprocessors\n    - name: output_scalar_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Enable/disable the output of aux scalar variables\n    - name: output_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Toggles the display of the system information prior to the solve\n    - name: oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Oversampling\n      description: |\n        Set to true to enable oversampling\n    - name: padding\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: position\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: Oversampling\n      description: |\n        Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n    - name: refinements\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Oversampling\n      description: |\n        Number of uniform refinements for oversampling\n    - name: scalar_as_nodal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Output scalar variables as nodal\n    - name: sequence\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable sequential file output (enable by default when \'use_displace = true\', otherwise defaults to false\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str Exodus\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/GMV\n    description: !!str\n    type: \n    parameters:\n    - name: append_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Displaced\n      description: |\n        Append \'_displaced\' to the output file base\n    - name: append_oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Oversampling\n      description: |\n        Append \'_oversample\' to the output file base\n    - name: binary\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Output the file in binary format\n    - name: elemental_as_nodal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Output elemental nonlinear variables as nodal\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: file\n      required: No\n      default: !!str \n      cpp_type: MeshFileName\n      group_name: Oversampling\n      description: |\n        The name of the mesh file to read, for oversampling\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_elemental_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Enable/disable the output of elemental nonlinear variables\n    - name: output_failed\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true all time attempted time steps are output\n    - name: output_final\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Force the final time step to be output, regardless of output interval\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Request that the initial condition is output to the solution file\n    - name: output_input\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output the input file\n    - name: output_intermediate\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Request that all intermediate steps (not initial or final) are output\n    - name: output_nodal_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Enable/disable the output of nodal nonlinear variables\n    - name: output_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Toggles the display of the system information prior to the solve\n    - name: oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Oversampling\n      description: |\n        Set to true to enable oversampling\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: position\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: Oversampling\n      description: |\n        Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n    - name: refinements\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Oversampling\n      description: |\n        Number of uniform refinements for oversampling\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str GMV\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/GNUPlot\n    description: !!str\n    type: \n    parameters:\n    - name: append_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Displaced\n      description: |\n        Append \'_displaced\' to the output file base\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: extension\n      required: No\n      default: !!str png\n      cpp_type: MooseEnum\n      group_name: \n      options: png ps gif\n      description: |\n        GUN plot file extension\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_failed\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true all time attempted time steps are output\n    - name: output_final\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Force the final time step to be output, regardless of output interval\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Request that the initial condition is output to the solution file\n    - name: output_intermediate\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Request that all intermediate steps (not initial or final) are output\n    - name: output_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Enable/disable the output of postprocessors\n    - name: output_scalar_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Enable/disable the output of aux scalar variables\n    - name: output_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Toggles the display of the system information prior to the solve\n    - name: sequence\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable sequential file output (enable by default when \'use_displace = true\', otherwise defaults to false\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str GNUPlot\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/Nemesis\n    description: !!str\n    type: \n    parameters:\n    - name: append_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Displaced\n      description: |\n        Append \'_displaced\' to the output file base\n    - name: append_oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Oversampling\n      description: |\n        Append \'_oversample\' to the output file base\n    - name: elemental_as_nodal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Output elemental nonlinear variables as nodal\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: file\n      required: No\n      default: !!str \n      cpp_type: MeshFileName\n      group_name: Oversampling\n      description: |\n        The name of the mesh file to read, for oversampling\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_elemental_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Enable/disable the output of elemental nonlinear variables\n    - name: output_failed\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true all time attempted time steps are output\n    - name: output_final\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Force the final time step to be output, regardless of output interval\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Request that the initial condition is output to the solution file\n    - name: output_input\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output the input file\n    - name: output_intermediate\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Request that all intermediate steps (not initial or final) are output\n    - name: output_nodal_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Enable/disable the output of nodal nonlinear variables\n    - name: output_postprocessors\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Enable/disable the output of postprocessors\n    - name: output_scalar_variables\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Enable/disable the output of aux scalar variables\n    - name: output_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Toggles the display of the system information prior to the solve\n    - name: oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Oversampling\n      description: |\n        Set to true to enable oversampling\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: position\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: Oversampling\n      description: |\n        Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n    - name: refinements\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Oversampling\n      description: |\n        Number of uniform refinements for oversampling\n    - name: scalar_as_nodal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Output scalar variables as nodal\n    - name: sequence\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable sequential file output (enable by default when \'use_displace = true\', otherwise defaults to false\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str Nemesis\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/SolutionHistory\n    description: !!str\n    type: \n    parameters:\n    - name: append_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Displaced\n      description: |\n        Append \'_displaced\' to the output file base\n    - name: elemental_as_nodal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Output elemental nonlinear variables as nodal\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: output_failed\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true all time attempted time steps are output\n    - name: output_final\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Force the final time step to be output, regardless of output interval\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Request that the initial condition is output to the solution file\n    - name: output_input\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output the input file\n    - name: output_intermediate\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Request that all intermediate steps (not initial or final) are output\n    - name: output_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Toggles the display of the system information prior to the solve\n    - name: scalar_as_nodal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Output scalar variables as nodal\n    - name: sequence\n      required: No\n      default: !!str \n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable sequential file output (enable by default when \'use_displace = true\', otherwise defaults to false\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str SolutionHistory\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/Tecplot\n    description: !!str\n    type: \n    parameters:\n    - name: append_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Displaced\n      description: |\n        Append \'_displaced\' to the output file base\n    - name: append_oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Oversampling\n      description: |\n        Append \'_oversample\' to the output file base\n    - name: ascii_append\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        If true, append to an existing ASCII file rather than creating a new file each time\n    - name: binary\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Set Tecplot files to output in binary format\n    - name: elemental_as_nodal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Output elemental nonlinear variables as nodal\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: file\n      required: No\n      default: !!str \n      cpp_type: MeshFileName\n      group_name: Oversampling\n      description: |\n        The name of the mesh file to read, for oversampling\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_failed\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true all time attempted time steps are output\n    - name: output_final\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Force the final time step to be output, regardless of output interval\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Request that the initial condition is output to the solution file\n    - name: output_input\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output the input file\n    - name: output_intermediate\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Request that all intermediate steps (not initial or final) are output\n    - name: output_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Toggles the display of the system information prior to the solve\n    - name: oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Oversampling\n      description: |\n        Set to true to enable oversampling\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: position\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: Oversampling\n      description: |\n        Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n    - name: refinements\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Oversampling\n      description: |\n        Number of uniform refinements for oversampling\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str Tecplot\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/XDA\n    description: !!str\n    type: \n    parameters:\n    - name: append_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Displaced\n      description: |\n        Append \'_displaced\' to the output file base\n    - name: append_oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Oversampling\n      description: |\n        Append \'_oversample\' to the output file base\n    - name: elemental_as_nodal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Output elemental nonlinear variables as nodal\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: file\n      required: No\n      default: !!str \n      cpp_type: MeshFileName\n      group_name: Oversampling\n      description: |\n        The name of the mesh file to read, for oversampling\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_failed\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true all time attempted time steps are output\n    - name: output_final\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Force the final time step to be output, regardless of output interval\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Request that the initial condition is output to the solution file\n    - name: output_input\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output the input file\n    - name: output_intermediate\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Request that all intermediate steps (not initial or final) are output\n    - name: output_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Toggles the display of the system information prior to the solve\n    - name: oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Oversampling\n      description: |\n        Set to true to enable oversampling\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: position\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: Oversampling\n      description: |\n        Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n    - name: refinements\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Oversampling\n      description: |\n        Number of uniform refinements for oversampling\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str XDA\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n  - name: /Outputs/XDR\n    description: !!str\n    type: \n    parameters:\n    - name: append_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Displaced\n      description: |\n        Append \'_displaced\' to the output file base\n    - name: append_oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Oversampling\n      description: |\n        Append \'_oversample\' to the output file base\n    - name: elemental_as_nodal\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Variables\n      description: |\n        Output elemental nonlinear variables as nodal\n    - name: end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object stop operating\n    - name: file\n      required: No\n      default: !!str \n      cpp_type: MeshFileName\n      group_name: Oversampling\n      description: |\n        The name of the mesh file to read, for oversampling\n    - name: file_base\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The desired solution output name without an extension\n    - name: hide\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: interval\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: Timing\n      description: |\n        The interval at which time steps are output to the solution file\n    - name: linear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting linear residuals\n    - name: linear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each linear residual evaluation\n    - name: linear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each linear residual evaluation\n    - name: linear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each linear residual evaluation\n    - name: nonlinear_residual_dt_divisor\n      required: No\n      default: !!str 1000\n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Number of divisions applied to time step when outputting non-linear residuals\n    - name: nonlinear_residual_end_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies an end time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residual_start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: PETSc\n      description: |\n        Specifies a start time to begin output on each nonlinear residual evaluation\n    - name: nonlinear_residuals\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: PETSc\n      description: |\n        Specifies whether output occurs on each nonlinear residual evaluation\n    - name: output_failed\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        When true all time attempted time steps are output\n    - name: output_final\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Force the final time step to be output, regardless of output interval\n    - name: output_if_base_contains\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: Advanced\n      description: |\n        If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n    - name: output_initial\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Request that the initial condition is output to the solution file\n    - name: output_input\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Output the input file\n    - name: output_intermediate\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Request that all intermediate steps (not initial or final) are output\n    - name: output_system_information\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Toggles the display of the system information prior to the solve\n    - name: oversample\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Oversampling\n      description: |\n        Set to true to enable oversampling\n    - name: padding\n      required: No\n      default: !!str 4\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The number of for extension suffix (e.g., out.e-s002)\n    - name: position\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: Oversampling\n      description: |\n        Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n    - name: refinements\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Oversampling\n      description: |\n        Number of uniform refinements for oversampling\n    - name: show\n      required: No\n      default: !!str \n      cpp_type: std::vector<VariableName, std::allocator<VariableName> >\n      group_name: Variables\n      description: |\n        A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n    - name: start_time\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time at which this output object begins to operate\n    - name: sync_only\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Timing\n      description: |\n        Only export results at sync times\n    - name: sync_times\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: Timing\n      description: |\n        Times at which the output and solution is forced to occur\n    - name: time_tolerance\n      required: No\n      default: !!str 1e-14\n      cpp_type: double\n      group_name: Timing\n      description: |\n        Time tolerance utilized checking start and end times\n    - name: type\n      required: No\n      default: !!str XDR\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Enable/disable the use of the displaced mesh for outputting\n    subblocks:\n- name: /Postprocessors\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /Postprocessors/*\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Postprocessors/AreaPostprocessor\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str AreaPostprocessor\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/AverageElementSize\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str AverageElementSize\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/AverageNodalVariableValue\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str AverageNodalVariableValue\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/ElementAverageTimeDerivative\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementAverageTimeDerivative\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementAverageValue\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementAverageValue\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementExtremeValue\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementExtremeValue\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_type\n      required: No\n      default: !!str max\n      cpp_type: MooseEnum\n      group_name: \n      options: max min\n      description: |\n        Type of extreme value to return. \'max\' returns the maximum value. \'min\' returns the minimum value.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/ElementH1Error\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementH1Error\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementH1SemiError\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementH1SemiError\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementIntegralMaterialProperty\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: mat_prop\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The name of the material property\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementIntegralMaterialProperty\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/ElementIntegralVariablePostprocessor\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementIntegralVariablePostprocessor\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementL2Error\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementL2Error\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementL2Norm\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementL2Norm\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /Postprocessors/ElementVectorL2Error\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: function_x\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: function_y\n      required: No\n      default: !!str 0\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: function_z\n      required: No\n      default: !!str 0\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementVectorL2Error\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: var_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The FE solution in x direction\n    - name: var_y\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The FE solution in y direction\n    - name: var_z\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The FE solution in z direction\n    subblocks:\n  - name: /Postprocessors/ElementalVariableValue\n    description: !!str\n    type: \n    parameters:\n    - name: elementid\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The ID of the element where we monitor\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str ElementalVariableValue\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to be monitored\n    subblocks:\n  - name: /Postprocessors/EmptyPostprocessor\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str EmptyPostprocessor\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/NodalExtremeValue\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalExtremeValue\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_type\n      required: No\n      default: !!str max\n      cpp_type: MooseEnum\n      group_name: \n      options: max min\n      description: |\n        Type of extreme value to return. \'max\' returns the maximum value. \'min\' returns the minimum value.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/NodalFloodCount\n    description: !!str\n    type: \n    parameters:\n    - name: bubble_volume_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        An optional file name where bubble volumes can be output.\n    - name: condense_map_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing bubble may be extended (defaults to "threshold")\n    - name: elem_avg_value\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        If supplied, will be used to find the scaled threshold of the bubble edges\n    - name: enable_var_coloring\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the UO to populate the variable index map.\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: threshold\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new bubble may be started\n    - name: track_memory_usage\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Calculate memory usage\n    - name: type\n      required: No\n      default: !!str NodalFloodCount\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n    - name: use_single_map\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Ths variable(s) for which to find connected regions of interests, i.e. "bubbles".\n    subblocks:\n  - name: /Postprocessors/NodalL2Error\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalL2Error\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/NodalL2Norm\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalL2Norm\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/NodalMaxValue\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalMaxValue\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/NodalProxyMaxValue\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalProxyMaxValue\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/NodalSum\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalSum\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /Postprocessors/NodalVariableValue\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: nodeid\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The ID of the node where we monitor\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str NodalVariableValue\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to be monitored\n    subblocks:\n  - name: /Postprocessors/NodalVolumeFraction\n    description: !!str\n    type: \n    parameters:\n    - name: Avrami_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        filename for Avrami analysis info (ln time and Avrami)\n    - name: bubble_volume_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        An optional file name where bubble volumes can be output.\n    - name: condense_map_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing bubble may be extended (defaults to "threshold")\n    - name: elem_avg_value\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        If supplied, will be used to find the scaled threshold of the bubble edges\n    - name: enable_var_coloring\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the UO to populate the variable index map.\n    - name: equil_fraction\n      required: No\n      default: !!str -1\n      cpp_type: double\n      group_name: \n      description: |\n        Equilibrium volume fraction of 2nd phase for Avrami analysis\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: mesh_volume\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        Postprocessor from which to get mesh volume\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: threshold\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new bubble may be started\n    - name: track_memory_usage\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Calculate memory usage\n    - name: type\n      required: No\n      default: !!str NodalVolumeFraction\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n    - name: use_single_map\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Ths variable(s) for which to find connected regions of interests, i.e. "bubbles".\n    subblocks:\n  - name: /Postprocessors/NumDOFs\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str NumDOFs\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/NumElems\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str NumElems\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/NumLinearIterations\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str NumLinearIterations\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/NumNodes\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str NumNodes\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/NumNonlinearIterations\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str NumNonlinearIterations\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/NumResidualEvaluations\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str NumResidualEvaluations\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/NumVars\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: system\n      required: No\n      default: !!str nonlinear\n      cpp_type: MooseEnum\n      group_name: \n      options: nonlinear auxiliary\n      description: |\n        The system for which you want to print the number of variables.\n    - name: type\n      required: No\n      default: !!str NumVars\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/PerformanceData\n    description: !!str\n    type: \n    parameters:\n    - name: column\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: n_calls total_time average_time total_time_with_sub average_time_with_sub percent_of_active_time percent_of_active_time_with_sub\n      description: |\n        The column you want the value of.\n    - name: event\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The name of the event.\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str PerformanceData\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/PlotFunction\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Name of the function to plot (i.e. sample)\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: point\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        A point in space to be given to the function\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        A scale factor to be applied to the function\n    - name: type\n      required: No\n      default: !!str PlotFunction\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/PointValue\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: point\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The physical point where the solution will be evaluated.\n    - name: type\n      required: No\n      default: !!str PointValue\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on.\n    subblocks:\n  - name: /Postprocessors/ProblemRealParameter\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: param_name\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        Name of the parameter to be exposed\n    - name: type\n      required: No\n      default: !!str ProblemRealParameter\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/Receiver\n    description: !!str\n    type: \n    parameters:\n    - name: default\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The default value\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str Receiver\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/Residual\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str Residual\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/RunTime\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: time_type\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: alive active\n      description: |\n        Whether to output the total elapsed or just the active time\n    - name: type\n      required: No\n      default: !!str RunTime\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/ScalarL2Error\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str ScalarL2Error\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the scalar variable\n    subblocks:\n  - name: /Postprocessors/ScalarVariable\n    description: !!str\n    type: \n    parameters:\n    - name: component\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Component to output for this variable\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str ScalarVariable\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Name of the variable\n    subblocks:\n  - name: /Postprocessors/SideAverageValue\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str SideAverageValue\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /Postprocessors/SideFluxAverage\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: diffusivity\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The name of the diffusivity material property that will be used in the flux computation.\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str SideFluxAverage\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /Postprocessors/SideFluxIntegral\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: diffusivity\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The name of the diffusivity material property that will be used in the flux computation.\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str SideFluxIntegral\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /Postprocessors/SideIntegralVariablePostprocessor\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str SideIntegralVariablePostprocessor\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /Postprocessors/TimestepSize\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str TimestepSize\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Postprocessors/TotalVariableValue\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str TotalVariableValue\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the postprocessor\n    subblocks:\n  - name: /Postprocessors/VolumePostprocessor\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VolumePostprocessor\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n- name: /Preconditioning\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /Preconditioning/*\n    description: !!str\n    type: \n    parameters:\n    - name: line_search\n      required: No\n      default: !!str default\n      cpp_type: MooseEnum\n      group_name: \n      options: default shell none basic l2 bt cp\n      description: |\n        Specifies the line search type (Note: none = basic)\n    - name: petsc_options\n      required: No\n      default: !!str  \n      cpp_type: std::vector<MooseEnum, std::allocator<MooseEnum> >\n      group_name: \n      options: \n      description: |\n        Singleton PETSc options\n    - name: petsc_options_iname\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        Names of PETSc name/value pairs\n    - name: petsc_options_value\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n    - name: solve_type\n      required: No\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: PJFNK JFNK NEWTON FD LINEAR\n      description: |\n        PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Preconditioning/FDP\n    description: !!str\n    type: \n    parameters:\n    - name: full\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true if you want the full set of couplings.  Simply for convenience so you don\'t have to set every off_diag_row and off_diag_column combination.\n    - name: implicit_geometric_coupling\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true if you want to add entries into the matrix for degrees of freedom that might be coupled by inspection of the geometric search objects.\n    - name: off_diag_column\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n    - name: off_diag_row\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n    - name: pc_side\n      required: No\n      default: !!str right\n      cpp_type: MooseEnum\n      group_name: \n      options: left right symmetric\n      description: |\n        Preconditioning side\n    - name: type\n      required: No\n      default: !!str FDP\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Preconditioning/PBP\n    description: !!str\n    type: \n    parameters:\n    - name: off_diag_column\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n    - name: off_diag_row\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n    - name: pc_side\n      required: No\n      default: !!str right\n      cpp_type: MooseEnum\n      group_name: \n      options: left right symmetric\n      description: |\n        Preconditioning side\n    - name: preconditioner\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        TODO: docstring\n    - name: solve_order\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        The order the block rows will be solved in.  Put the name of variables here to stand for solving that variable\'s block row.  A variable may appear more than once (to create cylces if you like).\n    - name: type\n      required: No\n      default: !!str PBP\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Preconditioning/SBP\n    description: !!str\n    type: \n    parameters:\n    - name: full\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true if you want the full set of couplings.  Simply for convenience so you don\'t have to set every off_diag_row and off_diag_column combination.\n    - name: off_diag_column\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n    - name: off_diag_row\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n    - name: pc_side\n      required: No\n      default: !!str right\n      cpp_type: MooseEnum\n      group_name: \n      options: left right symmetric\n      description: |\n        Preconditioning side\n    - name: type\n      required: No\n      default: !!str SBP\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    subblocks:\n  - name: /Preconditioning/SMP\n    description: !!str\n    type: \n    parameters:\n    - name: full\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true if you want the full set of couplings.  Simply for convenience so you don\'t have to set every off_diag_row and off_diag_column combination.\n    - name: off_diag_column\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n    - name: off_diag_row\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n    - name: pc_side\n      required: No\n      default: !!str right\n      cpp_type: MooseEnum\n      group_name: \n      options: left right symmetric\n      description: |\n        Preconditioning side\n    - name: type\n      required: No\n      default: !!str SMP\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    subblocks:\n- name: /Problem\n  description: !!str\n  type: \n  parameters:\n  - name: block\n    required: No\n    default: !!str \n    cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n    group_name: \n    description: |\n      Block IDs for the coordinate systems\n  - name: coord_type\n    required: No\n    default: !!str XYZ \n    cpp_type: std::vector<MooseEnum, std::allocator<MooseEnum> >\n    group_name: \n    options: XYZ RZ RSPHERICAL\n    description: |\n      Type of the coordinate system per block param\n  - name: fe_cache\n    required: No\n    default: !!str 0\n    cpp_type: bool\n    group_name: \n    description: |\n      Whether or not to turn on the finite element shape function caching system.  This can increase speed with an associated memory cost.\n  - name: kernel_coverage_check\n    required: No\n    default: !!str 1\n    cpp_type: bool\n    group_name: \n    description: |\n      Set to false to disable kernel->subdomain kernel coverage check\n  - name: name\n    required: No\n    default: !!str MOOSE Problem\n    cpp_type: std::string\n    group_name: \n    description: |\n      The name the problem\n  - name: type\n    required: Yes\n    default: !!str FEProblem\n    cpp_type: std::string\n    group_name: \n    description: |\n      A string representing the Moose Object that will be built by this Action\n  subblocks:\n  - name: /Problem/<type>\n    description: !!str\n    type: \n    parameters:\n    subblocks:\n    - name: /Problem/<type>/CoupledProblem\n      description: !!str\n      type: \n      parameters:\n      - name: type\n        required: No\n        default: !!str CoupledProblem\n        cpp_type: std::string\n        group_name: \n        description: |\n          \n      subblocks:\n    - name: /Problem/<type>/FEProblem\n      description: !!str\n      type: \n      parameters:\n      - name: dimNearNullSpace\n        required: No\n        default: !!str 0\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The dimension of the near nullspace\n      - name: dimNullSpace\n        required: No\n        default: !!str 0\n        cpp_type: unsigned int\n        group_name: \n        description: |\n          The dimension of the nullspace\n      - name: solve\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything\n      - name: type\n        required: No\n        default: !!str FEProblem\n        cpp_type: std::string\n        group_name: \n        description: |\n          \n      - name: use_nonlinear\n        required: No\n        default: !!str 1\n        cpp_type: bool\n        group_name: \n        description: |\n          Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)\n      subblocks:\n- name: /ScalarKernels\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /ScalarKernels/*\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /ScalarKernels/ODETimeDerivative\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: No\n      default: !!str ODETimeDerivative\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: NonlinearVariableName\n      group_name: \n      description: |\n        The name of the variable that this kernel operates on\n    subblocks:\n- name: /Splits\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /Splits/*\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str Split\n      cpp_type: std::string\n      group_name: \n      description: |\n        Classname of the split object\n    subblocks:\n  - name: /Splits/ContactSplit\n    description: !!str\n    type: \n    parameters:\n    - name: blocks\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        Mesh blocks Split operates on (omitting this implies "all blocks"\n    - name: contact_displaced\n      required: No\n      default: !!str \n      cpp_type: std::vector<bool, std::allocator<bool> >\n      group_name: \n      description: |\n        List of indicators whether displaced mesh is used to define included contact\n    - name: contact_master\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        Master surface list for included contacts\n    - name: contact_slave\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        Slave surface list for included contacts\n    - name: petsc_options\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        PETSc flags for the FieldSplit solver\n    - name: petsc_options_iname\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        PETSc option names for the FieldSplit solver\n    - name: petsc_options_value\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        PETSc option values for the FieldSplit solver\n    - name: schur_ainv\n      required: No\n      default: !!str diag\n      cpp_type: std::string\n      group_name: \n      description: |\n        Type of approximation to inv(A) used when forming S = D - C inv(A) B: diag|lump\n    - name: schur_pre\n      required: No\n      default: !!str S\n      cpp_type: std::string\n      group_name: \n      description: |\n        Type of Schur complement preconditioner matrix: S|Sp|A11\n    - name: schur_type\n      required: No\n      default: !!str full\n      cpp_type: std::string\n      group_name: \n      description: |\n        Type of Schur complement: full|upper|lower\n    - name: sides\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        Sidesets Split operates on (omitting this implies "no sidesets"\n    - name: splitting\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        The names of the splits (subsystems) in the decomposition of this split\n    - name: splitting_type\n      required: No\n      default: !!str additive\n      cpp_type: std::string\n      group_name: \n      description: |\n        Split decomposition type: additive|multiplicative|symmetric_multiplicative|schur\n    - name: type\n      required: No\n      default: !!str ContactSplit\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: uncontact_displaced\n      required: No\n      default: !!str \n      cpp_type: std::vector<bool, std::allocator<bool> >\n      group_name: \n      description: |\n        List of indicators whether displaced mesh is used to define excluded contact\n    - name: uncontact_master\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        Master surface list for excluded contacts\n    - name: uncontact_slave\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        Slave surface list for excluded contacts\n    - name: unsides\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        Sidesets Split excludes (omitting this implies "do not exclude any sidesets"\n    - name: vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        Variables Split operates on (omitting this implies "all variables"\n    subblocks:\n  - name: /Splits/Split\n    description: !!str\n    type: \n    parameters:\n    - name: blocks\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        Mesh blocks Split operates on (omitting this implies "all blocks"\n    - name: petsc_options\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        PETSc flags for the FieldSplit solver\n    - name: petsc_options_iname\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        PETSc option names for the FieldSplit solver\n    - name: petsc_options_value\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        PETSc option values for the FieldSplit solver\n    - name: schur_ainv\n      required: No\n      default: !!str diag\n      cpp_type: std::string\n      group_name: \n      description: |\n        Type of approximation to inv(A) used when forming S = D - C inv(A) B: diag|lump\n    - name: schur_pre\n      required: No\n      default: !!str S\n      cpp_type: std::string\n      group_name: \n      description: |\n        Type of Schur complement preconditioner matrix: S|Sp|A11\n    - name: schur_type\n      required: No\n      default: !!str full\n      cpp_type: std::string\n      group_name: \n      description: |\n        Type of Schur complement: full|upper|lower\n    - name: sides\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        Sidesets Split operates on (omitting this implies "no sidesets"\n    - name: splitting\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        The names of the splits (subsystems) in the decomposition of this split\n    - name: splitting_type\n      required: No\n      default: !!str additive\n      cpp_type: std::string\n      group_name: \n      description: |\n        Split decomposition type: additive|multiplicative|symmetric_multiplicative|schur\n    - name: type\n      required: No\n      default: !!str Split\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: unsides\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        Sidesets Split excludes (omitting this implies "do not exclude any sidesets"\n    - name: vars\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        Variables Split operates on (omitting this implies "all variables"\n    subblocks:\n- name: /Transfers\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /Transfers/*\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /Transfers/MultiAppInterpolationTransfer\n    description: !!str\n    type: \n    parameters:\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: execute_on\n      required: No\n      default: !!str timestep_begin\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: interp_type\n      required: No\n      default: !!str inverse_distance\n      cpp_type: MooseEnum\n      group_name: \n      options: inverse_distance radial_basis\n      description: |\n        The algorithm to use for interpolation.\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: num_points\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of nearest points to use for interpolation.\n    - name: power\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        The polynomial power to use for calculation of the decay in the interpolation.\n    - name: radius\n      required: No\n      default: !!str -1\n      cpp_type: double\n      group_name: \n      description: |\n        Radius to use for radial_basis interpolation.  If negative then the radius is taken as the max distance between points.\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to transfer from.\n    - name: type\n      required: No\n      default: !!str MultiAppInterpolationTransfer\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The auxiliary variable to store the transferred values in.\n    subblocks:\n  - name: /Transfers/MultiAppMeshFunctionTransfer\n    description: !!str\n    type: \n    parameters:\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: error_on_miss\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to error in the case that a target point is not found in the source domain.\n    - name: execute_on\n      required: No\n      default: !!str timestep_begin\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to transfer from.\n    - name: type\n      required: No\n      default: !!str MultiAppMeshFunctionTransfer\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The auxiliary variable to store the transferred values in.\n    subblocks:\n  - name: /Transfers/MultiAppNearestNodeTransfer\n    description: !!str\n    type: \n    parameters:\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_source_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the source mesh.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: execute_on\n      required: No\n      default: !!str timestep_begin\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: fixed_meshes\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Set to true when the meshes are not changing (ie, no moviement or adaptivity).  This will cache nearest node neighbors to greatly speed up the transfer.\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to transfer from.\n    - name: type\n      required: No\n      default: !!str MultiAppNearestNodeTransfer\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The auxiliary variable to store the transferred values in.\n    subblocks:\n  - name: /Transfers/MultiAppPostprocessorInterpolationTransfer\n    description: !!str\n    type: \n    parameters:\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: execute_on\n      required: No\n      default: !!str timestep_begin\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: interp_type\n      required: No\n      default: !!str inverse_distance\n      cpp_type: MooseEnum\n      group_name: \n      options: inverse_distance radial_basis\n      description: |\n        The algorithm to use for interpolation.\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: num_points\n      required: No\n      default: !!str 3\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of nearest points to use for interpolation.\n    - name: postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The Postprocessor to interpolate.\n    - name: power\n      required: No\n      default: !!str 2\n      cpp_type: double\n      group_name: \n      description: |\n        The polynomial power to use for calculation of the decay in the interpolation.\n    - name: radius\n      required: No\n      default: !!str -1\n      cpp_type: double\n      group_name: \n      description: |\n        Radius to use for radial_basis interpolation.  If negative then the radius is taken as the max distance between points.\n    - name: type\n      required: No\n      default: !!str MultiAppPostprocessorInterpolationTransfer\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The auxiliary variable to store the transferred values in.\n    subblocks:\n  - name: /Transfers/MultiAppPostprocessorToAuxScalarTransfer\n    description: !!str\n    type: \n    parameters:\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: execute_on\n      required: No\n      default: !!str timestep_begin\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: from_postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the Postprocessor in the Master to transfer the value from.\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: to_aux_scalar\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the scalar Aux variable in the MultiApp to transfer the value to.\n    - name: type\n      required: No\n      default: !!str MultiAppPostprocessorToAuxScalarTransfer\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Transfers/MultiAppPostprocessorTransfer\n    description: !!str\n    type: \n    parameters:\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: execute_on\n      required: No\n      default: !!str timestep_begin\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: from_postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the Postprocessor in the Master to transfer the value from.\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: to_postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the Postprocessor in the MultiApp to transfer the value to.  This should most likely be a Reporter Postprocessor.\n    - name: type\n      required: No\n      default: !!str MultiAppPostprocessorTransfer\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Transfers/MultiAppProjectionTransfer\n    description: !!str\n    type: \n    parameters:\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: execute_on\n      required: No\n      default: !!str timestep_begin\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: family\n      required: No\n      default: !!str LAGRANGE\n      cpp_type: MooseEnum\n      group_name: \n      options: LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC\n      description: |\n        Specifies the family of FE shape functions to use for this variable\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: CONSTANT FIRST SECOND THIRD FOURTH\n      description: |\n        Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n    - name: proj_type\n      required: No\n      default: !!str l2\n      cpp_type: MooseEnum\n      group_name: \n      options: l2\n      description: |\n        The type of the projection.\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to transfer from.\n    - name: type\n      required: No\n      default: !!str MultiAppProjectionTransfer\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The auxiliary variable to store the transferred values in.\n    subblocks:\n  - name: /Transfers/MultiAppUserObjectTransfer\n    description: !!str\n    type: \n    parameters:\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: displaced_target_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Whether or not to use the displaced mesh for the target mesh.\n    - name: execute_on\n      required: No\n      default: !!str timestep_begin\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: type\n      required: No\n      default: !!str MultiAppUserObjectTransfer\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: user_object\n      required: Yes\n      default: !!str \n      cpp_type: UserObjectName\n      group_name: \n      description: |\n        The UserObject you want to transfer values from.  Note: This might be a UserObject from your MultiApp\'s input file!\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The auxiliary variable to store the transferred values in.\n    subblocks:\n  - name: /Transfers/MultiAppVariableValueSamplePostprocessorTransfer\n    description: !!str\n    type: \n    parameters:\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: execute_on\n      required: No\n      default: !!str timestep_begin\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: postprocessor\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the postprocessor in the MultiApp to transfer the value to.  This should most likely be a Reporter Postprocessor.\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to transfer from.\n    - name: type\n      required: No\n      default: !!str MultiAppVariableValueSamplePostprocessorTransfer\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /Transfers/MultiAppVariableValueSampleTransfer\n    description: !!str\n    type: \n    parameters:\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: to_multiapp from_multiapp\n      description: |\n        Whether this Transfer will be \'to\' or \'from\' a MultiApp.\n    - name: execute_on\n      required: No\n      default: !!str timestep_begin\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: multi_app\n      required: Yes\n      default: !!str \n      cpp_type: MultiAppName\n      group_name: \n      description: |\n        The name of the MultiApp to use.\n    - name: source_variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to transfer from.\n    - name: type\n      required: No\n      default: !!str MultiAppVariableValueSampleTransfer\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: AuxVariableName\n      group_name: \n      description: |\n        The auxiliary variable to store the transferred values in.\n    subblocks:\n- name: /UserObjects\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /UserObjects/*\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /UserObjects/AreaPostprocessor\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str AreaPostprocessor\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/AverageElementSize\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str AverageElementSize\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/AverageNodalVariableValue\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str AverageNodalVariableValue\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/ElementAverageTimeDerivative\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementAverageTimeDerivative\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementAverageValue\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementAverageValue\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementExtremeValue\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementExtremeValue\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_type\n      required: No\n      default: !!str max\n      cpp_type: MooseEnum\n      group_name: \n      options: max min\n      description: |\n        Type of extreme value to return. \'max\' returns the maximum value. \'min\' returns the minimum value.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/ElementH1Error\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementH1Error\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementH1SemiError\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementH1SemiError\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementIntegralMaterialProperty\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: mat_prop\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The name of the material property\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementIntegralMaterialProperty\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ElementIntegralVariablePostprocessor\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementIntegralVariablePostprocessor\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementIntegralVariableUserObject\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementIntegralVariableUserObject\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementL2Error\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementL2Error\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementL2Norm\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementL2Norm\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/ElementVectorL2Error\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: function_x\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: function_y\n      required: No\n      default: !!str 0\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: function_z\n      required: No\n      default: !!str 0\n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str ElementVectorL2Error\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: var_x\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The FE solution in x direction\n    - name: var_y\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The FE solution in y direction\n    - name: var_z\n      required: No\n      default: !!str 0\n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The FE solution in z direction\n    subblocks:\n  - name: /UserObjects/ElementalVariableValue\n    description: !!str\n    type: \n    parameters:\n    - name: elementid\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The ID of the element where we monitor\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str ElementalVariableValue\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to be monitored\n    subblocks:\n  - name: /UserObjects/EmptyPostprocessor\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str EmptyPostprocessor\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/LayeredAverage\n    description: !!str\n    type: \n    parameters:\n    - name: average_radius\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        When using \'average\' sampling this is how the number of values both above and below the layer that will be averaged.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: bounds\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The \'bounding\' positions of the layers i.e.: \'0, 1.2, 3.7, 4.2\' will mean 3 layers between those positions.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The direction of the layers.\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: num_layers\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of layers.\n    - name: sample_type\n      required: No\n      default: !!str direct\n      cpp_type: MooseEnum\n      group_name: \n      options: direct interpolate average\n      description: |\n        How to sample the layers.  \'direct\' means get the value of the layer the point falls in directly (or average if that layer has no value).  \'interpolate\' does a linear interpolation between the two closest layers.  \'average\' averages the two closest layers.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str LayeredAverage\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/LayeredIntegral\n    description: !!str\n    type: \n    parameters:\n    - name: average_radius\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        When using \'average\' sampling this is how the number of values both above and below the layer that will be averaged.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: bounds\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The \'bounding\' positions of the layers i.e.: \'0, 1.2, 3.7, 4.2\' will mean 3 layers between those positions.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The direction of the layers.\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: num_layers\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of layers.\n    - name: sample_type\n      required: No\n      default: !!str direct\n      cpp_type: MooseEnum\n      group_name: \n      options: direct interpolate average\n      description: |\n        How to sample the layers.  \'direct\' means get the value of the layer the point falls in directly (or average if that layer has no value).  \'interpolate\' does a linear interpolation between the two closest layers.  \'average\' averages the two closest layers.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str LayeredIntegral\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/LayeredSideAverage\n    description: !!str\n    type: \n    parameters:\n    - name: average_radius\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        When using \'average\' sampling this is how the number of values both above and below the layer that will be averaged.\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bounds\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The \'bounding\' positions of the layers i.e.: \'0, 1.2, 3.7, 4.2\' will mean 3 layers between those positions.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The direction of the layers.\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: num_layers\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of layers.\n    - name: sample_type\n      required: No\n      default: !!str direct\n      cpp_type: MooseEnum\n      group_name: \n      options: direct interpolate average\n      description: |\n        How to sample the layers.  \'direct\' means get the value of the layer the point falls in directly (or average if that layer has no value).  \'interpolate\' does a linear interpolation between the two closest layers.  \'average\' averages the two closest layers.\n    - name: type\n      required: No\n      default: !!str LayeredSideAverage\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/LayeredSideFluxAverage\n    description: !!str\n    type: \n    parameters:\n    - name: average_radius\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        When using \'average\' sampling this is how the number of values both above and below the layer that will be averaged.\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bounds\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The \'bounding\' positions of the layers i.e.: \'0, 1.2, 3.7, 4.2\' will mean 3 layers between those positions.\n    - name: diffusivity\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The name of the diffusivity material property that will be used in the flux computation.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The direction of the layers.\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: num_layers\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of layers.\n    - name: sample_type\n      required: No\n      default: !!str direct\n      cpp_type: MooseEnum\n      group_name: \n      options: direct interpolate average\n      description: |\n        How to sample the layers.  \'direct\' means get the value of the layer the point falls in directly (or average if that layer has no value).  \'interpolate\' does a linear interpolation between the two closest layers.  \'average\' averages the two closest layers.\n    - name: type\n      required: No\n      default: !!str LayeredSideFluxAverage\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/LayeredSideIntegral\n    description: !!str\n    type: \n    parameters:\n    - name: average_radius\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        When using \'average\' sampling this is how the number of values both above and below the layer that will be averaged.\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: bounds\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The \'bounding\' positions of the layers i.e.: \'0, 1.2, 3.7, 4.2\' will mean 3 layers between those positions.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The direction of the layers.\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: num_layers\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of layers.\n    - name: sample_type\n      required: No\n      default: !!str direct\n      cpp_type: MooseEnum\n      group_name: \n      options: direct interpolate average\n      description: |\n        How to sample the layers.  \'direct\' means get the value of the layer the point falls in directly (or average if that layer has no value).  \'interpolate\' does a linear interpolation between the two closest layers.  \'average\' averages the two closest layers.\n    - name: type\n      required: No\n      default: !!str LayeredSideIntegral\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/NearestPointLayeredAverage\n    description: !!str\n    type: \n    parameters:\n    - name: average_radius\n      required: No\n      default: !!str 1\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        When using \'average\' sampling this is how the number of values both above and below the layer that will be averaged.\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: bounds\n      required: No\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The \'bounding\' positions of the layers i.e.: \'0, 1.2, 3.7, 4.2\' will mean 3 layers between those positions.\n    - name: direction\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z\n      description: |\n        The direction of the layers.\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: num_layers\n      required: No\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of layers.\n    - name: points\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Layered averages will be computed in space closest to these points.\n    - name: sample_type\n      required: No\n      default: !!str direct\n      cpp_type: MooseEnum\n      group_name: \n      options: direct interpolate average\n      description: |\n        How to sample the layers.  \'direct\' means get the value of the layer the point falls in directly (or average if that layer has no value).  \'interpolate\' does a linear interpolation between the two closest layers.  \'average\' averages the two closest layers.\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NearestPointLayeredAverage\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this object operates on\n    subblocks:\n  - name: /UserObjects/NodalExtremeValue\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalExtremeValue\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value_type\n      required: No\n      default: !!str max\n      cpp_type: MooseEnum\n      group_name: \n      options: max min\n      description: |\n        Type of extreme value to return. \'max\' returns the maximum value. \'min\' returns the minimum value.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/NodalFloodCount\n    description: !!str\n    type: \n    parameters:\n    - name: bubble_volume_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        An optional file name where bubble volumes can be output.\n    - name: condense_map_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing bubble may be extended (defaults to "threshold")\n    - name: elem_avg_value\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        If supplied, will be used to find the scaled threshold of the bubble edges\n    - name: enable_var_coloring\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the UO to populate the variable index map.\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: threshold\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new bubble may be started\n    - name: track_memory_usage\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Calculate memory usage\n    - name: type\n      required: No\n      default: !!str NodalFloodCount\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n    - name: use_single_map\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Ths variable(s) for which to find connected regions of interests, i.e. "bubbles".\n    subblocks:\n  - name: /UserObjects/NodalL2Error\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalL2Error\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/NodalL2Norm\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalL2Norm\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/NodalMaxValue\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalMaxValue\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/NodalNormalsCorner\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: corner_boundary\n      required: Yes\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        Node set ID which contains the nodes that are in \'corners\'.\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: type\n      required: No\n      default: !!str NodalNormalsCorner\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NodalNormalsEvaluator\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalNormalsEvaluator\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NodalNormalsPreprocessor\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: corner_boundary\n      required: No\n      default: !!str \n      cpp_type: BoundaryName\n      group_name: \n      description: |\n        Node set ID which contains the nodes that are in \'corners\'.\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalNormalsPreprocessor\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NodalProxyMaxValue\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalProxyMaxValue\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/NodalSum\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str NodalSum\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on\n    subblocks:\n  - name: /UserObjects/NodalVariableValue\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: nodeid\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The ID of the node where we monitor\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str NodalVariableValue\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The variable to be monitored\n    subblocks:\n  - name: /UserObjects/NodalVolumeFraction\n    description: !!str\n    type: \n    parameters:\n    - name: Avrami_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        filename for Avrami analysis info (ln time and Avrami)\n    - name: bubble_volume_file\n      required: No\n      default: !!str \n      cpp_type: FileName\n      group_name: \n      description: |\n        An optional file name where bubble volumes can be output.\n    - name: condense_map_info\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determines whether we condense all the node values when in multimap mode (default: false)\n    - name: connecting_threshold\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The threshold for which an existing bubble may be extended (defaults to "threshold")\n    - name: elem_avg_value\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        If supplied, will be used to find the scaled threshold of the bubble edges\n    - name: enable_var_coloring\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Instruct the UO to populate the variable index map.\n    - name: equil_fraction\n      required: No\n      default: !!str -1\n      cpp_type: double\n      group_name: \n      description: |\n        Equilibrium volume fraction of 2nd phase for Avrami analysis\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: mesh_volume\n      required: Yes\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        Postprocessor from which to get mesh volume\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: threshold\n      required: No\n      default: !!str 0.5\n      cpp_type: double\n      group_name: \n      description: |\n        The threshold value for which a new bubble may be started\n    - name: track_memory_usage\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Calculate memory usage\n    - name: type\n      required: No\n      default: !!str NodalVolumeFraction\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: use_global_numbering\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n    - name: use_single_map\n      required: No\n      default: !!str 1\n      cpp_type: bool\n      group_name: \n      description: |\n        Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        Ths variable(s) for which to find connected regions of interests, i.e. "bubbles".\n    subblocks:\n  - name: /UserObjects/NumDOFs\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str NumDOFs\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NumElems\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str NumElems\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NumLinearIterations\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str NumLinearIterations\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NumNodes\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str NumNodes\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NumNonlinearIterations\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str NumNonlinearIterations\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NumResidualEvaluations\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str NumResidualEvaluations\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/NumVars\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: system\n      required: No\n      default: !!str nonlinear\n      cpp_type: MooseEnum\n      group_name: \n      options: nonlinear auxiliary\n      description: |\n        The system for which you want to print the number of variables.\n    - name: type\n      required: No\n      default: !!str NumVars\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/PerformanceData\n    description: !!str\n    type: \n    parameters:\n    - name: column\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: n_calls total_time average_time total_time_with_sub average_time_with_sub percent_of_active_time percent_of_active_time_with_sub\n      description: |\n        The column you want the value of.\n    - name: event\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The name of the event.\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str PerformanceData\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/PlotFunction\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        Name of the function to plot (i.e. sample)\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: point\n      required: No\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        A point in space to be given to the function\n    - name: scale_factor\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        A scale factor to be applied to the function\n    - name: type\n      required: No\n      default: !!str PlotFunction\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/PointValue\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: point\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The physical point where the solution will be evaluated.\n    - name: type\n      required: No\n      default: !!str PointValue\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this postprocessor operates on.\n    subblocks:\n  - name: /UserObjects/ProblemRealParameter\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: param_name\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        Name of the parameter to be exposed\n    - name: type\n      required: No\n      default: !!str ProblemRealParameter\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/Receiver\n    description: !!str\n    type: \n    parameters:\n    - name: default\n      required: No\n      default: !!str \n      cpp_type: double\n      group_name: \n      description: |\n        The default value\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str Receiver\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/Residual\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str Residual\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/RunTime\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: time_type\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: alive active\n      description: |\n        Whether to output the total elapsed or just the active time\n    - name: type\n      required: No\n      default: !!str RunTime\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/ScalarL2Error\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: function\n      required: Yes\n      default: !!str \n      cpp_type: FunctionName\n      group_name: \n      description: |\n        The analytic solution to compare against\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str ScalarL2Error\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the scalar variable\n    subblocks:\n  - name: /UserObjects/ScalarVariable\n    description: !!str\n    type: \n    parameters:\n    - name: component\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: \n      description: |\n        Component to output for this variable\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str ScalarVariable\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        Name of the variable\n    subblocks:\n  - name: /UserObjects/SideAverageValue\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str SideAverageValue\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/SideFluxAverage\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: diffusivity\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The name of the diffusivity material property that will be used in the flux computation.\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str SideFluxAverage\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/SideFluxIntegral\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: diffusivity\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The name of the diffusivity material property that will be used in the flux computation.\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str SideFluxIntegral\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/SideIntegralVariablePostprocessor\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str SideIntegralVariablePostprocessor\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: VariableName\n      group_name: \n      description: |\n        The name of the variable that this boundary condition applies to\n    subblocks:\n  - name: /UserObjects/SolutionUserObject\n    description: !!str\n    type: \n    parameters:\n    - name: coord_factor\n      required: No\n      default: !!str 0 0 0 \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Transformation factors for x,y,z coordiantes (e.g., x + factor)\n    - name: coord_scale\n      required: No\n      default: !!str 1 1 1 \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        Scaling parameter for x,y,z coordiantes (e.g. x*scale)\n    - name: elemental_variables\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        The name of the element variables from the file you want to use for values.\n    - name: es\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The name of the file holding the equation system info in xda format (xda only).\n    - name: execute_on\n      required: No\n      default: !!str timestep_begin\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: mesh\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        The name of the mesh file (must be xda or exodusII file.\n    - name: nodal_variables\n      required: No\n      default: !!str \n      cpp_type: std::vector<std::string, std::allocator<std::string> >\n      group_name: \n      description: |\n        The name of the nodal variables from the file you want to use for values.\n    - name: system\n      required: No\n      default: !!str NonlinearSystem\n      cpp_type: std::string\n      group_name: \n      description: |\n        The name of the system to pull values out of (xda only).\n    - name: timestep\n      required: No\n      default: !!str -1\n      cpp_type: int\n      group_name: \n      description: |\n        Index of the single timestep used (exodusII only).  If not supplied, time interpolation will occur.\n    - name: type\n      required: No\n      default: !!str SolutionUserObject\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/TimestepSize\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str TimestepSize\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n  - name: /UserObjects/TotalVariableValue\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str TotalVariableValue\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: No\n      default: !!str \n      cpp_type: PostprocessorName\n      group_name: \n      description: |\n        The name of the postprocessor\n    subblocks:\n  - name: /UserObjects/VolumePostprocessor\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this postprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: type\n      required: No\n      default: !!str VolumePostprocessor\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    subblocks:\n- name: /Variables\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /Variables/*\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The block id where this variable lives\n    - name: eigen\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: \n      description: |\n        True to make this variable an eigen variable\n    - name: family\n      required: No\n      default: !!str LAGRANGE\n      cpp_type: MooseEnum\n      group_name: \n      options: LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC\n      description: |\n        Specifies the family of FE shape functions to use for this variable\n    - name: initial_condition\n      required: No\n      default: !!str 0\n      cpp_type: double\n      group_name: \n      description: |\n        Specifies the initial condition for this variable\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: MooseEnum\n      group_name: \n      options: CONSTANT FIRST SECOND THIRD FOURTH\n      description: |\n        Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n    - name: scaling\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: Advanced\n      description: |\n        Specifies a scaling factor to apply to this variable\n    - name: initial_from_file_timestep\n      required: No\n      default: !!str 2\n      cpp_type: int\n      group_name: Initial From File\n      description: |\n        Gives the timestep for which to read a solution from a file for a given variable\n    - name: initial_from_file_var\n      required: No\n      default: !!str \n      cpp_type: std::string\n      group_name: Initial From File\n      description: |\n        Gives the name of a variable for which to read an initial condition from a mesh file\n    subblocks:\n    - name: /Variables/*/InitialCondition\n      description: !!str\n      type: \n      parameters:\n      - name: type\n        required: Yes\n        default: !!str \n        cpp_type: std::string\n        group_name: \n        description: |\n          A string representing the Moose Object that will be built by this Action\n      subblocks:\n      - name: /Variables/*/InitialCondition/<type>\n        description: !!str\n        type: \n        parameters:\n        subblocks:\n        - name: /Variables/*/InitialCondition/<type>/BoundingBoxIC\n          description: !!str\n          type: \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: inside\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The value of the variable inside the box\n          - name: outside\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The value of the variable outside the box\n          - name: type\n            required: No\n            default: !!str BoundingBoxIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the lower left-hand corner of the box\n          - name: x2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the upper right-hand corner of the box\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the lower left-hand corner of the box\n          - name: y2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the upper right-hand corner of the box\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the lower left-hand corner of the box\n          - name: z2\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the upper right-hand corner of the box\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/ConstantIC\n          description: !!str\n          type: \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: type\n            required: No\n            default: !!str ConstantIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: value\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The value to be set in IC\n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/CrossIC\n          description: !!str\n          type: \n          parameters:\n          - name: amplitude\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              The amplitude\n          - name: average\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The average value\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: buffer\n            required: No\n            default: !!str 0.03125\n            cpp_type: double\n            group_name: \n            description: |\n              A small area between the max value and the interface\n          - name: interface\n            required: No\n            default: !!str 0.03125\n            cpp_type: double\n            group_name: \n            description: |\n              The interface width\n          - name: length\n            required: No\n            default: !!str 0.75\n            cpp_type: double\n            group_name: \n            description: |\n              The length\n          - name: type\n            required: No\n            default: !!str CrossIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: width\n            required: No\n            default: !!str 0.125\n            cpp_type: double\n            group_name: \n            description: |\n              The width\n          - name: x1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the lower left-hand corner of the box\n          - name: x2\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the upper right-hand corner of the box\n          - name: y1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the lower left-hand corner of the box\n          - name: y2\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the upper right-hand corner of the box\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/FunctionIC\n          description: !!str\n          type: \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: function\n            required: Yes\n            default: !!str \n            cpp_type: FunctionName\n            group_name: \n            description: |\n              The initial condition function.\n          - name: type\n            required: No\n            default: !!str FunctionIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/HexPolycrystalIC\n          description: !!str\n          type: \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: cody_test\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Use set grain center points for Cody\'s test. Grain num MUST equal 10\n          - name: columnar_3D\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              3D microstructure will be columnar in the z-direction?\n          - name: crys_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The index for the current order parameter\n          - name: crys_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of order parameters\n          - name: grain_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of grains being represented by the order parameters\n          - name: perturbation_percent\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The percent to randomly perturbate centers of grains relative to the size of the grain\n          - name: rand_seed\n            required: No\n            default: !!str 12444\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The random seed\n          - name: typ\n            required: No\n            default: !!str 1\n            cpp_type: int\n            group_name: \n            description: |\n              \n          - name: type\n            required: No\n            default: !!str HexPolycrystalIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x_offset\n            required: No\n            default: !!str 0.5\n            cpp_type: double\n            group_name: \n            description: |\n              Specifies offset of hexagon grid in x-direction\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/LatticeSmoothCircleIC\n          description: !!str\n          type: \n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: Lx\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              length of simulation domain in x-direction\n          - name: Ly\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              length of simulation domain in y-direction\n          - name: Lz\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              length of simulation domain in z-direction\n          - name: Rnd_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Variation from central lattice position\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: bubspac\n            required: Yes\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              minimum spacing of bubbles, measured from center to center\n          - name: circles_per_side\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<unsigned int, std::allocator<unsigned int> >\n            group_name: \n            description: |\n              Vector containing the number of bubbles along each side\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: numbub\n            required: Yes\n            default: !!str 0\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of bubbles to be placed on GB\n          - name: numtries\n            required: No\n            default: !!str 1000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of tries\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The radius of a circle\n          - name: radius_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus Percent of random variation in the bubble radius\n          - name: rand_seed\n            required: No\n            default: !!str 2000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              random seed\n          - name: type\n            required: No\n            default: !!str LatticeSmoothCircleIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the circle center\n          - name: y1\n            required: Yes\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the circle center\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the circle center\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/MultiSmoothCircleIC\n          description: !!str\n          type: \n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: Lx\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              length of simulation domain in x-direction\n          - name: Ly\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              length of simulation domain in y-direction\n          - name: Lz\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              length of simulation domain in z-direction\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: bubspac\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              minimum spacing of bubbles, measured from center to center\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: numbub\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of bubbles to be placed on GB\n          - name: numtries\n            required: No\n            default: !!str 1000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of tries\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The radius of a circle\n          - name: radius_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus Percent of random variation in the bubble radius\n          - name: rand_seed\n            required: No\n            default: !!str 2000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              random seed\n          - name: type\n            required: No\n            default: !!str MultiSmoothCircleIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the circle center\n          - name: y1\n            required: Yes\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the circle center\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the circle center\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/PolycrystalRandomIC\n          description: !!str\n          type: \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: crys_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The index for the current order parameter\n          - name: crys_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of order parameters\n          - name: typ\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Type of random grain structure\n          - name: type\n            required: No\n            default: !!str PolycrystalRandomIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/PolycrystalReducedIC\n          description: !!str\n          type: \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: cody_test\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              Use set grain center points for Cody\'s test. Grain num MUST equal 10\n          - name: columnar_3D\n            required: No\n            default: !!str 0\n            cpp_type: bool\n            group_name: \n            description: |\n              3D microstructure will be columnar in the z-direction?\n          - name: crys_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The index for the current order parameter\n          - name: crys_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of order parameters\n          - name: grain_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of grains being represented by the order parameters\n          - name: rand_seed\n            required: No\n            default: !!str 12444\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The random seed\n          - name: type\n            required: No\n            default: !!str PolycrystalReducedIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/RandomIC\n          description: !!str\n          type: \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: max\n            required: No\n            default: !!str 1\n            cpp_type: double\n            group_name: \n            description: |\n              Upper bound of the randomly generated values\n          - name: min\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Lower bound of the randomly generated values\n          - name: seed\n            required: No\n            default: !!str 0\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str RandomIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/RndBoundingBoxIC\n          description: !!str\n          type: \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: mn_invalue\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The min value of the variable invalue the box\n          - name: mn_outvalue\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The min value of the variable outvalue the box\n          - name: mx_invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The max value of the variable invalue the box\n          - name: mx_outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The max value of the variable outvalue the box\n          - name: type\n            required: No\n            default: !!str RndBoundingBoxIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the lower left-hand corner of the box\n          - name: x2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the upper right-hand corner of the box\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the lower left-hand corner of the box\n          - name: y2\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the upper right-hand corner of the box\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the lower left-hand corner of the box\n          - name: z2\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the upper right-hand corner of the box\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/RndSmoothCircleIC\n          description: !!str\n          type: \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: mn_invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The min variable value inside the circle\n          - name: mn_outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The min variable value outside the circle\n          - name: mx_invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The max variable value inside the circle\n          - name: mx_outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The max variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The radius of a circle\n          - name: seed\n            required: No\n            default: !!str 12345\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Seed value for the random number generator\n          - name: type\n            required: No\n            default: !!str RndSmoothCircleIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the circle center\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the circle center\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the circle center\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/ScalarComponentIC\n          description: !!str\n          type: \n          parameters:\n          - name: type\n            required: No\n            default: !!str ScalarComponentIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: values\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              Initial values to initialize the scalar variable.\n          - name: variable\n            required: No\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/ScalarConstantIC\n          description: !!str\n          type: \n          parameters:\n          - name: type\n            required: No\n            default: !!str ScalarConstantIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: value\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              \n          - name: variable\n            required: No\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/SmoothCircleIC\n          description: !!str\n          type: \n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radius\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The radius of a circle\n          - name: type\n            required: No\n            default: !!str SmoothCircleIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the circle center\n          - name: y1\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the circle center\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the circle center\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/SpecifiedSmoothCircleIC\n          description: !!str\n          type: \n          parameters:\n          - name: 3D_spheres\n            required: No\n            default: !!str 1\n            cpp_type: bool\n            group_name: \n            description: |\n              in 3D, whether the objects are spheres or columns\n          - name: Lx\n            required: Yes\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              length of simulation domain in x-direction\n          - name: Ly\n            required: Yes\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              length of simulation domain in y-direction\n          - name: Lz\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              length of simulation domain in z-direction\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: bubspac\n            required: Yes\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              minimum spacing of bubbles, measured from center to center\n          - name: int_width\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The interfacial width of the void surface.  Defaults to sharp interface\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: numbub\n            required: Yes\n            default: !!str 0\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of bubbles to be placed on GB\n          - name: numtries\n            required: No\n            default: !!str 1000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The number of tries\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: radii\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The radius for each circle\n          - name: radius\n            required: Yes\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The radius of a circle\n          - name: radius_variation\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              Plus or minus Percent of random variation in the bubble radius\n          - name: rand_seed\n            required: No\n            default: !!str 2000\n            cpp_type: unsigned int\n            group_name: \n            description: |\n              random seed\n          - name: type\n            required: No\n            default: !!str SpecifiedSmoothCircleIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: x1\n            required: Yes\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the circle center\n          - name: x_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The x-coordinate for each circle center\n          - name: y1\n            required: Yes\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the circle center\n          - name: y_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The y-coordinate for each circle center\n          - name: z1\n            required: No\n            default: !!str 0\n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the circle center\n          - name: z_positions\n            required: Yes\n            default: !!str \n            cpp_type: std::vector<double, std::allocator<double> >\n            group_name: \n            description: |\n              The z-coordinate for each circle center\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/ThumbIC\n          description: !!str\n          type: \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: height\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The z coordinate of the circle center\n          - name: invalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value inside the circle\n          - name: outvalue\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The variable value outside the circle\n          - name: type\n            required: No\n            default: !!str ThumbIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          - name: width\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The y coordinate of the circle center\n          - name: xcoord\n            required: Yes\n            default: !!str \n            cpp_type: double\n            group_name: \n            description: |\n              The x coordinate of the circle center\n          subblocks:\n        - name: /Variables/*/InitialCondition/<type>/Tricrystal2CircleGrainsIC\n          description: !!str\n          type: \n          parameters:\n          - name: block\n            required: No\n            default: !!str \n            cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n            group_name: \n            description: |\n              The list of block ids (SubdomainID) that this object will be applied\n          - name: boundary\n            required: No\n            default: !!str \n            cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n            group_name: \n            description: |\n              The list of boundary IDs from the mesh where this boundary condition applies\n          - name: crys_index\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              The index for the current crystal\n          - name: crys_num\n            required: Yes\n            default: !!str \n            cpp_type: unsigned int\n            group_name: \n            description: |\n              Number of crystals\n          - name: type\n            required: No\n            default: !!str Tricrystal2CircleGrainsIC\n            cpp_type: std::string\n            group_name: \n            description: |\n              \n          - name: variable\n            required: Yes\n            default: !!str \n            cpp_type: VariableName\n            group_name: \n            description: |\n              The variable this initial condition is supposed to provide values for.\n          subblocks:\n  - name: /Variables/PolycrystalVariables\n    description: !!str\n    type: \n    parameters:\n    - name: crys_num\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        specifies the number of order parameters to create\n    - name: family\n      required: No\n      default: !!str LAGRANGE\n      cpp_type: std::string\n      group_name: \n      description: |\n        Specifies the family of FE shape functions to use for this variable\n    - name: order\n      required: No\n      default: !!str FIRST\n      cpp_type: std::string\n      group_name: \n      description: |\n        Specifies the order of the FE shape function to use for this variable\n    - name: scaling\n      required: No\n      default: !!str 1\n      cpp_type: double\n      group_name: \n      description: |\n        Specifies a scaling factor to apply to this variable\n    - name: var_name_base\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        specifies the base name of the variables\n    subblocks:\n- name: /VectorPostprocessors\n  description: !!str\n  type: \n  parameters:\n  subblocks:\n  - name: /VectorPostprocessors/*\n    description: !!str\n    type: \n    parameters:\n    - name: type\n      required: Yes\n      default: !!str \n      cpp_type: std::string\n      group_name: \n      description: |\n        A string representing the Moose Object that will be built by this Action\n    subblocks:\n  - name: /VectorPostprocessors/ConstantVectorPostprocessor\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n    - name: type\n      required: No\n      default: !!str ConstantVectorPostprocessor\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: value\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<double, std::allocator<double> >\n      group_name: \n      description: |\n        The vector value this object will have.\n    subblocks:\n  - name: /VectorPostprocessors/LineValueSampler\n    description: !!str\n    type: \n    parameters:\n    - name: end_point\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The ending of the line\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: num_points\n      required: Yes\n      default: !!str \n      cpp_type: unsigned int\n      group_name: \n      description: |\n        The number of points to sample along the line\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n    - name: sort_by\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z id\n      description: |\n        What to sort the samples by\n    - name: start_point\n      required: Yes\n      default: !!str \n      cpp_type: libMesh::Point\n      group_name: \n      description: |\n        The beginning of the line\n    - name: type\n      required: No\n      default: !!str LineValueSampler\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The names of the variables that this VectorPostprocessor operates on\n    subblocks:\n  - name: /VectorPostprocessors/NodalValueSampler\n    description: !!str\n    type: \n    parameters:\n    - name: block\n      required: No\n      default: !!str \n      cpp_type: std::vector<SubdomainName, std::allocator<SubdomainName> >\n      group_name: \n      description: |\n        The list of block ids (SubdomainID) that this object will be applied\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n    - name: seed\n      required: No\n      default: !!str 0\n      cpp_type: unsigned int\n      group_name: Advanced\n      description: |\n        The seed for the master random number generator\n    - name: sort_by\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z id\n      description: |\n        What to sort the samples by\n    - name: type\n      required: No\n      default: !!str NodalValueSampler\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The names of the variables that this VectorPostprocessor operates on\n    subblocks:\n  - name: /VectorPostprocessors/PointValueSampler\n    description: !!str\n    type: \n    parameters:\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n    - name: points\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<libMesh::Point, std::allocator<libMesh::Point> >\n      group_name: \n      description: |\n        The points where you want to evaluate the variables\n    - name: sort_by\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z id\n      description: |\n        What to sort the samples by\n    - name: type\n      required: No\n      default: !!str PointValueSampler\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The names of the variables that this VectorPostprocessor operates on\n    subblocks:\n  - name: /VectorPostprocessors/SideValueSampler\n    description: !!str\n    type: \n    parameters:\n    - name: boundary\n      required: No\n      default: !!str \n      cpp_type: std::vector<BoundaryName, std::allocator<BoundaryName> >\n      group_name: \n      description: |\n        The list of boundary IDs from the mesh where this boundary condition applies\n    - name: execute_on\n      required: No\n      default: !!str timestep\n      cpp_type: MooseEnum\n      group_name: \n      options: initial residual jacobian timestep timestep_begin custom\n      description: |\n        Set to (residual|jacobian|timestep|timestep_begin|custom) to execute only at that moment\n    - name: outputs\n      required: No\n      default: !!str \n      cpp_type: std::vector<OutputName, std::allocator<OutputName> >\n      group_name: Advanced\n      description: |\n        Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n    - name: sort_by\n      required: Yes\n      default: !!str \n      cpp_type: MooseEnum\n      group_name: \n      options: x y z id\n      description: |\n        What to sort the samples by\n    - name: type\n      required: No\n      default: !!str SideValueSampler\n      cpp_type: std::string\n      group_name: \n      description: |\n        \n    - name: use_displaced_mesh\n      required: No\n      default: !!str 0\n      cpp_type: bool\n      group_name: Advanced\n      description: |\n        Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n    - name: variable\n      required: Yes\n      default: !!str \n      cpp_type: std::vector<VariableName>\n      group_name: \n      description: |\n        The names of the variables that this VectorPostprocessor operates on\n    subblocks:\n'
p0
.